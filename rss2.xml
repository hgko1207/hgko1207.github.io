<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>규니의 블로그</title>
    <link>http://hgko1207.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Information related to IT</description>
    <pubDate>Thu, 10 Oct 2024 04:26:04 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>.NET Core로 고성능 API 빌드하기</title>
      <link>http://hgko1207.github.io/2024/10/10/netcore-1/</link>
      <guid>http://hgko1207.github.io/2024/10/10/netcore-1/</guid>
      <pubDate>Thu, 10 Oct 2024 04:11:29 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/netcore-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;오늘날의 디지털 환경에서 API는 최신 웹 애플리케이션의 중추로, 서로 다른 소프트웨어 시스템 간의 원활한 통신을 가능하게 합니다. &lt;strong&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/netcore-1.png" alt=""></p><p>오늘날의 디지털 환경에서 API는 최신 웹 애플리케이션의 중추로, 서로 다른 소프트웨어 시스템 간의 원활한 통신을 가능하게 합니다. <strong>.NET Web API</strong>는 개발자가 강력하고 확장 가능한 API를 구축할 수 있는 강력한 프레임워크입니다. 이 글에서는 효율적이고 안전하며 유지 관리가 용이한 API를 만들기 위해 .NET Web API를 마스터하기 위한 모범 사례를 살펴봅니다.</p><h2 id="1-RESTful-API-설계">1. RESTful API 설계</h2><h3 id="REST-원칙-준수">REST 원칙 준수</h3><p>Stateless, 확장성, 이해하기 쉽도록 REST 원칙을 준수하여 API를 설계하세요. 다양한 작업에 적절한 HTTP 메서드(GET, POST, PUT, DELETE)와 표준 상태 코드를 사용하여 API 호출의 결과를 표시하세요.</p><h3 id="API-버전-관리">API 버전 관리</h3><p>버전 관리를 구현하여 변경 사항을 관리하고 이전 버전과의 호환성을 보장하세요. URL, Query String 또는 헤더에 버전 번호를 포함할 수 있습니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ApiVersion(<span class="meta-string">"1.0"</span>)</span>]</span><br><span class="line">[<span class="meta">Route(<span class="meta-string">"api/v&#123;version:apiVersion&#125;/[controller]"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductsController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Actions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-강력한-보안-구현">2. 강력한 보안 구현</h2><h3 id="HTTPS-사용">HTTPS 사용</h3><p>항상 HTTPS를 사용하여 클라이언트와 서버 간에 전송되는 데이터를 암호화하여 가로채기 및 변조로부터 데이터를 보호하세요.</p><h3 id="인증-및-권한-부여-구현">인증 및 권한 부여 구현</h3><p>Stateless(무상태) 인증 및 권한 부여를 위한 역할 기반 액세스 제어를 위해 JWT(JSON Web Token)를 사용하세요.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer((options) =&gt; &#123;</span><br><span class="line">  options.TokenValidationParameters = <span class="keyword">new</span> TokenValidationParameters();</span><br><span class="line">  &#123;</span><br><span class="line">      (ValidateIssuer = <span class="literal">true</span>),</span><br><span class="line">      (ValidateAudience = <span class="literal">true</span>),</span><br><span class="line">      (ValidateLifetime = <span class="literal">true</span>),</span><br><span class="line">      (ValidateIssuerSigningKey = <span class="literal">true</span>),</span><br><span class="line">      (ValidIssuer = Configuration[<span class="string">'Jwt:Issuer'</span>]),</span><br><span class="line">      (ValidAudience = Configuration[<span class="string">'Jwt:Issuer'</span>]),</span><br><span class="line">      (IssuerSigningKey = <span class="keyword">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration[<span class="string">'Jwt:Key'</span>])));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-성능-최적화">3. 성능 최적화</h2><h3 id="캐싱-구현">캐싱 구현</h3><p>자주 액세스하는 데이터에는 인메모리 캐싱을 사용하고 대규모 분산 시스템에는 분산 캐싱(예: Redis)을 사용합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IMemoryCache _cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductService</span>(<span class="params">IMemoryCache cache</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _cache = cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">GetProduct</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> _cache.GetOrCreate(id, entry =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(<span class="number">5</span>);</span><br><span class="line">            <span class="keyword">return</span> _context.Products.Find(id);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="비동기-프로그래밍-사용">비동기 프로그래밍 사용</h3><p><code>async</code> 및 <code>await</code>을 활용하여 I/O 바인딩 연산을 효율적으로 처리하고 다른 요청을 처리할 수 있는 스레드를 확보하세요.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">GetProduct</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> product = <span class="keyword">await</span> _context.Products.FindAsync(id);</span><br><span class="line">    <span class="keyword">return</span> Ok(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-유지보수성-향상">4. 유지보수성 향상</h2><h3 id="종속성-주입-사용">종속성 주입 사용</h3><p>종속성 주입을 도입하여 종속성을 관리하고 코드를 보다 모듈화하고 테스트할 수 있도록 하세요.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddScoped&lt;IProductService, ProductService&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SOLID-원칙-준수">SOLID 원칙 준수</h3><p>SOLID 원칙(Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion)을 준수하여 깔끔하고 유지 관리 가능한 코드를 작성하세요.</p><h2 id="5-모니터링-및-진단">5. 모니터링 및 진단</h2><h3 id="로깅-구현">로깅 구현</h3><p>Serilog 또는 NLog와 같은 로깅 프레임워크를 사용하여 모니터링 및 문제 해결을 위한 자세한 로그를 캡처하세요.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddLogging(config =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        config.AddSerilog();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="애플리케이션-인사이트-Insights-사용">애플리케이션 인사이트(Insights) 사용</h3><p>애플리케이션 인사이트를 통합하여 API의 성능과 사용량에 대한 종합적인 모니터링 및 진단을 수행하세요.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddApplicationInsightsTelemetry(Configuration[<span class="string">"ApplicationInsights:InstrumentationKey"</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결론">결론</h2><p>.NET Web API를 마스터하려면 디자인, 보안, 성능, 유지 관리 및 모니터링에 대한 모범 사례를 조합해야 합니다. 이러한 전략을 구현하면 최신 웹 애플리케이션의 요구 사항을 충족하는 강력하고 확장 가능하며 안전한 API를 구축할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/10/10/netcore-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백엔드 개발자로서 ChatGPT를 사용하는 방법(5가지 방법)</title>
      <link>http://hgko1207.github.io/2024/10/10/chatgpt-31/</link>
      <guid>http://hgko1207.github.io/2024/10/10/chatgpt-31/</guid>
      <pubDate>Thu, 10 Oct 2024 03:54:04 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/chatgpt-31.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;는 생산성과 문제 해결 능력을 향상시키는 귀중한 도구입니다. 백엔드 개발을 할 때 ChatGPT를 활용
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/chatgpt-31.png" alt=""></p><p><strong>ChatGPT</strong>는 생산성과 문제 해결 능력을 향상시키는 귀중한 도구입니다. 백엔드 개발을 할 때 ChatGPT를 활용하는 5가지 방법을 소개합니다.</p><h2 id="1-API-문서-생성">1. API 문서 생성</h2><p>백엔드 개발자에게 가장 시간이 많이 걸리는 작업 중 하나는 포괄적인 API 문서를 작성하는 것입니다. ChatGPT는 이 작업에 탁월합니다,</p><ul><li><strong>엔드포인트 설명:</strong> 엔드포인트 세부 정보를 제공하면 ChatGPT가 명확하고 간결한 설명을 생성합니다.</li><li><strong>요청/응답 예제:</strong> 현실적인 페이로드와 응답 예제를 생성할 수 있습니다.</li><li><strong>오류 시나리오:</strong> ChatGPT는 잠재적인 오류 사례와 해당 상태 코드를 문서화하는 데 도움을 줍니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ChatGPT로 생성된 API 문서 예시</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"endpoint"</span>: <span class="string">"/api/v1/users"</span>,</span><br><span class="line">  <span class="attr">"method"</span>: <span class="string">"POST"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Creates a new user account"</span>,</span><br><span class="line">  <span class="attr">"request_body"</span>: &#123;</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"string"</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"string"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"string"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"response"</span>: &#123;</span><br><span class="line">    <span class="attr">"201"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"User successfully created"</span>,</span><br><span class="line">      <span class="attr">"content"</span>: &#123;</span><br><span class="line">        <span class="attr">"user_id"</span>: <span class="string">"uuid"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"string"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"400"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Invalid input"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-데이터베이스-쿼리-최적화">2. 데이터베이스 쿼리 최적화</h2><p>ChatGPT는 쿼리 최적화 전략을 브레인스토밍하는 데 탁월합니다.</p><ul><li><strong>쿼리 분석:</strong> 문제가 있는 쿼리를 붙여넣으면 ChatGPT가 개선점을 제안합니다.</li><li><strong>인덱스 추천:</strong> 쿼리 성능을 향상시킬 수 있는 잠재적인 인덱스를 제안할 수 있습니다.</li><li><strong>대체 접근 방식:</strong> 종종 더 효율적일 수 있는 다른 쿼리 구조를 제안합니다.</li></ul><h2 id="3-코드-리팩토링-도우미">3. 코드 리팩토링 도우미</h2><p>레거시 코드 또는 복잡한 리팩터링 작업에 직면했을 때 활동합니다.</p><ul><li><strong>코드 분석:</strong> ChatGPT는 코드 냄새와 잠재적인 개선 사항을 식별하는 데 도움을 줍니다.</li><li><strong>디자인 패턴:</strong> 특정 시나리오에 적합한 디자인 패턴을 제안합니다.</li><li><strong>현대화:</strong> 최신 언어 기능 및 모범 사례를 사용하도록 오래된 코드를 업데이트하는 데 도움을 줍니다.</li></ul><p>예를 들어, 아래 코드를 변환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 수정 전</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserData</span>(<span class="params">$userId</span>) </span>&#123;</span><br><span class="line">    $data = array();</span><br><span class="line">    $result = mysql_query(<span class="string">"SELECT * FROM users WHERE id = "</span> . $userId);</span><br><span class="line">    <span class="keyword">while</span> ($row = mysql_fetch_assoc($result)) &#123;</span><br><span class="line">        $data[] = $row;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 수정 후</span></span><br><span class="line">public <span class="function"><span class="keyword">function</span> <span class="title">getUserData</span>(<span class="params">int $userId</span>): <span class="title">array</span> </span>&#123;</span><br><span class="line">    $pdo = Database::getInstance()-&gt;getConnection();</span><br><span class="line">    $stmt = $pdo-&gt;prepare(<span class="string">"SELECT * FROM users WHERE id = :userId"</span>);</span><br><span class="line">    $stmt-&gt;execute([<span class="string">'userId'</span> =&gt; $userId]);</span><br><span class="line">    <span class="keyword">return</span> $stmt-&gt;fetchAll(PDO::FETCH_ASSOC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-테스트-시나리오-생성">4. 테스트 시나리오 생성</h2><p>ChatGPT는 다양한 테스트 시나리오를 생각하도록 도와주는 데 탁월합니다.</p><ul><li><strong>Edge 케이스:</strong> 제가 놓쳤을 수 있는 경계 조건을 식별합니다.</li><li><strong>테스트 데이터:</strong> 다양한 시나리오에 대한 현실적인 테스트 데이터를 생성합니다.</li><li><strong>테스트 구조:</strong> 테스트 사례를 명확하고 체계적으로 정리할 수 있도록 도와줍니다.</li></ul><p>ChatGPT가 생성한 테스트 시나리오 예시입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public <span class="function"><span class="keyword">function</span> <span class="title">testUserRegistration</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 등록 성공 테스트</span></span><br><span class="line">    $<span class="keyword">this</span>-&gt;testSuccessfulRegistration();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 중복 이메일 테스트</span></span><br><span class="line">    $<span class="keyword">this</span>-&gt;testDuplicateEmailRegistration();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 유효하지 않은 이메일 형식 테스트</span></span><br><span class="line">    $<span class="keyword">this</span>-&gt;testInvalidEmailFormat();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 비밀번호 요구 사항 테스트</span></span><br><span class="line">    $<span class="keyword">this</span>-&gt;testPasswordTooShort();</span><br><span class="line">    $<span class="keyword">this</span>-&gt;testPasswordRequiresSpecialChar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 사용자 이름 요구 사항 테스트</span></span><br><span class="line">    $<span class="keyword">this</span>-&gt;testUsernameTooLong();</span><br><span class="line">    $<span class="keyword">this</span>-&gt;testUsernameWithInvalidChars();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-디버깅-파트너">5. 디버깅 파트너</h2><p>까다로운 버그에 걸렸을 때 사용합니다.</p><ul><li><strong>오류 분석:</strong> 오류 메시지를 공유하면 ChatGPT가 해석을 도와줍니다.</li><li><strong>디버깅 단계:</strong> 문제를 격리하기 위한 체계적인 접근 방식을 제안합니다.</li><li><strong>솔루션 브레인스토밍:</strong> 잠재적인 수정 사항과 설명을 제공합니다.</li></ul><p>ChatGPT 사용 모범 사례</p><ol><li><strong>결과물 확인:</strong> 구현하기 전에 항상 ChatGPT의 제안을 검토하고 테스트하세요.</li><li><strong>컨텍스트 제공:</strong> 더 많은 컨텍스트를 제공할수록 더 나은 응답을 얻을 수 있습니다.</li><li><strong>반복하기:</strong> ChatGPT를 시작점으로 삼아 제안을 구체화하세요.</li><li><strong>보안 인식:</strong> 민감한 정보나 자격 증명을 절대 공유하지 마세요.</li></ol>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/10/10/chatgpt-31/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백엔드(Backend)를 무료로 호스팅할 수 있는 10가지 사이트</title>
      <link>http://hgko1207.github.io/2024/10/08/backend-1/</link>
      <guid>http://hgko1207.github.io/2024/10/08/backend-1/</guid>
      <pubDate>Tue, 08 Oct 2024 13:29:28 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;1-cloudflare-workers&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-cloudflare-workers&quot;&gt;&lt;/a&gt; 1) Cloudflare Workers&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="1-cloudflare-workers"><a class="markdownIt-Anchor" href="#1-cloudflare-workers"></a> 1) Cloudflare Workers</h2><p><a href="https://workers.cloudflare.com/" target="_blank" rel="noopener">Cloudflare Workers</a>는 서버리스 컴퓨팅 플랫폼으로, 개발자가 Cloudflare의 글로벌 네트워크 edge에서 코드를 실행할 수 있게 해줍니다. 이를 통해 사용자에게 더 짧은 지연 시간과 더 빠른 응답 시간을 보장합니다. 무료 버전은 백엔드 코드를 호스팅하고 실행할 수 있는 넉넉한 용량을 제공합니다.</p><p><img src="/images/header/backend-1_1.png" alt="" /></p><h2 id="2-vercel"><a class="markdownIt-Anchor" href="#2-vercel"></a> 2) Vercel</h2><p><a href="https://vercel.com/" target="_blank" rel="noopener">Vercel</a>은 개발자를 위한 플랫폼으로, 추가 구성 없이 웹 앱을 더 빠르게 빌드하고 배포하는 데 필요한 도구, 워크플로우 및 인프라를 제공합니다.</p><p><img src="/images/header/backend-1_2.png" alt="" /></p><h2 id="3-google-cloud-functions"><a class="markdownIt-Anchor" href="#3-google-cloud-functions"></a> 3) Google Cloud Functions</h2><p>Cloud Functions는 Google Cloud Platform(GCP)에서 제공하는 서버리스 컴퓨팅 서비스입니다. 최소한의 구성과 유지 관리로 이벤트에 대한 응답으로 코드를 실행할 수 있는 간단한 방법을 제공합니다. Cloud Functions는 이벤트 기반이므로 데이터 변경, 새 메시지, 사용자 상호 작용 등의 이벤트에 의해 트리거될 수 있습니다.</p><p><img src="/images/header/backend-1_3.png" alt="" /></p><h2 id="4-aws-lambda"><a class="markdownIt-Anchor" href="#4-aws-lambda"></a> 4) AWS Lambda</h2><p><a href="">AWS Lambda</a>는 이벤트에 대한 응답으로 코드를 실행하고 컴퓨팅 리소스를 자동으로 관리하는 컴퓨팅 서비스로, 아이디어를 최신 프로덕션 서버리스 애플리케이션으로 가장 빠르게 전환할 수 있는 방법입니다.</p><p><img src="/images/header/backend-1_4.png" alt="" /></p><h2 id="5-planetscale"><a class="markdownIt-Anchor" href="#5-planetscale"></a> 5) PlanetScale</h2><p><a href="https://planetscale.com/" target="_blank" rel="noopener">PlanetScale</a>은 Vitess를 기반으로 구축되었으며 수평적 샤딩(Horizontal Sharding)을 통해 하이퍼스케일 데이터베이스의 성능, 확장성 및 비용 최적화를 실현합니다.</p><p><img src="/images/header/backend-1_5.png" alt="" /></p><h2 id="6-supabase"><a class="markdownIt-Anchor" href="#6-supabase"></a> 6) Supabase</h2><p><a href="https://supabase.com/" target="_blank" rel="noopener">Supabase</a>는 오픈 소스 Firebase의 대안입니다. Postgres 데이터베이스, 인증, 인스턴트 API, Edge Functions, 실시간 구독, 저장소 및 벡터 임베딩으로 프로젝트를 시작하세요.</p><p><img src="/images/header/backend-1_6.png" alt="" /></p><h2 id="7-appwrite"><a class="markdownIt-Anchor" href="#7-appwrite"></a> 7) Appwrite</h2><p><a href="https://appwrite.io/" target="_blank" rel="noopener">Appwrite</a>는 선호하는 프로그래밍 언어와 도구를 사용하여 모든 규모의 애플리케이션을 구축할 수 있는 오픈 소스 플랫폼입니다.</p><p><img src="/images/header/backend-1_7.png" alt="" /></p><h2 id="8-railwayapp"><a class="markdownIt-Anchor" href="#8-railwayapp"></a> 8) Railway.app</h2><p><a href="https://railway.app/" target="_blank" rel="noopener">Railway</a>는 애플리케이션 구축 및 모니터링을 위한 클라우드입니다. 플랫폼 엔지니어가 필요하지 않습니다.</p><p><img src="/images/header/backend-1_8.png" alt="" /></p><h2 id="9-netlify-functions"><a class="markdownIt-Anchor" href="#9-netlify-functions"></a> 9) Netlify Functions</h2><p><a href="https://www.netlify.com/platform/core/functions/" target="_blank" rel="noopener">Netlify</a>는 사용자가 작성한 함수를 전체 API 엔드포인트로 배포합니다. 함수는 요청 컨텍스트 또는 이벤트 데이터를 수신하고 데이터를 프론트엔드로 다시 반환합니다.</p><p><img src="/images/header/backend-1_9.png" alt="" /></p><h2 id="10-sanityio"><a class="markdownIt-Anchor" href="#10-sanityio"></a> 10) <a href="http://Sanity.io" target="_blank" rel="noopener">Sanity.io</a></h2><p><a href="https://www.sanity.io/" target="_blank" rel="noopener">Sanity.io</a>는 개발자가 유연하고 확장 가능한 방식으로 콘텐츠를 호스팅하고 관리할 수 있는 헤드리스 콘텐츠 관리 시스템입니다. 무료 버전을 통해 개발자는 백엔드 코드를 호스팅하고 콘텐츠를 쉽게 관리할 수 있습니다.</p><p><img src="/images/header/backend-1_10.png" alt="" /></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/10/08/backend-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>IP 주소란 무엇인가요?</title>
      <link>http://hgko1207.github.io/2024/09/24/info-27/</link>
      <guid>http://hgko1207.github.io/2024/09/24/info-27/</guid>
      <pubDate>Tue, 24 Sep 2024 03:31:46 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/info-27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IP 주소&lt;/strong&gt;는 네트워크에 연결된 각 장치에 할당된 고유한 숫자 식별자로, 장치가 효과적으로 통신할 수 있도록 해줍니다.
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/info-27.png" alt="" /></p><p><strong>IP 주소</strong>는 네트워크에 연결된 각 장치에 할당된 고유한 숫자 식별자로, 장치가 효과적으로 통신할 수 있도록 해줍니다. 디바이스의 도로명 주소라고 생각하면 디바이스가 서로 통신할 수 있게 해줍니다.</p><h2 id="ipv4-주소란-무엇인가요"><a class="markdownIt-Anchor" href="#ipv4-주소란-무엇인가요"></a> IPv4 주소란 무엇인가요?</h2><p>IPv4 주소는 네트워크에 연결된 장치에 할당된 32비트 숫자 레이블입니다. 네트워크에서 디바이스를 식별하는 데 도움이 되는 고유 ID라고 생각하면 됩니다. IPv4 주소는 일반적으로 <code>192.168.1.10</code>과 같이 점으로 구분된 10진수 4자리로 작성됩니다.</p><h3 id="ipv4-주소의-구성-요소"><a class="markdownIt-Anchor" href="#ipv4-주소의-구성-요소"></a> IPv4 주소의 구성 요소</h3><ul><li><strong>Network ID:</strong> 이 부분은 디바이스가 속한 특정 네트워크를 지정합니다.</li><li><strong>Host ID:</strong> 네트워크 내의 특정 디바이스를 식별합니다.</li></ul><p>예를 들어 설명해 드리겠습니다.</p><p><strong>IP Address:</strong> <code>192.168.1.10</code>, 이 IP 주소에서 Network ID와 Host ID는 다음과 같습니다.</p><ul><li><strong>Network ID:</strong> 192.168.1</li><li><strong>Host ID:</strong> 10</li></ul><p>즉, 기본적으로 장치가 네트워크 <code>192.168.1.0</code>의 일부이며 장치 번호는 <code>10</code>입니다.</p><h2 id="ipv4-주소-클래스"><a class="markdownIt-Anchor" href="#ipv4-주소-클래스"></a> IPv4 주소 클래스</h2><p>IPv4 주소는 다양한 크기의 네트워크에 맞게 설계된 여러 클래스로 나뉩니다.</p><h3 id="1-class-a"><a class="markdownIt-Anchor" href="#1-class-a"></a> 1. Class A</h3><ul><li>매우 큰 규모의 네트워크(예: 대규모 조직)에 적합합니다.</li><li>첫 번째 octet(첫 번째 숫자)은 네트워크를 나타냅니다.</li><li>예: <code>10.0.0.0</code></li></ul><h3 id="2-class-b"><a class="markdownIt-Anchor" href="#2-class-b"></a> 2. Class B</h3><ul><li>중간 규모의 네트워크(예: 대학)의 경우.</li><li>처음 두 octet은 네트워크를 나타냅니다.</li><li>예: <code>172.16.0.0</code></li></ul><h3 id="3-class-c"><a class="markdownIt-Anchor" href="#3-class-c"></a> 3 Class C</h3><ul><li>소규모 네트워크(예: 소규모 기업)의 경우.</li><li>처음 세 octet은 네트워크를 나타냅니다.</li><li>예: <code>192.168.0.0</code></li></ul><h3 id="class-d"><a class="markdownIt-Anchor" href="#class-d"></a> Class D</h3><ul><li>멀티캐스트 그룹을 위해 예약되어 있으며, 한 번에 여러 대상에 데이터를 전송하는 데 사용됩니다.</li><li>범위: 224.0.0.0 ~ 239.255.255.255</li></ul><h3 id="class-e"><a class="markdownIt-Anchor" href="#class-e"></a> Class E</h3><ul><li>실험용으로 예약되어 있습니다.</li><li>범위: 240.0.0.0 ~ 255.255.255.255</li></ul><h2 id="사설private-및-공인public-ipv4-주소"><a class="markdownIt-Anchor" href="#사설private-및-공인public-ipv4-주소"></a> 사설(Private) 및 공인(Public) IPv4 주소</h2><p>IPv4 주소에는 두 가지 유형이 있습니다.</p><h3 id="사설-ip-주소"><a class="markdownIt-Anchor" href="#사설-ip-주소"></a> 사설 IP 주소</h3><p>로컬 네트워크 내에서 사용되며 인터넷에서 직접 액세스할 수 없습니다.</p><ul><li><strong>Class A:</strong> 10.0.0.0 ~ 10.255.255.255</li><li><strong>Class B:</strong> 172.16.0.0 ~ 172.31.255.255</li><li><strong>Class C:</strong> 192.168.0.0 ~ 192.168.255.255</li></ul><h3 id="공인-ip-주소"><a class="markdownIt-Anchor" href="#공인-ip-주소"></a> 공인 IP 주소</h3><p>인터넷을 통한 통신을 위해 전 세계적으로 고유하며 인터넷주소관리기관(IANA)에서 할당하는 주소입니다.</p><h2 id="ipv6-주소란-무엇인가요"><a class="markdownIt-Anchor" href="#ipv6-주소란-무엇인가요"></a> IPv6 주소란 무엇인가요?</h2><p>인터넷에 연결된 디바이스의 수가 증가함에 따라 IPv4 주소가 부족해지기 시작했습니다. 그래서 IPv6가 개발되었습니다. 128비트 시스템을 사용하므로 더 많은 주소를 사용할 수 있습니다.</p><p>IPv6 주소는 IPv4 주소와 다르게 생겼습니다. 다음과 같이 콜론으로 구분된 16진수 4자리로 구성된 8그룹으로 작성됩니다:</p><p>Example: <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code></p><p>주소를 단순화하기 위해 선행 0은 생략하고 연속되는 0 그룹은 다음과 같이 이중 콜론(::)으로 대체할 수 있습니다:</p><p>Example: <code>2001:db8:85a3::8a2e:370:7334</code></p><h3 id="ipv6-주소-유형"><a class="markdownIt-Anchor" href="#ipv6-주소-유형"></a> IPv6 주소 유형</h3><ul><li><strong>Unicast:</strong> IPv4 주소와 마찬가지로 단일 장치를 식별합니다.</li><li><strong>Multicast:</strong> 한 번에 여러 장치에 데이터를 전송하는 데 사용됩니다.</li><li><strong>Anycast</strong>: 여러 디바이스 그룹에서 가장 가까운 디바이스로 데이터를 전송합니다.</li></ul><h2 id="서브넷팅subnetting-네트워크-구성"><a class="markdownIt-Anchor" href="#서브넷팅subnetting-네트워크-구성"></a> 서브넷팅(Subnetting): 네트워크 구성</h2><p>서브넷팅은 대규모 네트워크를 더 작고 관리하기 쉬운 하위 네트워크 또는 서브넷(Subnet)으로 나누는 프로세스입니다. 이를 통해 네트워크 효율성과 보안이 향상됩니다.</p><h2 id="왜-서브넷인가"><a class="markdownIt-Anchor" href="#왜-서브넷인가"></a> 왜 서브넷인가?</h2><ul><li><strong>효율적인 IP 사용:</strong> 필요하지 않은 네트워크에서 IP 주소 낭비 방지</li><li><strong>성능 향상:</strong> 네트워크 혼잡 감소</li><li><strong>보안 강화:</strong> 네트워크 세그먼트 분리</li><li><strong>더 쉬운 관리:</strong> 소규모 네트워크는 관리 및 문제 해결이 더 간단합니다.</li></ul><h2 id="서브넷팅-작동-방식"><a class="markdownIt-Anchor" href="#서브넷팅-작동-방식"></a> 서브넷팅 작동 방식</h2><p>서브넷 설정에는 IP 주소와 관련 서브넷 마스크(subnet mask)를 수정하는 작업이 포함됩니다. 서브넷 마스크는 IP 주소의 어느 부분이 네트워크에 속하고 어느 부분이 호스트에 속하는지를 식별하는 32비트 숫자입니다.</p><h3 id="서브넷-설정의-예"><a class="markdownIt-Anchor" href="#서브넷-설정의-예"></a> 서브넷 설정의 예</h3><p>네트워크 192.168.1.0/24를 두 개의 동일한 서브넷으로 서브넷화해 보겠습니다.</p><ol><li>원래 서브넷 마스크: 255.255.255.0 (/24)</li><li>새 서브넷 마스크: 255.255.255.128 (/25)</li></ol><p>이렇게 하면 두 개의 서브넷이 생성됩니다.</p><ol><li>Subnet 1: 192.168.1.0-192.168.1.127</li><li>Subnet 2: 192.168.1.128-192.168.1.255</li></ol><p>이제 각 서브넷은 최대 126개의 디바이스(2⁷ - 2, 네트워크 및 브로드캐스트 주소의 경우 2를 빼기)를 호스팅할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/09/24/info-27/#disqus_thread</comments>
    </item>
    
    <item>
      <title>꼭 알아야 할 21가지 HTML 팁</title>
      <link>http://hgko1207.github.io/2024/09/24/web-20/</link>
      <guid>http://hgko1207.github.io/2024/09/24/web-20/</guid>
      <pubDate>Tue, 24 Sep 2024 01:21:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;이 글에서는 코딩 실력을 향상시킬 수 있는 코드 스니펫(Code Snipet)이 포함된 21가지 HTML 팁을 공유하겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;연락처-링크-만들기&quot;&gt;연락처 링크 만들기&lt;/h2&gt;
&lt;p&gt;HTML을 사용하여 클릭 가능한 이메일, 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>이 글에서는 코딩 실력을 향상시킬 수 있는 코드 스니펫(Code Snipet)이 포함된 21가지 HTML 팁을 공유하겠습니다.</p><h2 id="연락처-링크-만들기">연락처 링크 만들기</h2><p>HTML을 사용하여 클릭 가능한 이메일, 전화 및 SMS 링크를 만듭니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Email link --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:name@example.com"</span>&gt;</span> Send Email <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Phone call link --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:+1234567890"</span>&gt;</span> Call Us <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SMS link --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:+1234567890"</span>&gt;</span> Send SMS <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="접을-수-있는-콘텐츠-만들기">접을 수 있는 콘텐츠 만들기</h2><p>웹 페이지에 접을 수 있는 콘텐츠를 포함하려는 경우 <code>&lt;details&gt;</code> 및 <code>&lt;summary&gt;</code> 태그를 사용할 수 있습니다.</p><p><code>&lt;details&gt;</code> 태그는 숨겨진 콘텐츠를 위한 컨테이너를 생성하고, <code>&lt;summary&gt;</code> 태그는 클릭 가능한 레이블을 제공하여 해당 콘텐츠의 표시 여부를 전환할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>Click to expand<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This content can be expanded or collapsed.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="시맨틱-요소-활용하기">시맨틱 요소 활용하기</h2><p>웹사이트에 non-semantic 요소보다 시맨틱(semantic) 요소를 선택하세요. 시맨틱 요소는 코드를 의미 있게 만들고 구조, 접근성 및 SEO를 개선합니다.</p><p><img src="/images/header/web-20_1.png" alt=""></p><h2 id="Form-요소-그룹화">Form 요소 그룹화</h2><p><code>&lt;fieldset&gt;</code> 태그를 사용하여 Form의 관련 요소를 그룹화하고 <code>&lt;legend&gt;</code> 태그를 <code>&lt;fieldset&gt;</code>와 함께 사용하여 <code>&lt;fieldset&gt;</code> 태그의 제목을 정의할 수 있습니다.</p><p>이는 보다 효율적이고 접근하기 쉬운 Form을 만드는 데 유용합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Personal details<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"firstname"</span>&gt;</span>First name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"firstname"</span> <span class="attr">name</span>=<span class="string">"firstname"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"contact"</span>&gt;</span>Contact:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"contact"</span> <span class="attr">name</span>=<span class="string">"contact"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Dropdown-메뉴-개선">Dropdown 메뉴 개선</h2><p><code>&lt;optgroup&gt;</code> 태그를 사용하여 <code>&lt;select&gt;</code> HTML 태그에서 관련 옵션을 그룹화할 수 있습니다. 큰 드롭다운 메뉴나 긴 옵션 목록으로 작업할 때 이 태그를 사용할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"Fruits"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Mango<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"Vegetables"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Tomato<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Broccoli<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Carrot<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="동영상-프레젠테이션-개선하기">동영상 프레젠테이션 개선하기</h2><p><code>&lt;video&gt;</code> 태그의 <code>poster</code> 속성을 사용하여 사용자가 비디오를 재생할 때까지 이미지를 표시할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">poster</span>=<span class="string">"image.png"</span> <span class="attr">width</span>=<span class="string">"500"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4 /&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;/video&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="다중-선택-지원">다중 선택 지원</h2><p><code>&lt;input&gt;</code> 및 <code>&lt;select&gt; </code>요소와 함께 <code>multiple</code> 속성을 사용하여 사용자가 한 번에 여러 값을 선택/입력할 수 있도록 할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"java"</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"javascript"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"typescript"</span>&gt;</span>TypeScript<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"rust"</span>&gt;</span>Rust<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="텍스트를-아래-첨자-및-위-첨자로-표시하기">텍스트를 아래 첨자 및 위 첨자로 표시하기</h2><p><code>&lt;sub&gt;</code> 및 <code>&lt;sup&gt;</code> 요소를 사용하여 텍스트를 각각 아래 첨자와 위 첨자로 표시할 수 있습니다.</p><p><img src="/images/header/web-20_2.png" alt=""></p><h2 id="다운로드-링크-만들기">다운로드 링크 만들기</h2><p><code>&lt;a&gt;</code> 요소와 함께 <code>download</code> 속성을 사용하여 사용자가 링크를 클릭할 때 링크된 리소스를 탐색하는 대신 다운로드하도록 지정할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"document.pdf"</span> <span class="attr">download</span>=<span class="string">"document.pdf"</span>&gt;</span> Download PDF <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="상대-링크에-대한-기본-URL-정의하기">상대 링크에 대한 기본 URL 정의하기</h2><p><code>&lt;base&gt;</code> 태그를 사용하여 웹 페이지의 모든 상대 URL에 대한 기준 URL을 정의할 수 있습니다.</p><p>이 태그는 웹 페이지의 모든 상대 URL에 대한 공유 시작점을 만들어 리소스를 쉽게 탐색하고 로드할 수 있도록 하려는 경우에 유용합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"https://example.dev"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog"</span>&gt;</span>Blogs<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/get-in-touch"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="이미지-로딩-제어">이미지 로딩 제어</h2><p><code>&lt;img&gt;</code> 요소가 포함된 <code>loading</code> 속성을 사용하여 브라우저에서 이미지를 로드하는 방법을 제어할 수 있습니다. 세 가지 값이 있습니다: “eager”, “lazy”, &quot;auto&quot;의 세 가지 값이 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"picture.jpg"</span> <span class="attr">loading</span>=<span class="string">"lazy"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="번역-기능-관리">번역 기능 관리</h2><p><code>translate</code> 속성을 사용하여 요소의 콘텐츠를 브라우저의 번역 기능으로 번역할지 여부를 지정할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">translate</span>=<span class="string">"no"</span>&gt;</span>This text should not be translated.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="최대-입력-길이-설정하기">최대 입력 길이 설정하기</h2><p><code>maxlength</code> 속성을 사용하여 사용자가 입력 필드에 입력할 수 있는 최대 글자 수를 설정할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">maxlength</span>=<span class="string">"4"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="최소-입력-길이-설정하기">최소 입력 길이 설정하기</h2><p><code>minlength</code> 속성을 사용하여 사용자가 입력 필드에 입력하는 최소 글자 수를 설정할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">minlength</span>=<span class="string">"3"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="콘텐츠-편집-활성화">콘텐츠 편집 활성화</h2><p><code>contenteditable</code> 속성을 사용하여 요소의 콘텐츠를 편집할 수 있는지 여부를 지정합니다. 이를 통해 사용자는 요소 내의 콘텐츠를 수정할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span>&gt;</span>You can edit this content.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="맞춤법-검사-제어">맞춤법 검사 제어</h2><p><code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, 콘텐츠 편집 가능 요소와 함께 <code>spellcheck</code> 속성을 사용하여 브라우저에서 맞춤법 검사를 활성화 또는 비활성화할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">spellcheck</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="접근성-보장하기">접근성 보장하기</h2><p><code>alt</code> 속성은 이미지를 표시할 수 없는 경우 이미지의 대체 텍스트를 지정합니다. 접근성과 SEO를 개선하려면 항상 이미지에 설명이 포함된 <code>alt</code> 속성을 포함하세요.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"picture.jpg"</span> <span class="attr">alt</span>=<span class="string">"Description for the image"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Link에-대한-타깃-동작-정의하기">Link에 대한 타깃 동작 정의하기</h2><p><code>target</code> 속성을 사용하여 링크된 리소스를 클릭할 때 표시할 위치를 지정할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 같은 프레임에서 열림 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://example.dev"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>Open<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 새 창 또는 탭에서 열기 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://example.dev"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Open<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 상위 프레임에서 열림 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://example.dev"</span> <span class="attr">target</span>=<span class="string">"_parent"</span>&gt;</span>Open<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 창 전체 본문에서 열림 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://example.dev"</span> <span class="attr">target</span>=<span class="string">"_top"</span>&gt;</span>Open<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 명명된 프레임에서 열림 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://example.dev"</span> <span class="attr">target</span>=<span class="string">"framename"</span>&gt;</span>Open<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="추가-정보-제공">추가 정보 제공</h2><p><code>title</code> 속성은 사용자가 요소 위로 마우스를 가져갈 때 요소에 대한 추가 정보를 제공하는 데 사용할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"World Health Organization"</span>&gt;</span>WHO<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="특정-파일-형식-허용">특정 파일 형식 허용</h2><p>서버에서 수용할 파일 유형을 지정하기 위해 <code>accept</code> 속성을 사용할 수 있습니다(파일 유형에만 해당). 이는 <code>&lt;input&gt;</code> 요소와 함께 사용됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/png, image/jpeg"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="동영상-로딩-최적화">동영상 로딩 최적화</h2><p><code>&lt;video&gt;</code> 요소와 함께 <code>preload</code> 속성을 사용하면 비디오 파일을 더 빠르게 로드하여 더 원활하게 재생할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"video.mp4"</span> <span class="attr">preload</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">   Your browser does not support the video tag.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/09/24/web-20/#disqus_thread</comments>
    </item>
    
    <item>
      <title>시간을 절약할 수 있는 6가지 CSS Cheat Sheet</title>
      <link>http://hgko1207.github.io/2024/09/24/web-19/</link>
      <guid>http://hgko1207.github.io/2024/09/24/web-19/</guid>
      <pubDate>Tue, 24 Sep 2024 01:14:31 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;매우 유용한 6가지 CSS Cheat Sheet를 알려드리겠습니다. 참고하세요!&lt;/p&gt;
&lt;h2 id=&quot;CSS-Flexbox&quot;&gt;CSS Flexbox&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/header/web-19_1.png&quot; alt=&quot;&quot;&gt;&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>매우 유용한 6가지 CSS Cheat Sheet를 알려드리겠습니다. 참고하세요!</p><h2 id="CSS-Flexbox">CSS Flexbox</h2><p><img src="/images/header/web-19_1.png" alt=""></p><h2 id="CSS-Grid">CSS Grid</h2><p><img src="/images/header/web-19_2.png" alt=""></p><h2 id="CSS-Positions">CSS Positions</h2><p><img src="/images/header/web-19_3.png" alt=""></p><h2 id="CSS-Display-Values">CSS Display Values</h2><p><img src="/images/header/web-19_4.png" alt=""></p><h2 id="CSS-Selectors">CSS Selectors</h2><p><img src="/images/header/web-19_5.png" alt=""></p><h2 id="CSS-nth-child-Selectors">CSS :nth-child Selectors</h2><p><img src="/images/header/web-19_6.png" alt=""></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/09/24/web-19/#disqus_thread</comments>
    </item>
    
    <item>
      <title>모든 개발자가 알아야 할 25가지 자바스크립트 기초</title>
      <link>http://hgko1207.github.io/2024/09/23/js-dev-26/</link>
      <guid>http://hgko1207.github.io/2024/09/23/js-dev-26/</guid>
      <pubDate>Mon, 23 Sep 2024 01:13:02 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/js-dev-24.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;자바스크립트는 최신 웹 개발에 필수적인 다재다능하고 강력한 언어입니다. 다음은 더 효율적이고 효과적인 자바스크립트 개발자가 될 수 있는 25가지 기
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/js-dev-24.png" alt=""></p><p>자바스크립트는 최신 웹 개발에 필수적인 다재다능하고 강력한 언어입니다. 다음은 더 효율적이고 효과적인 자바스크립트 개발자가 될 수 있는 25가지 기초 문법에 대한 자세한 설명 및 예제입니다.</p><h2 id="1-var-대신-let과-const-사용">1. <code>var</code> 대신 <code>let</code>과 <code>const</code> 사용</h2><p><code>let</code>과 <code>const</code>를 사용하면 변수가 정의된 블록 내에서만 액세스할 수 있도록 하여 범위 관련 버그를 방지할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><h2 id="2-Default-Parameters">2. Default Parameters</h2><p>Default Parameter는 함수에 합리적인 기본값을 설정하여 오류를 방지하고 코드를 더욱 견고하게 만듭니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name = <span class="string">'Guest'</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(greet()); <span class="comment">// "Hello, Guest!"</span></span><br></pre></td></tr></table></figure><h2 id="3-Template-Literals">3. Template Literals</h2><p>Template Literal을 사용하면 임베디드 표현식과 여러 줄 문자열을 포함하는 문자열을 더 쉽게 만들 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'John'</span>;</span><br><span class="line"><span class="keyword">const</span> greeting = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(greeting); <span class="comment">// "Hello, John!"</span></span><br></pre></td></tr></table></figure><h2 id="4-구조-분해-할당-Destructuring-Assignment">4. 구조 분해 할당(Destructuring Assignment)</h2><p>구조 분해 할당을 사용하면 객체에서 속성을 추출하고 배열에서 요소를 별개의 변수로 쉽게 추출할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">'Jane'</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = user;</span><br><span class="line"><span class="built_in">console</span>.log(name, age); <span class="comment">// "Jane" 25</span></span><br></pre></td></tr></table></figure><h2 id="5-Arrow-Functions">5. Arrow Functions</h2><p>Arrow Function는 함수 표현식에 간결한 구문을 제공하고 <code>this</code>이 어휘적으로 바인딩되도록 합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="6-Spread-Operator">6. Spread Operator</h2><p>배열이나 객체를 결합하는 것이 번거로울 수 있습니다. Spread Operator를 사용하면 배열과 객체를 쉽게 결합할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> combined = [...arr1, ...arr2];</span><br><span class="line"><span class="built_in">console</span>.log(combined); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="7-Rest-Parameters">7. Rest Parameters</h2><p>다양한 수의 함수 인수를 처리하는 것은 까다로울 수 있습니다. Rest Parameter를 사용하면 무한한 수의 인수를 배열로 처리할 수 있으므로 함수를 더욱 유연하게 만들 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h2 id="8-단략-평가-Short-Circuit-Evaluation">8. 단략 평가(Short-Circuit Evaluation)</h2><p>조건문을 작성하는 것은 장황할 수 있습니다. 단략 평가는 논리 <code>&amp;&amp;</code> 및 <code>||</code> 연산자를 사용하여 조건 표현식을 단순화합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoggedIn = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> user = isLoggedIn &amp;&amp; &#123; <span class="attr">name</span>: <span class="string">'Jane'</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">// &#123; name: 'Jane', age: 25 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="9-옵셔널-체이닝-Optional-Chaining">9. 옵셔널 체이닝(Optional Chaining)</h2><p>체인의 각 레벨에서 <code>null</code> 또는 <code>undefined</code>을 명시적으로 확인하지 않고도 중첩된 프로퍼티에 안전하게 액세스할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">profile</span>: &#123; <span class="attr">name</span>: <span class="string">'Jane'</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> userName = user?.profile?.name;</span><br><span class="line"><span class="built_in">console</span>.log(userName); <span class="comment">// "Jane"</span></span><br></pre></td></tr></table></figure><h2 id="10-Nullish-Coalescing">10. Nullish Coalescing</h2><p><code>||</code>를 사용하여 기본값을 제공하면 값이 <code>0</code> 또는 <code>&quot;&quot;</code>인 경우 예기치 않은 결과가 발생할 수 있습니다. Nullish Coalescing(<code>??</code>)을 사용하여 <code>null</code> 또는 <code>undefined</code> 경우에만 기본값을 제공하세요.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">''</span>, <span class="attr">age</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> userName = user.name ?? <span class="string">'Anonymous'</span>;</span><br><span class="line"><span class="keyword">const</span> userAge = user.age ?? <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(userName); <span class="comment">// ""</span></span><br><span class="line"><span class="built_in">console</span>.log(userAge); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="11-Property-Shorthand">11. Property Shorthand</h2><p>변수 이름과 일치하는 경우 속성 이름을 생략할 수 있어 코드가 더 깔끔해집니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Jane'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123; name, age &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">// &#123; name: 'Jane', age: 25 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="12-Dynamic-Property-Names">12. Dynamic Property Names</h2><p>표현식 값을 속성 이름으로 사용하여 객체 속성을 동적으로 생성할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> propName = <span class="string">'age'</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">'Jane'</span>, [propName]: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">// &#123; name: 'Jane', age: 25 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="13-map-filter-reduce-사용하기">13. <code>map()</code>, <code>filter()</code>, <code>reduce()</code> 사용하기</h2><p>일반적인 배열 연산에는 <code>map()</code>, <code>filter()</code>, <code>reduce()</code>를 사용하세요. 이러한 배열 메서드는 배열을 변환, 필터링 및 축소하는 기능적 접근 방식을 제공하여 코드를 보다 표현력 있고 간결하게 만듭니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> doubled = numbers.map(<span class="function">(<span class="params">num</span>) =&gt;</span> num * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doubled); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> evens = numbers.filter(<span class="function">(<span class="params">num</span>) =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(evens); <span class="comment">// [2, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = numbers.reduce(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h2 id="14-문자열-includes-startsWith-및-endsWith">14. 문자열 <code>includes()</code>, <code>startsWith()</code> 및 <code>endsWith()</code></h2><p>더 간단한 문자열 검사를 위해 <code>includes()</code>, <code>startsWith()</code> 및 <code>endsWith()</code>를 사용하세요. 이러한 문자열 메서드는 하위 문자열의 존재, 시작 또는 끝을 간단하고 읽기 쉽게 확인할 수 있는 방법을 제공합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'Hello, world!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">'world'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'Hello'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'!'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="15-함수-매개변수에서-배열-및-객체-구조-분해">15. 함수 매개변수에서 배열 및 객체 구조 분해</h2><p>함수 매개변수로 전달된 배열이나 객체에서 값을 추출하는 것은 장황할 수 있습니다. 함수 매개변수에서 구조조정을 사용하여 값을 직접 추출하세요.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">'Jane'</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">&#123; name, age &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>! You are <span class="subst">$&#123;age&#125;</span> years old.`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(greet(user)); <span class="comment">// "Hello, Jane! You are 25 years old."</span></span><br></pre></td></tr></table></figure><h2 id="16-Destructuring의-기본값">16. Destructuring의 기본값</h2><p>누락될 수 있는 속성에 대한 대체 값을 제공하여 코드를 더욱 견고하게 만들 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">'Jane'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; name, age = <span class="number">18</span> &#125; = user;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// "Jane"</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h2 id="17-Object-assign">17. Object <code>assign()</code></h2><p>객체 복제 또는 병합은 장황하고 오류가 발생하기 쉽습니다. <code>Object.assign()</code>을 사용하면 객체를 효율적으로 복제하거나 병합할 수 있으므로 수동 복사의 필요성을 줄일 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> merged = <span class="built_in">Object</span>.assign(target, source);</span><br><span class="line"><span class="built_in">console</span>.log(merged); <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="18-find-및-findIndex">18. <code>find()</code> 및 <code>findIndex()</code></h2><p>배열에서 요소나 그 인덱스를 찾는 것이 번거로울 수 있습니다. <code>find()</code> 및 <code>findIndex()</code> 메서드는 조건에 따라 요소 또는 그 인덱스를 찾는 간단한 방법을 제공하여 코드 가독성을 향상시킵니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Jane'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'John'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = users.find(<span class="function">(<span class="params">u</span>) =&gt;</span> u.id === <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">// &#123; id: 1, name: 'Jane' &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> index = users.findIndex(<span class="function">(<span class="params">u</span>) =&gt;</span> u.id === <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="19-some-및-every">19. <code>some()</code> 및 <code>every()</code></h2><p><code>some()</code> 및 <code>every()</code> 메서드를 사용하면 배열의 일부 또는 모든 요소가 조건을 충족하는지 간결한 방식으로 확인할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> hasEven = numbers.some(<span class="function">(<span class="params">num</span>) =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hasEven); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> allEven = numbers.every(<span class="function">(<span class="params">num</span>) =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(allEven); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="20-flat-및-flatMap">20. <code>flat()</code> 및 <code>flatMap()</code></h2><p><code>flat()</code> 및 <code>flatMap()</code> 메서드는 중첩 배열을 평평하게 만들고 한 단계로 매핑 및 평평하게 만드는 간단한 방법을 제공합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nested = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]]]];</span><br><span class="line"><span class="keyword">const</span> flat = nested.flat(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(flat); <span class="comment">// [1, 2, 3, [4]]</span></span><br><span class="line"><span class="keyword">const</span> mapped = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].flatMap(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(mapped); <span class="comment">// [1, 2, 2, 4, 3, 6]</span></span><br></pre></td></tr></table></figure><h2 id="21-from-및-of">21. <code>from()</code> 및 <code>of()</code></h2><p><code>Array.from()</code>을 사용하면 iterable 객체에서 배열을 만들 수 있고, <code>Array.of()</code>을 사용하면 인자 목록에서 배열을 만들 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1, 2, 3]);</span><br><span class="line">const arrFromSet = Array.from(<span class="keyword">set</span>);</span><br><span class="line">console.log(arrFromSet); // [1, 2, 3]</span><br><span class="line">const arrOfNumbers = Array.of(1, 2, 3);</span><br><span class="line">console.log(arrOfNumbers); // [1, 2, 3]</span><br></pre></td></tr></table></figure><h2 id="22-콜백의-매개변수-구조-분해">22. 콜백의 매개변수 구조 분해</h2><p>콜백 매개변수에서 구조 분해를하면 콜백에 전달된 객체의 속성에 직접 액세스할 수 있으므로 코드를 더욱 간결하게 만들 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Jane'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'John'</span> &#125;,</span><br><span class="line">];</span><br><span class="line">users.forEach(<span class="function">(<span class="params">&#123; id, name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`User ID: <span class="subst">$&#123;id&#125;</span>, User Name: <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="23-선택적-콜백-함수">23. 선택적 콜백 함수</h2><p>Short-circuit evaluation를 사용하면 선택적 콜백 함수가 제공된 경우에만 호출할 수 있으므로 코드가 더욱 견고해집니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  fetch(url)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      callback &amp;&amp; callback(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="24-Promisify-Callbacks">24. Promisify Callbacks</h2><p><code>promisify</code> 유틸리티 함수를 사용하여 콜백 기반 함수를 Promise으로 변환할 수 있으므로 async/await 구문으로 작업하기가 더 쉬워집니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promisify</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      fn(...args, (err, result) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">        <span class="keyword">else</span> resolve(result);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(<span class="built_in">require</span>(<span class="string">'fs'</span>).readFile);</span><br><span class="line">readFile(<span class="string">'path/to/file.txt'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(err));</span><br></pre></td></tr></table></figure><h2 id="25-동시-실행을-위한-Promise-all">25. 동시 실행을 위한 Promise.all</h2><p>여러 비동기 작업을 동시에 처리하는 것은 어려울 수 있습니다. <code>Promise.all</code>을 사용하면 여러 비동기 작업을 동시에 처리하고 모든 작업이 완료되면 계속 진행할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchData1 = fetch(<span class="string">'https://api.example.com/data1'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json());</span><br><span class="line"><span class="keyword">const</span> fetchData2 = fetch(<span class="string">'https://api.example.com/data2'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json());</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([fetchData1, fetchData2])</span><br><span class="line">  .then(<span class="function">(<span class="params">[data1, data2]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Data 1:'</span>, data1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Data 2:'</span>, data2);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/09/23/js-dev-26/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Node.js] Winston 사용하여 로깅하기</title>
      <link>http://hgko1207.github.io/2024/09/20/nodejs-8/</link>
      <guid>http://hgko1207.github.io/2024/09/20/nodejs-8/</guid>
      <pubDate>Fri, 20 Sep 2024 04:41:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;로깅&lt;/strong&gt;(Logging)은 모든 애플리케이션에서 중요한 부분입니다. 로깅은 코드 디버깅, 모니터링 및 유지 관리에 도움이 됩니다. &lt;strong&gt;Winston&lt;/strong&gt;은 유연성과 풍부한 기능으로 인해 Node.j
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>로깅</strong>(Logging)은 모든 애플리케이션에서 중요한 부분입니다. 로깅은 코드 디버깅, 모니터링 및 유지 관리에 도움이 됩니다. <strong>Winston</strong>은 유연성과 풍부한 기능으로 인해 Node.js에서 가장 인기 있는 로깅 라이브러리 중 하나입니다. 이 글에서는 Winston을 Node.js 애플리케이션에 통합하고 그 기능을 최대한 활용하는 방법을 살펴봅니다.</p><p><img src="/images/header/nodejs-8.png" alt=""></p><h2 id="개요">개요</h2><p>이 튜토리얼에서는 다음을 다룹니다:</p><ul><li>Node.js 프로젝트에서 Winston 설정하기</li><li>다양한 로깅 수준 구성하기</li><li>사용자 정의 로그 형식 만들기</li><li>여러 전송(콘솔, 파일 등)에 로깅하기</li><li>사용자 지정 로그 수준 만들기</li><li>일일 로그 파일에 로깅하기</li><li>Express 애플리케이션에서 Winston 사용하기</li></ul><h2 id="전제-조건">전제 조건</h2><ul><li>JavaScript 및 Node.js에 대한 기본 지식</li><li>npm 및 Express에 익숙함(선택 사항이지만 마지막 단계에 권장됨).</li></ul><h2 id="설정">설정</h2><p>Node.js 프로젝트를 초기화합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir winston-logger-example</span><br><span class="line"><span class="built_in">cd</span> winston-logger-example</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>Winston를 설치합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express winston winston-daily-rotate-file</span><br></pre></td></tr></table></figure><h2 id="기본-설정">기본 설정</h2><p>Winston을 설정하기 위한 <code>logger.js</code> 파일을 생성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logger.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; createLogger, format, transports &#125; = <span class="built_in">require</span>(<span class="string">'winston'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = createLogger(&#123;</span><br><span class="line">  level: <span class="string">'info'</span>,</span><br><span class="line">  format: format.combine(</span><br><span class="line">    format.colorize(),</span><br><span class="line">    format.timestamp(),</span><br><span class="line">    format.printf(<span class="function">(<span class="params">&#123; timestamp, level, message &#125;</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;timestamp&#125;</span> <span class="subst">$&#123;level&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">  ),</span><br><span class="line">  transports: [<span class="keyword">new</span> transports.Console(), <span class="keyword">new</span> transports.File(&#123; <span class="attr">filename</span>: <span class="string">'app.log'</span> &#125;)],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logger;</span><br></pre></td></tr></table></figure><ul><li><strong>createLogger:</strong> 새 로거 인스턴스를 초기화합니다.</li><li><strong>format.combine:</strong> 여러 형식을 결합합니다. 여기서는 <code>colorize</code>, <code>timestamp</code>, <code>printf</code>를 사용하고 있습니다.</li><li><strong>transports:</strong> 로그를 전송할 위치를 지정합니다. 이 예에서는 콘솔과 파일(<code>app.log</code>)에 로깅합니다.</li></ul><h2 id="로깅-레벨-구성하기">로깅 레벨 구성하기</h2><p>Winston은 <code>error</code>, <code>warn</code>, <code>info</code>, <code>http</code>, <code>verbose</code>, <code>debug</code>, <code>silly</code> 등 여러 로깅 레벨을 지원합니다. 캡처할 로그의 최소 레벨을 구성할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logger.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; createLogger, format, transports &#125; = <span class="built_in">require</span>(<span class="string">'winston'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = createLogger(&#123;</span><br><span class="line">  levels: &#123;</span><br><span class="line">    error: <span class="number">0</span>,</span><br><span class="line">    warn: <span class="number">1</span>,</span><br><span class="line">    info: <span class="number">2</span>,</span><br><span class="line">    http: <span class="number">3</span>,</span><br><span class="line">    verbose: <span class="number">4</span>,</span><br><span class="line">    debug: <span class="number">5</span>,</span><br><span class="line">    silly: <span class="number">6</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  level: <span class="string">'info'</span>, <span class="comment">// Set the default log level</span></span><br><span class="line">  format: format.combine(</span><br><span class="line">    format.colorize(),</span><br><span class="line">    format.timestamp(),</span><br><span class="line">    format.printf(<span class="function">(<span class="params">&#123; timestamp, level, message &#125;</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;timestamp&#125;</span> <span class="subst">$&#123;level&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">  ),</span><br><span class="line">  transports: [<span class="keyword">new</span> transports.Console(), <span class="keyword">new</span> transports.File(&#123; <span class="attr">filename</span>: <span class="string">'app.log'</span> &#125;)],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logger;</span><br></pre></td></tr></table></figure><ul><li><strong>levels:</strong> 사용자 정의 로깅 레벨을 정의합니다.</li><li><strong>level:</strong> 캡처할 로그의 최소 레벨을 설정합니다(여기서는 <code>info</code>로 설정되어 있음).</li></ul><h2 id="로그-레벨-이해하기">로그 레벨 이해하기</h2><p>로그 레벨은 기록되는 메시지의 심각도를 결정합니다. Winston은 가장 심각한 것부터 가장 덜 심각한 것까지 우선순위가 지정된 npm 스타일 로깅 레벨을 사용합니다.</p><ul><li><strong>error: (0)</strong> 즉각적인 주의가 필요할 수 있는 오류를 로깅합니다.</li><li><strong>warn: (1)</strong> 잠재적 문제를 나타내는 경고를 로깅합니다.</li><li><strong>info: (2)</strong> 애플리케이션의 진행 상황을 강조하는 정보 메시지를 로깅합니다.</li><li><strong>http: (3)</strong> HTTP 요청을 로깅합니다.</li><li><strong>verbose: (4)</strong> 디버깅 중 유용한 상세 정보를 로깅합니다.</li><li><strong>debug: (5)</strong> 디버깅 정보를 기록합니다.</li><li><strong>silly: (6)</strong> 가장 자세한 정보, 종종 필요 이상으로 많은 정보를 로깅합니다.</li></ul><p>최소 로그 레벨을 설정하여 덜 심각한 메시지를 필터링할 수 있습니다. 예를 들어 로그 레벨을 <code>info</code>로 설정하면 <code>info</code>, <code>warn</code> 및 <code>error</code> 메시지만 기록됩니다.</p><h2 id="사용자-지정-로그-형식-만들기">사용자 지정 로그 형식 만들기</h2><p>필요에 따라 사용자 지정 로그 형식을 만들 수 있습니다. 예를 들어 메타데이터를 추가하거나 로그 메시지 구조를 변경할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logger.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; createLogger, format, transports &#125; = <span class="built_in">require</span>(<span class="string">'winston'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> customFormat = format.combine(</span><br><span class="line">  format.colorize(),</span><br><span class="line">  format.timestamp(),</span><br><span class="line">  format.printf(<span class="function">(<span class="params">&#123; timestamp, level, message, ...meta &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;timestamp&#125;</span> <span class="subst">$&#123;level&#125;</span>: <span class="subst">$&#123;message&#125;</span> <span class="subst">$&#123;<span class="built_in">Object</span>.keys(meta).length ? <span class="built_in">JSON</span>.stringify(meta, <span class="literal">null</span>, <span class="number">2</span>) : <span class="string">''</span>&#125;</span>`</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = createLogger(&#123;</span><br><span class="line">  level: <span class="string">'info'</span>,</span><br><span class="line">  format: customFormat,</span><br><span class="line">  transports: [<span class="keyword">new</span> transports.Console(), <span class="keyword">new</span> transports.File(&#123; <span class="attr">filename</span>: <span class="string">'app.log'</span> &#125;)],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logger;</span><br></pre></td></tr></table></figure><ul><li><strong>customFormat:</strong> timestamp, log level, message 및 optional metadata를 구조화된 로그 형식으로 결합합니다.</li></ul><h2 id="여러-전송에-로깅">여러 전송에 로깅</h2><p>Winston은 다양한 파일, 외부 로깅 서비스 또는 콘솔과 같은 여러 대상에 로깅할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logger.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; createLogger, format, transports &#125; = <span class="built_in">require</span>(<span class="string">'winston'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = createLogger(&#123;</span><br><span class="line">  level: <span class="string">'info'</span>,</span><br><span class="line">  format: format.combine(</span><br><span class="line">    format.timestamp(),</span><br><span class="line">    format.printf(<span class="function">(<span class="params">&#123; timestamp, level, message &#125;</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;timestamp&#125;</span> <span class="subst">$&#123;level&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">  ),</span><br><span class="line">  transports: [</span><br><span class="line">    <span class="keyword">new</span> transports.Console(),</span><br><span class="line">    <span class="keyword">new</span> transports.File(&#123; <span class="attr">filename</span>: <span class="string">'app.log'</span> &#125;),</span><br><span class="line">    <span class="keyword">new</span> transports.File(&#123; <span class="attr">filename</span>: <span class="string">'error.log'</span>, <span class="attr">level</span>: <span class="string">'error'</span> &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logger;</span><br></pre></td></tr></table></figure><ul><li><strong>transports.File({ filename: ‘error.log’, level: ‘error’ }):</strong> 오류 메시지를 별도의 파일에 기록합니다.</li></ul><h2 id="사용자-정의-로그-레벨-생성">사용자 정의 로그 레벨 생성</h2><p>Winston에서 사용자 지정 로그 레벨을 직접 정의할 수 있습니다. 이 기능은 기본 레벨에서 다루지 않는 특정 요구 사항이 있는 경우에 유용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logger.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; createLogger, format, transports, config &#125; = <span class="built_in">require</span>(<span class="string">'winston'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> customLevels = &#123;</span><br><span class="line">  levels: &#123;</span><br><span class="line">    critical: <span class="number">0</span>,</span><br><span class="line">    error: <span class="number">1</span>,</span><br><span class="line">    warn: <span class="number">2</span>,</span><br><span class="line">    info: <span class="number">3</span>,</span><br><span class="line">    debug: <span class="number">4</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  colors: &#123;</span><br><span class="line">    critical: <span class="string">'red'</span>,</span><br><span class="line">    error: <span class="string">'red'</span>,</span><br><span class="line">    warn: <span class="string">'yellow'</span>,</span><br><span class="line">    info: <span class="string">'green'</span>,</span><br><span class="line">    debug: <span class="string">'blue'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = createLogger(&#123;</span><br><span class="line">  levels: customLevels.levels,</span><br><span class="line">  level: <span class="string">'info'</span>, <span class="comment">// Set the default log level</span></span><br><span class="line">  format: format.combine(</span><br><span class="line">    format.colorize(&#123; <span class="attr">all</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    format.timestamp(),</span><br><span class="line">    format.printf(<span class="function">(<span class="params">&#123; timestamp, level, message &#125;</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;timestamp&#125;</span> <span class="subst">$&#123;level&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">  ),</span><br><span class="line">  transports: [<span class="keyword">new</span> transports.Console(), <span class="keyword">new</span> transports.File(&#123; <span class="attr">filename</span>: <span class="string">'app.log'</span> &#125;)],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">winston.addColors(customLevels.colors);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logger;</span><br></pre></td></tr></table></figure><ul><li><strong>customLevels:</strong> 사용자 지정 로깅 레벨과 해당 색상을 정의합니다.</li><li><strong>winston.addColors:</strong> 로깅 레벨에 사용자 지정 색상을 적용합니다.</li></ul><h2 id="일일-로그-파일에-로깅하기">일일 로그 파일에 로깅하기</h2><p><code>winston-daily-rotate-file</code> 전송을 사용하여 매일 새 로그 파일을 만들 수 있습니다.</p><p><code>winston-daily-rotate-file</code>을 설치합니다:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install winston-daily-rotate-file</span><br></pre></td></tr></table></figure><p>매일 로테이션 파일 전송을 구성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logger.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; createLogger, format, transports &#125; = <span class="built_in">require</span>(<span class="string">'winston'</span>);</span><br><span class="line"><span class="keyword">const</span> DailyRotateFile = <span class="built_in">require</span>(<span class="string">'winston-daily-rotate-file'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = createLogger(&#123;</span><br><span class="line">  level: <span class="string">'info'</span>,</span><br><span class="line">  format: format.combine(</span><br><span class="line">    format.timestamp(),</span><br><span class="line">    format.printf(<span class="function">(<span class="params">&#123; timestamp, level, message &#125;</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;timestamp&#125;</span> <span class="subst">$&#123;level&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">  ),</span><br><span class="line">  transports: [</span><br><span class="line">    <span class="keyword">new</span> transports.Console(),</span><br><span class="line">    <span class="keyword">new</span> DailyRotateFile(&#123;</span><br><span class="line">      filename: <span class="string">'application-%DATE%.log'</span>,</span><br><span class="line">      datePattern: <span class="string">'YYYY-MM-DD'</span>,</span><br><span class="line">      zippedArchive: <span class="literal">true</span>,</span><br><span class="line">      maxSize: <span class="string">'20m'</span>,</span><br><span class="line">      maxFiles: <span class="string">'14d'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logger;</span><br></pre></td></tr></table></figure><ul><li><strong>DailyRotateFile:</strong> 지정된 날짜 패턴으로 매일 새 로그 파일을 만듭니다.</li><li><strong>zippedArchive:</strong> 이전 로그 파일을 압축합니다.</li><li><strong>maxSize:</strong> 회전하기 전 로그 파일의 최대 크기입니다.</li><li><strong>maxFiles:</strong> 로그 파일을 보관할 수 있는 최대 일수입니다.</li></ul><h2 id="Express-애플리케이션에서-Winston-사용">Express 애플리케이션에서 Winston 사용</h2><p>Winston을 Express 애플리케이션에 통합하여 HTTP 요청 및 오류에 대한 로깅을 처리합니다.</p><p>Express를 설치합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><p>Winston으로 Express 서버를 설정합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'./logger'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP 요청 로깅</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  logger.http(<span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span>`</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'Hello, World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 오류 처리 미들웨어</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  logger.error(err.message);</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">'Internal Server Error'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, () =&gt; &#123;</span><br><span class="line">  logger.info(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>HTTP 요청 로깅:</strong> 미들웨어는 <code>logger.http</code>를 사용하여 들어오는 모든 HTTP 요청을 기록합니다.</li><li><strong>오류 처리 미들웨어:</strong> <code>logger.error</code>를 사용하여 오류를 기록합니다.</li></ul><h2 id="결론">결론</h2><p>Winston을 Node.js 애플리케이션에 통합하면 코드를 보다 효과적으로 디버그, 모니터링 및 유지 관리하는 데 도움이 되는 강력하고 유연한 로깅 시스템을 만들 수 있습니다. 콘솔, 파일 또는 외부 서비스에 로깅해야 하는 경우 Winston의 풍부한 기능 세트는 Node.js 로깅을 위한 탁월한 선택입니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/09/20/nodejs-8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>꼭 사용해봐야 할 11가지 VS Code 테마</title>
      <link>http://hgko1207.github.io/2024/09/20/info-26/</link>
      <guid>http://hgko1207.github.io/2024/09/20/info-26/</guid>
      <pubDate>Fri, 20 Sep 2024 03:54:23 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/info-26.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;VS Code는 개발자들 사이에서 가장 인기 있는 코드 편집기 중 하나입니다. VS Code의 가장 매력적인 측면 중 하나는 테마를 통해 개인화할 수 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/info-26.png" alt=""></p><p>VS Code는 개발자들 사이에서 가장 인기 있는 코드 편집기 중 하나입니다. VS Code의 가장 매력적인 측면 중 하나는 테마를 통해 개인화할 수 있다는 점입니다. 테마는 코딩을 더 즐겁게 만들고, 눈의 피로를 줄여주며, 집중력을 향상시킬 수 있습니다.</p><p>이 글에서는 여러분이 꼭 사용해 보아야 할 11가지 VS Code 테마를 소개합니다.</p><h2 id="Tokyo-Night"><a href="https://marketplace.visualstudio.com/items?itemName=enkia.tokyo-night" target="_blank" rel="noopener">Tokyo Night</a></h2><p><img src="/images/header/info-26_1.png" alt=""></p><p><strong>설치:</strong> 1,678,000+<br><strong>특징:</strong></p><ul><li>어둡고 밝은 테마</li><li>눈의 피로를 줄이기 위한 색상 디자인</li><li>가독성 향상을 위한 뛰어난 구문 강조 표시</li></ul><h2 id="Dracula"><a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula" target="_blank" rel="noopener">Dracula</a></h2><p><img src="/images/header/info-26_2.png" alt=""></p><p><strong>설치:</strong> 7,662,000+<br><strong>특징:</strong></p><ul><li>밝은 색상의 어두운 테마</li><li>가독성 향상을 위한 생생한 색상</li><li>멋진 스타일로 많은 개발자에게 사랑받는 테마</li></ul><h2 id="Synthwave-84"><a href="https://marketplace.visualstudio.com/items?itemName=RobbOwen.synthwave-vscode" target="_blank" rel="noopener">Synthwave '84</a></h2><p><img src="/images/header/info-26_3.png" alt=""></p><p><strong>설치:</strong> 1,978,100+<br><strong>특징</strong></p><ul><li>1980년대에서 영감을 받은 레트로한 미래지향적 네온 컬러</li><li>진정한 Synthwave 경험을 위한 독특한 글로우 효과 제공</li><li>재미있고 화려한 테마를 원한다면 완벽함</li></ul><h2 id="One-Dark-Pro-Darker"><a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme" target="_blank" rel="noopener">One Dark Pro Darker</a></h2><p><img src="/images/header/info-26_4.png" alt=""></p><p><strong>설치:</strong> 9,830,100+<br><strong>특징:</strong></p><ul><li>Atom의 One Dark 테마 기반</li><li>더 깊은 대비와 눈의 피로를 줄여주는 더 어두운 테마</li><li>깔끔하고 전문적인 외관</li></ul><h2 id="Monokai-Pro"><a href="https://marketplace.visualstudio.com/items?itemName=monokai.theme-monokai-pro-vscode" target="_blank" rel="noopener">Monokai Pro</a></h2><p><img src="/images/header/info-26_5.png" alt=""></p><p><strong>설치:</strong> 3,077,300+<br><strong>특징:</strong></p><ul><li>클래식 Monokai 테마 기반</li><li>하나의 패키지에 다양한 색상 구성</li><li>부드러운 색상과 가독성</li></ul><h2 id="Catppuccin"><a href="https://marketplace.visualstudio.com/items?itemName=Catppuccin.catppuccin-vsc" target="_blank" rel="noopener">Catppuccin</a></h2><p><img src="/images/header/info-26_6.png" alt=""></p><p><strong>설치:</strong> 438,360+<br><strong>특징:</strong></p><ul><li>부드러운 파스텔 색상 팔레트</li><li>라떼, 프라페, 마끼아또, 모카와 같은 다양한 버전</li><li>눈이 편하고 보기 좋은 디자인</li></ul><h2 id="GitHub-Dark-Default-Theme"><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme" target="_blank" rel="noopener">GitHub Dark Default Theme</a></h2><p><img src="/images/header/info-26_7.png" alt=""></p><p><strong>설치:</strong> 14,301,800+<br><strong>특징:</strong></p><ul><li>GitHub의 공식 다크 테마</li><li>GitHub의 다크 모드를 사용하는 경우 일관된 모양을 제공합니다.</li><li>깔끔하고 미니멀하며 눈이 편함</li></ul><h2 id="Night-Owl"><a href="https://marketplace.visualstudio.com/items?itemName=sdras.night-owl" target="_blank" rel="noopener">Night Owl</a></h2><p><img src="/images/header/info-26_8.png" alt=""></p><p><strong>설치:</strong> 2,693,100+<br><strong>특징:</strong></p><ul><li>야간 코딩을 위해 특별히 설계</li><li>저조도 환경에서도 눈이 편안한 고대비 색상</li><li>심야 코딩 세션에 탁월</li></ul><h2 id="Relaxed"><a href="https://marketplace.visualstudio.com/items?itemName=mischah.relaxed-theme" target="_blank" rel="noopener">Relaxed</a></h2><p><img src="/images/header/info-26_9.png" alt=""></p><p><strong>설치:</strong> 28,680+<br><strong>특징:</strong></p><ul><li>부드럽고 차분한 색상</li><li>장시간 코딩 세션 시 눈의 피로를 줄여줍니다.</li><li>스트레스 없는 코딩 경험을 위한 차분하고 편안한 테마</li></ul><h2 id="Winter-Is-Coming"><a href="https://marketplace.visualstudio.com/items?itemName=johnpapa.winteriscoming" target="_blank" rel="noopener">Winter Is Coming</a></h2><p><img src="/images/header/info-26_10.png" alt=""></p><p><strong>설치:</strong> 3,014,600+<br><strong>특징:</strong></p><ul><li>다크, 라이트, 블루 버전 제공</li><li>“왕좌의 게임” 시리즈에서 영감을 얻음</li><li>다양한 취향에 맞는 다양한 옵션 제공</li></ul><h2 id="Nord"><a href="https://marketplace.visualstudio.com/items?itemName=arcticicestudio.nord-visual-studio-code" target="_blank" rel="noopener">Nord</a></h2><p><img src="/images/header/info-26_11.png" alt=""></p><p><strong>설치:</strong> 998,830+<br><strong>특징:</strong></p><ul><li>시원하고 icy 색상 구성</li><li>미니멀하고 깔끔한 디자인에 집중</li><li>시원하고 차분한 색상과 프로페셔널한 룩으로 인기</li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/09/20/info-26/#disqus_thread</comments>
    </item>
    
    <item>
      <title>고급 자바스크립트 트릭 10가지 소개</title>
      <link>http://hgko1207.github.io/2024/09/20/js-dev-25/</link>
      <guid>http://hgko1207.github.io/2024/09/20/js-dev-25/</guid>
      <pubDate>Fri, 20 Sep 2024 02:07:02 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/js-dev-24.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;자바스크립트는 개발 프로세스를 더 효율적으로 만들고 코드를 더 깔끔하게 만들 수 있는 많은 숨겨진 기능을 갖춘 다목적 언어입니다. 여러분이 잘 모르
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/js-dev-24.png" alt=""></p><p>자바스크립트는 개발 프로세스를 더 효율적으로 만들고 코드를 더 깔끔하게 만들 수 있는 많은 숨겨진 기능을 갖춘 다목적 언어입니다. 여러분이 잘 모르지만 코딩 실력을 크게 향상시킬 수 있는 고급 자바스크립트 트릭 10가지를 소개합니다.</p><h2 id="1-Aliasing을-사용한-구조-분해">1. Aliasing을 사용한 구조 분해</h2><p>구조조정을 사용하면 배열의 값이나 객체의 속성을 별개의 변수로 압축을 풀 수 있습니다. 에일리어싱(Aliasing)을 사용하면 이 과정에서 변수 이름을 변경할 수 있으므로 API와 같은 외부 소스의 데이터를 다룰 때 특히 유용합니다.</p><ul><li><strong>사용 사례:</strong> API에서 데이터를 가져올 경우 코드 가독성과 유지보수성을 높이기 위해 프로퍼티에 더 의미 있는 이름을 부여하고 싶을 때.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apiResponse = &#123; <span class="attr">first_name</span>: <span class="string">'John'</span>, <span class="attr">user_age</span>: <span class="number">30</span>, <span class="attr">address</span>: &#123; <span class="attr">city</span>: <span class="string">'New York'</span>, <span class="attr">zip</span>: <span class="string">'10001'</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  first_name: firstName,</span><br><span class="line">  user_age: age,</span><br><span class="line">  address: &#123; <span class="attr">city</span>: hometown, <span class="attr">zip</span>: postalCode &#125;,</span><br><span class="line">&#125; = apiResponse;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstName); <span class="comment">// John</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(hometown); <span class="comment">// New York</span></span><br><span class="line"><span class="built_in">console</span>.log(postalCode); <span class="comment">// 10001</span></span><br></pre></td></tr></table></figure><p>왜 사용하는가? 변수 이름을 보다 명확하고 직관적으로 만들어 코드 가독성과 유지보수를 개선하는 데 도움이 됩니다. 에일리어싱을 사용하면 이름 충돌을 피하고 코드의 명확성을 높여 복잡한 데이터 구조로 작업하기가 더 쉬워집니다.</p><h2 id="2-Currying">2. Currying</h2><p>커링(Currying)은 여러 인수를 받는 함수를 각각 하나의 인수를 받는 일련의 함수로 변환하는 프로세스입니다. 이 기술을 사용하면 보다 유연하고 재사용 가능한 함수를 만들 수 있어 함수형 프로그래밍에 특히 유용할 수 있습니다.</p><ul><li><strong>사용 사례:</strong> 할인 적용을 위해 재사용 가능하고 구성 가능한 함수를 만듭니다. 서로 다른 할인율에 대해 별도의 함수를 작성하는 대신 하나의 커리 함수를 만들 수 있습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> applyDiscount = <span class="function">(<span class="params">discount</span>) =&gt;</span> <span class="function">(<span class="params">price</span>) =&gt;</span> price - (price * discount) / <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> tenPercentOff = applyDiscount(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> twentyPercentOff = applyDiscount(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tenPercentOff(<span class="number">100</span>)); <span class="comment">// 90</span></span><br><span class="line"><span class="built_in">console</span>.log(twentyPercentOff(<span class="number">100</span>)); <span class="comment">// 80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> applyTax = <span class="function">(<span class="params">taxRate</span>) =&gt;</span> <span class="function">(<span class="params">price</span>) =&gt;</span> price + (price * taxRate) / <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> applyTenPercentTax = applyTax(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(applyTenPercentTax(<span class="number">100</span>)); <span class="comment">// 110</span></span><br><span class="line"><span class="built_in">console</span>.log(applyTenPercentTax(twentyPercentOff(<span class="number">100</span>))); <span class="comment">// 88</span></span><br></pre></td></tr></table></figure><p>왜 사용하는가? 함수에 인수를 미리 설정할 수 있어 보다 모듈화되고 컴포저블한 코드를 만들 수 있습니다. 재사용 가능성이 높은 유틸리티 함수의 생성을 크게 간소화하여 코드베이스를 더 깔끔하고 유지 관리하기 쉽게 만들 수 있습니다. 커링은 함수를 부분적으로 적용하거나 다른 구성으로 재사용해야 하는 시나리오에서 특히 유용합니다.</p><h2 id="3-Debouncing-및-Throttling">3. Debouncing 및 Throttling</h2><p>디바운싱(Debouncing)과 쓰로틀링(Throttling)은 함수가 실행되는 빈도를 제어하는 기술입니다. 특히 성능을 저하시킬 수 있는 과도한 함수 호출을 방지하기 위해 이벤트 핸들러를 최적화하는 데 유용합니다.</p><h3 id="Debouncing">Debouncing</h3><p>디바운싱은 마지막 호출 이후 일정 시간이 경과할 때까지 함수가 다시 호출되지 않도록 합니다. 이는 검색 입력 필드와 같이 사용자가 입력을 멈출 때까지 기다렸다가 API 호출을 하고자 하는 시나리오에 유용합니다.</p><ul><li><strong>사용 사례:</strong> 검색 입력 필드를 최적화하여 API 호출 횟수를 줄입니다. 이렇게 하면 사용자가 입력을 마친 후에만 검색을 시작하여 서버 과부하를 방지하고 사용자 환경을 개선할 수 있습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeoutId;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    clearTimeout(timeoutId);</span><br><span class="line">    timeoutId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> func.apply(<span class="keyword">this</span>, args), delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> search = debounce(<span class="function">(<span class="params">query</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Searching for <span class="subst">$&#123;query&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// Imagine an API call here</span></span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'searchInput'</span>).addEventListener(<span class="string">'input'</span>, (event) =&gt; &#123;</span><br><span class="line">  search(event.target.value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>사용자가 트리거 동작을 중단한 후에만 함수가 호출되도록 함으로써 불필요한 함수 호출 횟수를 줄여 성능과 사용자 경험을 개선합니다. 네트워크 요청이나 무거운 계산이 수반되는 작업에 특히 유용합니다.</p><h3 id="Throttling">Throttling</h3><p>쓰로틀링은 함수가 지정된 기간에 최대 한 번만 호출되도록 합니다. 이는 함수 호출 빈도를 제한하려는 스크롤 이벤트와 같은 시나리오에 유용합니다.</p><ul><li><strong>사용 사례:</strong> 스크롤 이벤트 처리를 최적화하여 성능을 개선합니다. 이를 통해 브라우저가 너무 많은 이벤트 호출에 압도되는 것을 방지하여 보다 원활하고 반응이 빠른 상호작용을 보장할 수 있습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lastCall = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">if</span> (now - lastCall &gt;= interval) &#123;</span><br><span class="line">      lastCall = now;</span><br><span class="line">      func.apply(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleScroll = throttle(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Scrolled'</span>);</span><br><span class="line">  <span class="comment">// Imagine complex calculations or DOM updates here</span></span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, handleScroll);</span><br></pre></td></tr></table></figure><p>함수가 제어된 간격으로 호출되도록 하여 성능 문제를 방지하고 브라우저의 부하를 줄이며 더 나은 사용자 경험을 제공합니다. 쓰로틀링은 스크롤 또는 크기 조정 이벤트와 같이 자주 트리거될 수 있는 이벤트 리스너에 특히 유용합니다.</p><h2 id="4-Memoization">4. Memoization</h2><p>Memoization은 비용이 많이 드는 함수 호출의 결과를 캐시하고 동일한 입력이 다시 발생할 때 캐시된 결과를 반환하는 최적화 기법입니다. 이를 통해 연산량이 많은 함수, 특히 동일한 인수로 자주 호출되는 함수의 성능을 크게 향상시킬 수 있습니다.</p><ul><li><strong>사용 사례:</strong> 피보나치 계산과 같은 재귀 함수의 성능을 개선합니다. Memoization 기능이 없으면 피보나치 함수를 호출할 때마다 같은 값을 여러 번 중복 계산하게 되어 시간이 기하급수적으로 복잡해집니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoize = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="built_in">JSON</span>.stringify(args);</span><br><span class="line">    <span class="keyword">if</span> (!cache[key]) &#123;</span><br><span class="line">      cache[key] = fn(...args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[key];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fibonacci = memoize(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">  <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fibonacci(<span class="number">40</span>)); <span class="comment">// 102334155</span></span><br></pre></td></tr></table></figure><p>중복 계산을 방지하여 입력이 반복되는 함수의 성능을 크게 향상시킵니다. Memoization은 비효율적이고 반복적인 계산을 관리 가능한 선형 시간 연산으로 전환할 수 있으므로 성능 집약적인 작업을 최적화하는 데 필수적인 기술입니다.</p><h2 id="5-Proxy">5. Proxy</h2><p>프록시 객체를 사용하면 다른 객체에 대한 프록시를 생성하여 속성 조회, 할당, 열거, 함수 호출 등과 같은 기본 연산을 가로채고 재정의할 수 있습니다. 이를 통해 객체에 사용자 지정 동작을 추가할 수 있는 강력한 방법을 제공합니다.</p><ul><li><strong>사용 사례:</strong> 객체 속성 액세스 및 할당에 대한 유효성 검사 및 로깅. 예를 들어, 유형 제약 조건을 적용하고 액세스 시도를 기록하여 더 나은 제어 및 디버깅 기능을 제공할 수 있습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">'John'</span>,</span><br><span class="line">  age: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="keyword">get</span>: (target, prop) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Getting <span class="subst">$&#123;prop&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> target[prop];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>: (target, prop, value) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">'age'</span> &amp;&amp; <span class="keyword">typeof</span> value !== <span class="string">'number'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Age must be a number'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Setting <span class="subst">$&#123;prop&#125;</span> to <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    target[prop] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxyUser = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user, handler);</span><br><span class="line"><span class="built_in">console</span>.log(proxyUser.name); <span class="comment">// Getting name, John</span></span><br><span class="line">proxyUser.age = <span class="number">35</span>; <span class="comment">// Setting age to 35</span></span><br><span class="line"><span class="comment">// proxyUser.age = '35'; // Throws TypeError</span></span><br></pre></td></tr></table></figure><p>유효성 검사, 로깅 등과 같은 객체 작업에 대한 사용자 정의 동작을 허용하여 객체 조작에 대한 제어를 강화합니다. 프록시는 액세스 제어 및 데이터 바인딩과 같은 복잡한 로직을 구현하는 데에도 사용할 수 있습니다. 따라서 프록시는 객체의 동작을 관리하고 확장하기 위한 다용도 도구입니다.</p><h2 id="6-Generators">6. Generators</h2><p>제너레이터는 종료했다가 나중에 다시 입력할 수 있는 함수로, 재입력 시에도 컨텍스트와 변수 바인딩을 유지합니다. 제너레이터는 반복기를 구현하고 비동기 작업을 동기식처럼 처리하는 데 유용합니다.</p><ul><li><strong>사용 사례:</strong> 사용자 지정 객체 탐색을 위한 iterator 구현. 제너레이터는 사용자 정의 반복 동작을 정의하는 간단한 방법을 제공하여 복잡한 데이터 구조를 쉽게 순회할 수 있도록 해줍니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">objectEntries</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [key, obj[key]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">city</span>: <span class="string">'New York'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> objectEntries(user)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// name: John</span></span><br><span class="line"><span class="comment">// age: 30</span></span><br><span class="line"><span class="comment">// city: New York</span></span><br></pre></td></tr></table></figure><p>제너레이터를 사용하면 복잡한 반복 로직과 비동기 프로세스를 보다 쉽게 처리할 수 있어 코드 가독성과 유지 관리가 용이해집니다. 또한 <code>co</code>와 같은 라이브러리를 사용하여 보다 간단하고 선형적인 방식으로 비동기 작업을 관리하는 등의 작업에도 사용할 수 있습니다.</p><h2 id="7-Console-활용하기">7. Console 활용하기</h2><ul><li><strong>사용 사례:</strong> 복잡한 객체 디버깅을 위한 로깅 개선. <code>console.table</code>, <code>console.group</code>, <code>console.time</code>과 같은 콘솔 메서드는 보다 체계적이고 유익한 디버그 정보를 제공할 수 있습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic logging</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Simple log'</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'This is an error'</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'This is a warning'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logging tabular data</span></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">city</span>: <span class="string">'New York'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Jane'</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">city</span>: <span class="string">'San Francisco'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.table(users);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Grouping logs</span></span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">'User Details'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'User 1: John'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'User 2: Jane'</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Timing code execution</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'Timer'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// Some heavy computation</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'Timer'</span>);</span><br></pre></td></tr></table></figure><p>디버깅 정보의 가시성과 정리가 향상되어 문제를 더 쉽게 진단하고 해결할 수 있습니다. 콘솔 방법을 올바르게 사용하면 명확하고 체계적이며 상세한 로그를 제공함으로써 디버깅 프로세스의 효율성을 크게 향상시킬 수 있습니다.</p><h2 id="8-structuredClone을-사용한-구조화된-복제">8. <code>structuredClone</code>을 사용한 구조화된 복제</h2><p>새로운 <code>structuredClone</code>을 사용하여 오브젝트를 Deep Clone합니다. 기존의 얕은 복사본과 달리 구조화된 복제는 개체의 깊은 복사본을 만들어 중첩된 개체도 복사되도록 합니다. 이 방법은 함수, 정의되지 않은 참조, 순환 참조와 같은 특정 데이터 유형을 처리할 수 없는 <code>JSON.parse(JSON.stringify(obj))</code>의 한계를 피할 수 있습니다.</p><ul><li><strong>사용 사례:</strong> 복잡한 객체의 심층 사본 생성. 원본 데이터를 변경해서는 안 되는 작업을 위해 객체를 복제해야 할 때 유용합니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  date: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">  arr: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  nestedArr: [&#123; <span class="attr">d</span>: <span class="number">4</span> &#125;],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> clonedObj = structuredClone(obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clonedObj);</span><br><span class="line"><span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125;, date: 2024-09-20T00:00:00.000Z, arr: [1, 2, 3], nestedArr: [&#123; d: 4 &#125;] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(clonedObj === obj); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(clonedObj.b === obj.b); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(clonedObj.date === obj.date); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(clonedObj.arr === obj.arr); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(clonedObj.nestedArr[<span class="number">0</span>] === obj.nestedArr[<span class="number">0</span>]); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>이 메서드는 <code>JSON.parse(JSON.stringify(obj))</code>와 같은 대안보다 더 안정적이며 복잡한 데이터 구조를 더 잘 처리합니다.</p><h2 id="9-자체-호출-Self-Invoking-함수">9. 자체 호출(Self-Invoking) 함수</h2><p>즉시 호출 함수 표현식(Immediately Invoked Function Expressions, IIFE)이라고도 하는 자체 호출(Self-Invoking) 함수는 생성된 후 자동으로 실행됩니다. 코드를 캡슐화하여 전역 범위를 오염시키지 않도록 하는 데 유용하며, 이는 깔끔하고 모듈화된 코드를 유지하는 데 필수적입니다.</p><ul><li><strong>사용 사례:</strong> 코드를 캡슐화하여 전역 범위의 오염을 방지합니다. 이 기술은 블록 범위(let 및 const)를 사용할 수 없는 구형 JavaScript 환경이나 초기화 로직에 즉각적인 실행이 필요한 시나리오에서 특히 유용합니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> privateVar = <span class="string">'This is private'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Self-invoking function runs immediately'</span>);</span><br><span class="line">  <span class="comment">// Initialization code here</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Private variables are not accessible from outside</span></span><br><span class="line"><span class="comment">// console.log(privateVar); // ReferenceError: privateVar is not defined</span></span><br></pre></td></tr></table></figure><p>전역 변수를 피하고 전역 범위에 흔적을 남기지 않고 초기화 코드를 실행하여 깔끔한 코드를 유지하는 데 도움이 됩니다. 이 접근 방식은 대규모 코드베이스에서 충돌을 방지하고 기능을 더 잘 캡슐화하여 코드 유지보수성을 개선하고 부작용을 방지할 수 있습니다.</p><h2 id="10-Tagged-Template-Literals">10. Tagged Template Literals</h2><p>국제화, HTML 위생 처리 또는 동적 SQL 쿼리 생성 등 특수 템플릿을 만들 때 유용합니다.</p><ul><li><strong>사용 사례:</strong> HTML 템플릿에서 사용자 입력을 위생 처리하여 XSS 공격을 방지합니다. 이 기술을 사용하면 악성 스크립트를 실행하지 않고도 사용자가 생성한 콘텐츠를 DOM에 안전하게 삽입할 수 있습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sanitize</span>(<span class="params">strings, ...values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> strings.reduce(<span class="function">(<span class="params">result, string, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = values[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'string'</span>) &#123;</span><br><span class="line">      value = value</span><br><span class="line">        .replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp;'</span>)</span><br><span class="line">        .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>)</span><br><span class="line">        .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">        .replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>)</span><br><span class="line">        .replace(<span class="regexp">/'/g</span>, <span class="string">'&amp;#39;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result + value + string;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userInput = <span class="string">'&lt;script&gt;alert("xss")&lt;/script&gt;'</span>;</span><br><span class="line"><span class="keyword">const</span> message = sanitize<span class="string">`User input: <span class="subst">$&#123;userInput&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// User input: &amp;lt;script&amp;gt;alert("xss")&amp;lt;/script&amp;gt;</span></span><br></pre></td></tr></table></figure><p>Template Literal의 출력을 제어하고 사용자 정의할 수 있는 강력한 메커니즘을 제공하여 보다 안전하고 유연한 템플릿 생성을 가능하게 합니다. 보안을 강화하고, 문자열 형식을 지정하고, 동적 콘텐츠를 생성하여 코드의 견고성과 다양성을 향상시킬 수 있습니다.</p><h2 id="결론">결론</h2><p>자바스크립트는 더 깔끔하고 효율적인 코드를 작성하는 데 도움이 되는 기능이 풍부한 언어입니다. 이러한 고급 트릭을 코딩 작업에 통합하면 생산성을 향상하고 코드의 가독성을 높일 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/09/20/js-dev-25/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[자바스크립트] 자주 사용하는 한 줄 코드 11가지</title>
      <link>http://hgko1207.github.io/2024/09/20/js-dev-24/</link>
      <guid>http://hgko1207.github.io/2024/09/20/js-dev-24/</guid>
      <pubDate>Fri, 20 Sep 2024 01:38:27 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/js-dev-24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;프로젝트를 만드는 데 많은 도움이 되었던 가장 유용하고 간단한 JavaScript 한 줄짜리 코드를 공유하고자 합니다.&lt;/p&gt;
&lt;p&gt;워크플로우를
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/js-dev-24.png" alt="" /></p><p>프로젝트를 만드는 데 많은 도움이 되었던 가장 유용하고 간단한 JavaScript 한 줄짜리 코드를 공유하고자 합니다.</p><p>워크플로우를 간소화하기 위해 매일 사용하는 자바스크립트 one-liners 10가지를 소개합니다. 이 코드은 간단하지만 강력하며 최소한의 노력으로 앱의 성능과 기능을 향상시킵니다.</p><h2 id="1-배열이-비어-있는지-확인"><a class="markdownIt-Anchor" href="#1-배열이-비어-있는지-확인"></a> 1. 배열이 비어 있는지 확인</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEmpty = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr.length === <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>배열에 요소가 없는지 확인합니다.</p><h2 id="2-현재-타임스탬프-가져오기"><a class="markdownIt-Anchor" href="#2-현재-타임스탬프-가져오기"></a> 2. 현재 타임스탬프 가져오기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timestamp = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Date</span>.now();</span><br></pre></td></tr></table></figure><p>1970년 1월 1일 이후의 밀리초 수를 반환합니다. 이를 사용 가능한 날짜로 변환하려면 다음 코드를 적용하면 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(timestamp).toLocaleString();</span><br></pre></td></tr></table></figure><h2 id="3-배열-복제하기"><a class="markdownIt-Anchor" href="#3-배열-복제하기"></a> 3. 배열 복제하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cloneArray = <span class="function">(<span class="params">arr</span>) =&gt;</span> [...arr];</span><br></pre></td></tr></table></figure><p>배열의 얕은 복사본을 생성합니다.</p><h2 id="4-배열에서-잘못된-값-제거하기"><a class="markdownIt-Anchor" href="#4-배열에서-잘못된-값-제거하기"></a> 4. 배열에서 잘못된 값 제거하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> removeFalsy = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr.filter(<span class="built_in">Boolean</span>);</span><br></pre></td></tr></table></figure><p>배열에서 <code>false</code>, <code>null</code>, <code>0</code>, <code>&quot;&quot;</code>, <code>undefined</code>, <code>NaN</code>과 같은 값을 제거합니다.</p><h2 id="5-문자열-배열을-대문자로-변환하기"><a class="markdownIt-Anchor" href="#5-문자열-배열을-대문자로-변환하기"></a> 5. 문자열 배열을 대문자로 변환하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toUpperCaseArray = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr.map(<span class="function">(<span class="params">s</span>) =&gt;</span> s.toUpperCase());</span><br></pre></td></tr></table></figure><p>배열의 모든 문자열 요소를 대문자로 변환합니다.</p><h2 id="6-배열의-모든-숫자-합하기"><a class="markdownIt-Anchor" href="#6-배열의-모든-숫자-합하기"></a> 6. 배열의 모든 숫자 합하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>배열에 있는 숫자의 총합을 계산합니다.</p><h2 id="7-배열에서-임의의-요소-가져오기"><a class="markdownIt-Anchor" href="#7-배열에서-임의의-요소-가져오기"></a> 7. 배열에서 임의의 요소 가져오기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomElement = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr.length)];</span><br></pre></td></tr></table></figure><p>배열에서 임의의(random) 요소를 반환합니다.</p><h2 id="8-임의의-16진수-색상-생성하기"><a class="markdownIt-Anchor" href="#8-임의의-16진수-색상-생성하기"></a> 8. 임의의 16진수 색상 생성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomHexColor = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="string">`#<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">0xffffff</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">    .toString(<span class="number">16</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">    .padStart(<span class="number">6</span>, <span class="string">'0'</span>)&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><p>임의의(random) 16진수 색상 코드를 생성합니다.</p><h2 id="9-함수-디바운스debounce하기"><a class="markdownIt-Anchor" href="#9-함수-디바운스debounce하기"></a> 9. 함수 디바운스(Debounce)하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> fn(...args), delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>실행을 지연시켜 함수가 실행될 수 있는 속도를 제한합니다.</p><h2 id="10-함수-제한"><a class="markdownIt-Anchor" href="#10-함수-제한"></a> 10. 함수 제한</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, limit</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> lastFunc;</span><br><span class="line">  <span class="keyword">let</span> lastRan;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!lastRan) &#123;</span><br><span class="line">      fn(...args);</span><br><span class="line">      lastRan = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      clearTimeout(lastFunc);</span><br><span class="line">      lastFunc = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Date</span>.now() - lastRan &gt;= limit) &#123;</span><br><span class="line">          fn(...args);</span><br><span class="line">          lastRan = <span class="built_in">Date</span>.now();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, limit - (<span class="built_in">Date</span>.now() - lastRan));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>함수가 실행될 수 있는 속도를 지정된 시간 간격당 한 번으로 제한합니다.</p><h2 id="11-문자열에서-html-이스케이프"><a class="markdownIt-Anchor" href="#11-문자열에서-html-이스케이프"></a> 11. 문자열에서 HTML 이스케이프</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> escapeHTML = <span class="function">(<span class="params">str</span>) =&gt;</span></span><br><span class="line">  str.replace(<span class="regexp">/[&amp;&lt;&gt;"']/g</span>, (match) =&gt; (&#123; <span class="string">'&amp;'</span>: <span class="string">'&amp;amp;'</span>, <span class="string">'&lt;'</span>: <span class="string">'&amp;lt;'</span>, <span class="string">'&gt;'</span>: <span class="string">'&amp;gt;'</span>, <span class="string">'"'</span>: <span class="string">'&amp;quot;'</span>, <span class="string">"'"</span>: <span class="string">'&amp;#39;'</span> &#125;[match]));</span><br></pre></td></tr></table></figure><p>특수 HTML 문자를 이스케이프(Escape) 처리하여 XSS 공격을 방지합니다.</p><h2 id="마무리"><a class="markdownIt-Anchor" href="#마무리"></a> 마무리</h2><p>이러한 코드를 일상적으로 사용하면 프로젝트의 보안과 기능을 효율적이고 효과적으로 향상시킬 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/09/20/js-dev-24/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Node.js] 필수 NPM 패키지 알아보기</title>
      <link>http://hgko1207.github.io/2024/08/20/nodejs-7/</link>
      <guid>http://hgko1207.github.io/2024/08/20/nodejs-7/</guid>
      <pubDate>Tue, 20 Aug 2024 05:55:20 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/nodejs-7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;속도와 확장성, 활발한 패키지 및 도구 에코시스템으로 인해 &lt;strong&gt;Node.js&lt;/strong&gt;는 백엔드 개발에서 가장 많이 선택되는 언어가 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/nodejs-7.png" alt=""></p><p>속도와 확장성, 활발한 패키지 및 도구 에코시스템으로 인해 <strong>Node.js</strong>는 백엔드 개발에서 가장 많이 선택되는 언어가 되었습니다. 이 에코시스템의 중심에는 NPM(Node Package Manager)이 있으며, 수천 개의 패키지를 제공하여 Node.js 프로젝트를 향상시킵니다. 이 글에서는 Node.js 백엔드 개발을 강화하여 보다 효율적이고 안전하며 풍부한 기능을 제공하는 필수 NPM 패키지를 살펴보겠습니다.</p><h2 id="Node-js-및-NPM-시작하기">Node.js 및 NPM 시작하기</h2><p>필수 패키지를 살펴보기 전에 시스템에 Node.js와 NPM이 설치되어 있는지 확인하세요. Node.js는 공식 웹사이트(<a href="https://nodejs.org/" target="_blank" rel="noopener">https://nodejs.org/</a>)에서 다운로드하여 설치할 수 있으며, NPM은 번들로 제공됩니다. 터미널에서 다음 명령을 실행하여 Node.js와 NPM이 올바르게 설치되었는지 확인합니다</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>두 명령 모두 버전 번호를 반환하면 시작할 준비가 된 것입니다.</p><h2 id="1-Express-js">1. Express.js</h2><p>Express.js는 웹 애플리케이션과 API를 구축하는 데 가장 인기 있고 널리 사용되는 Node.js 프레임워크입니다. 라우팅, 미들웨어 관리, HTTP 요청 처리를 간소화하여 효율적인 백엔드 개발을 위한 필수 패키지입니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><h2 id="2-Mongoose">2. Mongoose</h2><p>Mongoose는 MongoDB 데이터베이스와의 상호 작용을 간소화하는 우아한 MongoDB 객체 모델링 패키지입니다. 스키마와 모델을 정의하는 구조화된 방법을 제공하여 데이터베이스 운영을 보다 효율적이고 오류에 강하도록 만들어 줍니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose --save</span><br></pre></td></tr></table></figure><h2 id="3-Body-parser">3. Body-parser</h2><p>HTTP 요청 본문 구문 분석은 백엔드 개발의 일반적인 작업입니다. body-parser 패키지는 JSON, URL 인코딩 및 기타 요청 본문을 구문 분석하여 이 프로세스를 간소화합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><h2 id="4-Helmet">4. Helmet</h2><p>웹 개발에서 보안은 최우선 순위입니다. Helmet은 HTTP 헤더를 올바르게 설정하고 일반적인 보안 취약성을 완화하여 Express.js 애플리케이션을 보호하는 데 도움이 되는 미들웨어 함수 모음입니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install helmet --save</span><br></pre></td></tr></table></figure><h2 id="5-dotenv">5. dotenv</h2><p>환경 파일에 구성 변수를 저장하는 것은 API 키 및 데이터베이스 URI와 같은 민감한 정보를 안전하게 유지하기 위한 모범 사례입니다. dotenv를 사용하면 <code>.env</code> 파일에서 Node.js 애플리케이션으로 환경 변수를 쉽게 로드할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install dotenv --save</span><br></pre></td></tr></table></figure><h2 id="6-Winston">6. Winston</h2><p>로깅은 애플리케이션을 디버깅하고 모니터링하는 데 매우 중요합니다. Winston은 파일, 콘솔, 외부 서비스 등 다양한 대상에 메시지를 로깅할 수 있는 다목적 로깅 라이브러리입니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install winston --save</span><br></pre></td></tr></table></figure><h2 id="7-Express-validator">7. Express-validator</h2><p>데이터 유효성 검사는 애플리케이션이 유효한 입력을 받도록 보장하는 데 필수적입니다. express-validator는 Express.js 경로 내에서 요청 데이터 유효성 검사 및 정리를 간소화합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-validator --save</span><br></pre></td></tr></table></figure><h2 id="8-jsonwebtoken">8. jsonwebtoken</h2><p>Node.js 애플리케이션의 인증 및 권한 부여를 위해 JWT(JSON Web Token)이 널리 사용됩니다. jsonwebtoken 패키지는 JWT 생성 및 확인을 간소화합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsonwebtoken --save</span><br></pre></td></tr></table></figure><h2 id="9-Passport-js">9. Passport.js</h2><p>보다 포괄적인 인증 솔루션이 필요하다면 OAuth, 로컬 등과 같은 다양한 인증 전략을 지원하는 다목적 미들웨어인 Passport.js를 사용하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install passport --save</span><br></pre></td></tr></table></figure><h2 id="10-Nodemon">10. Nodemon</h2><p>Nodemon은 개발자 친화적인 유틸리티로, Node.js 애플리케이션의 변경 사항을 모니터링하고 서버를 자동으로 다시 시작하여 개발 중에 앱을 수동으로 중지하고 다시 시작하는 수고를 덜어줍니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nodemon --save-dev</span><br></pre></td></tr></table></figure><h2 id="결론">결론</h2><p>효율적인 Node.js 백엔드 개발은 NPM 패키지의 풍부한 에코시스템을 활용하는 데 달려 있습니다. 위에서 언급한 패키지는 HTTP 요청 처리, 애플리케이션 보안, 데이터베이스 관리 및 로깅에 이르기까지 백엔드 개발의 필수적인 측면을 다룹니다. 이러한 패키지를 Node.js 프로젝트에 통합하면 시간을 절약할 수 있을 뿐만 아니라 더욱 강력하고 안전하며 풍부한 기능을 갖춘 백엔드 시스템을 구축할 수 있습니다. 개발을 계속 진행하면서 NPM 레지스트리를 탐색하여 특정 프로젝트 요구 사항을 간소화할 수 있는 더 많은 패키지를 찾아보세요.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/08/20/nodejs-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swagger vs. Postman</title>
      <link>http://hgko1207.github.io/2024/08/20/info-25/</link>
      <guid>http://hgko1207.github.io/2024/08/20/info-25/</guid>
      <pubDate>Tue, 20 Aug 2024 05:35:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/info-25.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;역동적인 API 개발 영역에서 도구는 프로세스를 간소화하고 협업을 강화하며 애플리케이션의 원활한 작동을 보장하는 데 중추적인 역할을 합니다. 이 영역의
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/info-25.png" alt=""></p><p>역동적인 API 개발 영역에서 도구는 프로세스를 간소화하고 협업을 강화하며 애플리케이션의 원활한 작동을 보장하는 데 중추적인 역할을 합니다. 이 영역의 대표적인 두 가지 도구는 각각 고유한 기능과 사용 사례를 제공하는 <strong>Swagger</strong>와 <strong>Postman</strong>입니다. 이 글에서는 Swagger와 Postman의 강점과 활용 사례를 자세히 살펴보고, 특정 요구사항에 따라 정보에 입각한 결정을 내릴 수 있도록 도와드립니다.</p><h2 id="Swagger란-무엇인가요">Swagger란 무엇인가요?</h2><p>현재 OpenAPI 사양으로 알려진 Swagger는 개발자가 RESTful API를 설계, 문서화 및 테스트할 수 있는 오픈 소스 프레임워크입니다. REST API를 설명하는 표준화된 방법을 제공하여 사람과 컴퓨터 모두 소스 코드에 액세스하지 않고도 서비스의 기능을 이해할 수 있도록 해줍니다.</p><h2 id="Swagger의-사용-사례">Swagger의 사용 사례</h2><ul><li><strong>API 문서:</strong> Swagger는 포괄적인 대화형 API 문서를 생성하는 데 탁월합니다. 기계가 읽을 수 있는 형식으로 API를 설명함으로써 개발자가 API를 보다 효율적으로 이해하고 사용할 수 있도록 지원합니다.</li><li><strong>API 디자인:</strong> Swagger를 사용하면 Swagger 에디터를 사용하여 시각적으로 API를 디자인할 수 있습니다. 이러한 시각적 접근 방식은 팀원 간의 협업을 촉진하고 표준화된 API 설계 프로세스를 보장합니다.</li><li><strong>코드 생성:</strong> Swagger는 다양한 프로그래밍 언어로 서버 Stub과 클라이언트 SDK를 생성할 수 있어 API 기능을 구현하는 데 필요한 수작업을 줄여줍니다.</li><li><strong>테스트:</strong> Swagger는 Swagger UI와 같은 도구와의 통합을 통해 API 테스트를 용이하게 합니다. 개발자는 문서에서 직접 API 요청을 실행할 수 있으므로 테스트 및 디버깅에 유용한 도구입니다.</li></ul><h2 id="Postman이란-무엇인가요">Postman이란 무엇인가요?</h2><p>Postman은 API를 설계, 테스트 및 관리하는 과정을 간소화하는 API 개발용 협업 플랫폼으로 널리 사용되고 있습니다. HTTP 요청을 생성하고 전송할 수 있는 사용자 친화적인 인터페이스를 제공할 뿐만 아니라 API의 테스트 및 모니터링을 자동화합니다.</p><h2 id="Postman-사용-사례">Postman 사용 사례</h2><ul><li><strong>API 테스트:</strong> Postman은 다목적 API 테스트 도구로서 빛을 발합니다. 개발자는 API 요청을 생성 및 실행하고, 자동화된 테스트 스위트를 설정하고, 회귀 테스트를 수행하여 API의 안정성을 보장할 수 있습니다.</li><li><strong>API 설계 및 프로토타이핑:</strong> Postman을 사용하면 플랫폼 내에서 직접 API를 설계하고 프로토타이핑할 수 있습니다. 이 기능은 빠른 반복과 피드백 루프를 가능하게 하여 개발 프로세스를 가속화합니다.</li><li><strong>협업:</strong> Postman은 공유 작업 공간, API 버전 관리, 요청 및 컬렉션에 댓글을 달 수 있는 기능을 제공하여 팀원 간의 협업을 촉진합니다.</li><li><strong>모니터링 및 자동화:</strong> Postman을 사용하면 API 테스트 컬렉션을 자동으로 실행하고 예약하는 모니터를 만들 수 있습니다. 이는 지속적인 통합과 API의 상태를 모니터링하는 데 유용합니다.</li></ul><h2 id="Swagger와-Postman-올바른-도구-선택하기">Swagger와 Postman: 올바른 도구 선택하기</h2><h3 id="Swagger를-선택해야-하는-경우">Swagger를 선택해야 하는 경우</h3><ul><li><strong>API 설계 우선 접근 방식:</strong> 개발 프로세스가 구현 전에 API 사양을 정의하는 API 설계 우선 접근 방식을 따르는 경우 Swagger가 탁월한 선택입니다.</li><li><strong>포괄적인 문서:</strong> 상세한 대화형 API 문서를 작성하는 것이 우선순위라면 Swagger의 광범위한 문서 생성 기능이 유용한 도구가 될 수 있습니다.</li><li><strong>코드 생성:</strong> API 사양에 따라 서버 Stub이나 클라이언트 SDK를 자동으로 생성해야 하는 경우 Swagger는 강력한 코드 생성 기능을 제공합니다.</li></ul><h3 id="Postman을-선택해야-하는-경우">Postman을 선택해야 하는 경우</h3><ul><li><strong>API 테스트 중심:</strong> 특히 자동화된 테스트, 테스트 스위트 생성, 모니터링과 같은 기능을 통해 API 테스트에 중점을 두는 경우, Postman은 이러한 작업에 맞춤화된 서비스입니다.</li><li><strong>프로토타이핑 및 반복:</strong> 도구 내에서 직접 API를 빠르게 프로토타이핑하고 반복할 수 있는 플랫폼을 선호한다면 Postman은 이러한 활동을 위한 직관적인 환경을 제공합니다.</li><li><strong>협업 개발:</strong> API 개발 작업 공간의 협업과 공유가 팀에 매우 중요하다면 Postman의 협업 기능이 원활한 환경을 제공합니다.</li></ul><h2 id="결론">결론</h2><p>API 개발의 역동적인 환경에서 Swagger와 Postman은 모두 개발 수명 주기 전반에 걸쳐 특정 요구 사항을 해결하면서 독특한 틈새 시장을 개척해 왔습니다. Swagger는 API 디자인, 문서화 및 코드 생성에 탁월하지만 Postman은 API 테스트, 협업 및 프로토타이핑 영역에서 빛을 발합니다. Swagger와 Postman 중 어떤 것을 선택할지는 궁극적으로 프로젝트 요구 사항, 팀 선호도, 향상된 효율성과 기능을 원하는 API 개발 프로세스의 특정 단계에 따라 달라집니다.</p><p>Swagger와 Postman의 강점을 활용하여 API 개발 도구 키트에 통합하여 포괄적이고 간소화된 개발 환경을 구축하세요. API를 설계하거나 문서화하거나 기능을 엄격하게 테스트할 때 Swagger와 Postman의 시너지 효과로 개발자는 최신 API 개발의 복잡한 환경을 자신 있게 탐색할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/08/20/info-25/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Spring Boot] JUnit과 Mockito</title>
      <link>http://hgko1207.github.io/2024/08/20/spring-5/</link>
      <guid>http://hgko1207.github.io/2024/08/20/spring-5/</guid>
      <pubDate>Tue, 20 Aug 2024 04:57:29 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/spring-5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;우리 모두 알다시피, 단위 테스트는 애플리케이션 개발에서 유지해야 할 주요한 중요한 관행 중 하나입니다. 이 글에서는 Java 애플리케이션의 단위 테
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/spring-5.png" alt=""></p><p>우리 모두 알다시피, 단위 테스트는 애플리케이션 개발에서 유지해야 할 주요한 중요한 관행 중 하나입니다. 이 글에서는 Java 애플리케이션의 단위 테스트 프레임워크인 <strong>Junit</strong>과 <strong>Mockito</strong>의 Rest apis에 대해 살펴보겠습니다.</p><h2 id="단위-테스트란-무엇인가요">단위 테스트란 무엇인가요?</h2><p>단위 테스트(Unit Testing)는 애자일 방법론의 연속 프로세스 중 하나로 알려져 있습니다. 단위 테스트는 개발자 수준에서 시작됩니다. 단위 테스트는 소프트웨어 애플리케이션의 개별 구성 요소를 테스트하는 소프트웨어 테스트의 한 유형입니다.</p><p>Rest API를 작성한다고 가정하면 각 API에 대해 테스트 케이스를 작성하고 메인 API에 커밋하기 전에 애플리케이션에서 테스트할 수 있습니다. 단위 테스트에서는 서비스를 모의 테스트하므로 매번 데이터베이스를 호출하지 않고 모의 데이터를 사용합니다.</p><h2 id="JUnit이란-무엇인가요">JUnit이란 무엇인가요?</h2><p>JUnit은 Java 프로그래밍 언어의 단위 테스트 프레임워크입니다. 테스트 중심 개발에서 중요한 역할을 하며 xUnit으로 알려진 단위 테스트 프레임워크 제품군으로 알려져 있습니다.</p><p>JUnit은 개발자에게 먼저 테스트한 다음 코딩하는 아이디어를 제공하므로 실제 API를 구현하기 전에 어떤 유형의 데이터가 필요한지 확인할 수 있습니다.</p><p>JUnit을 사용하면 프로그래머의 생산성이 향상되고 애플리케이션의 안정성이 유지됩니다.</p><p>JUnit은 테스트 케이스 작성을 위한 프레임워크이므로 테스트 방법을 식별하는 어노테이션을 제공하고 예상 결과를 테스트하기 위한 어설션을 제공합니다.</p><h2 id="Mockito-프레임워크란-무엇인가요">Mockito 프레임워크란 무엇인가요?</h2><p>Mockito는 Java 애플리케이션의 단위 테스트에 사용되는 Java 기반 Mocking 프레임워크입니다. Mockito는 MIT 라이선스에 따라 오픈 소스 테스트 프레임워크로 출시되었습니다.</p><p>Mockito는 내부적으로 Java 리플렉션 API를 사용하여 모의 객체를 생성합니다. Mockito 프레임워크 사용의 주된 목적은 외부 종속성을 모의하고 테스트 코드에서 이를 사용하여 개발을 간소화하는 것입니다. 또한 JUnit 및 TestNG와 같은 다른 테스트 프레임워크와 함께 Mockito를 사용할 수도 있습니다.</p><h2 id="Mocking-이란-무엇인가요">Mocking 이란 무엇인가요?</h2><p>Mocking은 객체의 모의 또는 복제 역할을 하는 객체를 개발하는 프로세스입니다. 즉, 실제 객체를 사용하는 대신 Mocking된 객체를 사용하게 됩니다. 모의 객체는 특정 또는 더미 입력과 출력을 제공합니다.</p><h2 id="단계별-구현">단계별 구현</h2><h3 id="Step-1">Step 1</h3><p><a href="https://start.spring.io/" target="_blank" rel="noopener">Spring initialize</a>를 사용하여 Spring Boot 애플리케이션을 만들고 다음 종속성을 추가합니다.</p><ul><li>Spring Web</li><li>Spring Data JPA</li><li>Lombok</li></ul><p>Spring 부팅 프로젝트를 zip 파일로 생성하고 압축을 푼 다음 IDE로 가져옵니다.</p><h3 id="Step-2">Step 2</h3><p>Spring 부팅 프로젝트에 아래 종속성을 추가했는지 확인합니다</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Step-3-JPA-엔티티-생성">Step 3: JPA 엔티티 생성</h3><p>이제 다음 내용으로 Employee JPA 엔티티를 생성합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"employees"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"first_name"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>상용구 코드를 줄이기 위해 Lombok 어노테이션을 사용하고 있다는 점에 유의하세요.</p><h3 id="Step-4-Repository-Layer-생성">Step 4: Repository Layer 생성</h3><p>이제 JpaRepository 인터페이스를 확장하는 EmployeeRepository를 생성합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.jUnitApplication.springboot.model.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-5-Service-Layer-생성">Step 5: Service Layer 생성</h3><p>CRUD 메서드를 사용하여 EmployeeService 인터페이스를 만듭니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.jUnitApplication.springboot.model.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line">    <span class="function">Employee <span class="title">saveEmployee</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">getAllEmployees</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Optional&lt;Employee&gt; <span class="title">getEmployeeById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">    <span class="function">Employee <span class="title">updateEmployee</span><span class="params">(Employee updatedEmployee)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteEmployee</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 EmployeeService 인터페이스를 구현하는 EmployeeServiceImpl 클래스를 생성합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.jUnitApplication.springboot.exception.ResourceNotFoundException;</span><br><span class="line"><span class="keyword">import</span> net.jUnitApplication.springboot.model.Employee;</span><br><span class="line"><span class="keyword">import</span> net.jUnitApplication.springboot.repository.EmployeeRepository;</span><br><span class="line"><span class="keyword">import</span> net.jUnitApplication.springboot.service.EmployeeService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeServiceImpl</span> <span class="keyword">implements</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EmployeeRepository employeeRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmployeeServiceImpl</span><span class="params">(EmployeeRepository employeeRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.employeeRepository = employeeRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">saveEmployee</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Optional&lt;Employee&gt; savedEmployee = employeeRepository.findByEmail(employee.getEmail());</span><br><span class="line">        <span class="keyword">if</span>(savedEmployee.isPresent())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ResourceNotFoundException(<span class="string">"Employee already exist with given email:"</span> + employee.getEmail());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> employeeRepository.save(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployees</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;Employee&gt; <span class="title">getEmployeeById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">updateEmployee</span><span class="params">(Employee updatedEmployee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeRepository.save(updatedEmployee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmployee</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        employeeRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-6-JUnit-5와-Mockito를-사용하여-Service-Layer-단위-테스트하기">Step 6: JUnit 5와 Mockito를 사용하여 Service Layer 단위 테스트하기</h3><p>EmployeeService에 대한 단위 테스트 케이스를 작성해 보겠습니다. Spring 기능을 사용하지 않고도 EmployeeService에 대한 단위 테스트를 작성할 수 있어야 합니다.</p><p>Mock을 사용하여 EmployeeRepository의 모의 인스턴스를 생성하고 모의 EmployeeRepository 인스턴스를 사용하여 EmployeeServiceImpl 인스턴스를 생성하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.jUnitApplication.springboot.exception.ResourceNotFoundException;</span><br><span class="line"><span class="keyword">import</span> net.jUnitApplication.springboot.model.Employee;</span><br><span class="line"><span class="keyword">import</span> net.jUnitApplication.springboot.repository.EmployeeRepository;</span><br><span class="line"><span class="keyword">import</span> net.jUnitApplication.springboot.service.impl.EmployeeServiceImpl;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.assertj.core.api.Assertions.assertThat;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.ArgumentMatchers.any;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.BDDMockito.given;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.BDDMockito.willDoNothing;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mockito.InjectMocks;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mock;</span><br><span class="line"><span class="keyword">import</span> org.mockito.junit.jupiter.MockitoExtension;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExtendWith</span>(MockitoExtension<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EmployeeServiceTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeRepository employeeRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeServiceImpl employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Employee employee;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        employee = Employee.builder()</span><br><span class="line">                .id(<span class="number">1L</span>)</span><br><span class="line">                .firstName(<span class="string">"ko"</span>)</span><br><span class="line">                .lastName(<span class="string">"su"</span>)</span><br><span class="line">                .email(<span class="string">"hgko@gmail.com"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JUnit test for saveEmployee method</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"JUnit test for saveEmployee method"</span>)</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenEmployeeObject_whenSaveEmployee_thenReturnEmployeeObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// given - precondition or setup</span></span><br><span class="line">        when(employeeRepository.findByEmail(employee.getEmail()))</span><br><span class="line">                .thenReturn(Optional.empty());</span><br><span class="line"></span><br><span class="line">        when(employeeRepository.save(employee)).thenReturn(employee);</span><br><span class="line"></span><br><span class="line">        System.out.println(employeeRepository);</span><br><span class="line">        System.out.println(employeeService);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// when -  action or the behaviour that we are going test</span></span><br><span class="line">        Employee savedEmployee = employeeService.saveEmployee(employee);</span><br><span class="line"></span><br><span class="line">        System.out.println(savedEmployee);</span><br><span class="line">        <span class="comment">// then - verify the output</span></span><br><span class="line">        assertThat(savedEmployee).isNotNull();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getAllEmployees</code> 메서드에 대한 JUnit 테스트</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName</span>(<span class="string">"JUnit test for getAllEmployees method"</span>)</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenEmployeesList_whenGetAllEmployees_thenReturnEmployeesList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// given - precondition or setup</span></span><br><span class="line">    Employee employee1 = Employee.builder()</span><br><span class="line">            .id(<span class="number">2L</span>)</span><br><span class="line">            .firstName(<span class="string">"ko"</span>)</span><br><span class="line">            .lastName(<span class="string">"test"</span>)</span><br><span class="line">            .email(<span class="string">"test@gmail.com"</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    when(employeeRepository.findAll()).thenReturn(List.of(employee,employee1));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// when -  action or the behaviour that we are going test</span></span><br><span class="line">    List&lt;Employee&gt; employeeList = employeeService.getAllEmployees();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then - verify the output</span></span><br><span class="line">    assertThat(employeeList).isNotNull();</span><br><span class="line">    assertThat(employeeList.size()).isEqualTo(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getEmployeeById</code> 메서드에 대한 JUnit 테스트</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName</span>(<span class="string">"JUnit test for getEmployeeById method"</span>)</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenEmployeeId_whenGetEmployeeById_thenReturnEmployeeObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// given</span></span><br><span class="line">    when(employeeRepository.findById(<span class="number">1L</span>)).thenReturn(Optional.of(employee));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// when</span></span><br><span class="line">    Employee savedEmployee = employeeService.getEmployeeById(employee.getId()).get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then</span></span><br><span class="line">    assertThat(savedEmployee).isNotNull();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>updateEmployee</code> 메서드에 대한 JUnit 테스트</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName</span>(<span class="string">"JUnit test for updateEmployee method"</span>)</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenEmployeeObject_whenUpdateEmployee_thenReturnUpdatedEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// given - precondition or setup</span></span><br><span class="line">    when(employeeRepository.save(employee)).thenReturn(employee);</span><br><span class="line">    employee.setEmail(<span class="string">"lee@gmail.com"</span>);</span><br><span class="line">    employee.setFirstName(<span class="string">"Lee"</span>);</span><br><span class="line">    <span class="comment">// when -  action or the behaviour that we are going test</span></span><br><span class="line">    Employee updatedEmployee = employeeService.updateEmployee(employee);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then - verify the output</span></span><br><span class="line">    assertThat(updatedEmployee.getEmail()).isEqualTo(<span class="string">"lee@gmail.com"</span>);</span><br><span class="line">    assertThat(updatedEmployee.getFirstName()).isEqualTo(<span class="string">"Lee"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>deleteEmployee</code> 메서드에 대한 JUnit 테스트</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName</span>(<span class="string">"JUnit test for deleteEmployee method"</span>)</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenEmployeeId_whenDeleteEmployee_thenNothing</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// given - precondition or setup</span></span><br><span class="line">    <span class="keyword">long</span> employeeId = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    doNothing().when(employeeRepository).deleteById(employeeId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// when -  action or the behaviour that we are going test</span></span><br><span class="line">    employeeService.deleteEmployee(employeeId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then - verify the output</span></span><br><span class="line">    verify(employeeRepository, times(<span class="number">1</span>)).deleteById(employeeId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 예제 코드는 Junit과 Mockito를 사용하여 REST API의 CRUD 동작 테스트를 제공합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/08/20/spring-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WinUI 3 시작하기: 초보자 가이드</title>
      <link>http://hgko1207.github.io/2024/08/16/winui-2/</link>
      <guid>http://hgko1207.github.io/2024/08/16/winui-2/</guid>
      <pubDate>Fri, 16 Aug 2024 04:16:01 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Windows 애플리케이션 개발에 있어 &lt;strong&gt;WinUI 3&lt;/strong&gt;은 현대적인 사용자 인터페이스(UI)를 구축하기 위한 최신 기술로 자리 잡고 있습니다. WinUI 3은 Microsoft의 WinUI(Windows UI Libra
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Windows 애플리케이션 개발에 있어 <strong>WinUI 3</strong>은 현대적인 사용자 인터페이스(UI)를 구축하기 위한 최신 기술로 자리 잡고 있습니다. WinUI 3은 Microsoft의 WinUI(Windows UI Library)의 최신 버전으로, UWP(Universal Windows Platform)와 Win32 애플리케이션에서 모두 사용할 수 있는 통합된 UI 프레임워크입니다. 이 글에서는 WinUI 3을 처음 접하는 초보자를 위해 기본 개념부터 설정, 간단한 UI 구성, 그리고 Project Reunion과의 연계에 대해 설명합니다.</p><h2 id="WinUI-3란">WinUI 3란?</h2><p>WinUI 3은 Microsoft가 Windows 애플리케이션 개발을 위해 제공하는 최첨단 UI 프레임워크입니다. WinUI 3은 최신 Windows 디자인 언어인 Fluent Design System을 기반으로 하여, 모던한 UI를 개발할 수 있게 해줍니다. 또한, UWP 및 Win32 애플리케이션에서 모두 사용할 수 있어, 새로운 프로젝트뿐만 아니라 기존의 Win32 애플리케이션을 현대화하는 데에도 매우 유용합니다. WinUI 3은 Microsoft의 Project Reunion의 일환으로 제공되며, Windows 애플리케이션 개발을 위한 통합된 개발 환경을 제공합니다.</p><h2 id="WinUI-3-설정하기">WinUI 3 설정하기</h2><p>WinUI 3를 사용하여 개발을 시작하려면 먼저 개발 환경을 설정해야 합니다. 이를 위해 최신 버전의 Visual Studio가 필요하며, 다음 단계를 따라 프로젝트를 설정할 수 있습니다.</p><h3 id="1-Visual-Studio-설치">1. Visual Studio 설치</h3><p>WinUI 3 개발을 위해 Visual Studio 2022 이상이 필요합니다. 설치 시 “<strong>유니버설 Windows 플랫폼 개발</strong>” 워크로드를 선택하여 필요한 도구와 라이브러리를 포함시킵니다.</p><h3 id="2-WinUI-3-프로젝트-생성">2. WinUI 3 프로젝트 생성</h3><p>Visual Studio를 열고 &quot;<strong>새 프로젝트 만들기</strong>&quot;를 선택합니다. 검색창에 &quot;<strong>WinUI</strong>&quot;를 입력한 후, “<strong>Blank App, Packaged (WinUI in Desktop)</strong>” 템플릿을 선택합니다. 프로젝트 이름과 위치를 지정하고 &quot;<strong>만들기</strong>&quot;를 클릭하여 프로젝트를 생성합니다.</p><p>이제 WinUI 3 프로젝트가 준비되었으며, 기본적인 XAML 파일과 코드 비하인드 파일이 포함되어 있습니다.</p><h2 id="기본적인-WinUI-3-사용법">기본적인 WinUI 3 사용법</h2><p>WinUI 3에서는 XAML을 사용하여 UI를 구성하고, C# 코드를 통해 동작을 정의할 수 있습니다. 여기서는 간단한 UI를 만들어 WinUI 3의 기본 개념을 익혀보겠습니다.</p><h3 id="XAML을-사용한-UI-구성">XAML을 사용한 UI 구성</h3><p>XAML은 WinUI 3에서 UI를 정의하는 마크업 언어입니다. 아래 예제는 간단한 버튼과 텍스트 블록을 포함한 UI를 보여줍니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">"MyApp.MainWindow"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">"http://schemas.microsoft.com/expression/blend/2008"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mc</span>=<span class="string">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">mc:Ignorable</span>=<span class="string">"d"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"Hello, WinUI 3!"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">FontSize</span>=<span class="string">"24"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Click Me"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Bottom"</span> <span class="attr">Margin</span>=<span class="string">"0,0,0,50"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이 코드는 간단한 UI를 정의하여, 중앙에 텍스트를 표시하고 하단에 버튼을 배치합니다.</p><h3 id="C-코드와의-연동">C# 코드와의 연동</h3><p>XAML에서 정의된 UI 요소는 C# 코드에서 제어할 수 있습니다. 예를 들어, 버튼 클릭 이벤트를 처리하여 텍스트 블록의 내용을 변경할 수 있습니다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.UI.Xaml;</span><br><span class="line"><span class="keyword">using</span> Microsoft.UI.Xaml.Controls;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.InitializeComponent();</span><br><span class="line">            myButton.Click += MyButton_Click;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MyButton_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            myTextBlock.Text = <span class="string">"Button clicked!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 코드에서는 <code>myButton</code>이라는 버튼이 클릭될 때 <code>MyButton_Click</code> 메서드가 호출되며, 이 메서드는 <code>myTextBlock</code>의 텍스트를 &quot;Button clicked!&quot;로 변경합니다.</p><h2 id="Project-Reunion과-WinUI-3">Project Reunion과 WinUI 3</h2><p>WinUI 3은 Microsoft의 Project Reunion과 긴밀하게 통합되어 있습니다. Project Reunion은 UWP와 Win32 개발 환경을 통합하여, 하나의 코드베이스로 다양한 Windows 애플리케이션을 개발할 수 있게 해줍니다. WinUI 3을 사용하면 UWP의 모던한 UI 기능을 Win32 애플리케이션에도 적용할 수 있어, 기존의 Win32 애플리케이션을 현대화하는 데에도 매우 유리합니다.</p><p>Project Reunion을 통해 개발자는 최신 Windows API를 사용할 수 있으며, 이를 통해 다양한 Windows 플랫폼에서 일관된 사용자 경험을 제공할 수 있습니다. WinUI 3은 Project Reunion의 일환으로, 향후 Windows 개발의 핵심 요소로 자리 잡을 것입니다.</p><h2 id="WinUI-3의-주요-기능">WinUI 3의 주요 기능</h2><ul><li><p><strong>모던한 UI 컨트롤:</strong><br>WinUI 3은 최신 디자인 시스템을 기반으로 한 다양한 모던 UI 컨트롤을 제공합니다. 이러한 컨트롤들은 유연하게 커스터마이즈할 수 있으며, 다양한 디바이스와 화면 크기에 맞게 적응할 수 있습니다.</p></li><li><p><strong>유연한 플랫폼 통합:</strong><br>WinUI 3은 UWP와 Win32 애플리케이션 모두에서 사용할 수 있어, 새로운 프로젝트뿐만 아니라 기존의 애플리케이션을 현대화하는 데에도 활용할 수 있습니다.</p></li><li><p><strong>미래 지향적 개발:</strong><br>WinUI 3는 Microsoft가 적극적으로 지원하는 최신 기술로, 장기적인 프로젝트에 적합한 선택입니다. 지속적인 업데이트와 커뮤니티 지원이 제공되며, 앞으로도 Windows 개발의 표준으로 자리 잡을 가능성이 큽니다.</p></li></ul><h2 id="결론">결론</h2><p>WinUI 3은 Windows 애플리케이션 개발에 있어 필수적인 도구로, 초보자도 쉽게 시작할 수 있습니다. 이 글을 통해 기본 개념과 설정 방법을 익히고, WinUI 3을 사용하여 모던하고 응답성 높은 UI를 개발해 보세요. 앞으로의 Windows 애플리케이션 개발에서 WinUI 3은 중요한 역할을 할 것입니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/08/16/winui-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WPF 애플리케이션 최적화: 성능 팁 및 요령</title>
      <link>http://hgko1207.github.io/2024/08/16/wpf-7/</link>
      <guid>http://hgko1207.github.io/2024/08/16/wpf-7/</guid>
      <pubDate>Fri, 16 Aug 2024 04:06:09 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;WPF&lt;/strong&gt;(Windows Presentation Foundation)은 강력한 UI 프레임워크로, 사용자 친화적이고 시각적으로 매력적인 애플리케이션을 만들 수 있는 다양한 도구를 제공합니다. 그러나 복잡한 UI와 방대한
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>WPF</strong>(Windows Presentation Foundation)은 강력한 UI 프레임워크로, 사용자 친화적이고 시각적으로 매력적인 애플리케이션을 만들 수 있는 다양한 도구를 제공합니다. 그러나 복잡한 UI와 방대한 데이터 처리로 인해 성능 문제가 발생할 수 있습니다. 이 글에서는 WPF 애플리케이션의 성능을 최적화하고 응답성을 개선하기 위한 몇 가지 팁과 요령을 다룹니다. 주요 주제는 UI 응답성, 메모리 관리, 비동기 작업 등을 포함합니다.</p><h2 id="1-UI-응답성-최적화">1. UI 응답성 최적화</h2><p>WPF 애플리케이션에서 UI의 응답성을 유지하는 것은 사용자 경험의 핵심입니다. UI 스레드에서 장시간 실행되는 작업은 애플리케이션이 멈추거나 느려지는 것처럼 보이게 할 수 있습니다.</p><p><strong>비동기 작업 활용</strong></p><p>무거운 작업을 UI 스레드에서 비동기적으로 처리하여 UI가 중단되지 않도록 해야 합니다. 이를 위해 async와 await 키워드를 사용하여 비동기 메서드를 구현할 수 있습니다.</p><p><strong>예제 코드:</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">LoadDataAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LoadingIndicator.Visibility = Visibility.Visible;</span><br><span class="line">    <span class="keyword">await</span> Task.Run(() =&gt; LoadData());  <span class="comment">// 무거운 작업을 비동기적으로 처리</span></span><br><span class="line">    LoadingIndicator.Visibility = Visibility.Collapsed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 데이터를 로드하는 긴 작업</span></span><br><span class="line">    System.Threading.Thread.Sleep(<span class="number">5000</span>); <span class="comment">// 예시로 긴 대기</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 코드에서 <code>LoadData</code> 메서드는 별도의 스레드에서 실행되어 UI 스레드가 차단되지 않도록 합니다.</p><h2 id="2-메모리-관리">2. 메모리 관리</h2><p>메모리 관리는 WPF 애플리케이션의 성능에 중요한 영향을 미칩니다. 불필요한 메모리 사용은 애플리케이션의 속도를 저하시킬 수 있으며, 메모리 누수는 장기적으로 문제를 일으킬 수 있습니다.</p><p><strong>데이터 바인딩 최적화</strong></p><p>바인딩된 데이터가 변경되지 않을 경우 INotifyPropertyChanged 인터페이스를 사용하여 불필요한 업데이트를 방지할 수 있습니다.</p><p><strong>예제 코드:</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ViewModel</span> : <span class="title">INotifyPropertyChanged</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_name != <span class="keyword">value</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _name = <span class="keyword">value</span>;</span><br><span class="line">                OnPropertyChanged(<span class="keyword">nameof</span>(Name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> PropertyChangedEventHandler PropertyChanged;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">OnPropertyChanged</span>(<span class="params"><span class="keyword">string</span> propertyName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        PropertyChanged?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(propertyName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 코드는 값이 실제로 변경된 경우에만 바인딩을 업데이트하여 메모리와 CPU 리소스를 절약합니다.</p><h2 id="3-가비지-컬렉션-관리">3. 가비지 컬렉션 관리</h2><p>WPF 애플리케이션에서 메모리 누수를 방지하는 것은 매우 중요합니다. 특히, 이벤트 핸들러를 제거하지 않으면 메모리 누수가 발생할 수 있습니다.</p><p><strong>이벤트 핸들러 해제</strong></p><p>필요하지 않은 이벤트 핸들러를 명시적으로 제거하여 메모리 누수를 방지합니다.</p><p><strong>예제 코드:</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        SomeEvent += OnSomeEvent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~MyClass()</span><br><span class="line">    &#123;</span><br><span class="line">        SomeEvent -= OnSomeEvent; <span class="comment">// 이벤트 핸들러 해제</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnSomeEvent</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 이벤트 처리 코드</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler SomeEvent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-가상화-Virtualization-사용">4. 가상화(Virtualization) 사용</h2><p>대량의 데이터가 표시될 때 가상화는 성능을 크게 향상시킬 수 있습니다. ListView, DataGrid와 같은 컨트롤에서 가상화를 활성화하면 필요한 데이터만 메모리에 로드하여 성능을 최적화할 수 있습니다.</p><p><strong>가상화 예제:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListView</span> <span class="attr">ItemsSource</span>=<span class="string">"&#123;Binding LargeDataCollection&#125;"</span> <span class="attr">VirtualizingStackPanel.IsVirtualizing</span>=<span class="string">"True"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ListView 항목 템플릿 정의 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이렇게 하면 <code>LargeDataCollection</code>에 많은 항목이 있을 때, 화면에 표시되는 항목만 메모리에 로드되어 성능이 개선됩니다.</p><h2 id="결론">결론</h2><p>WPF 애플리케이션의 성능 최적화는 UI 응답성을 유지하고, 메모리를 효율적으로 관리하며, 비동기 작업과 가상화를 적절히 사용하는 것이 핵심입니다. 이러한 최적화 기법을 통해 보다 빠르고 사용자 친화적인 애플리케이션을 개발할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/08/16/wpf-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WinUI 소개: 차세대 Windows 앱 구축</title>
      <link>http://hgko1207.github.io/2024/08/15/winui-1/</link>
      <guid>http://hgko1207.github.io/2024/08/15/winui-1/</guid>
      <pubDate>Thu, 15 Aug 2024 14:32:26 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;끊임없이 진화하는 소프트웨어 개발 환경에서 &lt;strong&gt;WinUI&lt;/strong&gt;(Windows UI Library)는 차세대 Windows 애플리케이션을 구축하기 위한 핵심 기술로 주목받고 있습니다. UWP(Universal Windows P
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>끊임없이 진화하는 소프트웨어 개발 환경에서 <strong>WinUI</strong>(Windows UI Library)는 차세대 Windows 애플리케이션을 구축하기 위한 핵심 기술로 주목받고 있습니다. UWP(Universal Windows Platform) 앱, 데스크톱 앱 또는 구형 기술에서 전환하는 경우 WinUI는 반응성이 뛰어나고 시각적으로 매력적인 최신 사용자 인터페이스를 만드는 데 필요한 도구와 기능을 제공합니다. 이 글에서는 WinUI와 그 장점, 그리고 이를 활용하여 최첨단 Windows 애플리케이션을 개발하는 방법을 소개합니다.</p><h2 id="WinUI란-무엇인가요">WinUI란 무엇인가요?</h2><p>WinUI는 Microsoft에서 Windows 애플리케이션을 빌드하기 위해 제공하는 사용자 인터페이스(UI) 프레임워크입니다. 이 프레임워크는 최신 Windows 디자인 원칙에 부합하는 현대적인 컨트롤, 스타일 및 기능을 제공하는 Microsoft UI 기술의 최신 진화를 나타냅니다. WinUI는 UWP 앱과 기존 데스크톱 앱을 모두 빌드하는 데 사용할 수 있어 Windows 개발을 위한 유연하고 미래 지향적인 기반을 제공합니다.</p><h2 id="WinUI의-주요-기능">WinUI의 주요 기능</h2><h3 id="최신-UI-컨트롤">최신 UI 컨트롤</h3><ul><li>WinUI는 고도로 사용자 정의할 수 있고 다양한 폼 팩터에 맞게 조정할 수 있도록 설계된 다양한 최신 UI 컨트롤 세트를 제공합니다. 이러한 컨트롤에는 navigation views, command bars, 버튼, 텍스트 상자 등이 포함되며, 모두 Fluent 디자인 시스템과 일치하도록 설계되었습니다.</li><li>예: 최신 탐색 환경을 만들기 위해 WinUI의 <code>NavigationView</code> 컨트롤을 사용합니다.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">NavigationView</span> <span class="attr">PaneTitle</span>=<span class="string">"AppName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NavigationView.MenuItems</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">NavigationViewItem</span> <span class="attr">Content</span>=<span class="string">"Home"</span> <span class="attr">Icon</span>=<span class="string">"Home"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">NavigationViewItem</span> <span class="attr">Content</span>=<span class="string">"Settings"</span> <span class="attr">Icon</span>=<span class="string">"Setting"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">NavigationView.MenuItems</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">NavigationView</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="UWP-및-데스크톱-앱과의-원활한-통합">UWP 및 데스크톱 앱과의 원활한 통합</h3><ul><li>WinUI는 UWP와 완벽하게 호환되므로 기존 UWP 프로젝트에 쉽게 통합할 수 있습니다. 또한 Win32로 빌드된 앱을 포함하여 데스크톱 앱과 함께 사용할 수 있으므로 레거시 애플리케이션을 현대화할 수 있는 경로를 제공합니다.</li><li>예: WinUI 컨트롤을 UWP 또는 데스크톱 앱 프로젝트에 통합합니다.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"Welcome to WinUI"</span> <span class="attr">FontSize</span>=<span class="string">"24"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Click Me"</span> <span class="attr">Width</span>=<span class="string">"200"</span> <span class="attr">Margin</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Fluent-Design-System">Fluent Design System</h3><ul><li>WinUI는 Fluent 디자인 시스템을 채택하여 다양한 기기에서 애플리케이션이 일관되고 미적으로 만족스러운 모양과 느낌을 갖도록 보장합니다. 여기에는 아크릴 재질, 하이라이트 표시 등과 같은 기능이 포함됩니다.</li><li>예: WinUI 앱에 아크릴 배경과 같은 Fluent 디자인 요소 적용.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AcrylicBrush</span> <span class="attr">BackgroundSource</span>=<span class="string">"HostBackdrop"</span> <span class="attr">TintColor</span>=<span class="string">"#99000000"</span> <span class="attr">TintOpacity</span>=<span class="string">"0.6"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"Fluent Design"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">FontSize</span>=<span class="string">"32"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="성능-및-확장성">성능 및 확장성</h3><ul><li>WinUI는 성능을 염두에 두고 설계되어 다양한 화면 크기와 해상도의 기기에서 확장할 수 있는 최적화된 컨트롤을 제공합니다. 따라서 다양한 하드웨어 구성에서 잘 작동해야 하는 앱을 구축하는 데 이상적입니다.</li><li>예: WinUI의 적응형 트리거를 사용하여 반응형 레이아웃 만들기.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Page</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">"MyApp.MainPage"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">VisualStateManager.VisualStateGroups</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">VisualStateGroup</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">VisualState</span> <span class="attr">x:Name</span>=<span class="string">"NarrowState"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">VisualState.StateTriggers</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">AdaptiveTrigger</span> <span class="attr">MinWindowWidth</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">VisualState.StateTriggers</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">VisualState.Setters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Target</span>=<span class="string">"MyGrid.ColumnDefinitions[1].Width"</span> <span class="attr">Value</span>=<span class="string">"0*"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">VisualState.Setters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">VisualState</span> <span class="attr">x:Name</span>=<span class="string">"WideState"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">VisualState.StateTriggers</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">AdaptiveTrigger</span> <span class="attr">MinWindowWidth</span>=<span class="string">"720"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">VisualState.StateTriggers</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">VisualState.Setters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Target</span>=<span class="string">"MyGrid.ColumnDefinitions[1].Width"</span> <span class="attr">Value</span>=<span class="string">"1*"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">VisualState.Setters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">VisualStateGroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">VisualStateManager.VisualStateGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">"1*"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">"1*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Content goes here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Page</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="왜-WinUI를-선택해야-할까요">왜 WinUI를 선택해야 할까요?</h2><h3 id="애플리케이션의-미래-보장">애플리케이션의 미래 보장</h3><p>WinUI는 향후 Windows 개발을 위한 Microsoft의 UI 프레임워크입니다. WinUI를 채택함으로써 개발자는 지속적으로 발전하고 업데이트를 받을 수 있는 플랫폼에 애플리케이션을 빌드할 수 있습니다.</p><h3 id="크로스-플랫폼-잠재력">크로스 플랫폼 잠재력</h3><p>WinUI를 사용하면 개발자는 Windows에서 실행되는 앱을 만들 수 있을 뿐만 아니라 유사한 원칙에 따라 구축된 MAUI(Multi-platform App UI)와 같은 프로젝트 통합 노력을 통해 다른 플랫폼으로 확장할 수 있는 잠재력을 갖출 수 있습니다.</p><h3 id="커뮤니티-및-지원">커뮤니티 및 지원</h3><p>WinUI는 정기적인 업데이트, 광범위한 문서, 성장하는 도구 및 라이브러리 에코시스템을 통해 Microsoft와 개발자 커뮤니티의 강력한 지원을 받고 있습니다.</p><h2 id="WinUI-시작하기">WinUI 시작하기</h2><p>WinUI를 시작하려면 다음 단계를 따르세요.</p><h3 id="1-Visual-Studio-설치">1. Visual Studio 설치</h3><p>UWP 개발 워크로드가 포함된 최신 버전의 Visual Studio가 설치되어 있는지 확인합니다.</p><h3 id="2-새-WinUI-프로젝트-만들기">2. 새 WinUI 프로젝트 만들기</h3><p>Visual Studio를 열고 데스크톱 앱의 경우 “Blank App, Packaged with WAP (WinUI in Desktop)” 템플릿을 사용하여 새 프로젝트를 만들거나 UWP 앱의 경우 &quot;Blank App (WinUI in UWP)&quot;을 사용하여 새 프로젝트를 만듭니다.</p><h3 id="3-WinUI-컨트롤-살펴보기">3. WinUI 컨트롤 살펴보기</h3><p>WinUI에서 제공하는 다양한 컨트롤 및 기능을 살펴보는 것으로 시작하세요. Microsoft는 이러한 컨트롤의 작동을 확인하는 데 사용할 수 있는 샘플 갤러리를 제공합니다.</p><h3 id="4-빌드-및-테스트">4. 빌드 및 테스트</h3><p>프로젝트를 빌드하고 실행하여 설명한 컨트롤 및 디자인 원칙을 실험해 보세요.</p><h2 id="결론">결론</h2><p>WinUI는 반응성이 뛰어나고 시각적으로 멋진 최신 애플리케이션을 빌드하는 데 필요한 도구와 프레임워크를 제공하는 Windows 앱 개발의 최첨단을 대표합니다. 새 앱을 만들든 기존 앱을 현대화하든 WinUI는 오늘날의 소프트웨어 환경에서 성공하는 데 필요한 유연성과 성능을 제공합니다. WinUI를 채택함으로써 개발자는 애플리케이션이 Windows의 미래에 대비할 수 있도록 할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/08/15/winui-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[WPF] 레이아웃 컨트롤 탐색하기: Grid, StackPanel, DockPanel 등</title>
      <link>http://hgko1207.github.io/2024/08/14/wpf-6/</link>
      <guid>http://hgko1207.github.io/2024/08/14/wpf-6/</guid>
      <pubDate>Wed, 14 Aug 2024 14:26:51 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;WPF&lt;/strong&gt;(Windows Presentation Foundation)에서 사용자 인터페이스(UI)를 디자인할 때 올바른 레이아웃 컨트롤을 선택하는 것은 반응이 빠르고 체계적으로 구성된 애플리케이션을 만드는 데 매우 중요
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>WPF</strong>(Windows Presentation Foundation)에서 사용자 인터페이스(UI)를 디자인할 때 올바른 레이아웃 컨트롤을 선택하는 것은 반응이 빠르고 체계적으로 구성된 애플리케이션을 만드는 데 매우 중요합니다. WPF는 개발자가 UI에서 요소를 배치하고 크기를 조정하는 데 도움이 되는 여러 레이아웃 컨트롤을 제공합니다. 이러한 컨트롤 중 Grid 및 StackPanel이 가장 일반적으로 사용되지만 특정 시나리오에 필수적인 DockPanel과 같은 다른 컨트롤도 있습니다. 이 글에서는 코드 예제와 함께 이러한 컨트롤과 그 사용법, UI 디자인 모범 사례를 안내합니다.</p><h2 id="1-Grid">1. Grid</h2><p><strong>Grid</strong>는 WPF에서 가장 강력하고 유연한 레이아웃 컨트롤 중 하나입니다. Grid를 사용하면 UI 요소를 정확하게 배치할 수 있는 행과 열의 구조를 만들 수 있습니다.</p><h3 id="주요-기능">주요 기능</h3><ul><li><strong>행과 열:</strong> 필요한 만큼의 행과 열을 정의할 수 있습니다. 각 요소는 <code>Grid.Row</code> 및 <code>Grid.Column </code>속성을 사용하여 배치할 수 있습니다.</li><li><strong>Grid Spanning:</strong> <code>Grid.RowSpan</code> 및 <code>Grid.ColumnSpan</code> 속성을 사용하여 요소를 여러 행 또는 열에 걸쳐 배치할 수 있으며, 이는 복잡한 레이아웃에 특히 유용합니다.</li><li><strong>Auto, Star, Pixel Sizing:</strong> 콘텐츠에 따라 자동 크기 조정, ‘*’(별표) 크기 조정은 사용 가능한 공간을 비례적으로 배분, 픽셀 크기 조정은 고정 치수를 제공하는 등 다양한 방식으로 행과 열의 크기를 조정할 수 있습니다.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"Auto"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"Auto"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">"Auto"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">"2*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Labels --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Grid.Row</span>=<span class="string">"0"</span> <span class="attr">Grid.Column</span>=<span class="string">"0"</span> <span class="attr">Text</span>=<span class="string">"Name:"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Grid.Row</span>=<span class="string">"1"</span> <span class="attr">Grid.Column</span>=<span class="string">"0"</span> <span class="attr">Text</span>=<span class="string">"Email:"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Input Fields --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Grid.Row</span>=<span class="string">"0"</span> <span class="attr">Grid.Column</span>=<span class="string">"1"</span> <span class="attr">Grid.ColumnSpan</span>=<span class="string">"2"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Grid.Row</span>=<span class="string">"1"</span> <span class="attr">Grid.Column</span>=<span class="string">"1"</span> <span class="attr">Grid.ColumnSpan</span>=<span class="string">"2"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Buttons --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Grid.Row</span>=<span class="string">"2"</span> <span class="attr">Grid.Column</span>=<span class="string">"1"</span> <span class="attr">Content</span>=<span class="string">"Submit"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Grid.Row</span>=<span class="string">"2"</span> <span class="attr">Grid.Column</span>=<span class="string">"2"</span> <span class="attr">Content</span>=<span class="string">"Cancel"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="사용-사례-예시">사용 사례 예시</h3><p>이 Grid 레이아웃은 각 컨트롤이 정확하게 정렬된 레이블과 입력 필드가 있는 간단한 양식을 만드는 데 적합합니다.</p><h2 id="2-StackPanel">2. StackPanel</h2><p>StackPanel은 자식 요소를 세로 또는 가로로 한 줄로 정렬하는 간단한 레이아웃 컨트롤입니다.</p><h3 id="주요-기능-2">주요 기능</h3><ul><li><strong>방향:</strong> StackPanel은 요소를 가로(<code>Orientation=&quot;Horizontal&quot;</code>) 또는 세로(<code>Orientation=&quot;Vertical&quot;</code>)로 정렬할 수 있습니다.</li><li><strong>자동 크기 조정:</strong> StackPanel은은 콘텐츠에 맞게 자동으로 크기가 조정되므로 동적이거나 가변적인 콘텐츠 크기에 이상적입니다.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">"Vertical"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 1"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 2"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 3"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="사용-사례-예시-2">사용 사례 예시</h3><p>메뉴나 대화 상자에서 볼 수 있듯이 버튼을 세로로 쌓아 올리는 데 이 StackPanel 레이아웃이 이상적입니다.</p><h2 id="3-DockPanel">3. DockPanel</h2><p>DockPanel을 사용하면 하위 요소를 패널의 가장자리에 도킹할 수 있습니다. 요소를 상단, 하단, 왼쪽 또는 오른쪽에 도킹할 수 있으며 남은 공간은 일반적으로 마지막 요소가 차지합니다.</p><h3 id="주요-기능-3">주요 기능</h3><ul><li><strong>도킹 옵션:</strong> 요소는 <code>DockPanel.Dock</code> 첨부 속성을 사용하여 어느 면에나 도킹할 수 있습니다.</li><li><strong>남은 공간 채우기:</strong> 기본적으로 달리 지정하지 않는 한 DockPanel의 마지막 자식이 남은 공간을 차지합니다.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DockPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Top Button"</span> <span class="attr">DockPanel.Dock</span>=<span class="string">"Top"</span> <span class="attr">Height</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Bottom Button"</span> <span class="attr">DockPanel.Dock</span>=<span class="string">"Bottom"</span> <span class="attr">Height</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Left Button"</span> <span class="attr">DockPanel.Dock</span>=<span class="string">"Left"</span> <span class="attr">Width</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Right Button"</span> <span class="attr">DockPanel.Dock</span>=<span class="string">"Right"</span> <span class="attr">Width</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"Center Content"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">DockPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="사용-사례-예시-3">사용 사례 예시</h3><p>이 DockPanel 레이아웃은 상단에 툴바, 하단에 상태 표시줄 및 측면 패널이 있는 창을 만드는 데 적합합니다.</p><h2 id="다른-레이아웃-컨트롤">다른 레이아웃 컨트롤</h2><p>Grid와 StackPanel이 가장 일반적이지만, WPF는 보다 전문적인 요구 사항을 위한 추가 레이아웃 컨트롤을 제공합니다.</p><ul><li><strong>WrapPanel:</strong> 현재 줄에 더 이상 공간이 없을 때 콘텐츠를 다음 줄로 래핑하여 갤러리 또는 flow 콘텐츠에 유용합니다.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">WrapPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 1"</span> <span class="attr">Width</span>=<span class="string">"100"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 2"</span> <span class="attr">Width</span>=<span class="string">"100"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 3"</span> <span class="attr">Width</span>=<span class="string">"100"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 4"</span> <span class="attr">Width</span>=<span class="string">"100"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">WrapPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>UniformGrid:</strong> Grid와 비슷하지만 모든 셀의 크기가 동일하므로 동일한 크기의 버튼이나 썸네일에 유용합니다.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UniformGrid</span> <span class="attr">Rows</span>=<span class="string">"2"</span> <span class="attr">Columns</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 1"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 2"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 3"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 4"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">UniformGrid</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Canvas:</strong> 절대 위치를 제공하여 좌표를 사용하여 요소 배치를 정밀하게 제어할 수 있습니다.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 1"</span> <span class="attr">Canvas.Left</span>=<span class="string">"50"</span> <span class="attr">Canvas.Top</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">"Button 2"</span> <span class="attr">Canvas.Left</span>=<span class="string">"150"</span> <span class="attr">Canvas.Top</span>=<span class="string">"150"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="WPF-레이아웃-컨트롤을-사용한-UI-디자인-모범-사례">WPF 레이아웃 컨트롤을 사용한 UI 디자인 모범 사례</h2><ul><li><strong>올바른 컨트롤 선택하기:</strong> 항상 디자인 요구 사항에 맞는 레이아웃 컨트롤을 선택하세요. 동적 콘텐츠의 경우 StackPanel 또는 WrapPanel이 가장 적합할 수 있습니다. 구조화된 양식의 경우 Grid가 더 적합합니다.</li><li><strong>레이아웃 컨트롤 결합:</strong> 여러 레이아웃 컨트롤을 결합하면 원하는 유연성을 제공할 수 있는 경우가 많습니다. 예를 들어 기본 구조에는 DockPanel을 사용하고 특정 영역 내에서는 Grid를 사용하여 세부적인 정렬을 할 수 있습니다.</li><li><strong>성능 고려 사항:</strong> 복잡한 레이아웃은 성능에 영향을 줄 수 있습니다. 필요에 맞는 가장 간단한 레이아웃 컨트롤을 사용하고 가능한 경우 컨트롤을 깊게 중첩하지 않도록 하세요.</li></ul><h2 id="결론">결론</h2><p>Grid, StackPanel, DockPanel과 같은 WPF 레이아웃 컨트롤을 마스터하는 것은 체계적이고 반응이 빠른 UI를 만드는 데 필수적입니다. 각 컨트롤의 강점과 적절한 사용 사례를 이해하면 기능적이면서도 시각적으로 매력적인 인터페이스를 디자인할 수 있습니다. 다양한 조합을 계속 실험하여 애플리케이션의 요구 사항에 가장 적합한 레이아웃 구조를 찾아보세요.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/08/14/wpf-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[WPF] Prism 사용 시 Mock-up 활용하는 방법</title>
      <link>http://hgko1207.github.io/2024/08/12/wpf-5/</link>
      <guid>http://hgko1207.github.io/2024/08/12/wpf-5/</guid>
      <pubDate>Mon, 12 Aug 2024 05:49:29 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Prism을 사용하여 WPF 애플리케이션을 개발할 때 &lt;strong&gt;Mock-up&lt;/strong&gt;을 활용하는 방법과 그 중요성에 대해 알아보겠습니다. Prism은 WPF에서 모듈성, 테스트 가능성, 유지 보수성을 높이기 위한 강력한 프레임워크입니
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Prism을 사용하여 WPF 애플리케이션을 개발할 때 <strong>Mock-up</strong>을 활용하는 방법과 그 중요성에 대해 알아보겠습니다. Prism은 WPF에서 모듈성, 테스트 가능성, 유지 보수성을 높이기 위한 강력한 프레임워크입니다. Mock-up은 이러한 목표를 달성하는 데 중요한 역할을 합니다.</p><h2 id="1-mock-up이란"><a class="markdownIt-Anchor" href="#1-mock-up이란"></a> 1. Mock-up이란?</h2><p>Mock-up은 개발 중인 시스템의 실제 데이터나 서비스 객체를 대체하는 가상의 객체입니다. 이 객체들은 실제 데이터베이스나 서비스 호출 없이도 애플리케이션의 특정 부분을 테스트하거나 개발할 수 있게 해줍니다. Mock-up은 특히 유닛 테스트와 프로토타이핑에 유용합니다.</p><h2 id="2-prism에서-mock-up-활용하기"><a class="markdownIt-Anchor" href="#2-prism에서-mock-up-활용하기"></a> 2. Prism에서 Mock-up 활용하기</h2><p>Prism을 사용하는 WPF 애플리케이션에서 Mock-up을 활용하는 방법을 단계별로 설명하겠습니다.</p><h3 id="step-1-prism-설정-및-초기화"><a class="markdownIt-Anchor" href="#step-1-prism-설정-및-초기화"></a> Step 1: Prism 설정 및 초기화</h3><p>먼저, Prism을 사용하여 WPF 애플리케이션을 설정해야 합니다. Prism은 MVVM 패턴을 쉽게 적용할 수 있도록 도와줍니다. 기본적인 설정은 <code>Prism.Unity</code> 또는 <code>Prism.DryIoc</code> 같은 DI 컨테이너를 활용하여 Prism 애플리케이션을 설정하는 것입니다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">PrismApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RegisterTypes</span>(<span class="params">IContainerRegistry containerRegistry</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 서비스와 뷰 모델 등을 등록합니다.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ConfigureModuleCatalog</span>(<span class="params">IModuleCatalog moduleCatalog</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 모듈을 추가합니다.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Window <span class="title">CreateShell</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Container.Resolve&lt;MainWindow&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="step-2-서비스-인터페이스-정의"><a class="markdownIt-Anchor" href="#step-2-서비스-인터페이스-정의"></a> Step 2: 서비스 인터페이스 정의</h3><p>다음으로, Mock-up을 만들기 위해 인터페이스를 정의합니다. 예를 들어, 데이터 서비스에 대한 인터페이스를 정의할 수 있습니다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDataService</span></span><br><span class="line">&#123;</span><br><span class="line">    Task&lt;List&lt;DataItem&gt;&gt; GetDataAsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="step-3-실제-서비스와-mock-up-구현"><a class="markdownIt-Anchor" href="#step-3-실제-서비스와-mock-up-구현"></a> Step 3: 실제 서비스와 Mock-up 구현</h3><p>이제 실제 서비스와 Mock-up 서비스를 각각 구현합니다.</p><ul><li><strong>실제 서비스 구현:</strong></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataService</span> : <span class="title">IDataService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;List&lt;DataItem&gt;&gt; GetDataAsync()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 실제 데이터베이스나 API 호출을 통해 데이터를 가져옵니다.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> Task.FromResult(<span class="keyword">new</span> List&lt;DataItem&gt; &#123; <span class="comment">/* ... */</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Mock-up 서비스 구현:</strong></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MockDataService</span> : <span class="title">IDataService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;List&lt;DataItem&gt;&gt; GetDataAsync()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 가짜 데이터 반환</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> Task.FromResult(<span class="keyword">new</span> List&lt;DataItem&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> DataItem &#123; Id = <span class="number">1</span>, Name = <span class="string">"Mock Data 1"</span> &#125;,</span><br><span class="line">            <span class="keyword">new</span> DataItem &#123; Id = <span class="number">2</span>, Name = <span class="string">"Mock Data 2"</span> &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="step-4-prism을-이용한-mock-up-서비스-주입"><a class="markdownIt-Anchor" href="#step-4-prism을-이용한-mock-up-서비스-주입"></a> Step 4: Prism을 이용한 Mock-up 서비스 주입</h3><p>테스트나 개발 단계에서 Mock-up 서비스를 주입할 수 있습니다. 이는 Prism의 DI 컨테이너를 활용하여 쉽게 가능합니다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RegisterTypes</span>(<span class="params">IContainerRegistry containerRegistry</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (useMock)</span><br><span class="line">    &#123;</span><br><span class="line">        containerRegistry.Register&lt;IDataService, MockDataService&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        containerRegistry.Register&lt;IDataService, DataService&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="step-5-viewmodel에서-서비스-사용"><a class="markdownIt-Anchor" href="#step-5-viewmodel에서-서비스-사용"></a> Step 5: ViewModel에서 서비스 사용</h3><p>ViewModel에서 데이터 서비스를 사용하여 데이터를 가져옵니다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainViewModel</span> : <span class="title">BindableBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IDataService _dataService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainViewModel</span>(<span class="params">IDataService dataService</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _dataService = dataService;</span><br><span class="line">        LoadData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">LoadData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> data = <span class="keyword">await</span> _dataService.GetDataAsync();</span><br><span class="line">        <span class="comment">// 데이터를 처리합니다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-mock-up을-사용하는-이유-및-장점"><a class="markdownIt-Anchor" href="#3-mock-up을-사용하는-이유-및-장점"></a> 3. Mock-up을 사용하는 이유 및 장점</h2><ul><li><p><strong>테스트 용이성:</strong> 실제 서비스나 데이터베이스에 의존하지 않고, 독립적으로 유닛 테스트를 수행할 수 있습니다. 이는 테스트의 신뢰성을 높이고, 테스트 환경을 설정하는 데 걸리는 시간을 줄여줍니다.</p></li><li><p><strong>개발 속도 향상:</strong> 데이터베이스나 외부 API가 준비되지 않았거나 사용할 수 없는 경우에도 개발을 진행할 수 있습니다. 이는 개발 초기 단계에서 특히 유용합니다.</p></li><li><p><strong>유연성:</strong> 실제 서비스가 변경되거나 일시적으로 사용할 수 없는 경우에도 애플리케이션이 지속적으로 동작하도록 할 수 있습니다.</p></li><li><p><strong>프로토타이핑:</strong> Mock-up을 사용하여 실제 시스템이 구축되기 전에 기능을 빠르게 시연하거나 사용자 피드백을 받을 수 있습니다.</p></li></ul><h2 id="4-왜-써야-하는가"><a class="markdownIt-Anchor" href="#4-왜-써야-하는가"></a> 4. 왜 써야 하는가?</h2><p>Mock-up을 사용하는 것은 특히 애플리케이션의 모듈성, 테스트 가능성, 그리고 유지 보수성을 극대화하기 위해 중요합니다. Mock-up은 다양한 시나리오에서 애플리케이션을 테스트하고, 외부 종속성으로 인한 문제를 최소화하여 개발 프로세스를 효율적으로 만들어줍니다.</p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>Prism을 사용하여 WPF 애플리케이션을 개발할 때 Mock-up을 활용하면, 코드의 테스트 가능성과 유지 보수성을 크게 향상시킬 수 있습니다. Mock-up은 실제 데이터를 사용하지 않고도 애플리케이션의 동작을 검증할 수 있어, 특히 테스트와 프로토타이핑 단계에서 매우 유용합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/08/12/wpf-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WPF에서 DataTemplate과 ItemsControl 활용하기</title>
      <link>http://hgko1207.github.io/2024/08/09/wpf-4/</link>
      <guid>http://hgko1207.github.io/2024/08/09/wpf-4/</guid>
      <pubDate>Fri, 09 Aug 2024 13:24:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;WPF에서 &lt;code&gt;DataTemplate&lt;/code&gt;과 &lt;code&gt;ItemsControl&lt;/code&gt;을 활용하는 것은 UI에서 데이터 컬렉션을 효율적으로 표시하는 데 매우 유용합니다. 이를 통해 데이터를 UI에 바인딩하고, 사용자 정의된 템플
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>WPF에서 <code>DataTemplate</code>과 <code>ItemsControl</code>을 활용하는 것은 UI에서 데이터 컬렉션을 효율적으로 표시하는 데 매우 유용합니다. 이를 통해 데이터를 UI에 바인딩하고, 사용자 정의된 템플릿으로 표시할 수 있습니다. 아래에 <code>DataTemplate</code>과 <code>ItemsControl</code>을 사용하는 방법을 단계별로 설명하겠습니다.</p><h2 id="1-기본-개념-이해하기"><a class="markdownIt-Anchor" href="#1-기본-개념-이해하기"></a> 1. 기본 개념 이해하기</h2><ul><li><strong>ItemsControl</strong>: 컬렉션 데이터를 표시하는 컨트롤입니다. <code>ListBox</code>, <code>ComboBox</code>, <code>ListView</code> 등도 <code>ItemsControl</code>에서 파생된 컨트롤입니다.</li><li><strong>DataTemplate</strong>: 데이터를 표시할 때 사용할 템플릿을 정의합니다. 예를 들어, 데이터가 <code>Person</code>이라는 클래스의 인스턴스라면, <code>DataTemplate</code>을 사용해 이름과 나이를 화면에 표시할 수 있습니다.</li></ul><h2 id="2-기본적인-모델-클래스-생성"><a class="markdownIt-Anchor" href="#2-기본적인-모델-클래스-생성"></a> 2. 기본적인 모델 클래스 생성</h2><p>먼저, 예제로 사용할 간단한 모델 클래스를 정의하겠습니다. <code>Person</code>이라는 클래스에는 이름과 나이 속성이 있습니다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-xaml에서-itemscontrol과-datatemplate-정의하기"><a class="markdownIt-Anchor" href="#3-xaml에서-itemscontrol과-datatemplate-정의하기"></a> 3. XAML에서 ItemsControl과 DataTemplate 정의하기</h2><p>이제 XAML 파일에서 <code>ItemsControl</code>과 <code>DataTemplate</code>을 정의합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">"WpfApp.MainWindow"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">"DataTemplate Example"</span> <span class="attr">Height</span>=<span class="string">"350"</span> <span class="attr">Width</span>=<span class="string">"525"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ItemsControl</span> <span class="attr">Name</span>=<span class="string">"personItemsControl"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ItemsControl.ItemTemplate</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">"Horizontal"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding Name&#125;"</span> <span class="attr">FontWeight</span>=<span class="string">"Bold"</span> <span class="attr">Width</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding Age&#125;"</span> <span class="attr">Width</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ItemsControl.ItemTemplate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ItemsControl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-코드-비하인드에서-데이터-바인딩"><a class="markdownIt-Anchor" href="#4-코드-비하인드에서-데이터-바인딩"></a> 4. 코드 비하인드에서 데이터 바인딩</h2><p>이제, <code>MainWindow.xaml.cs</code> 파일에서 <code>ItemsControl</code>에 데이터를 바인딩합니다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WpfApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line"></span><br><span class="line">            List&lt;Person&gt; people = <span class="keyword">new</span> List&lt;Person&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Person &#123; Name = <span class="string">"John"</span>, Age = <span class="number">30</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> Person &#123; Name = <span class="string">"Jane"</span>, Age = <span class="number">25</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> Person &#123; Name = <span class="string">"Sam"</span>, Age = <span class="number">40</span> &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            personItemsControl.ItemsSource = people;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-실행-결과"><a class="markdownIt-Anchor" href="#5-실행-결과"></a> 5. 실행 결과</h2><p>위의 코드를 실행하면 <code>ItemsControl</code>이 <code>List&lt;Person&gt;</code>의 데이터를 받아 각 항목을 <code>DataTemplate</code>에 따라 화면에 표시합니다. 각 <code>Person</code> 객체는 이름과 나이로 표시되며, <code>StackPanel</code>로 수평 정렬되어 출력됩니다.</p><h2 id="6-추가적인-커스터마이징"><a class="markdownIt-Anchor" href="#6-추가적인-커스터마이징"></a> 6. 추가적인 커스터마이징</h2><p>만약 <code>Person</code> 클래스에 추가 속성이 있다면 <code>DataTemplate</code>을 수정하여 더 많은 정보를 표시할 수 있습니다. 예를 들어, 직업을 추가하려면:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Job &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">// 새로운 속성 추가</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XAML에서 이를 반영:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">"Horizontal"</span> <span class="attr">Margin</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding Name&#125;"</span> <span class="attr">FontWeight</span>=<span class="string">"Bold"</span> <span class="attr">Width</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding Age&#125;"</span> <span class="attr">Width</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding Job&#125;"</span> <span class="attr">Width</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span><br></pre></td></tr></table></figure><p>코드 비하인드에서 데이터를 추가:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; people = <span class="keyword">new</span> List&lt;Person&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> Person &#123; Name = <span class="string">"John"</span>, Age = <span class="number">30</span>, Job = <span class="string">"Engineer"</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Person &#123; Name = <span class="string">"Jane"</span>, Age = <span class="number">25</span>, Job = <span class="string">"Designer"</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Person &#123; Name = <span class="string">"Sam"</span>, Age = <span class="number">40</span>, Job = <span class="string">"Manager"</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p><code>ItemsControl</code>과 <code>DataTemplate</code>을 함께 사용하면 데이터를 유연하고 아름답게 표시할 수 있습니다. 위의 예제에서 보았듯이, 각 데이터 객체는 템플릿을 통해 사용자 정의된 방식으로 표시되며, 매우 직관적이고 강력한 기능을 제공합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2024/08/09/wpf-4/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
