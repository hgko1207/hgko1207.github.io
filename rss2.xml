<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>규니의 블로그</title>
    <link>http://hgko1207.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Information related to IT</description>
    <pubDate>Thu, 21 Dec 2023 13:28:41 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>최고의 무료 AI 이미지 생성기 살펴보기</title>
      <link>http://hgko1207.github.io/2023/12/21/ai-2/</link>
      <guid>http://hgko1207.github.io/2023/12/21/ai-2/</guid>
      <pubDate>Thu, 21 Dec 2023 13:10:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/ai-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;소개&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#소개&quot;&gt;&lt;/a&gt; 소개&lt;/h2&gt;
&lt;p&gt;디지털 콘텐츠 제작의 역동적인 영역에
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/ai-2.png" alt="" /></p><h2 id="소개"><a class="markdownIt-Anchor" href="#소개"></a> 소개</h2><p>디지털 콘텐츠 제작의 역동적인 영역에서 인공지능(AI) 이미지 생성기는 새로운 차원의 창의성을 발휘할 수 있는 강력한 도구로 부상했습니다. 그래픽 디자이너, 소셜 미디어 애호가 또는 시각적 콘텐츠를 향상시키고자 하는 사람 모두에게 AI 이미지 생성기의 세계는 흥미로운 가능성으로 가득합니다. 이 글에서는 아이디어를 멋진 비주얼로 손쉽게 변환할 수 있도록 도와주는 최고의 무료 AI 이미지 생성기 몇 가지를 소개합니다.</p><h2 id="deep-dream-generator"><a class="markdownIt-Anchor" href="#deep-dream-generator"></a> Deep Dream Generator</h2><p>Deep Dream Generator로 초현실적인 여행을 떠나보세요. Google의 신경망으로 구동되는 이 도구는 평범한 이미지를 꿈같은 사이키델릭한 작품으로 바꿔줍니다. 다양한 필터와 스타일로 실험하면서 상상력을 발휘하여 독특하고 이색적인 비주얼을 만들어 보세요.</p><blockquote><p>Psychedelic은 주로 환각적인 경험을 일으키는 약물이나 물질을 가리키며, 이로 인해 감각이 왜곡되고 정신적으로 변화되는 경험을 의미합니다. 이러한 경험은 종종 색채, 모양, 패턴 등의 시각적 변화와 함께 음악이나 감각적인 자극에 대한 강한 반응을 포함합니다.</p></blockquote><p><a href="https://deepdreamgenerator.com/" target="_blank" rel="noopener">https://deepdreamgenerator.com/</a></p><p><img src="/images/header/ai-2_1.png" alt="" /></p><h2 id="dall-e-by-openai"><a class="markdownIt-Anchor" href="#dall-e-by-openai"></a> DALL-E by OpenAI</h2><p>OpenAI에서 개발한 AI 모델인 DALL-E와 함께 무한한 상상의 영역으로 들어가 보세요. 이 획기적인 이미지 생성기는 텍스트 설명을 기반으로 이미지를 생성하여 AI가 구현할 수 있는 한계를 뛰어넘습니다. 몇 가지 간단한 프롬프트만으로 신화 속 생물부터 미래 풍경까지 무엇이든 생성할 수 있습니다.</p><p><a href="https://openai.com/dall-e-2" target="_blank" rel="noopener">https://openai.com/dall-e-2</a></p><p><img src="/images/header/ai-2_2.png" alt="" /></p><h2 id="artbreeder"><a class="markdownIt-Anchor" href="#artbreeder"></a> Artbreeder</h2><p>Artbreeder를 사용하면 이미지를 혼합하고 변형하여 완전히 새로운 구성을 만들어 디지털 아티스트의 역할을 수행할 수 있습니다. 이 직관적인 플랫폼을 사용하면 색 구성표부터 얼굴 특징까지 작품의 모든 측면을 세밀하게 조정하여 시각적으로 멋지고 고도로 맞춤화된 이미지를 만들 수 있습니다.</p><p><a href="https://www.artbreeder.com/" target="_blank" rel="noopener">https://www.artbreeder.com/</a></p><p><img src="/images/header/ai-2_3.png" alt="" /></p><h2 id="runwayml"><a class="markdownIt-Anchor" href="#runwayml"></a> RunwayML</h2><p>다양한 AI 모델을 찾는 사람들에게 RunwayML은 보물창고와도 같습니다. 이 플랫폼은 다양한 크리에이티브 작업에 특화된 사전 학습된 모델을 호스팅합니다. 예술, 음악, 동영상 조작 등 어떤 작업을 하든 RunwayML은 최첨단 AI를 실험할 수 있는 사용자 친화적인 인터페이스를 제공합니다.</p><p><a href="https://runwayml.com/?ref=zguyun.com" target="_blank" rel="noopener">https://runwayml.com/?ref=zguyun.com</a></p><p><img src="/images/header/ai-2_4.png" alt="" /></p><h2 id="this-person-does-not-exist"><a class="markdownIt-Anchor" href="#this-person-does-not-exist"></a> This Person Does Not Exist</h2><p>&quot;이 사람은 존재하지 않습니다.&quot;로 사실적이지만 완전히 가상의 얼굴을 만들어 보세요. GAN(Generative Adversarial Network)으로 구동되는 이 AI 이미지 생성기는 실존하지 않는 인물의 초상화를 제작합니다. 캐릭터 디자인부터 프로젝트에 미스터리한 느낌을 더하는 것까지 다양한 용도로 이 이미지를 사용하세요.</p><p><a href="https://this-person-does-not-exist.com/en" target="_blank" rel="noopener">https://this-person-does-not-exist.com/en</a></p><p><img src="/images/header/ai-2_5.png" alt="" /></p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>AI 이미지 생성기의 시대가 열리면서 디지털 크리에이티브의 혁명이 시작되었고, 그 어느 때보다 더 쉽게 접근하고 흥미롭게 만들 수 있게 되었습니다. 아티스트, 디자이너, 콘텐츠 제작자 모두에게 이 무료 AI 이미지 생성기는 상상력을 발휘할 수 있는 놀이터를 제공합니다. 이러한 도구로 실험하고, 현실과 환상을 혼합하고, 디지털 영역에서 창의력을 마음껏 발휘하세요. 가능성은 무궁무진하며, 유일한 한계는 여러분의 창의력뿐입니다. 지금 바로 AI 기반 이미지 생성의 매혹적인 세계에 빠져보세요!</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/21/ai-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>거절을 마스터하기: 좌절을 성공으로 바꾸는 가이드</title>
      <link>http://hgko1207.github.io/2023/12/21/etc-1/</link>
      <guid>http://hgko1207.github.io/2023/12/21/etc-1/</guid>
      <pubDate>Thu, 21 Dec 2023 06:09:02 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/etc-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;거절은 직장이나 개인적인 영역 모두에서 피할 수 없는 삶의 일부입니다. 입사 지원서, 사업 제안서, 개인적인 관계 등 어떤 상황에서든 거절을 당하면 감
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/etc-1.png" alt="" /></p><p>거절은 직장이나 개인적인 영역 모두에서 피할 수 없는 삶의 일부입니다. 입사 지원서, 사업 제안서, 개인적인 관계 등 어떤 상황에서든 거절을 당하면 감당하기 어려울 수 있습니다. 하지만 거절에 어떻게 대응하느냐에 따라 미래의 성공과 행복에 큰 영향을 미칠 수 있습니다. 다음은 전문성과 회복탄력성을 가지고 거절을 처리하는 방법에 대한 가이드입니다.</p><h2 id="감정-수용하기"><a class="markdownIt-Anchor" href="#감정-수용하기"></a> 감정 수용하기</h2><p>감정을 수용한다는 것은 거절에 대한 반응으로 발생하는 감정을 인정하고 받아들이는 것을 포함합니다. 감정을 억누르거나 피하지 말고 스스로 감정을 느끼고 처리할 수 있도록 하세요. 이 단계는 진정성과 자기 인식을 바탕으로 어려움을 헤쳐 나갈 수 있는 기반을 마련하기 때문에 감성 지능, 회복탄력성, 개인적 성장을 촉진하는 데 매우 중요합니다.</p><h2 id="건설적인-피드백-구하기"><a class="markdownIt-Anchor" href="#건설적인-피드백-구하기"></a> 건설적인 피드백 구하기</h2><p>건설적인 피드백을 구하는 것은 개인적, 직업적 발전을 위한 적극적인 접근 방식입니다. 여기에는 특히 거절을 당했을 때 귀중한 통찰력을 얻기 위해 다른 사람의 의견을 적극적으로 구하는 것이 포함됩니다. 피드백을 수용함으로써 개선이 필요한 부분을 파악하고, 기술을 연마하며, 궁극적으로 좌절을 성장의 기회로 바꿀 수 있습니다.</p><h2 id="전문성-유지"><a class="markdownIt-Anchor" href="#전문성-유지"></a> 전문성 유지</h2><p>전문성을 유지하는 것은 거절을 우아하게 처리하는 데 있어 핵심적인 요소입니다. 여기에는 부정적인 반응을 자제하고 침착하고 정중한 태도로 좌절에 대응하는 것이 포함됩니다. 전문적 기준을 유지함으로써 자신의 평판을 유지하고, 회복력을 키우며, 미래의 기회에 기여할 수 있는 긍정적인 인상을 남길 수 있습니다.</p><h2 id="목표에-대한-성찰"><a class="markdownIt-Anchor" href="#목표에-대한-성찰"></a> 목표에 대한 성찰</h2><p>목표를 되돌아보는 것은 거절을 극복하는 데 있어 중요한 단계입니다. 여기에는 좌절에 직면했을 때 목표를 재평가하고 재조정하기 위해 잠시 멈추는 것이 포함됩니다. 이러한 성찰적 과정은 자기 인식을 향상시킬 뿐만 아니라 전략적인 조정을 가능하게 하여 개인 및 직업적 성장의 진화하는 여정에서 목표가 탄력적으로 유지되고 적응할 수 있도록 해줍니다.</p><h2 id="성장-마인드-기르기"><a class="markdownIt-Anchor" href="#성장-마인드-기르기"></a> 성장 마인드 기르기</h2><p>성장 마인드를 키우는 것은 거절에 직면했을 때 회복력을 키우는 데 필수적입니다. 여기에는 도전이 학습과 발전의 기회라는 믿음을 키우는 것이 포함됩니다. 성장 마인드로 도전을 받아들임으로써 좌절을 학습 과정의 자연스러운 일부로 간주하여 더 강하게 회복하고 적응하며 개인 및 직업적 성공을 향한 여정에서 지속적으로 발전할 수 있습니다.</p><h2 id="지원-시스템과-연결하기"><a class="markdownIt-Anchor" href="#지원-시스템과-연결하기"></a> 지원 시스템과 연결하기</h2><p>지원 시스템과 연결하는 것은 거절을 극복하는 데 있어 중요한 전략입니다. 여기에는 격려와 조언, 가치 있는 관점을 제공할 수 있는 친구, 멘토, 동료에게 연락하는 것이 포함됩니다. 강력한 지원 네트워크를 구축함으로써 어려운 시기에 다른 사람들로부터 힘을 얻고 회복력을 키우며 개인 및 직업적 성장을 향한 여정을 더욱 원활하게 진행할 수 있습니다.</p><h2 id="자기-관리에-집중하기"><a class="markdownIt-Anchor" href="#자기-관리에-집중하기"></a> 자기 관리에 집중하기</h2><p>자기 관리에 집중하는 것은 거절에 대처하는 데 있어 가장 중요한 측면입니다. 여기에는 휴식과 원기 회복을 촉진하는 활동에 참여하여 정신적, 정서적 웰빙을 우선시하는 것이 포함됩니다. 좌절 속에서도 자신을 돌봄으로써 회복력을 유지하고, 관점을 되찾고, 새로운 균형 감각과 긍정성을 가지고 도전에 접근할 수 있습니다.</p><h2 id="새로운-목표-설정"><a class="markdownIt-Anchor" href="#새로운-목표-설정"></a> 새로운 목표 설정</h2><p>새로운 목표를 설정하는 것은 거절에 대한 능동적인 대응으로, 적응력과 앞으로의 추진력을 의미합니다. 여기에는 열망을 재평가하고, 목표를 구체화하며, 미래의 성공을 위한 과정을 계획하는 것이 포함됩니다. 새로운 목표를 향해 집중력과 에너지를 재분배함으로써 개인은 좌절을 성장과 회복력, 지속적인 개인 및 전문성 개발의 기회로 전환할 수 있습니다.</p><h2 id="작은-승리-축하하기"><a class="markdownIt-Anchor" href="#작은-승리-축하하기"></a> 작은 승리 축하하기</h2><p>작은 승리를 축하하는 것은 거절에 직면한 후 회복의 여정에서 중요한 요소입니다. 여기에는 그 과정에서 작은 성과라도 인정하고 감사하는 것이 포함됩니다. 이러한 점진적인 승리를 인정함으로써 사기를 높이고 동기를 유지하며 긍정적인 사고방식을 함양하여 지속적인 개인 및 직업적 성장을 위한 기반을 마련할 수 있습니다.</p><h2 id="끈기-유지"><a class="markdownIt-Anchor" href="#끈기-유지"></a> 끈기 유지</h2><p>끈기를 유지하는 것이 거절에 맞서 승리하는 열쇠입니다. 여기에는 좌절에도 불구하고 흔들리지 않는 결단력과 회복력을 유지하는 것이 포함됩니다. 확고한 사고방식을 수용함으로써 도전을 헤쳐나가고, 경험을 통해 배우고, 목표를 끈질기게 추구할 수 있습니다. 끈기는 개인을 궁극적인 성공의 길로 나아가게 하는 원동력이며, 좌절을 지속적인 성취를 위한 디딤돌로 바꿔줍니다.</p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>거절은 업무적 영역과 개인적 영역을 모두 아우르는 우리의 여정에서 피할 수 없는 측면입니다. 입사 지원서, 사업 제안서, 개인적인 관계 등 그 어떤 것이든, 문제는 거절을 피할 수 없는 상황에서 어떻게 대응하느냐에 달려 있습니다. 이 글은 거절에 직면했을 때 전문성과 회복력을 키우고 좌절을 미래의 성공으로 가는 디딤돌로 삼을 수 있는 실행 가능한 단계를 제시합니다. 거절의 복잡한 지형을 헤쳐 나가면서 감정을 수용하고, 피드백을 구하고, 전문성을 유지하고, 성장 마인드를 키우는 방법을 배워보세요. 거절은 끝이 아니라 지속적인 성장과 성취를 향한 변화의 단계임을 기억하세요.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/21/etc-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React vs Vue.js] Vue.js가 React보다 좋을까?</title>
      <link>http://hgko1207.github.io/2023/12/20/web-2/</link>
      <guid>http://hgko1207.github.io/2023/12/20/web-2/</guid>
      <pubDate>Wed, 20 Dec 2023 14:05:21 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/web-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;소개&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#소개&quot;&gt;&lt;/a&gt; 소개&lt;/h2&gt;
&lt;p&gt;끊임없이 진화하는 웹 개발 환경에서
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/web-2.png" alt="" /></p><h2 id="소개"><a class="markdownIt-Anchor" href="#소개"></a> 소개</h2><p>끊임없이 진화하는 웹 개발 환경에서 올바른 프런트엔드 프레임워크를 선택하는 것은 때로는 혼란스러울 수 있습니다. 특히 선택할 수 있는 js 프레임워크가 많은 경우에는 더욱 그렇습니다.</p><p>가장 유명한 js 프론트엔드 프레임워크는 다음과 같습니다.</p><h3 id="1-react"><a class="markdownIt-Anchor" href="#1-react"></a> 1. React</h3><p><img src="/images/header/web-2_1.png" alt="" /></p><ul><li>Facebook에서 개발하고 유지 관리합니다.</li><li>Virtual DOM, 컴포넌트 기반 아키텍처 및 성능으로 유명합니다.</li><li>광범위하게 채택되어 방대한 커뮤니티와 생태계를 보유하고 있습니다.</li><li>많은 기업이 대규모 애플리케이션을 위해 선택했습니다.</li></ul><h3 id="2-angular"><a class="markdownIt-Anchor" href="#2-angular"></a> 2. Angular</h3><p><img src="/images/header/web-2_2.png" alt="" /></p><ul><li>Google에서 개발하고 유지관리합니다.</li><li>양방향 데이터 바인딩, 종속성 주입 및 대규모 애플리케이션 기능으로 잘 알려진 포괄적인 프런트엔드 프레임워크입니다.</li><li>동적 웹 애플리케이션 구축을 위한 완벽한 솔루션을 제공합니다.</li></ul><h3 id="3-vuejs"><a class="markdownIt-Anchor" href="#3-vuejs"></a> 3. Vue.js</h3><p><img src="/images/header/web-2_3.png" alt="" /></p><ul><li>커뮤니티에서 유지 관리하는 오픈 소스 프레임워크입니다.</li><li>단순성, 통합 용이성, 완만한 학습 곡선으로 잘 알려져 있습니다.</li><li>React 및 Angular와 유사한 기능을 제공하지만 보다 접근하기 쉬운 방식으로 제공됩니다.</li><li>고성능(React 보다 빠름)</li><li>개발 속도가 빠릅니다.</li></ul><h3 id="4-svelte"><a class="markdownIt-Anchor" href="#4-svelte"></a> 4. Svelte</h3><p><img src="/images/header/web-2_4.png" alt="" /></p><ul><li>오픈 소스 프런트엔드 프레임워크입니다.</li><li>DOM을 직접 조작하는 매우 효율적인 명령형 코드로 컴포넌트를 컴파일하여 차별화됩니다.</li><li>간단한 구문을 제공하고 더 나은 성능을 목표로 합니다.</li></ul><h3 id="5-emberjs"><a class="markdownIt-Anchor" href="#5-emberjs"></a> 5. Ember.js</h3><p><img src="/images/header/web-2_5.png" alt="" /></p><ul><li>오픈 소스 프런트엔드 프레임워크입니다.</li><li>구성 원칙에 대한 규칙을 따르기 때문에 크고 복잡한 애플리케이션에 적합한 강력한 선택입니다.</li><li>강력한 템플릿 엔진과 데이터 레이어를 제공합니다.</li></ul><h3 id="6-backbonejs"><a class="markdownIt-Anchor" href="#6-backbonejs"></a> 6. Backbone.js</h3><p><img src="/images/header/web-2_6.png" alt="" /></p><ul><li>오픈 소스 JavaScript 프레임워크입니다.</li><li>Model, View, Collection, Router에 중점을 두고 웹 애플리케이션을 구축하는 데 필요한 최소한의 구조를 제공합니다.</li><li>다른 라이브러리와 함께 사용하여 더 복잡한 애플리케이션을 만드는 데 자주 사용됩니다.</li></ul><h3 id="7-meteor"><a class="markdownIt-Anchor" href="#7-meteor"></a> 7. Meteor</h3><p><img src="/images/header/web-2_7.png" alt="" /></p><ul><li>웹 및 모바일 애플리케이션 구축을 위한 오픈 소스 플랫폼입니다.</li><li>React, Angular, Vue.js와 같은 프론트엔드 프레임워크와 통합되어 풀스택 솔루션을 제공합니다.</li><li>실시간 데이터 업데이트와 개발 용이성으로 잘 알려져 있습니다.</li></ul><p>자바스크립트 프레임워크 영역에서 가장 눈에 띄는 두 경쟁자는 React와 Vue.js입니다. 각각 고유한 장점과 단점이 있으며 이를 뒷받침하는 대규모 커뮤니티가 있습니다.</p><p>이 글에서는 개발자의 관점으로 React와 Vue.js 차이점, 인기, 성능을 분석하고 비교할 것입니다.</p><h2 id="react와-vuejs의-차이점"><a class="markdownIt-Anchor" href="#react와-vuejs의-차이점"></a> React와 Vue.js의 차이점</h2><p>React와 Vue.js는 모두 널리 사용되는 자바스크립트 프레임워크이지만 구문, 학습 곡선, 생태계, 상태 관리 등여러 측면에서 차이가 있습니다. 현명한 선택을 위해서는 이러한 차이점을 이해하는 것이 필수적입니다.</p><h2 id="react-vs-vuejs-인기-콘테스트"><a class="markdownIt-Anchor" href="#react-vs-vuejs-인기-콘테스트"></a> React vs Vue.js: 인기 콘테스트</h2><p>인기도는 기술 채택에 중요한 역할을 하는 경우가 많습니다. 현재 트렌드와 사용 통계를 살펴보고 이 경쟁 구도에서 React와 Vue.js가 어떻게 경쟁하고 있는지에 대한 인사이트를 제공하겠습니다.</p><h3 id="vuejs"><a class="markdownIt-Anchor" href="#vuejs"></a> Vue.js</h3><ul><li>GitHub Stars: 204k</li><li>GitHub Commits: 3.2k</li><li>GitHub 기여자: 404</li><li>스택 오버플로에 대한 질문: 91.9k</li><li>Live Websites: 2071k</li></ul><h3 id="react"><a class="markdownIt-Anchor" href="#react"></a> React</h3><ul><li>GitHub Stars: 208k</li><li>GitHub Commits: 14.8k</li><li>GitHub 기여자: 1.5k</li><li>스택 오버플로에 대한 질문: 376.4k</li><li>Live Websites: 2609k</li></ul><p>여기서 React가 Vue.js보다 더 인기가 있다는 것을 분명히 알 수 있지만, 그렇다고 해서 Vue.js를 사용하는 사람이 전혀 없다는 것을 의미하지는 않습니다. Vue.js는 React보다는 조금 적지만 자체적으로 많은 팔로워와 프로젝트에서 채택되고 있습니다.</p><h2 id="사용-방법-비교"><a class="markdownIt-Anchor" href="#사용-방법-비교"></a> 사용 방법 비교</h2><h3 id="vuejs-디렉티브directive를-사용한-html-템플릿"><a class="markdownIt-Anchor" href="#vuejs-디렉티브directive를-사용한-html-템플릿"></a> Vue.js: 디렉티브(Directive)를 사용한 HTML 템플릿</h3><p>Vue.js를 사용하면 개발자가 템플릿에서 HTML 구문을 사용할 수 있으므로 HTML에 익숙한 사람들이 쉽게 시작할 수 있습니다. 또한 Vue.js는 HTML 요소의 렌더링 및 동작을 조건부로 제어하기 위해 <code>v-if</code>, <code>v-else</code>, <code>v-show</code> 등과 같은 강력한 디렉티브를 제공합니다. 이 접근 방식은 프로세스를 단순화하며 특히 초보자에게 친숙합니다.</p><p>다음은 Vue.js 템플릿에서 <code>v-if</code> 사용법을 보여주는 간단한 예입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello, Vue.js!&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p v-if="showMessage"&gt;This message will be shown if showMessage is true.&lt;/</span>p&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      showMessage: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="react-javascript-통합이-포함된-html과-유사한-구조를-위한-jsx"><a class="markdownIt-Anchor" href="#react-javascript-통합이-포함된-html과-유사한-구조를-위한-jsx"></a> React: JavaScript 통합이 포함된 HTML과 유사한 구조를 위한 JSX</h3><p>React는 개발자가 JavaScript 파일 내에서 HTML과 유사한 코드를 작성할 수 있게 해주는 구문 확장인 JSX를 활용합니다. 처음에는 기존 HTML과 다르게 보일 수 있지만 JSX는 HTML 구조와 매우 유사하며 JavaScript 표현식 및 로직과의 완벽한 통합이라는 이점을 제공합니다.</p><p>다음은 JSX와 함께 React를 사용하는 유사한 예입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [showMessage, setShowMessage] = useState(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello, React!&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &#123;showMessage &amp;&amp; &lt;p&gt;This message will be shown if showMessage is true.&lt;/</span>p&gt;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default MyComponent;</span></span><br></pre></td></tr></table></figure><p>이 예제에서 단락(<code>&lt;p&gt;</code>) 요소는 <code>showMessage</code> 상태가 <code>true</code>인 경우에만 렌더링됩니다. JSX는 JavaScript 표현식(예: <code>{showMessage &amp;&amp; ...}</code>)을 통합하여 조건부로 렌더링을 제어합니다.</p><h2 id="react와-vuejs-성능-비교"><a class="markdownIt-Anchor" href="#react와-vuejs-성능-비교"></a> React와 Vue.js 성능 비교</h2><p>성능은 프런트엔드 프레임워크를 선택할 때 중요한 요소입니다. 렌더링 속도, 번들 크기, 최적화 기술 등 두 프레임워크의 성능 측면을 자세히 살펴보겠습니다.</p><h3 id="렌더링-속도"><a class="markdownIt-Anchor" href="#렌더링-속도"></a> 렌더링 속도</h3><ol><li><strong>Vue.js</strong><br />Vue.js는 무언가 변경될 때 화면을 빠르게 업데이트하는 데 능숙합니다. 마치 필요한 것만 업데이트하는 가장 효율적인 방법을 알아내는 스마트 시스템을 갖춘 것과 같습니다.<br /><br/></li><li><strong>React</strong><br />React는 또한 화면을 효율적으로 업데이트합니다. 가장 좋은 방법으로 업데이트하는 방법을 계획하는 스마트 비서와 같아서 모든 일이 원활하게 진행됩니다.</li></ol><h3 id="번들-크기"><a class="markdownIt-Anchor" href="#번들-크기"></a> 번들 크기</h3><ol><li><strong>Vue.js</strong><br />Vue.js는 특히 &quot;<a href="https://vuejs.org/guide/components/slots.html#scoped-slots" target="_blank" rel="noopener">범위가 지정된 슬롯(Scoped Slots)</a>&quot;이라는 기능을 사용하여 파일 크기를 작게 유지하는 데 도움이 됩니다. 공간을 덜 차지하는 방식으로 물건을 정리하는 것과 같습니다.<br /><br/></li><li><strong>React</strong><br />React는 필요한 것을 골라서 사용할 수 있는 툴킷과 같습니다. 하지만 어떻게 사용하느냐에 따라 추가 도구를 추가할 수 있기 때문에 툴킷이 조금 더 커질 수 있습니다.</li></ol><h3 id="최적화-기술"><a class="markdownIt-Anchor" href="#최적화-기술"></a> 최적화 기술</h3><ol><li><strong>Vue.js</strong><br />Vue.js에는 캐싱 및 효율적인 데이터 처리와 같이 작업 속도를 높일 수 있는 기본 제공 방법이 있습니다. 단축키를 사용하여 작업을 빠르게 완료하는 것과 같습니다.<br /><br/></li><li><strong>React</strong><br />React에는 암기 및 지연 로딩과 같이 더 빠르게 작동하도록 하는 트릭도 있습니다. 게임에서 필살기를 사용하여 진행 속도를 높이는 것과 같습니다.</li></ol><p>간단히 말해서 Vue.js와 React는 모두 작업을 빠르고 효율적으로 수행하는 데 도움이 되는 스마트 비서와 같습니다. Vue.js는 번들 크기가 더 작고 조금 더 빠르며, React는 더 유연한 툴킷이며 대규모 프로젝트에 본질적으로 사용되는 확장성이 있습니다.</p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>프리랜서이거나 소규모 스타트업을 운영하고 있다면 개발 속도가 빠르고, 성능이 뛰어나며, 상용구 코드가 훨씬 적은 Vue.js가 최선의 선택입니다.</p><p>대규모 프로젝트를 수행하는 대기업이라면 상용구 코드가 더 많지만 코드베이스가 커짐에 따라 프로젝트를 더 쉽게 처리할 수 있는 JSX를 사용하는 것이 좋습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/20/web-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>열정 없이 돈만을 위해 프로그래밍에 입문하면 안되는 5가지 이유</title>
      <link>http://hgko1207.github.io/2023/12/19/info-7/</link>
      <guid>http://hgko1207.github.io/2023/12/19/info-7/</guid>
      <pubDate>Tue, 19 Dec 2023 12:58:52 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;바보라도 컴퓨터가 이해할 수 있는 코드를 작성할 수 있습니다. 훌륭한 프로그래머는 인간이 이해할 수 있는 코드를 작성합니다. — 마틴 파울러&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/header
        
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote><p>바보라도 컴퓨터가 이해할 수 있는 코드를 작성할 수 있습니다. 훌륭한 프로그래머는 인간이 이해할 수 있는 코드를 작성합니다. — 마틴 파울러</p></blockquote><p><img src="/images/header/info-7.png" alt="" /></p><p>프로그래밍은 열정과 헌신이 필요한 분야입니다. 높은 연봉이 매력적일 수는 있지만, 열정 없이 프로그래밍을 할 충분한 이유가 될 수는 없습니다. 열정 없이 돈만 보고 프로그래밍에 뛰어들면 안 되는 5가지 이유는 다음과 같습니다.</p><ol><li>프로그래밍은 끊임없는 학습과 개선이 필요한 도전적인 분야입니다. 열정이 없으면 동기를 유지하고 최신 기술과 트렌드를 따라가는 것이 어려울 수 있습니다.<br /><br/></li><li>프로그래밍은 문제 해결 능력과 고정 관념에서 벗어나는 능력을 요구하는 창의적인 분야입니다. 열정이 없으면 복잡한 문제에 대한 혁신적인 솔루션을 찾기가 어려울 수 있습니다.<br /><br/></li><li>프로그래밍은 팀워크와 의사소통 능력이 필요한 협업 분야입니다. 열정이 없으면 다른 사람들과 함께 일하고 팀에 기여하기가 어려울 수 있습니다.<br /><br/></li><li>프로그래밍은 세심한 주의와 높은 수준의 정확성이 요구되는 분야입니다. 열정이 없으면 집중력을 유지하고 실수를 피하는 것이 어려울 수 있습니다.<br /><br/></li><li>프로그래밍은 스트레스가 많고 까다로울 수 있는 분야입니다. 열정이 없으면 압박감을 견디고 일과 삶의 균형을 유지하기 어려울 수 있습니다.</li></ol><p>열정이 없으면 기능적일 뿐만 아니라 이해하고 유지 관리하기 쉬운 코드를 작성하기 어려울 수 있으며, 반면에 열정이 부족한 프로그래머는 경력이 단절될 수 있습니다. 최신 기술과 트렌드를 따라잡는 데 어려움을 겪을 수 있으며, 이로 인해 경력 성장과 기회가 제한될 수 있습니다. 또한 다른 사람들과 협업하는 데 어려움을 겪을 수 있으며, 이로 인해 팀에 기여하는 능력이 저하될 수 있습니다. 또한 열정이 부족한 프로그래머는 업무의 스트레스와 요구를 감당하기 어려워 번아웃과 일과 삶의 균형이 깨질 수 있습니다.</p><p>스티브 잡스는 이렇게 말했습니다.</p><p><img src="/images/header/info-7_1.png" alt="" /></p><blockquote><p>일이 인생의 많은 부분을 차지하게 될 것이며, 진정으로 만족할 수 있는 유일한 방법은 자신이 훌륭한 일이라고 믿는 일을 하는 것입니다. 그리고 훌륭한 일을 할 수 있는 유일한 방법은 자신이 하는 일을 사랑하는 것입니다.</p></blockquote><p>이 인용문은 프로그래밍에서 열정의 중요성과 그것이 어떻게 만족스럽고 성공적인 커리어로 이어질 수 있는지를 강조합니다.</p><p>결론적으로, 열정은 프로그래밍에서 중요한 요소이며 프로그래머의 경력에 큰 차이를 만들 수 있습니다. 열정적인 프로그래머는 항상 자신의 기술을 배우고 향상시키기 위해 노력하며, 이는 끊임없이 진화하는 분야에서 필수적인 요소입니다. 또한 복잡한 문제에 대한 혁신적인 솔루션을 개발하는 데 필요한 창의적이고 틀에 박힌 사고방식을 벗어날 수 있는 능력을 갖추고 있습니다. 따라서 사람들의 삶을 변화시킬 수 있는 아름답고 기능적인 소프트웨어를 만들 수 있으려면 프로그래밍에 대한 열정을 갖는 것이 중요합니다.</p><p>높은 연봉이 매력적일 수는 있지만, 열정 없이 프로그래밍에 도전할 충분한 이유가 될 수는 없습니다. 프로그래밍에는 창의력, 문제 해결 능력, 팀워크, 세부 사항에 대한 주의력, 스트레스 처리 능력이 필요합니다.</p><p>유명한 프로그래머 도널드 어빈 크누스(Donald Ervin Knuth)는 이렇게 말했습니다.</p><blockquote><p>프로그래밍은 컴퓨터가 무엇을 하길 원하는지 다른 사람에게 알려주는 기술이다.</p></blockquote><p>따라서 사람들의 삶에 변화를 가져올 수 있는 아름답고 기능적인 소프트웨어를 만들 수 있으려면 프로그래밍에 대한 열정을 갖는 것이 중요합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/19/info-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MVC, MVVM, MVP 이해 및 비교</title>
      <link>http://hgko1207.github.io/2023/12/18/web-1/</link>
      <guid>http://hgko1207.github.io/2023/12/18/web-1/</guid>
      <pubDate>Mon, 18 Dec 2023 13:53:01 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/web-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;소개&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#소개&quot;&gt;&lt;/a&gt; 소개&lt;/h2&gt;
&lt;p&gt;소프트웨어 개발 세계에는 개발자가 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/web-1.png" alt="" /></p><h2 id="소개"><a class="markdownIt-Anchor" href="#소개"></a> 소개</h2><p>소프트웨어 개발 세계에는 개발자가 모듈성, 유지 관리성 및 확장성을 촉진하는 방식으로 코드를 설계하고 구성하는 데 도움이 되는 다양한 아키텍처 패턴이 있습니다. 이러한 인기 있는 세 가지 패턴은 <strong>MVC</strong>(Model-View-Controller), <strong>MVVM</strong>(Model-View-ViewModel) 및 <strong>MVP</strong>(Model-View-Presenter)입니다.</p><p>이 글에서는 이러한 아키텍처 패턴의 세부 사항을 자세히 살펴보고 주요 원칙, 장점 및 사용 사례를 알아보겠습니다.</p><h2 id="model-view-controllermvc"><a class="markdownIt-Anchor" href="#model-view-controllermvc"></a> Model-View-Controller(MVC)</h2><p>MVC는 소프트웨어 개발에서 가장 오래되고 가장 널리 사용되는 아키텍처 패턴 중 하나입니다. 다음 구성 요소로 구성됩니다.</p><ul><li><strong>Model:</strong> 애플리케이션의 데이터와 비즈니스 로직을 나타냅니다. 데이터 조작, 저장 및 검색을 관리합니다.</li><li><strong>View:</strong> 사용자에게 데이터를 표시하는 역할을 담당합니다. Model의 정보를 표시하고 사용자 입력을 처리합니다.</li><li><strong>Controller:</strong> Model과 View 사이의 중개자 역할을 합니다. View 로부터 사용자 입력을 받아 이를 처리하고, Model을 업데이트하고 그에 따라 View를 새로 고칩니다.</li></ul><h3 id="mvc의-장점"><a class="markdownIt-Anchor" href="#mvc의-장점"></a> MVC의 장점</h3><ul><li>관심사를 명확하게 분리하여 코드를 더욱 유지 관리하고 테스트할 수 있게 만듭니다.</li><li>서로 다른 View가 동일한 Model 과 Controller를 사용할 수 있으므로 코드 재사용성이 향상됩니다.</li><li>병렬 개발을 지원하여 UI 디자이너와 개발자가 독립적으로 작업할 수 있습니다.</li></ul><h3 id="사용-사례"><a class="markdownIt-Anchor" href="#사용-사례"></a> 사용 사례</h3><p>MVC는 Spring Framework, Ruby on Rails, Django 및 ASP.NET과 같은 웹 개발 프레임워크에서 일반적으로 사용됩니다.</p><h2 id="model-view-viewmodelmvvm"><a class="markdownIt-Anchor" href="#model-view-viewmodelmvvm"></a> Model-View-ViewModel(MVVM)</h2><p>MVVM은 특히 복잡하고 데이터가 풍부한 애플리케이션의 맥락에서 MVC의 일부 제한 사항에 대한 대응으로 등장한 디자인 패턴입니다. MVVM은 다음 구성 요소로 구성됩니다.</p><ul><li><strong>Model:</strong> MVC 모델과 유사하게 애플리케이션의 데이터와 비즈니스 로직를 나타냅니다.</li><li><strong>View:</strong> 사용자 인터페이스를 나타내지만 MVC보다 더 수동적입니다. ViewModel에 의해 노출된 속성 및 명령에 바인딩됩니다.</li><li><strong>ViewModel:</strong> View의 상태와 동작을 추상화하는 역할을 합니다. Model과 View 간의 통신을 중재하고 View가 바인딩하는 데이터와 명령을 노출합니다.</li></ul><h3 id="mvvm의-장점"><a class="markdownIt-Anchor" href="#mvvm의-장점"></a> MVVM의 장점</h3><ul><li>View 와 Model 간의 결합을 줄여 MVC보다 더 나은 관심사 분리를 촉진합니다.</li><li>데이터 바인딩을 촉진하여 기본 데이터가 변경될 때 UI 업데이트를 단순화합니다.</li><li>ViewModel을 UI와 독립적으로 테스트할 수 있으므로 테스트 가능성이 향상됩니다.</li></ul><h3 id="사용-사례-2"><a class="markdownIt-Anchor" href="#사용-사례-2"></a> 사용 사례</h3><p>MVVM은 클라이언트 측 애플리케이션, 특히 Angular, React, Vue.js 및 Xamarin과 같은 프레임워크에서 널리 사용됩니다.</p><h2 id="model-view-presentermvp"><a class="markdownIt-Anchor" href="#model-view-presentermvp"></a> Model-View-Presenter(MVP)</h2><p>MVP는 관심사 분리에 초점을 맞추지만 MVC 및 MVVM과는 다른 방식으로 수행되는 또 다른 아키텍처 패턴입니다. 다음 구성 요소로 구성됩니다.</p><ul><li><strong>Model:</strong> MVC 및 MVVM과 유사하며 애플리케이션의 데이터와 비지니스 로직을 캡슐화합니다.</li><li><strong>View:</strong> 사용자 인터페이스를 나타내지만 MVVM의 View에 비해 더 활동적입니다. View는 사용자 입력을 Presenter에게 직접 전달합니다.</li><li><strong>Presenter:</strong> MVC의 Controller와 유사하게 Model과 View 사이의 중개자 역할을 합니다. 그러나 MVP에서는 View가 일반적으로 더 수동적입니다.</li></ul><h3 id="mvp의-장점"><a class="markdownIt-Anchor" href="#mvp의-장점"></a> MVP의 장점</h3><ul><li>Presenter는 UI 없이 쉽게 단위 테스트할 수 있으므로 높은 수준의 테스트 가능성을 제공합니다.</li><li>관심사를 명확하게 분리하고 UI와 애플리케이션 로직을 강력하게 구분하도록 권장합니다.</li><li>개발자가 Presenter 및 Model에서 작업하는 동안 UI 디자이너가 View에서 작업할 수 있으므로 병렬 개발이 용이합니다.</li></ul><h3 id="사용-사례-3"><a class="markdownIt-Anchor" href="#사용-사례-3"></a> 사용 사례</h3><p>MVP는 특히 WinForms, WPF 및 GWT와 같은 기술을 사용하여 데스크톱 애플리케이션 개발에 일반적으로 사용됩니다.</p><h2 id="mvc-mvvm-mvp-비교"><a class="markdownIt-Anchor" href="#mvc-mvvm-mvp-비교"></a> MVC, MVVM, MVP 비교</h2><ul><li><strong>데이터 바인딩:</strong> MVVM은 데이터 바인딩에 탁월하므로 UI와 기본 데이터의 동기화를 더 쉽게 유지할 수 있습니다. MVC와 MVP는 수동 동기화가 필요합니다.</li><li><strong>테스트 가능성:</strong> MVP와 MVVM은 애플리케이션의 로직을 별도로 테스트할 수 있기 때문에 MVC에 비해 더 나은 테스트 가능성을 제공합니다.</li><li><strong>복잡성:</strong> MVC는 더 간단하고 소규모에서 중간 정도 복잡한 애플리케이션에 더 적합할 수 있는 반면, MVVM과 MVP는 더 크고 복잡한 프로젝트에서 빛을 발합니다.</li><li><strong>학습 곡선:</strong> MVVM 및 MVP는 추가 구성 요소 및 개념으로 인해 학습 곡선이 더 가파르게 느껴질 수 있습니다.</li><li><strong>플랫폼:</strong> 이러한 패턴 간의 선택은 플랫폼에 따라 달라질 수도 있습니다. MVC는 웹 개발과 관련되는 경우가 많고, MVVM은 클라이언트 측 애플리케이션에 널리 사용되고 MVP는 데스크톱 애플리케이션에 일반적으로 사용됩니다.</li></ul><blockquote><p>테스트 가능성(Testability)은 과학과 과학적 방법의 주요 측면입니다. 테스트 가능성에는 반증 가능성 또는 실현 불가능성 두 가지 구성 요소가 있습니다. 이는 가설에 대한 반례가 논리적으로 가능함을 의미합니다. <a href="https://en.wikipedia.org/wiki/Testability" target="_blank" rel="noopener">위키백과</a></p></blockquote><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>결론적으로 MVC, MVVM, MVP 중에서 선택하는 것은 특정 프로젝트 요구 사항, 팀 전문 지식, 개발 대상 플랫폼에 따라 달라집니다. 각 패턴은 강력하고 유지보수가 가능한 소프트웨어를 구축하는 데 필요한 관심사 분리(Separation of concerns), 모듈성(Modularity) 및 테스트 가능성(Testability)을 달성하기 위한 다양한 접근 방식을 제공합니다. 각 패턴의 원리와 장점을 이해하면 다음 소프트웨어 애플리케이션을 설계할 때 정보에 입각한 결정을 내리는 데 도움이 될 수 있습니다.</p><blockquote><p>컴퓨터 과학에서 관심사 분리(Separation of concerns)는 컴퓨터 프로그램을 구별된 부분으로 분리시키는 디자인 원칙으로, 각 부문은 개개의 관심사를 해결한다. 관심사란 컴퓨터 프로그램 코드에 영향을 미치는 정보의 집합이다. <a href="https://ko.wikipedia.org/wiki/%EA%B4%80%EC%8B%AC%EC%82%AC_%EB%B6%84%EB%A6%AC" target="_blank" rel="noopener">위키백과</a></p></blockquote>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/18/web-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[ChatGPT] 코딩에서 활용하기 위한 5가지 팁</title>
      <link>http://hgko1207.github.io/2023/12/16/chatgpt-3/</link>
      <guid>http://hgko1207.github.io/2023/12/16/chatgpt-3/</guid>
      <pubDate>Sat, 16 Dec 2023 05:49:03 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/chatgpt-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;는 매우 빠르게 개발자들의 필수 도구가 되었습니다. 우리 모두는 이 도구가 루프 생성이나 if 조건 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/chatgpt-3.png" alt="" /></p><p><strong>ChatGPT</strong>는 매우 빠르게 개발자들의 필수 도구가 되었습니다. 우리 모두는 이 도구가 루프 생성이나 if 조건 등을 사용하는 작은 알고리즘 등 코딩의 사소한 작업을 잘 처리한다는 것을 알고 있습니다.</p><p>또한 최근 또는 새로운 주요 변경 사항이 있는 라이브러리에 대한 코드를 생성하거나 적절하게 설명되지 않은 복잡한 대규모 작업의 경우 약점이 있다는 것을 알 수 있습니다.</p><h2 id="팁"><a class="markdownIt-Anchor" href="#팁"></a> 팁</h2><p>코딩에서 ChatGPT를 더 잘 사용하기 위한 5가지 팁에 대해 알아보겠습니다.</p><ol><li><strong>질문을 작은 작업으로 나누고 한 번에 한 단계씩 점진적으로 추가하여 코드를 생성하도록 요청하세요.</strong> 이 접근 방식은 복잡한 코드 블록과 관련하여 더 나은 코딩 결과를 제공하고 오류를 줄이는 것으로 나타났습니다. 외부 라이브러리 등이 포함된 복잡한 작업에 특히 유용합니다.<br /><br/></li><li><strong>가능한 한 구체적인 용어와 전문 용어를 사용하여 명확하고 상세하게 프롬프트를 작성하세요.</strong> 지식이 풍부한 웹 개발자와 대화하는 것처럼 ChatGPT와 대화하고 아이디어를 전달하는 데 사용할 모든 용어를 사용하세요. 프롬프트를 단순화하기 위해 기술 용어를 사용하는 것을 주저하지 마십시오.<br /><br/></li><li><strong>외부 라이브러리의 경우 ChatGPT에 의해 생성되는 오래된 구문에 주의하세요.</strong> ChatGPT에 의해 생성된 외부 라이브러리 사용 코드에 이상한 오류가 표시되면 항상 이를 의심해 보세요. 이 경우 해당 라이브러리의 설명서를 확인하는 것이 좋습니다.<br /><br/></li><li><strong>대규모 작업을 구현하기 위한 계획을 찾을 때는 ChatGPT에 코딩 문제와 프로젝트에 대한 개요를 제공하고 여러 가지 방법과 제안을 요청하는 것이 좋습니다.</strong> 이렇게 하면 머릿속에 떠오르지 않았던 아이디어를 떠올릴 수 있습니다.<br /><br/></li><li><strong>생성된 코드에 대한 설명을 ChatGPT에 묻는 것을 게을리하지 마십시오.</strong> Chatgpt는 생성된 코드를 매우 잘 설명 할 수 있으며 코드가 무엇을하고 있는지 명확하게 알려줌으로써 생성된 코드의 버그를 더 빨리 해결하는 데 도움이 됩니다.</li></ol><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>ChatGPT가 개발자를 그렇게 빨리 대체할 수 있다고 믿지 않습니다. 그러나 프로그래밍의 낮은 수준 작업을 자동화하여 개발자가 단조롭고 지루한 부분을 맡길 수 있습니다. ChatGPT를 잘 활용하면 개발자의 업무 효율을 최소 2배 향상시킬 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/16/chatgpt-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>생성형 AI(Generative AI)의 미래</title>
      <link>http://hgko1207.github.io/2023/12/15/ai-1/</link>
      <guid>http://hgko1207.github.io/2023/12/15/ai-1/</guid>
      <pubDate>Fri, 15 Dec 2023 01:41:28 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/ai-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;소개&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#소개&quot;&gt;&lt;/a&gt; 소개&lt;/h2&gt;
&lt;p&gt;인공지능의 세계는 변혁의 시대를 맞이
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/ai-1.png" alt="" /></p><h2 id="소개"><a class="markdownIt-Anchor" href="#소개"></a> 소개</h2><p>인공지능의 세계는 변혁의 시대를 맞이하고 있으며, 이 혁명의 중심에는 생성형 AI(Generative AI)가 있습니다. 이 고급 모델은 콘텐츠를 제작하고 복잡한 문제를 해결할 수 있는 힘을 가지고 있으며, 우리가 기술과 상호작용하는 방식과 그 가능성을 재정의하고 있습니다.</p><p>이 글에서는 생성형 AI의 현실감과 창의성 향상부터 윤리적, 환경적 영향에 이르기까지 생성형 AI의 미래에 대해 살펴볼 것입니다. 앞으로 펼쳐질 흥미진진한 여정에 대해 자세히 알아봅시다.</p><blockquote><p>생성형 인공지능(generative artificial intelligence) 또는 생성형 AI(generative AI)는 프롬프트에 대응하여 텍스트, 이미지, 기타 미디어를 생성할 수 있는 일종의 인공지능(AI) 시스템이다. 생성형 AI는 입력 트레이닝 데이터의 패턴과 구조를 학습한 다음 유사 특징이 있는 새로운 데이터를 만들어낸다. <a href="https://ko.wikipedia.org/wiki/%EC%83%9D%EC%84%B1%ED%98%95_%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5" target="_blank" rel="noopener">위키백과</a></p></blockquote><h2 id="현실감과-창의성-향상"><a class="markdownIt-Anchor" href="#현실감과-창의성-향상"></a> 현실감과 창의성 향상</h2><p>생성형 AI는 많은 발전을 이루었지만 아직 시작에 불과합니다. 미래의 모델은 사실주의와 창의성의 경계를 넓혀 사실상 인간의 창조물과 구별할 수 없는 콘텐츠를 제작할 것입니다. 실제과 같은 텍스트, 이미지, 음악, 심지어 동영상을 생성하는 이러한 모델은 사람과 AI가 생성한 콘텐츠 사이의 경계를 계속해서 허물어뜨릴 것입니다.</p><h2 id="다중-모드-기능"><a class="markdownIt-Anchor" href="#다중-모드-기능"></a> 다중 모드 기능</h2><p>텍스트, 이미지, 오디오 등 다양한 데이터 유형을 동시에 원활하게 작업할 수 있는 AI 모델을 상상해 보세요. 이러한 다중 모드 기능은 이전에는 불가능하다고 여겨졌던 방식으로 내러티브에 생동감을 불어넣는 새로운 형태의 몰입형 스토리텔링을 가능하게 할 것입니다.</p><blockquote><p>이야기 또는 '내러티브’란 어떤 사물이나 사실, 현상에 대하여 일정한 줄거리를 가지고 하는 말이나 글을 말한다. 문학에서 이야기는 배경, 인물, 구성, 이야기를 이루는 분위기인 톤으로 이루어진다. <a href="https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%95%BC%EA%B8%B0" target="_blank" rel="noopener">위키백과</a></p></blockquote><h2 id="대규모-개인화"><a class="markdownIt-Anchor" href="#대규모-개인화"></a> 대규모 개인화</h2><p>생성형 AI의 가장 유망한 측면 중 하나는 고도로 개인화된 경험을 대규모로 제공할 수 있는 잠재력입니다. 개별 학습 스타일에 맞춘 교육부터 개인 취향에 맞는 제품 추천에 이르기까지, 생성형 AI는 각 사용자의 고유한 요구 사항을 충족할 수 있습니다.</p><h2 id="산업별-솔루션"><a class="markdownIt-Anchor" href="#산업별-솔루션"></a> 산업별 솔루션</h2><p>맞춤형 생성 AI 모델은 의료, 금융, 교육, 제조 등 특정 산업을 위해 개발될 것입니다. 이러한 모델은 산업별 과제를 해결하여 전문가가 작업하고 문제를 해결하는 방식을 혁신을 가져올 것입니다.</p><h2 id="인간과-기계의-협업-강화"><a class="markdownIt-Anchor" href="#인간과-기계의-협업-강화"></a> 인간과 기계의 협업 강화</h2><p>생성형 AI는 인간을 대체하는 것이 아니라 오히려 인간의 능력을 보완할 것입니다. 인간과 AI 간의 효과적인 협업은 다양한 직업에서 표준이 되어 업무의 효율성을 높이고 새로운 가능성의 문을 열 것입니다.</p><h2 id="콘텐츠-조정content-moderation-및-검증"><a class="markdownIt-Anchor" href="#콘텐츠-조정content-moderation-및-검증"></a> 콘텐츠 조정(Content Moderation) 및 검증</h2><p>디지털 정보 시대에는 허위 정보와의 전쟁과 콘텐츠 무결성 유지가 매우 중요합니다. 생성형 AI는 콘텐츠 조정 및 사실 확인을 자동화하여 정확하고 신뢰할 수 있는 정보만 대중에게 전달되도록 하는 데 중요한 역할을 할 것입니다.</p><blockquote><p>사용자에게 댓글을 게시하도록 요청하는 인터넷 웹사이트에서 콘텐츠 조정은 유용하거나 유익한 게시물과는 대조적으로 관련성이 없거나 외설적이거나 불법적이거나 유해하거나 공격적인 게시물을 감지하는 프로세스이며, 종종 반대 관점을 검열하거나 억제합니다. <a href="https://en.wikipedia.org/wiki/Content_moderation" target="_blank" rel="noopener">위키백과</a></p></blockquote><h2 id="자연어-인터페이스"><a class="markdownIt-Anchor" href="#자연어-인터페이스"></a> 자연어 인터페이스</h2><p>생성형 AI로 구동되는 고급 챗봇과 가상 비서는 보다 자연스럽고 인간과 유사한 대화 상호 작용을 제공할 것입니다. 사용자 경험과 고객 지원이 개선되면서 우리가 기술과 상호 작용하는 방식을 재정의할 것입니다.</p><h2 id="예술과-디자인의-혁신"><a class="markdownIt-Anchor" href="#예술과-디자인의-혁신"></a> 예술과 디자인의 혁신</h2><p>생성형 AI가 예술, 디자인, 건축의 경계를 허물면서 창조 산업에 혁명이 일어날 것입니다. 그리고 새로운 형태의 표현을 가능하게 하여 혁신과 창의성을 촉진할 것입니다.</p><h2 id="음악-및-엔터테인먼트"><a class="markdownIt-Anchor" href="#음악-및-엔터테인먼트"></a> 음악 및 엔터테인먼트</h2><p>생성형 AI로 생성된 음악, 영화 및 기타 형태의 엔터테인먼트가 더욱 보편화될 것입니다. 이는 완전히 새로운 장르와 경험의 출현으로 이어져 엔터테인먼트 세계에서 가능한 일의 지평을 넓힐 것입니다.</p><h2 id="지속적인-학습과-자기계발"><a class="markdownIt-Anchor" href="#지속적인-학습과-자기계발"></a> 지속적인 학습과 자기계발</h2><p>미래의 생성형 AI 모델은 사람의 개입 없이도 새로운 데이터와 진화하는 트렌드에 적응하면서 지속적으로 학습할 수 있게 될 것입니다. 이를 통해 빠르게 변화하는 세계에서 관련성과 최신성을 유지할 수 있습니다.</p><h2 id="책임감-있는-ai-개발"><a class="markdownIt-Anchor" href="#책임감-있는-ai-개발"></a> 책임감 있는 AI 개발</h2><p>생성형 AI가 널리 보급됨에 따라 윤리적이고 책임감 있는 AI 개발에 대한 강조가 커질 것입니다. 회사와 연구자들은 AI가 사회 전체에 혜택을 줄 수 있도록 편견, 공정성, 투명성과 같은 문제를 해결하기 위한 보호 장치를 구현할 것입니다.</p><h2 id="환경-고려-사항"><a class="markdownIt-Anchor" href="#환경-고려-사항"></a> 환경 고려 사항</h2><p>AI의 에너지 소비는 우려의 대상이었지만 미래의 생성형 AI 모델은 환경의 지속 가능성을 염두에 두고 설계될 가능성이 높습니다. 탄소 배출량과 에너지 소비를 최소화하는 것이 최우선 과제가 될 것입니다.</p><h2 id="법률-및-규제-프레임워크"><a class="markdownIt-Anchor" href="#법률-및-규제-프레임워크"></a> 법률 및 규제 프레임워크</h2><p>생성형 AI가 우리 삶에 더욱 필수적인 요소가 되면서 지적 재산권, 개인정보 보호, 안전 문제를 해결하기 위한 법률 및 규제 프레임워크가 발전할 것입니다. 이러한 프레임워크는 AI가 책임감 있고 윤리적으로 사용되도록 보장할 것입니다.</p><h2 id="과학적-발견"><a class="markdownIt-Anchor" href="#과학적-발견"></a> 과학적 발견</h2><p>생성형 AI는 과학 연구에서 중추적인 역할을 하며 신약 개발, 재료 과학, 기후 모델링과 같은 분야의 발견을 가속화할 것입니다. 이는 연구자들이 방대한 양의 데이터를 처리하고 이전에 숨겨져 있던 패턴을 찾는 데 도움이 될 것입니다.</p><h2 id="맞춤화-및-개인-비서"><a class="markdownIt-Anchor" href="#맞춤화-및-개인-비서"></a> 맞춤화 및 개인 비서</h2><p>AI 개인 비서는 개별 사용자에게 더욱 맞춤화되어 지원뿐만 아니라 동반자 역할과 정서적 지원까지 제공할 것입니다. 이러한 개인적인 접촉은 인간과 AI 관계를 강화할 것입니다.</p><h2 id="교육"><a class="markdownIt-Anchor" href="#교육"></a> 교육</h2><p>생성형 AI는 개인화된 학습 경험을 제공하고, 교육 콘텐츠를 제작하고, 적응형 학습을 제공함으로써 교육에 혁명을 일으킬 것입니다. 이를 통해 학습의 몰입도와 효과를 높여 학생들이 필요한 교육을 받을 수 있게 될 것입니다.</p><h2 id="ai가-만들어낸-혁신"><a class="markdownIt-Anchor" href="#ai가-만들어낸-혁신"></a> AI가 만들어낸 혁신</h2><p>생성형 AI는 기술과 비즈니스의 경계를 허무는 새로운 아이디어, 발명품, 프로토타입을 생성하는 혁신의 원동력이 될 것입니다. 이는 오늘날 우리가 상상조차 할 수 없는 발전을 가져올 것입니다.</p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>생성형 AI의 미래는 엄청난 가능성을 갖고 있습니다. 이는 우리의 삶을 개선하고, 경제 성장을 촉진하며, 시급한 글로벌 과제를 해결할 수 있는 잠재력을 가지고 있습니다. 그러나 이는 생성형 AI가 계속 발전함에 따라 신중하게 고려하고 해결해야 할 윤리적, 사회적 문제도 제기되고 있습니다. 앞으로의 여정은 무한한 가능성으로 가득 차 있으며, 빠르게 변화하는 세상에서 생성형 AI가 선한 역할을 할 수 있도록 하는 것은 우리에게 달려 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/15/ai-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[ChatGPT] 대화형 AI 활용</title>
      <link>http://hgko1207.github.io/2023/12/15/chatgpt-2/</link>
      <guid>http://hgko1207.github.io/2023/12/15/chatgpt-2/</guid>
      <pubDate>Thu, 14 Dec 2023 15:00:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;기술이 디지털 세계와 상호 작용하는 방식을 지속적으로 변화시키는 시대에 챗봇과 가상 비서는 인간과 컴퓨터의 상호 작용을 위한 강력한 도구로 등장했습니다. 이 분야의 최신 혁신 중에는 OpenAI가 개발한 최첨단 AI 모델인 ChatGPT가 있습니
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>기술이 디지털 세계와 상호 작용하는 방식을 지속적으로 변화시키는 시대에 챗봇과 가상 비서는 인간과 컴퓨터의 상호 작용을 위한 강력한 도구로 등장했습니다. 이 분야의 최신 혁신 중에는 OpenAI가 개발한 최첨단 AI 모델인 ChatGPT가 있습니다.</p><p>이 글에서는 ChatGPT의 매혹적인 세계와 그 기능, 대화형 AI의 미래에 미치는 영향을 살펴봅니다.</p><h2 id="챗봇과-가상-비서의-등장"><a class="markdownIt-Anchor" href="#챗봇과-가상-비서의-등장"></a> 챗봇과 가상 비서의 등장</h2><p>챗봇(Chatbot)과 가상 비서(Virtual Assistant)는 처음부터 많은 발전을 이루었습니다. 처음에는 간단한 작업과 반복적인 쿼리를 위해 설계되었으나 인간과 유사한 텍스트를 이해하고 생성할 수 있는 매우 정교한 대화 에이전트로 발전했습니다. 오늘날 챗봇은 고객 서비스, 의료, 전자상거래, 엔터테인먼트 등 다양한 산업 분야에서 사용되고 있습니다.</p><h2 id="chatgpt-소개"><a class="markdownIt-Anchor" href="#chatgpt-소개"></a> ChatGPT 소개</h2><p>ChatGPT는 대화형 AI 세계에 탁월한 추가 기능을 제공합니다. GPT(Generative Pre-trained Transformer) 제품군의 일부로 개발된 이 제품은 이전 제품의 놀라운 자연어 이해 및 생성 기능을 물려받았습니다. ChatGPT는 의미 있는 대화에 사용자를 참여시키도록 설계되었으므로 다음을 포함한 광범위한 애플리케이션에 이상적인 후보입니다.</p><ol><li><strong>고객 지원:</strong> ChatGPT는 고객 문의 처리, 문제 해결, 지원을 연중무휴 24시간 제공하여 고객 만족도를 높일 수 있습니다.<br /><br/></li><li><strong>콘텐츠 생성:</strong> 기사 초안 작성부터 마케팅 자료 작성까지 콘텐츠 생성을 지원하여 시간과 노력을 절약할 수 있습니다.<br /><br/></li><li><strong>언어 번역:</strong> ChatGPT는 언어 간 텍스트를 번역하고 문화 간 의사소통을 촉진함으로써 언어 장벽을 허물 수 있습니다.<br /><br/></li><li><strong>가상 교사:</strong> 맞춤형 학습 경험과 교육 지원을 제공하는 가상 교사 역할을 할 수 있는 잠재력이 있습니다.<br /><br/></li><li><strong>대화형 캐릭터:</strong> 게임 개발자는 ChatGPT를 활용하여 역동적인 대화와 개성을 지닌 실물 같은 캐릭터를 만들 수 있습니다.</li></ol><h2 id="chatgpt-작동-방식"><a class="markdownIt-Anchor" href="#chatgpt-작동-방식"></a> ChatGPT 작동 방식</h2><p>ChatGPT의 핵심은 딥 러닝 아키텍처입니다. 이 모델은 인터넷의 광범위한 텍스트 데이터세트를 통해 훈련되어 언어 패턴과 맥락을 학습할 수 있습니다. 사용자의 입력이 제공되면 ChatGPT는 입력과 해당 지식을 기반으로 가장 가능성이 높은 다음 단어를 예측하여 응답을 생성합니다.</p><p>맥락을 이해하고, 대화를 유지하며, 일관성 있고 맥락에 맞는 응답을 제공하는 모델의 능력이 ChatGPT를 차별화하는 요소입니다. 다양한 입력을 처리하고 다양한 대화 상황에 적응할 수 있어 다재다능하고 적응력이 뛰어납니다.</p><h2 id="chatgpt를-통한-대화형-ai의-미래"><a class="markdownIt-Anchor" href="#chatgpt를-통한-대화형-ai의-미래"></a> ChatGPT를 통한 대화형 AI의 미래</h2><p>ChatGPT는 대화형 AI 개발에 있어 중요한 도약을 의미합니다. 계속해서 개선되고 확장됨에 따라 우리는 예상할 수 있습니다.</p><ol><li><strong>향상된 고객 경험:</strong> ChatGPT가 제공하는 향상된 챗봇은 보다 효과적이고 개인화된 고객 상호 작용을 제공하여 고객 만족도와 충성도를 높입니다.<br /><br/></li><li><strong>생산성 향상:</strong> 기업과 개인은 AI 기반 콘텐츠 생성, 자동화된 응답, 더 많은 작업을 수행할 수 있는 가상 비서의 이점을 누릴 수 있습니다.<br /><br/></li><li><strong>원활한 다문화 커뮤니케이션:</strong> ChatGPT가 번역 및 언어 지원에 더욱 능숙해짐에 따라 언어 장벽이 더욱 낮아질 것입니다.<br /><br/></li><li><strong>고급 교육 도구:</strong> 가상 교사와 맞춤형 학습 경험은 우리가 지식과 기술을 습득하는 방식에 혁명을 일으킬 것입니다.<br /><br/></li><li><strong>몰입형 가상 세계:</strong> 게임 개발자는 ChatGPT 기반 캐릭터를 통해 더욱 몰입감 있고 대화형인 게임 경험을 만들 수 있습니다.</li></ol><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>ChatGPT는 대화형 AI 세계의 획기적인 발전입니다. 놀라운 기능, 다용성 및 적응성은 인간과 컴퓨터의 상호 작용이 더욱 자연스럽고 매력적인 미래를 위한 큰 가능성을 제시합니다. 고객 서비스를 개선하려는 기업, 지원이 필요한 콘텐츠 제작자, 사용자 경험을 향상시키려는 게이머 등 ChatGPT는 기술과 커뮤니케이션의 미래를 형성하는 데 중추적인 역할을 할 준비가 되어 있습니다. ChatGPT와 대화형 AI의 세계에서 앞으로 펼쳐질 흥미로운 발전에 계속 관심을 가져주세요.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/15/chatgpt-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>다중 장치(Multi-Device)를 위한 반응형 디자인</title>
      <link>http://hgko1207.github.io/2023/12/13/web-design-3/</link>
      <guid>http://hgko1207.github.io/2023/12/13/web-design-3/</guid>
      <pubDate>Wed, 13 Dec 2023 02:39:42 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/web-design-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;오늘날의 디지털 환경에서 웹 페이지는 대형 데스크톱 모니터부터 소형 스마트폰에 이르기까지 다양한 장치에서 액세스됩니다. 웹 사이트가 이러한
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/web-design-3.png" alt="" /></p><p>오늘날의 디지털 환경에서 웹 페이지는 대형 데스크톱 모니터부터 소형 스마트폰에 이르기까지 다양한 장치에서 액세스됩니다. 웹 사이트가 이러한 모든 장치에서 멋지게 보이고 원활하게 작동하는지 확인하는 것은 현대 웹 디자인의 기본 측면입니다. 반응형 디자인이 중요한 역할을 하는 곳이 바로 여기입니다.</p><h2 id="반응형-디자인이란-무엇입니까"><a class="markdownIt-Anchor" href="#반응형-디자인이란-무엇입니까"></a> 반응형 디자인이란 무엇입니까?</h2><p>반응형 디자인은 웹 페이지를 다양한 화면 크기와 장치에 맞게 적절하게 적용하는 것을 목표로 하는 웹 디자인 접근 방식입니다. 이는 웹 사이트가 데스크톱 컴퓨터, 태블릿, 휴대폰 중 어느 기기에서 보이든 상관없이 원활한 사용자에 보여지는 것입니다. 반응형 디자인을 사용하면 모든 기기에서 콘텐츠에 액세스할 수 있을 뿐만 아니라 사용자 친화적이기도 합니다.</p><h2 id="미디어-쿼리media-query의-역할"><a class="markdownIt-Anchor" href="#미디어-쿼리media-query의-역할"></a> 미디어 쿼리(Media Query)의 역할</h2><p>미디어 쿼리는 반응형 디자인의 초석입니다. 이는 화면 너비나 높이와 같은 특정 조건에서 웹 페이지가 표시되는 방법을 지정하는 CSS 규칙입니다. 미디어 쿼리를 사용하면 사용 중인 장치의 특성에 따라 다양한 스타일을 적용하거나 레이아웃을 조정할 수 있습니다.</p><h2 id="미디어-쿼리-이해"><a class="markdownIt-Anchor" href="#미디어-쿼리-이해"></a> 미디어 쿼리 이해</h2><p>미디어 쿼리의 작동 방식과 미디어 쿼리를 사용하여 반응형 웹 페이지를 만드는 방법을 분석해 보겠습니다.</p><h3 id="1미디어-쿼리-정의"><a class="markdownIt-Anchor" href="#1미디어-쿼리-정의"></a> 1.미디어 쿼리 정의</h3><p>미디어 쿼리는 CSS 파일의 <code>@media</code> 규칙을 사용하여 정의됩니다. 기본 구조는 다음과 같습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="comment">/* 최대 너비가 768픽셀인 화면에 대한 CSS 규칙 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서 미디어 쿼리는 최대 너비가 768픽셀인 화면을 대상으로 합니다.</p><h3 id="2-조건-설정"><a class="markdownIt-Anchor" href="#2-조건-설정"></a> 2. 조건 설정</h3><p>미디어 쿼리 내에서 <code>and</code>, <code>or</code>, <code>not</code>과 같은 논리 연산자를 사용하여 조건을 지정합니다. 화면 너비, 높이, 방향 등 다양한 측면을 타겟팅할 수 있습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">orientation:</span> portrait) &#123;</span><br><span class="line">  <span class="comment">/* 세로 모드에서 최대 너비가 768픽셀인 화면에 대한 CSS 규칙 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-css-규칙-적용"><a class="markdownIt-Anchor" href="#3-css-규칙-적용"></a> 3. CSS 규칙 적용</h3><p>미디어 쿼리 블록 내에서 조건이 충족될 때 적용되는 특정 CSS 규칙을 적용할 수 있습니다. 예를 들어 글꼴 크기를 변경하고, margin 과 padding 을 조정하고, 요소(element)를 숨기거나 표시하고, 레이아웃을 재구성할 수도 있습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="comment">/* 작은 화면에 맞게 글꼴 크기 조정 */</span></span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="반응형-디자인-원칙"><a class="markdownIt-Anchor" href="#반응형-디자인-원칙"></a> 반응형 디자인 원칙</h2><p>미디어 쿼리 외에도 반응형 웹 페이지를 디자인할 때 명심해야 할 몇 가지 기본 원칙이 있습니다.</p><ol><li><strong>모바일 우선 접근 방식:</strong> 가장 작은 화면 크기를 염두에 두고 디자인을 시작한 다음 점차적으로 더 큰 화면에 맞게 향상시키세요. 이를 통해 사이트는 모바일 사용자에게 최적화됩니다.<br /><br/></li><li><strong>유연한 그리드:</strong> 콘텐츠가 다양한 화면 크기에 맞게 조정되도록 하려면 백분율 기반 또는 유연한 그리드를 사용하세요. CSS Grid와 Flexbox는 이러한 목적을 위한 강력한 도구입니다.<br /><br/></li><li><strong>이미지 최적화:</strong> 화면 크기에 맞게 조정되는 반응형 이미지를 사용하고 지연 로딩을 고려하여 모바일 장치의 페이지 로드 시간을 개선합니다.<br /><br/></li><li><strong>콘텐츠 우선순위 지정:</strong> 작은 화면에 맞춰 콘텐츠의 우선순위를 지정하고 재구성하세요. 중요한 정보는 쉽게 접근할 수 있어야 하며, 필수적이지 않은 요소는 숨기거나 압축할 수 있어야 합니다.<br /><br/></li><li><strong>테스트:</strong> 다양한 장치와 브라우저에서 웹사이트를 정기적으로 테스트하여 의도한 대로 모양과 기능이 작동하는지 확인합니다. 에뮬레이터와 브라우저 개발자 도구는 테스트에 매우 유용할 수 있습니다.</li></ol><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>반응형 디자인은 더 이상 있으면 좋은 기능이 아니라 오늘날의 다중 장치(Multi-Device) 세계에서 필수적인 기능입니다. 미디어 쿼리를 이해하고 반응형 디자인 원칙을 따르면 다양한 장치와 화면 크기에 맞게 최적의 사용자 경험을 제공하는 웹 페이지를 만들 수 있습니다. 사용자는 스마트폰, 태블릿, 노트북, 데스크탑 등 무엇을 사용하든 웹사이트를 접근성 있고 사용자 친화적으로 만들기 위해 기울이는 노력에 감사할 것입니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/13/web-design-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>웹 개발자를 위한 CSS Flexbox 기술</title>
      <link>http://hgko1207.github.io/2023/12/12/web-design-2/</link>
      <guid>http://hgko1207.github.io/2023/12/12/web-design-2/</guid>
      <pubDate>Tue, 12 Dec 2023 05:07:36 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;CSS Flexbox에 대해 자세히 알아보고 개념을 설명하는 몇 가지 코드 예제를 살펴보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;css-flexbox란-무엇입니까&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#css-flexbox란-무
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>CSS Flexbox에 대해 자세히 알아보고 개념을 설명하는 몇 가지 코드 예제를 살펴보겠습니다.</p><h2 id="css-flexbox란-무엇입니까"><a class="markdownIt-Anchor" href="#css-flexbox란-무엇입니까"></a> CSS Flexbox란 무엇입니까?</h2><p>CSS Flexbox(Flexible Box Layout)는 크기를 알 수 없거나 동적인 경우에도 컨테이너 내의 공간을 분배하고 항목을 정렬하여 복잡한 레이아웃의 디자인을 단순화하는 1차원 레이아웃 모델입니다. Flexbox는 내비게이션 메뉴(Navigation Menu), 카드 레이아웃(Card Layout), 콘텐츠 배포(Content Distribution) 등 반응성이 뛰어나고 유연한 디자인을 만드는 데 특히 유용합니다.</p><h2 id="css-flexbox의-기본-개념"><a class="markdownIt-Anchor" href="#css-flexbox의-기본-개념"></a> CSS Flexbox의 기본 개념</h2><ol><li><strong>Flex Container:</strong> Flex 항목을 포함하는 요소를 “Flex Container”라고 합니다. Flex 컨테이너(Container)를 만들려면 <code>display: flex;</code> HTML 요소에 속성을 적용합니다.</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Flex Items:</strong> Flex Container의 직계 하위 항목을 &quot;Flex Items&quot;이라고 합니다. 이러한 항목은 div, text, image 또는 기타 컨테이너와 같은 모든 HTML 요소가 될 수 있습니다.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex-item"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex-item"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex-item"</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-container-속성"><a class="markdownIt-Anchor" href="#flex-container-속성"></a> Flex Container 속성</h2><p>Flex 컨테이너의 동작을 제어하기 위한 몇 가지 필수 속성은 다음과 같습니다.</p><ul><li><code>flex-direction</code>: 주축(행 또는 열)의 방향을 지정합니다.</li><li><code>justify-content</code>: 주축을 따라 항목이 배포되는 방식을 결정합니다.</li><li><code>align-items</code>: 항목이 교차축을 따라 정렬되는 방식을 정의합니다.</li><li><code>flex-wrap</code>: 플렉스 항목이 여러 줄로 줄바꿈되어야 하는지 여부를 지정합니다.</li><li><code>align-content</code>: 컨테이너 내에서 여러 줄의 정렬을 제어합니다( <code>flex-wrap</code> 활성화된 경우).</li></ul><h2 id="예제-코드"><a class="markdownIt-Anchor" href="#예제-코드"></a> 예제 코드</h2><p>이러한 개념 중 일부를 설명하기 위해 간단한 예제를 만들어 보겠습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row; <span class="comment">/* 행에 배치된 항목(기본값) */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-between; <span class="comment">/* 항목이 고르게 분포됨 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/* 항목을 수직으로 중앙에 배치 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">/* 각 항목은 동일한 공간을 차지합니다. */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 코드에서는</p><ul><li><code>flex-container</code>는 세 개의 Flex 항목이 있는 Flex 컨테이너를 정의합니다.</li><li><code>flex-direction: row;</code>는 항목을 일렬로 정렬합니다.</li><li><code>justify-content: space-between;</code> 주축을 따라 항목을 균등하게 분배합니다.</li><li><code>align-items: center;</code> 교차축을 따라 항목을 수직으로 중앙에 배치합니다.</li></ul><h2 id="css-flexbox의-이점"><a class="markdownIt-Anchor" href="#css-flexbox의-이점"></a> CSS Flexbox의 이점</h2><ul><li>복잡한 레이아웃을 단순화합니다.</li><li>알 수 없거나 동적 콘텐츠 크기를 적절하게 처리합니다.</li><li>float 및 위치 지정의 필요성이 줄어듭니다.</li><li>정렬 및 분포 제어가 향상됩니다.</li><li>반응형 웹 디자인을 지원합니다.</li></ul><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>CSS Flexbox는 유연하고 반응이 빠른 웹 레이아웃을 간단하게 만들 수 있는 강력한 레이아웃 모델입니다. 웹 개발자는 개념을 이해하고 CSS를 통해 적용함으로써 컨테이너 내 요소의 배열과 정렬을 정밀하게 제어할 수 있습니다. Flexbox는 웹 레이아웃 코드의 효율성과 가독성을 향상시켜 최신 웹 개발에서 매우 유용한 도구입니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/12/web-design-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>자바스크립트 성능 최적화 기술 익히기</title>
      <link>http://hgko1207.github.io/2023/12/12/js-dev-11/</link>
      <guid>http://hgko1207.github.io/2023/12/12/js-dev-11/</guid>
      <pubDate>Tue, 12 Dec 2023 02:20:25 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/js-dev-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;빠르고 반응이 빠른 웹 애플리케이션을 만들려면 자바스크립트 실행 시간을 줄이는 것이 중요합니다. 자바스크립트는 강력하고 다재다능한 프로그래밍 언
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/js-dev-11.png" alt="" /></p><p>빠르고 반응이 빠른 웹 애플리케이션을 만들려면 자바스크립트 실행 시간을 줄이는 것이 중요합니다. 자바스크립트는 강력하고 다재다능한 프로그래밍 언어이지만 제대로 최적화되지 않으면 웹 페이지 속도가 느려질 수 있습니다.</p><p>자바스크립트 코드를 실행하는 데 시간이 너무 오래 걸리면 사용자 경험이 느려지고 페이지 렌더링이 지연되며 이탈률이 증가할 수 있습니다. 따라서 원활한 사용자 경험을 보장하기 위해서는 자바스크립트 실행 시간을 최적화하는 것이 중요합니다.</p><h2 id="전략"><a class="markdownIt-Anchor" href="#전략"></a> 전략</h2><p>다음은 이를 달성하기 위한 몇 가지 전략입니다</p><ol><li><strong>자바스크립트 최소화 및 압축:</strong> 불필요한 코드를 제거하고 축소 및 압축 도구를 사용하여 웹페이지가 로드되는 자바스크립트 양을 줄입니다. 축소 및 압축된 자바스크립트 파일은 크기가 더 작으므로 다운로드가 더 빠르고 실행 시간이 단축됩니다.<br /><br/></li><li><strong>비동기 로딩:</strong> 가능하면 자바스크립트 파일을 비동기식으로 로드하세요. 이렇게 하면 웹페이지의 다른 요소들이 자바스크립트와 동시에 로드되어 장기 실행 스크립트에 의해 차단되는 것을 방지할 수 있습니다.<br /><br/></li><li><strong>로딩 연기:</strong> 중요한 렌더링 경로가 완료될 때까지 필수적이지 않은 자바스크립트 로딩을 연기합니다. 이렇게 하면 웹페이지가 처음에 더 빠르게 로드되고 브라우저가 덜 바쁠 때 자바스크립트를 실행할 수 있습니다.<br /><br/></li><li><strong>지연 로딩:</strong> 페이지 로드 시 즉시 필요하지 않은 자바스크립트 모듈에 대한 지연 로딩(Lazy Loading)을 구현합니다. 이는 대용량 자바스크립트 파일이나 특정 사용자 상호 작용에만 필요한 파일에 특히 유용합니다.<br /><br/></li><li><strong>코드 분할:</strong> 자바스크립트 코드를 더 작고 관리하기 쉬운 모듈로 분할하세요. 현재 사용자 경험에 필요한 모듈만 로드합니다. 이렇게 하면 초기 실행 시간이 줄어들고 시스템 리소스 사용이 최소화됩니다.<br /><br/></li><li><strong>루프 및 반복 최적화:</strong> 자바스크립트 코드 내의 루프(Loop) 및 반복(Iteration)에 주의를 기울이십시오. 비효율적인 루프는 실행 시간을 크게 늘릴 수 있습니다. 특정 사용 사례에 최적화된 알고리즘과 데이터 구조를 사용하세요.<br /><br/></li><li><strong>DOM 조작을 줄이세요:</strong> DOM(Document Object Model)을 과도하게 조작하면 심각한 병목 현상을 일으킬 수 있습니다. DOM에 대한 불필요한 업데이트를 최소화하고 일괄 처리 및 <code>requestAnimationFrame</code>과 같은 기술을 사용하여 애니메이션과 Transition을 원활하게 하세요.<br /><br/></li><li><strong>캐싱:</strong> 자주 변경되지 않는 데이터와 계산을 저장하는 캐싱 메커니즘을 구현하세요. 캐싱은 반복적인 자바스크립트 실행의 필요성을 줄여 성능을 향상시킬 수 있습니다.<br /><br/></li><li><strong>Web Worker 사용:</strong> 계산 집약적인 작업을 Web Worker에게 오프로드합니다. Web Worker를 사용하면 메인 스레드를 차단하지 않고 백그라운드에서 스크립트를 실행할 수 있으므로 자바스크립트가 사용자 상호 작용에 영향을 미치는 것을 방지할 수 있습니다.<br /><br/></li><li><strong>프로파일링 및 최적화:</strong> 브라우저 개발자 도구를 활용하여 자바스크립트 코드를 프로파일링하고 성능 병목현상을 파악하세요. Chrome 개발자도구와 같은 도구는 코드 실행 시간과 메모리 사용량을 분석하는 기능을 제공하므로 개선이 필요한 부분을 정확히 찾아내는 데 도움이 됩니다.<br /><br/></li><li><strong>CDN 호스팅:</strong> CDN(Content Delivery Network)을 사용하여 널리 사용되는 라이브러리 및 프레임워크를 호스팅하세요. CDN은 이러한 리소스를 보다 효율적으로 제공하여 다운로드 및 실행에 필요한 시간을 단축할 수 있습니다.<br /><br/></li><li><strong>ES6 이상 사용:</strong> 최신 ECMAScript 기능과 최적화를 활용하세요. 최신 자바스크립트 버전에는 성능이 향상되고 코드를 간소화하는 데 도움이 되는 새로운 기능이 포함되는 경우가 많습니다.<br /><br/></li><li><strong>테스트 및 벤치마킹:</strong> 정기적으로 웹 애플리케이션의 성능을 테스트하고 벤치마킹 도구를 사용하여 실행 시간을 측정하세요. 이를 통해 회귀를 감지하고 변경 사항이 자바스크립트 실행에 미치는 영향을 모니터링할 수 있습니다.<br /><br/></li><li><strong>이미지(Image) 및 자산(Asset) 최적화:</strong> 웹 애플리케이션에 사용되는 이미지 및 자산의 크기를 줄이면 전체 로딩 프로세스의 속도를 높여 자바스크립트 실행 시간을 간접적으로 개선할 수 있습니다.<br /><br/></li><li><strong>콘텐츠 전달 전략:</strong> 장치 및 네트워크 상태에 따라 사용자에게 다양한 자바스크립트 번들을 제공하는 등 스마트한 콘텐츠 전달 전략을 구현하세요. 이를 통해 사용자는 자신의 상황에 가장 최적화된 코드를 받을 수 있습니다.</li></ol><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>자바스크립트 실행 시간 최적화는 지속적으로 해야하며 높은 수준의 성능을 유지하려면 전략 실행, 도구(Tool) 사용 및 지속적인 관심이 필요합니다. 이러한 기술을 사용하고 웹 애플리케이션의 성능을 지속적으로 모니터링하면 자바스크립트 코드가 효율적으로 실행되어 더 나은 사용자 경험을 제공할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/12/js-dev-11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>반응형 웹 디자인을 사용해야 하는 10가지 이유</title>
      <link>http://hgko1207.github.io/2023/12/11/info-6/</link>
      <guid>http://hgko1207.github.io/2023/12/11/info-6/</guid>
      <pubDate>Mon, 11 Dec 2023 05:28:33 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;전 세계가 점점 더 모바일화됨에 따라 반응형 웹 디자인의 중요성은 아무리 강조해도 지나치지 않습니다. 반응형 디자인은 웹 사이트를 보는 데 사용되는 기기의 화면 크기에 맞게 웹 사이트가 조정되도록 하는 웹 디자인 접근 방식입니다. 즉, 데스크톱 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>전 세계가 점점 더 모바일화됨에 따라 반응형 웹 디자인의 중요성은 아무리 강조해도 지나치지 않습니다. 반응형 디자인은 웹 사이트를 보는 데 사용되는 기기의 화면 크기에 맞게 웹 사이트가 조정되도록 하는 웹 디자인 접근 방식입니다. 즉, 데스크톱 컴퓨터, 태블릿, 스마트폰 등 어떤 기기에서 사이트를 탐색하든 최적의 보기 환경을 제공합니다.</p><p>이 글에서는 반응형 웹 디자인 사용을 고려해야 하는 10가지 이유를 살펴봅니다.</p><h2 id="1-사용자-경험-개선"><a class="markdownIt-Anchor" href="#1-사용자-경험-개선"></a> 1. 사용자 경험 개선</h2><p>반응형 웹 디자인은 사용자가 웹사이트에 액세스하는 기기에 관계없이 일관된 경험을 할 수 있도록 합니다. 따라서 사용자가 사이트를 더 쉽게 탐색하고 원하는 정보를 쉽게 찾을 수 있습니다. 사용자가 사이트에서 긍정적인 경험을 하면 사이트에 더 오래 머무르고 콘텐츠에 더 많이 참여할 가능성이 높아집니다.</p><h2 id="2-모바일-트래픽-증가"><a class="markdownIt-Anchor" href="#2-모바일-트래픽-증가"></a> 2. 모바일 트래픽 증가</h2><p>점점 더 많은 사람들이 스마트폰을 사용하여 인터넷에 접속하기 때문에 모바일 기기에 최적화된 웹사이트를 만드는 것이 중요합니다. 반응형 디자인은 모든 화면 크기에서 웹사이트가 멋지게 보이도록 하여 모바일 사용자가 사이트에 머무르며 콘텐츠를 탐색할 가능성을 높입니다.</p><h2 id="3-더-나은-seo"><a class="markdownIt-Anchor" href="#3-더-나은-seo"></a> 3. 더 나은 SEO</h2><p>Google 및 기타 검색 엔진은 반응형 디자인이 적용된 웹사이트가 더 나은 사용자 경험을 제공하기 때문에 우선순위를 둡니다. 즉, 웹사이트가 반응형이면 검색 엔진 결과 페이지(Search Engine Results Pages, SERPs)에서 더 높은 순위를 차지할 가능성이 높아져 웹사이트의 가시성을 높이고 사이트로 더 많은 트래픽을 유도할 수 있습니다.</p><h2 id="4-이탈률-감소"><a class="markdownIt-Anchor" href="#4-이탈률-감소"></a> 4. 이탈률 감소</h2><p>이탈률은 한 페이지만 보고 웹사이트를 떠나는 방문자의 비율을 말합니다. 반응형 웹 디자인은 더 나은 사용자 경험을 제공하여 사용자가 사이트에 머무르며 콘텐츠를 탐색할 가능성이 높아지므로 이탈률을 낮추는 데 도움이 될 수 있습니다.</p><h2 id="5-더-빠른-웹사이트-로딩-시간"><a class="markdownIt-Anchor" href="#5-더-빠른-웹사이트-로딩-시간"></a> 5. 더 빠른 웹사이트 로딩 시간</h2><p>반응형 웹사이트는 동일한 콘텐츠의 여러 버전을 로드할 필요가 없기 때문에 일반적으로 비반응형 웹사이트보다 로딩 속도가 빠릅니다. 즉, 사용자가 느린 로딩 시간에 불만을 품고 사이트를 떠날 가능성이 줄어듭니다.</p><h2 id="6-손쉬운-유지-관리"><a class="markdownIt-Anchor" href="#6-손쉬운-유지-관리"></a> 6. 손쉬운 유지 관리</h2><p>반응형 웹사이트를 사용하면 사이트의 한 버전만 유지 관리하면 됩니다. 따라서 여러 버전의 사이트를 변경할 필요가 없으므로 콘텐츠를 업데이트하고 사이트를 변경하기가 더 쉬워집니다.</p><h2 id="7-비용-효율적"><a class="markdownIt-Anchor" href="#7-비용-효율적"></a> 7. 비용 효율적</h2><p>반응형 웹 디자인은 모든 기기에서 작동하는 하나의 버전의 웹 사이트만 만들면 되기 때문에 비용 효율적입니다. 즉, 여러 버전의 사이트를 만들거나 별도의 사이트 버전을 유지 관리하는 데 비용을 들일 필요가 없습니다.</p><h2 id="8-미래-보장"><a class="markdownIt-Anchor" href="#8-미래-보장"></a> 8. 미래 보장</h2><p>반응형 웹 디자인을 사용하면 웹 사이트는 시장에 출시되는 모든 새로운 장치에 대비할 수 있습니다. 즉, 새로운 기기가 대중화되어 사이트가 구식이 될까 봐 걱정할 필요가 없습니다.</p><h2 id="9-더-나은-분석"><a class="markdownIt-Anchor" href="#9-더-나은-분석"></a> 9. 더 나은 분석</h2><p>반응형 웹사이트를 사용하면 모든 기기에서 사용자 행동을 추적할 수 있습니다. 즉, 사용자가 사이트와 상호 작용하는 방식을 더 잘 이해하고 데이터에 기반한 의사 결정을 통해 사용자 경험을 개선할 수 있습니다.</p><h2 id="10-경쟁-우위"><a class="markdownIt-Anchor" href="#10-경쟁-우위"></a> 10. 경쟁 우위</h2><p>마지막으로 반응형 웹사이트는 경쟁 우위를 확보할 수 있습니다. 사용자가 사이트에서 긍정적인 경험을 하면 다른 사람에게 사이트를 추천할 가능성이 높아집니다. 이는 웹사이트의 가시성을 높이고 사이트로 더 많은 트래픽을 유도하는 데 도움이 될 수 있습니다.</p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>결론적으로 반응형 웹 디자인은 훌륭한 사용자 경험을 만들고 웹사이트의 가시성을 높이고자 하는 모든 사람에게 필수적입니다. 웹사이트가 모든 기기에서 멋지게 보이도록 하면 더 많은 방문자를 유치하고 참여도를 높이며 더 많은 전환을 유도할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/11/info-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ChatGPT란 무엇인가요? ChatGPT로 어떻게 돈을 벌까?</title>
      <link>http://hgko1207.github.io/2023/12/06/chatgpt-1/</link>
      <guid>http://hgko1207.github.io/2023/12/06/chatgpt-1/</guid>
      <pubDate>Wed, 06 Dec 2023 13:52:22 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;는 다양한 질문에 답하고 사람들과 대화할 수 있도록 설계된 AI 기반 언어 모델입니다. AI 언어 모델로서 ChatGPT는 돈을 벌거나 금융 거래에 참여할 수 있는 능력이 없습니다.&lt;/p&gt;
&lt;p&gt;하지만 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>ChatGPT</strong>는 다양한 질문에 답하고 사람들과 대화할 수 있도록 설계된 AI 기반 언어 모델입니다. AI 언어 모델로서 ChatGPT는 돈을 벌거나 금융 거래에 참여할 수 있는 능력이 없습니다.</p><p>하지만 ChatGPT를 사용하여 잠재적으로 수익을 창출할 수 있는 방법이 있습니다. 다음은 몇 가지 아이디어입니다.</p><h2 id="사업-아이디어-조사"><a class="markdownIt-Anchor" href="#사업-아이디어-조사"></a> 사업 아이디어 조사</h2><p>창업을 고려하고 있다면 ChatGPT를 사용하여 잠재적인 사업 아이디어를 조사할 수 있습니다. ChatGPT는 시장 동향, 소비자 행동 및 업계 모범 사례에 대한 통찰력을 제공할 수 있습니다. 잠재적인 사업 아이디어에 대해 ChatGPT에 질문을 하면 실행 가능하고 수익성 있는 옵션인지 더 잘 파악할 수 있습니다.</p><h2 id="비즈니스를-위한-챗봇-구축하기"><a class="markdownIt-Anchor" href="#비즈니스를-위한-챗봇-구축하기"></a> 비즈니스를 위한 챗봇 구축하기</h2><p>챗봇은 기업이 고객과 소통하고 고객 서비스 업무를 자동화하는 방법으로 점점 더 인기를 얻고 있습니다. 비즈니스에 챗봇을 구축하려는 경우 ChatGPT를 사용하여 매력적이고 유용한 대화형 인터페이스를 만들 수 있습니다. ChatGPT는 챗봇이 고객 문의에 응답하고 유용한 정보를 제공하도록 훈련시켜 고객 만족도를 높이고 판매를 촉진하는 데 도움이 될 수 있습니다.</p><h2 id="글쓰기-실력-향상하기"><a class="markdownIt-Anchor" href="#글쓰기-실력-향상하기"></a> 글쓰기 실력 향상하기</h2><p>작가나 콘텐츠 제작자라면 ChatGPT를 사용하여 글쓰기 실력을 향상시킬 수 있습니다. ChatGPT는 콘텐츠에 대한 아이디어를 생성하고, 글쓰기에 대한 피드백을 제공하며, 글쓰기 스타일을 개선할 수 있는 방법을 제안할 수 있습니다. ChatGPT를 사용하여 글쓰기 기술을 개선하면 잠재적으로 더 많은 고객을 유치하고 더 많은 수익을 올릴 수 있습니다.</p><h2 id="새로운-기술-배우기"><a class="markdownIt-Anchor" href="#새로운-기술-배우기"></a> 새로운 기술 배우기</h2><p>ChatGPT는 새로운 기술을 배우기 위한 도구로도 사용할 수 있습니다. 특정 주제나 관심 분야에 대해 ChatGPT에 질문할 수 있으며 관련 정보와 리소스를 제공받을 수 있습니다. ChatGPT를 통해 새로운 기술을 배우면 잠재적으로 취업 가능성을 높이거나 현재 직업에서 더 많은 돈을 벌 수 있습니다.</p><h2 id="시간-절약하기"><a class="markdownIt-Anchor" href="#시간-절약하기"></a> 시간 절약하기</h2><p>마지막으로, 많은 조사나 수작업이 필요한 작업의 시간을 절약하기 위해 ChatGPT를 사용할 수 있습니다. 예를 들어, 특정 주제에 대한 정보를 찾아야 하는 경우 인터넷 검색에 시간을 소비하는 대신 ChatGPT에 물어볼 수 있습니다. ChatGPT를 사용하여 워크플로우를 간소화하면 잠재적으로 수입을 창출하는 작업에 집중할 수 있는 시간을 더 많이 확보할 수 있습니다.</p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>결론적으로, ChatGPT 자체는 돈을 벌 수 있는 기능이 없지만, 잠재적으로 더 많은 돈을 벌 수 있는 방법이 있습니다. 연구, 글쓰기, 학습 및 자동화를 위한 기능을 활용하여 비즈니스 또는 경력 전망을 개선하고 재정적 목표를 달성할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/06/chatgpt-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>차세대 웹 앱을 위한 인기있는 상위 10개 Angular 라이브러리</title>
      <link>http://hgko1207.github.io/2023/12/04/angular-32/</link>
      <guid>http://hgko1207.github.io/2023/12/04/angular-32/</guid>
      <pubDate>Mon, 04 Dec 2023 02:44:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;차세대 웹 앱에 적합한 Angular 라이브러리를 선택하는 것은 어려운 작업일 수 있습니다. 사용 가능한 옵션이 너무 많기 때문에 프로젝트에 가장 적합한 라이브러리를 결정하기가 어려울 수 있습니다. 하지만 프로젝트의 규모, 앱의 복잡성, 필요한 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>차세대 웹 앱에 적합한 Angular 라이브러리를 선택하는 것은 어려운 작업일 수 있습니다. 사용 가능한 옵션이 너무 많기 때문에 프로젝트에 가장 적합한 라이브러리를 결정하기가 어려울 수 있습니다. 하지만 프로젝트의 규모, 앱의 복잡성, 필요한 기능 등의 요소를 고려하면 선택의 폭을 좁히고 정보에 입각한 결정을 내릴 수 있습니다. 또한 라이브러리를 학습하고 구현하는 데 투자해야 하는 시간을 고려하는 것도 중요합니다. 이 글에서는 사용 가능한 라이브러리에 대한 개요와 프로젝트에 적합한 라이브러리를 선택할 때 고려해야 할 요소에 대해 설명합니다.</p><h2 id="angular-무엇입니까"><a class="markdownIt-Anchor" href="#angular-무엇입니까"></a> Angular 무엇입니까?</h2><p>Angular는 Google에서 개발하고 유지 관리하는 오픈 소스 웹 애플리케이션 프레임워크입니다. 웹 애플리케이션에서 자주 사용되는 구성 요소와 함께 클라이언트 측 MVC(Model-View-Controller) 및 MVVM(Model-View-View Model) 아키텍처를 위한 프레임워크를 제공함으로써 단일 페이지 애플리케이션을 구성하는 데도 사용되며 개발 및 테스트를 보다 쉽게 수행할 수 있도록 설계되었습니다.<br/></p><p>Angular 애플리케이션을 빌드할 때는 프로젝트의 성공을 보장하기 위해 올바른 라이브러리와 프레임워크를 선택하는 것이 중요합니다. 차세대 웹 앱에 적합한 Angular 라이브러리를 선택하려면 필요한 기능, 프로젝트의 규모와 복잡성, 학습 및 구현에 투자해야 하는 시간 등을 신중하게 고려해야 합니다. 신뢰할 수 있고, 지원이 잘 제공되며, 정기적으로 업데이트되는 라이브러리를 선택하는 것이 중요합니다. 또한 서로 호환되고 앱과 원활하게 통합되는 라이브러리를 선택하는 것도 중요합니다. 시간을 들여 사용 가능한 라이브러리를 조사하고 비교하면 프로젝트에 적합한 라이브러리를 선택할 수 있습니다.</p><h2 id="올바른-angular-라이브러리를-선택하는-방법은-무엇입니까"><a class="markdownIt-Anchor" href="#올바른-angular-라이브러리를-선택하는-방법은-무엇입니까"></a> 올바른 Angular 라이브러리를 선택하는 방법은 무엇입니까?</h2><p>라이브러리를 선택할 때 고려해야 할 몇 가지 중요한 요소가 있습니다.</p><ul><li>웹 앱에 필요한 기능을 고려합니다.</li><li>프로젝트의 규모와 복잡성을 평가합니다.</li><li>라이브러리를 학습하고 구현하는 데 투자해야 하는 시간을 고려합니다.</li><li>신뢰할 수 있고, 지원이 잘 되며, 정기적으로 업데이트되는 라이브러리를 선택합니다.</li><li>서로 호환되고 앱과 원활하게 통합되는 라이브러리를 선택합니다.</li><li>사용 가능한 라이브러리를 조사하고 비교하여 프로젝트에 적합한 라이브러리를 선택해야 합니다.</li></ul><p>Angular 웹 애플리케이션을 개발할 때 사용할 수 있는 몇 가지 인기 있는 라이브러리가 있습니다. 각 라이브러리에는 고유한 기능과 장점이 있으므로 프로젝트에 가장 적합한 라이브러리를 선택하는 것이 중요합니다. 다음은 가장 인기 있는 Angular 라이브러리 중 일부입니다.</p><h2 id="angular-material"><a class="markdownIt-Anchor" href="#angular-material"></a> Angular Material</h2><p><a href="https://material.angular.io/" target="_blank" rel="noopener"><img src="/images/angular/angular-1.png" alt="Angular Material" /></a></p><p><strong><a href="https://github.com/angular/components" target="_blank" rel="noopener">GitHub</a> Stars:</strong> 23.2k<br/><br /><strong>License:</strong> MIT</p><p>Angular Material은 사용자 인터페이스 디자인을 위한 다양한 컴포넌트를 제공하는 Angular 애플리케이션용 UI 컴포넌트 라이브러리입니다. Google의 Material Design 언어를 기반으로 하며 반응형 및 접근성 높은 웹 애플리케이션을 만드는 데 사용됩니다. Material Design 시스템을 기반으로 재사용 가능하고 충분한 테스트를 거친 접근 가능한 UI 컴포넌트 세트를 제공합니다. 또한 Angular Material은 광범위한 테마 시스템을 제공하여 개발자가 웹 애플리케이션의 모양과 느낌을 쉽게 커스터마이징할 수 있습니다.</p><p>Angular Material 라이브러리의 주요 기능은 다음과 같습니다.</p><ul><li>Material 디자인 시스템을 기반으로 재사용 가능하고 잘 테스트되었으며 액세스 가능한 UI 컴포넌트 세트입니다.</li><li>직관적이고 효율적인 방법으로 현대적인 대화형 웹 앱을 제작할 수 있습니다.</li><li>웹 앱의 모양과 느낌을 쉽게 커스터마이징 할 수 있는 광범위한 테마 시스템입니다.</li><li>완벽하게 반응하는 디자인으로 웹 앱이 모든 기기에서 멋지게 보입니다.</li><li>방대한 문서화 및 지원을 통해 필요한 경우 쉽게 도움을 받을 수 있습니다.</li><li>button, card, input field, slider 등과 같은 구현하기 쉬운 컴포넌트입니다.</li></ul><h2 id="angularfire"><a class="markdownIt-Anchor" href="#angularfire"></a> AngularFire</h2><p><img src="/images/angular/angular-2.png" alt="AngularFire" /></p><p><strong><a href="https://github.com/angular/angularfire" target="_blank" rel="noopener">GitHub</a> Stars:</strong> 7.5k<br/><br /><strong>License:</strong> MIT</p><p>AngularFire는 Firebase 실시간 데이터베이스와 상호 작용하기 위한 사용하기 쉬운 API를 제공하는 Angular 애플리케이션용 라이브러리입니다. 개발자가 데이터 동기화, 인증 등과 같은 실시간 기능을 웹 앱에 더 쉽게 추가할 수 있도록 설계되었습니다. 또한 개발자가 Cloud Storage, Cloud Functions, Firebase 호스팅과 같은 Firebase 서비스에 액세스할 수 있는 인터페이스를 제공합니다.</p><p>AngularFire는 개발자가 실시간 기능을 갖춘 웹 앱을 보다 쉽게 ​​구축할 수 있도록 하는 다양한 기능을 제공합니다.</p><ul><li>Firebase 실시간 데이터베이스와 상호작용하기 위한 사용하기 쉬운 API입니다.</li><li>여러 클라이언트에서 데이터의 실시간 동기화를 지원합니다.</li><li>사용자가 앱에 쉽게 가입하고 로그인할 수 있는 인증 시스템을 제공합니다.</li><li>Cloud Storage, Functions, Firebase 호스팅과 같은 Firebase 서비스에 액세스합니다.</li><li>개발자가 프로젝트를 빠르게 시작하고 실행할 수 있는 간단하고 직관적인 인터페이스입니다.</li><li>Angular, React, Vue 등 다양한 플랫폼을 지원합니다.</li></ul><h2 id="angular-cli"><a class="markdownIt-Anchor" href="#angular-cli"></a> Angular CLI</h2><p><a href="https://angular.io/cli" target="_blank" rel="noopener"><img src="/images/angular/angular-3.png" alt="Angular CLI" /></a></p><p><strong><a href="https://github.com/angular/angular-cli" target="_blank" rel="noopener">GitHub</a> Stars:</strong> 26.4k<br/><br /><strong>License:</strong> MIT</p><p>Angular CLI는 Angular 애플리케이션을 생성, 구축 및 배포하기 위한 명령줄(Command line) 인터페이스입니다. 개발자가 앱을 빠르게 생성, 빌드 및 배포할 수 있도록 설계되었습니다. 새 프로젝트를 빠르게 설정할 수 있는 직관적인 스캐폴딩 시스템을 제공하며 라우팅, 테스트 및 컴포넌트와 같은 일반적인 작업을 위한 코드를 생성합니다. 또한 개발자는 한 번의 명령으로 앱을 로컬에서 쉽게 서비스하고 프로덕션 환경에 배포할 수 있습니다.</p><p>Angular CLI 라이브러리의 주요 기능은 다음과 같습니다.</p><ul><li>Angular 애플리케이션을 생성, 구축, 배포하기 위한 명령줄 인터페이스입니다.</li><li>새로운 프로젝트를 빠르게 설정하기 위한 직관적인 스캐폴딩 시스템을 제공합니다.</li><li>라우팅, 테스트, 컴포넌트 등 일반적인 작업을 위한 코드를 생성합니다.</li><li>명령 한 번으로 앱을 로컬에서 쉽게 서비스하고 프로덕션 환경에 배포할 수 있습니다.</li><li>다양한 타사 라이브러리를 지원하여 다른 도구와 프레임워크를 쉽게 통합할 수 있습니다.</li><li>개발자가 프로젝트를 빠르게 설정하는 데 도움이 되는 다양한 도구와 명령을 제공합니다.</li></ul><h2 id="angular-ui-bootstrap"><a class="markdownIt-Anchor" href="#angular-ui-bootstrap"></a> Angular UI Bootstrap</h2><p><a href="https://angular-ui.github.io/bootstrap/versioned-docs/1.3.1/" target="_blank" rel="noopener"><img src="/images/angular/angular-4.png" alt="Angular UI Bootstrap" /></a></p><p><strong><a href="https://github.com/angular-ui/bootstrap" target="_blank" rel="noopener">GitHub</a> Stars:</strong> 14.3k<br/><br /><strong>License:</strong> MIT</p><p>Angular UI Bootstrap은 Twitter Bootstrap을 기반으로 사용자 인터페이스를 생성하기 위한 Directive 세트를 제공하는 라이브러리입니다. 개발자가 반응형 모바일 친화적인 웹 애플리케이션을 더 쉽게 만들 수 있도록 설계되었습니다</p><p>Angular UI Bootstrap 라이브러리의 주요 기능은 다음과 같습니다.</p><ul><li>Twitter Bootstrap을 기반으로 사용자 인터페이스를 생성하기 위한 Directive 세트입니다.</li><li>반응성이 뛰어나고 모바일 친화적인 웹 애플리케이션을 만들 수 있습니다.</li><li>alert, button, carousel 등과 같은 다양한 컴포넌트를 사용하여 시각적으로 매력적인 대화형 사용자 인터페이스를 만들 수 있습니다.</li><li>웹 애플리케이션에 쉽게 통합할 수 있는 사전 구축된 컴포넌트입니다.</li><li>문서화가 잘 되어 있어 필요한 경우 쉽게 도움을 받을 수 있습니다.</li><li>시각적으로 매력적인 대화형 사용자 인터페이스를 만드는 직관적이고 효율적인 방법입니다.</li></ul><h2 id="angular-flex-layout"><a class="markdownIt-Anchor" href="#angular-flex-layout"></a> Angular Flex Layout</h2><p><img src="/images/angular/angular-5.png" alt="Angular Flex Layout" /></p><p><strong><a href="https://github.com/angular/flex-layout" target="_blank" rel="noopener">GitHub</a> Stars:</strong> 5.9k<br/><br /><strong>License:</strong> MIT</p><p>Angular Flex-Layout은 Angular 애플리케이션 구축을 위한 반응형 레이아웃 시스템을 제공하는 라이브러리입니다. 개발자가 기기나 화면 크기에 관계없이 유연하고 반응이 빠른 사용자 인터페이스를 쉽게 만들 수 있도록 설계되었습니다.</p><p>Angular Flex-Layout 라이브러리의 주요 기능은 다음과 같습니다.</p><ul><li>Angular 애플리케이션 구축을 위한 반응형 레이아웃 시스템을 제공합니다.</li><li>fxLayout 및 fxFlex와 같은 다양한 Directive를 사용하여 유연하고 반응이 빠른 레이아웃을 만들 수 있습니다.</li><li>맞춤형 반응형 레이아웃 및 컴포넌트를 생성하기 위한 API입니다.</li><li>레이아웃 크기와 중단점을 쉽게 관리하는 기능을 제공합니다.</li><li>문서화가 잘 되어 있어 필요한 경우 쉽게 도움을 받을 수 있습니다.</li><li>개발자가 유연하고 반응이 빠른 사용자 인터페이스를 만들 수 있습니다.</li></ul><h2 id="ngrx"><a class="markdownIt-Anchor" href="#ngrx"></a> NgRx</h2><p><a href="https://ngrx.io/" target="_blank" rel="noopener"><img src="/images/angular/angular-6.png" alt="NgRx" /></a></p><p><strong><a href="https://github.com/ngrx/platform" target="_blank" rel="noopener">GitHub</a> Stars:</strong> 7.8k<br/><br /><strong>License:</strong> MIT</p><p>NgRx는 복잡한 애플리케이션에서 데이터를 관리하기 위한 상태 관리 시스템을 제공하는 Angular 애플리케이션용 라이브러리입니다. 개발자가 애플리케이션을 보다 쉽게 ​​생성, 유지 관리 및 테스트할 수 있도록 설계되었습니다.</p><p>NgRx 라이브러리의 주요 기능은 다음과 같습니다.</p><ul><li>복잡한 애플리케이션의 데이터를 관리하기 위한 상태 관리 시스템을 제공합니다.</li><li>예측 가능하고 일관되게 데이터를 관리하기 위한 API 및 도구 세트입니다.</li><li>애플리케이션 상태 업데이트를 쉽게 관리하기 위한 직관적인 인터페이스입니다.</li><li>상태 변경을 추적하고 추적하기 위한 강력한 디버깅 도구입니다.</li><li>문서화가 잘 되어 있어 필요한 경우 쉽게 도움을 받을 수 있습니다.</li><li>애플리케이션을 더욱 쉽게 생성, 유지 관리 및 테스트할 수 있습니다.</li></ul><h2 id="angular-charts"><a class="markdownIt-Anchor" href="#angular-charts"></a> Angular Charts</h2><p><strong><a href="https://github.com/valor-software/ng2-charts" target="_blank" rel="noopener">GitHub</a> Stars:</strong> 2.3k<br/><br /><strong>License:</strong> MIT</p><p>Angular Charts 라이브러리는 Angular 팀에서 만든 오픈 소스 라이브러리로, Angular 애플리케이션에서 대화형 차트를 만들기 위한 선언형 API를 제공합니다. 선형, 막대형, 영역형, 원형, 도넛형, 분산형 차트를 포함한 다양한 차트 유형을 지원합니다. 또한 스타일과 애니메이션에 대한 다양한 커스터마이징 옵션도 제공합니다.</p><p>Angular Charts 라이브러리의 주요 기능은 다음과 같습니다.</p><ul><li>Angular 애플리케이션에서 차트를 생성하기 위한 선언형 API<ul><li>line, bar, area, pie, doughnut 및 scatter 차트를 포함한 다양한 차트 유형 지원</li></ul></li><li>차트의 스타일, 애니메이션 및 기타 속성을 사용자에 맞게 설정하는 옵션 제공</li><li>확대/축소 및 hovering 과 같은 대화형 기능 지원</li><li>고급 기능을 위해 D3.js와 같은 다른 라이브러리와 통합하는 기능</li><li>정적 데이터, 원격 REST API, 실시간 데이터 스트림을 포함한 여러 데이터 소스 지원</li><li>Chrome, Firefox, Safari, Edge 등 다양한 브라우저 지원</li></ul><h2 id="angular2-google-maps"><a class="markdownIt-Anchor" href="#angular2-google-maps"></a> Angular2-Google-Maps</h2><p><a href="https://angular-maps.com/" target="_blank" rel="noopener"><img src="/images/angular/angular-7.png" alt="Angular2-Google-Maps" /></a></p><p><strong><a href="https://github.com/sebholstein/angular-google-maps" target="_blank" rel="noopener">GitHub</a> Stars:</strong> 2k<br/><br /><strong>License:</strong> MIT</p><p>Angular2-Google-Maps는 Angular 팀에서 만든 오픈 소스 라이브러리로, Google 지도를 Angular 애플리케이션에 통합하기 위한 사용하기 쉬운 인터페이스를 제공합니다.</p><p>Angular2-Google-Maps 라이브러리의 주요 기능은 다음과 같습니다.</p><ul><li>Google 지도 컴포넌트 생성을 위한 선언형 API</li><li>center, zoom level, marker 등과 같은 다양한 속성을 지정하는 기능</li><li>스타일링, 애니메이션 등 다양한 커스터마이징 옵션 지원</li><li>고급 기능을 위해 D3.js와 같은 다른 라이브러리와 통합하는 기능</li><li>정적 데이터, 원격 REST API, 실시간 데이터 스트림을 포함한 여러 데이터 소스 지원</li><li>Chrome, Firefox, Safari, Edge 등 다양한 브라우저 지원</li></ul><h2 id="angular-draggable"><a class="markdownIt-Anchor" href="#angular-draggable"></a> Angular-Draggable</h2><p><strong><a href="https://github.com/mattlewis92/angular-draggable-droppable" target="_blank" rel="noopener">GitHub</a> Stars:</strong> 132<br/><br /><strong>License:</strong> MIT</p><p>Angular-Draggable 라이브러리는 널리 사용되는 JavaScript 프레임워크인 Angular를 사용하여 드래그(draggable) 및 크기 조정(resizable)이 가능한 사용자 인터페이스를 만들기 위한 오픈 소스 라이브러리입니다.</p><p>Angular-Draggable의 주요 기능 중 일부는 다음과 같습니다.</p><ul><li>사용자 맞춤형 옵션이 포함된 드래그 앤 드롭 기능</li><li>스냅 옵션으로 크기 조정 가능한 요소</li><li>사용자 맞춤형 드래그 handle</li><li>Placeholder 지원</li><li>맞춤형 스타일</li><li>다른 Angular 컴포넌트와 쉽게 통합</li></ul><h2 id="ngx-datatable"><a class="markdownIt-Anchor" href="#ngx-datatable"></a> Ngx-datatable</h2><p><strong><a href="https://github.com/swimlane/ngx-datatable" target="_blank" rel="noopener">GitHub</a> Stars:</strong> 4.6k<br/><br /><strong>License:</strong> MIT</p><p>Ngx-datatable은 개발자가 Sorting, Filtering, Pagination과 같은 고급 기능을 사용하여 동적이고 반응이 빠른 테이블을 쉽게 만들 수 있는 오픈 소스 라이브러리입니다. 또한 성능에 최적화되어 개발자가 성능 저하 없이 대규모 데이터 세트를 신속하게 렌더링할 수 있습니다. Ngx-datatable은 JSON, CSV, OData를 포함한 광범위한 데이터 소스를 지원합니다. 또한 클라이언트 또는 서버 측 데이터 처리를 지원하며 사용자에 맞는 템플릿 및 스타일을 설정할 수 있습니다.</p><p>Ngx-datatable 라이브러리의 주요 기능은 다음과 같습니다.</p><ul><li><strong>유연한 데이터 바인딩:</strong> Ngx-datatable은 로컬 및 원격 데이터 바인딩을 모두 지원하므로 다양한 데이터 소스의 데이터를 쉽게 바인딩할 수 있습니다.</li><li><strong>고급 필터링 및 정렬:</strong> Ngx-datatable을 사용하면 데이터를 빠르게 필터링하고 정렬하여 필요한 정보를 더 쉽게 찾을 수 있습니다.</li><li><strong>열 크기 조정:</strong> 테이블 너비에 맞게 열 크기를 조정하거나 다양한 데이터 유형을 수용할 수 있습니다.</li><li><strong>행 가상화(Virtualization):</strong> Ngx-datatable은 행이 표시되는 경우에만 행을 렌더링하므로 성능 문제 없이 대규모 데이터 세트를 스크롤할 수 있습니다.</li><li><strong>열 재정렬:</strong> 열을 재정렬하여 테이블 레이아웃을 커스터마이징 할 수 있습니다.</li><li><strong>편집 가능한 cell:</strong> 테이블의 특정 셀을 편집 가능하게 만들어 사용자가 데이터를 빠르게 업데이트할 수 있습니다.</li></ul><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>성공적인 웹 애플리케이션을 제작하려면 차세대 웹 앱에 적합한 Angular 라이브러리를 선택하는 것이 필수적입니다. 올바른 라이브러리를 사용하면 개발에 많은 시간과 노력을 들이지 않고도 앱을 빠르게 구축할 수 있습니다. 라이브러리를 선택할 때는 라이브러리가 제공하는 기능뿐만 아니라 라이브러리의 성능과 확장성을 고려하는 것이 중요합니다. 또또한 라이브러리의 비용과 라이브러리가 제공하는 지원 수준도 고려하세요. 요구 사항을 평가하고 사용 가능한 Angular 라이브러리를 조사하여 정보에 입각한 결정을 내리고 웹 애플리케이션에 가장 적합한 라이브러리를 선택할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/04/angular-32/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Vue 2와 Vue 3의 차이점</title>
      <link>http://hgko1207.github.io/2023/12/01/vue-3/</link>
      <guid>http://hgko1207.github.io/2023/12/01/vue-3/</guid>
      <pubDate>Fri, 01 Dec 2023 06:15:09 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/vue-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;프런트엔드 개발 세계에서는 Vue.js가 인기 있는 선택이 되었습니다. Vue.js는 최신 웹 애플리케이션 개발에 널리 사용되는 사용자 친화적인 JavaS
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/vue-3.png" alt=""></p><p>프런트엔드 개발 세계에서는 Vue.js가 인기 있는 선택이 되었습니다. Vue.js는 최신 웹 애플리케이션 개발에 널리 사용되는 사용자 친화적인 JavaScript 프레임워크입니다. 그러나 Vue.js의 최신 버전인 Vue 3은 중요한 업데이트와 개선 사항을 도입한다는 점에서 Vue 2와 다릅니다. 이 글에서는 Vue 2와 Vue 3의 주요 차이점을 자세히 살펴보겠습니다.</p><h2 id="Virtual-DOM">Virtual DOM</h2><p>Vue.js의 기초는 Virtual DOM(Document Object Model) 기술에 있습니다. Vue 2에서는 Virtual DOM이 Vue.js의 이벤트 루프에 완벽하게 통합됩니다. 그러나 Vue 3에서는 Virtual DOM이 재설계되어 더욱 효율적으로 만들어졌습니다. Vue 3에서는 Virtual DOM이 더 빠르게 처리되고 더 적은 메모리를 사용합니다. 이는 성능과 애플리케이션 응답 시간을 크게 향상시킵니다.</p><h2 id="Composition-API">Composition API</h2><p>Vue 3에서는 가장 주목할만한 기능 중 하나인 Composition API를 도입했습니다. Composition API는 Vue 2의 Options API와 다르며 코드를 더욱 체계화하고 유지 관리 및 재사용 가능하게 만듭니다. Vue 2에서 컴포넌트는 data, methods, computed 및 watch와 같은 옵션을 사용하여 정의됩니다. Vue 3에서는 코드를 보다 기능적으로 구성할 수 있습니다. Composition API를 사용하면 더 작고 재사용이 가능하며 사용자 맞춤형 기능을 만들 수 있습니다.</p><h2 id="TypeScript-Integration">TypeScript Integration</h2><p>Vue.js는 TypeScript와 같은 정적 유형 검사 도구를 사용하는 프로젝트에 널리 사용됩니다. Vue 2에서는 TypeScript 통합이 가능했지만 개발자는 몇 가지 어려움과 문제에 직면했을 수 있습니다. Vue 3에서는 TypeScript 통합이 크게 향상되었습니다. Vue 3에서 TypeScript를 사용하면 더 나은 정적 유형 제어와 더 부드러운 TypeScript 경험을 얻을 수 있습니다.</p><h2 id="Bundle-Size">Bundle Size</h2><p>번들 크기는 대규모 프런트엔드 프로젝트에서 중요한 요소입니다. Vue 2에서는 번들 크기를 줄이기 위해 다양한 최적화 기술과 플러그인이 필요할 수 있습니다. 그러나 Vue 3에서는 최적화된 매칭 알고리즘 및 소스 코드 압축과 같은 개선으로 번들 크기가 크게 줄었습니다. 그 결과 번들 크기가 작아지고 로딩 시간이 빨라지며 성능이 향상됩니다.</p><h2 id="Compatibility">Compatibility</h2><p>Vue 3은 Vue 2 프로젝트에서 전환하는 개발자에게 호환성 문제를 일으킬 수 있습니다. Vue 3는 일부 API 또는 컴포넌트를 삭제하거나 다른 이름을 바꾸거나 변경할 수 있습니다. 따라서 기존 Vue 2 프로젝트를 Vue 3으로 업그레이드하려는 경우 몇 가지 호환성 문제가 발생할 수 있습니다. Vue 3에 대한 자세한 마이그레이션 가이드가 있으며, 이 가이드를 참조하면 전환 과정에서 지침을 얻을 수 있습니다.</p><h2 id="결론">결론</h2><p>Vue 2와 Vue 3의 주요 차이점을 검토하는 이 글에서는 재설계된 Virtual DOM, Composition API 도입, 향상된 TypeScript 통합 및 더 작은 번들 크기와 같은 요소를 다루었습니다. 이러한 요소로 인해 Vue 3는 프런트엔드 개발을 위한 강력한 선택이 되었습니다.<br/><br>새로운 기능과 개선 사항에도 불구하고 기존 프로젝트를 Vue 2에서 Vue 3으로 전환하면 호환성 문제가 발생할 수 있습니다. 따라서 Vue 3으로의 전환을 고려하고 있다면 신중한 계획과 호환성 문제에 대한 주의가 중요합니다.<br/><br>Vue.js는 빠르고 강력하며 사용자 친화적인 프레임워크로서 인기를 계속 유지하고 있으며 Vue 3을 사용하면 더 많은 유연성을 도입할 수 있습니다. 개발 프로세스에 성능을 추가합니다. 자세한 내용은 <a href="https://vuejs.org/" target="_blank" rel="noopener">공식 Vue.js 설명서</a>를 참조하세요.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/01/vue-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>버전 관리 이해하기</title>
      <link>http://hgko1207.github.io/2023/12/01/info-5/</link>
      <guid>http://hgko1207.github.io/2023/12/01/info-5/</guid>
      <pubDate>Fri, 01 Dec 2023 05:41:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/header/info-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;소개&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#소개&quot;&gt;&lt;/a&gt; 소개&lt;/h2&gt;
&lt;p&gt;끊임없이 진화하는 소프트웨어 개발
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/header/info-5.png" alt="" /></p><h2 id="소개"><a class="markdownIt-Anchor" href="#소개"></a> 소개</h2><p>끊임없이 진화하는 소프트웨어 개발 환경에서 버전 제어 개념은 초석이 됩니다. 단독 프로젝트를 진행하든 팀과 협업하든 관계없이 버전 제어 시스템(Version Control System, VCS)은 코드 변경을 관리하고 프로젝트 무결성을 유지하며 원활한 협업을 촉진하는 데 중요한 역할을 합니다.</p><p>이 글에서는 버전 제어의 세계에 대해 자세히 알아보고 버전 제어의 이점, 유형, 널리 사용되는 도구 및 모범 사례를 살펴보겠습니다.</p><h2 id="버전-관리-이해"><a class="markdownIt-Anchor" href="#버전-관리-이해"></a> 버전 관리 이해</h2><p>버전 제어는 시간이 지남에 따라 프로젝트(일반적으로 소스 코드)의 변경 사항을 관리하기 위한 체계적인 접근 방식입니다. 이는 개발자에게 수정 사항을 추적하고 효과적으로 협업하며 필요한 경우 이전 상태로 되돌릴 수 있는 기능을 제공합니다. 이 프로세스를 통해 프로젝트는 체계적으로 정리되고 기록이 보존되며 팀 구성원은 충돌 없이 동시에 작업할 수 있습니다.</p><h2 id="버전-관리의-이점"><a class="markdownIt-Anchor" href="#버전-관리의-이점"></a> 버전 관리의 이점</h2><ol><li><strong>변경 사항 추적(Change Tracking)</strong>: 버전 제어 시스템은 코드베이스에 적용된 모든 변경 사항을 꼼꼼하게 기록합니다. 이 감사 추적을 통해 변경이 발생했을 때 변경한 사람과 변경 이유를 쉽게 식별할 수 있습니다.<br /><br/></li><li><strong>협업(Collaboration)</strong>: 개발자 팀은 프로젝트의 여러 부분에서 동시에 작업할 수 있습니다. 버전 제어 시스템을 사용하면 변경 사항을 원활하게 병합하고 충돌을 방지하며 효율적인 협업을 촉진할 수 있습니다.<br /><br/></li><li><strong>롤백 및 복구(Rollback and Recovery)</strong>: 실수는 발생하지만 버전 제어를 통해 코드베이스의 이전 상태로 되돌릴 수 있습니다. 이 기능은 위험을 완화하고 오류의 영향을 줄입니다.<br /><br/></li><li><strong>분기 및 병합(Branching and Merging)</strong>: 버전 제어 시스템은 개발의 병렬 라인인 분기를 생성하는 기능을 제공하므로 팀은 기본 코드베이스에 영향을 주지 않고 새로운 기능을 실험할 수 있습니다. 이러한 분기를 기본 코드베이스에 다시 병합하는 것은 원활한 프로세스입니다.<br /><br/></li><li><strong>문서화 및 통신(Documentation and Communication)</strong>: 버전 제어의 커밋 메시지는 문서 형식으로 작동하여 특정 변경 사항이 적용된 이유에 대한 통찰력을 제공합니다. 이는 팀 의사소통과 지식 공유에 도움이 됩니다.</li></ol><h2 id="버전-관리-시스템의-유형"><a class="markdownIt-Anchor" href="#버전-관리-시스템의-유형"></a> 버전 관리 시스템의 유형</h2><ol><li><strong>중앙 버전 제어 시스템(Centralized Version Control System, CVCS)</strong>: CVCS에는 전체 프로젝트 기록을 보관하는 중앙 저장소가 있습니다. 개발자는 이 저장소에서 코드를 체크아웃하고 작업한 다음 변경 사항을 다시 커밋합니다. 예로는 CVS 및 Subversion(SVN)이 있습니다.<br /><br/></li><li><strong>분산 버전 제어 시스템(Distributed Version Control System, DVCS)</strong>: Git 및 Mercurial과 같은 DVCS는 각 개발자의 컴퓨터에 저장소의 전체 복사본(클론)을 생성합니다. 이러한 중복성은 협업을 강화하고 변경 사항을 중앙 저장소에 동기화하기 전에 로컬 커밋을 허용합니다.</li></ol><h2 id="인기-있는-버전-관리-도구"><a class="markdownIt-Anchor" href="#인기-있는-버전-관리-도구"></a> 인기 있는 버전 관리 도구</h2><ol><li><strong>Git</strong>: 가장 널리 사용되는 DVCS인 Git은 속도, 유연성 및 분기 기능으로 잘 알려져 있습니다. 개인 개발자부터 Linux와 같은 대규모 오픈 소스 프로젝트에 이르기까지 모든 규모의 프로젝트에서 사용됩니다.<br /><br/></li><li><strong>Subversion(SVN)</strong>: SVN은 비교적 사용자 친화적인 중앙 집중식 버전 제어 시스템입니다. 단순성과 기존 인프라와의 원활한 통합으로 인해 종종 선택됩니다.<br /><br/></li><li><strong>Mercurial</strong>: Git과 유사하게 Mercurial은 또 다른 분산 버전 제어 시스템입니다. 사용하기 쉽고 학습 곡선이 간단한 것으로 알려져 있습니다.</li></ol><h2 id="버전-제어-모범-사례"><a class="markdownIt-Anchor" href="#버전-제어-모범-사례"></a> 버전 제어 모범 사례</h2><ol><li><strong>설명이 포함된 커밋 메시지 사용</strong>: 커밋 메시지는 변경 목적을 간결하게 설명해야 합니다. 잘 작성된 커밋 메시지는 협업과 이해를 돕는 데 큰 도움이 됩니다.<br /><br/></li><li><strong>빈번한 커밋(Commit)</strong>: 특정 변경 사항에 초점을 맞춘 작고 논리적인 커밋을 만듭니다. 이렇게 하면 기록을 더 쉽게 이해하고 문제를 격리할 수 있습니다.<br /><br/></li><li><strong>전략적으로 분기(Branch)</strong>: 새로운 개발을 위한 기능 분기와 문제 해결을 위한 버그 수정 분기를 만듭니다. 이는 메인 브랜치를 안정적으로 유지합니다.<br /><br/></li><li><strong>정기적으로 끌어오기(Pull) 및 푸시(Push)</strong>: 로컬 저장소를 원격 저장소와 동기화하여 최신 변경 사항이 있는지 확인하고 차이를 방지합니다.<br /><br/></li><li><strong>신중한 검토(Review) 및 병합(Merge)</strong>: 분기를 병합하기 전에 코드 변경 사항을 철저히 검토하고 잠재적인 충돌이 있는지 테스트하십시오.</li></ol><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>버전 제어 시스템은 소프트웨어 개발 프로세스를 혁신하여 효율적인 협업, 변경 관리 및 프로젝트 구성을 가능하게 했습니다. 숙련된 개발자이든 이제 막 시작하는 개발자이든 버전 제어 방식을 수용하고 Git과 같은 도구를 활용하면 개발 워크플로우를 크게 향상시킬 수 있습니다. 프로젝트 발전에 대한 체계적인 기록을 유지함으로써 문제를 해결하고 진행 상황을 추적하며 고품질 소프트웨어를 제공할 수 있는 능력을 더 잘 갖추게 됩니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/12/01/info-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Vue JS 기본 설명</title>
      <link>http://hgko1207.github.io/2023/11/30/vue-2/</link>
      <guid>http://hgko1207.github.io/2023/11/30/vue-2/</guid>
      <pubDate>Thu, 30 Nov 2023 01:27:22 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/thumbnail/vue.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Vue 애플리케이션을 시작하려면 명령어을 사용하세요.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/images/thumbnail/vue.png" alt="" /></p><p>Vue 애플리케이션을 시작하려면 명령어을 사용하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vue@latest</span><br></pre></td></tr></table></figure><p>공식 Vue 프로젝트 스캐폴딩 도구인 <code>create-vue</code>를 설치하고 실행합니다. 설치 시 프로젝트 이름, TypeScript 설정, JSX 및 테스트 지원과 같은 몇 가지 선택적 기능에 대한 프롬프트가 표시됩니다:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">✔ Project name: … &lt;your-project-name&gt;</span><br><span class="line">✔ Add TypeScript? … No / Yes</span><br><span class="line">✔ Add JSX Support? … No / Yes</span><br><span class="line">✔ Add Vue Router <span class="keyword">for</span> Single Page Application development? … No / Yes</span><br><span class="line">✔ Add Pinia <span class="keyword">for</span> state management? … No / Yes</span><br><span class="line">✔ Add Vitest <span class="keyword">for</span> Unit testing? … No / Yes</span><br><span class="line">✔ Add an End-to-End Testing Solution? … No / Cypress / Playwright</span><br><span class="line">✔ Add ESLint <span class="keyword">for</span> code quality? … No / Yes</span><br><span class="line">✔ Add Prettier <span class="keyword">for</span> code formatting? … No / Yes</span><br><span class="line"></span><br><span class="line">Scaffolding project <span class="keyword">in</span> ./&lt;your-project-name&gt;...</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>SPA(단일 페이지 애플리케이션)의 경우 Vue 라우터를 포함해야 합니다. SPA를 생성하라는 메시지가 표시되면 긍정적으로 응답합니다.</p><p>옵션에 대해 확신이 서지 않는다면 일단 엔터키를 눌러 <code>No</code>를 선택하면 됩니다.</p><p>프로젝트가 생성되면 지침에 따라 종속 패키지를 설치하고 개발 서버를 시작합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;your-project-name&gt;</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="single-page-applicationspa-폴더-구조"><a class="markdownIt-Anchor" href="#single-page-applicationspa-폴더-구조"></a> Single-Page Application(SPA) 폴더 구조</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">my-vue-app&#x2F;</span><br><span class="line">|-- public&#x2F;</span><br><span class="line">|   |-- index.html</span><br><span class="line">|</span><br><span class="line">|-- src&#x2F;</span><br><span class="line">|   |-- assets&#x2F;</span><br><span class="line">|   |   |-- logo.png</span><br><span class="line">|</span><br><span class="line">|   |-- components&#x2F;</span><br><span class="line">|   |   |-- HelloWorld.vue</span><br><span class="line">|</span><br><span class="line">|   |-- views&#x2F;</span><br><span class="line">|   |   |-- Home.vue</span><br><span class="line">|   |   |-- About.vue</span><br><span class="line">|</span><br><span class="line">|   |-- App.vue</span><br><span class="line">|   |-- main.js</span><br><span class="line">|</span><br><span class="line">|-- .gitignore</span><br><span class="line">|-- babel.config.js</span><br><span class="line">|-- package.json</span><br><span class="line">|-- README.md</span><br><span class="line">|-- vue.config.js</span><br></pre></td></tr></table></figure><p>일반적인 Vue SPA 구조에는 다음이 포함됩니다.</p><ul><li><strong>public/:</strong> 웹 서버에서 직접 제공하는 index.html 및 기타 assets을 포함합니다.</li><li><strong>src/:</strong> assets, components, views, router, App.vue 및 main.js를 포함하여 Vue 애플리케이션의 소스 코드를 보유합니다.</li><li><strong>assets/:</strong> 이미지 및 글꼴과 같은 정적 리소스를 포함합니다.</li><li><strong>components/:</strong> 재사용 가능한 Vue 컴포넌트를 포함합니다.</li><li><strong>views/:</strong> 다양한 views 나 pages 를 나타내는 다양한 컴포넌트가 포함되어 있습니다.</li><li><strong>router/:</strong> Vue Router 관련 파일 및 경로 정의를 포함합니다.</li><li><strong>store/:</strong> 상태 관리를 위해 Vuex를 사용하는 경우 이 폴더에는 Vuex 스토어 관련 파일이 저장됩니다.</li><li><strong>App.vue:</strong> 전체 애플리케이션의 루트 Vue 컴포넌트 및 진입점 역할을 합니다.</li><li><strong>main.js:</strong> Vue 앱을 초기화하고, 라우터를 구성하고, 앱을 DOM에 마운트합니다.</li></ul><p><code>main.js</code> 파일은 애플리케이션을 설정합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line">app.use(router);</span><br><span class="line">app.mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure><p><code>App.vue</code> 파일</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="script"><a class="markdownIt-Anchor" href="#script"></a> Script</h2><p>기본 포트를 변경하려면 <code>package.json</code>의 <code>script</code> 태그를 사용자 정의 스크립트로 수정하세요.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev-local": "vite --port 3000 --host 0.0.0.0"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>업데이트된 포트에서 애플리케이션을 시작하려면 명령어를 실행하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev-local</span><br></pre></td></tr></table></figure><h2 id="navigation"><a class="markdownIt-Anchor" href="#navigation"></a> Navigation</h2><p>MPA(Multi-Page Application)와 SPA(Single Page Application)는 웹 애플리케이션 구축을 위한 두 가지 서로 다른 아키텍처 접근 방식입니다. 주요 차이점은 콘텐츠 탐색 및 렌더링을 처리하는 방법에 있습니다.</p><p><strong>MPA</strong></p><ul><li>MPA에서 각 페이지는 일반적으로 별도의 HTML 파일에 해당합니다.</li><li>각 링크나 상호 작용이 서버에 대한 요청을 트리거하고 전체 페이지가 대체되므로 페이지 간 탐색에는 전체 페이지 다시 로드가 포함됩니다.</li><li>서버는 각 페이지의 HTML을 렌더링하고 제공하는 일을 담당합니다.</li></ul><p><strong>SPA</strong></p><ul><li>SPA에는 애플리케이션의 진입점 역할을 하는 단일 HTML 파일이 있습니다.</li><li>애플리케이션 내 탐색은 일반적으로 Vue Router와 같은 클라이언트 측 라우터를 사용하여 JavaScript로 처리됩니다.</li><li>사용자가 애플리케이션과 상호 작용할 때 필요한 구성 요소만 DOM 안팎으로 동적으로 로드되고 교체됩니다.</li></ul><h3 id="performance"><a class="markdownIt-Anchor" href="#performance"></a> Performance</h3><p><strong>MPA</strong></p><ul><li>전체 페이지를 다시 로드하면 특히 콘텐츠가 많은 페이지에서 성능이 느려질 수 있습니다.</li><li>CSS 및 JavaScript와 같은 리소스는 각 페이지 요청마다 새로 로드됩니다.</li></ul><p><strong>SPA</strong></p><ul><li>SPA는 필요한 데이터만 서버에서 가져오고 전체 페이지를 다시 로드하지 않고도 페이지 전환이 더 원활해지기 때문에 더 빠르고 원활한 사용자 환경을 제공할 수 있습니다.</li><li>초기 페이지와 자산이 로드되면 후속 상호 작용에 추가 서버 요청이 필요하지 않으므로 사용자 경험이 더 빨라질 수 있습니다.</li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/11/30/vue-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] 컴포넌트 데코레이터(Component Decorator) 사용 방법</title>
      <link>http://hgko1207.github.io/2023/11/28/angular-31/</link>
      <guid>http://hgko1207.github.io/2023/11/28/angular-31/</guid>
      <pubDate>Tue, 28 Nov 2023 01:59:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;에서 &lt;code&gt;@Component&lt;/code&gt; 데코레이터는 재사용 가능한 UI 컴포넌트(Component)를 구축하는 초석입니다. Angular 애플리케이션 내에서 컴포넌트를 처리하고, 인스턴스화하고,
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong>에서 <code>@Component</code> 데코레이터는 재사용 가능한 UI 컴포넌트(Component)를 구축하는 초석입니다. Angular 애플리케이션 내에서 컴포넌트를 처리하고, 인스턴스화하고, 사용하는 방법을 정의하는 메타데이터를 제공합니다.</p><p>이 글에서는 <code>@Component</code> 데코레이터를 심층적으로 살펴보고, 다양한 속성에 대해 논의하고, 이러한 속성을 사용하여 코드 복잡성을 관리하는 방법을 설명합니다.</p><h2 id="기본-사항">기본 사항</h2><p><code>@Component</code> 데코레이터는 구성 개체를 인수로 사용하는 함수입니다. 메타데이터를 컴포넌트 클래스와 연결하는 데 사용되므로 Angular가 컴포넌트를 생성하고 렌더링하는 방법을 이해할 수 있습니다.</p><p><code>@Component</code> 데코레이터를 사용하는 간단한 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-example'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./example.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./example.component.scss'</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ExampleComponent &#123;</span><br><span class="line">  <span class="comment">// Component logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="속성">속성</h2><p><code>@Component</code> 데코레이터는 컴포넌트의 다양한 측면을 정의하는 다양한 속성을 허용합니다. 가장 일반적으로 사용되는 속성 중 일부를 살펴보겠습니다.</p><ul><li><code>selector</code>: 템플릿에서 이 컴포넌트를 식별하는 CSS 선택자(selector)입니다. Angular는 템플릿에서 해당 선택자를 찾을 때마다 컴포넌트의 인스턴스를 생성하고 삽입합니다.</li><li><code>templateUrl</code>: 컴포넌트의 템플릿이 포함된 외부 HTML 파일의 URL입니다.</li><li><code>template</code>: 컴포넌트의 인라인 HTML 템플릿입니다. <code>templateUrl</code> 또는 <code>template</code> 중 하나를 사용할 수 있지만 둘 다 사용할 수는 없습니다.</li><li><code>styleUrls</code>: 컴포넌트의 템플릿에 적용할 외부 CSS 파일의 배열입니다.</li><li><code>styles</code>: 컴포넌트의 템플릿에 적용할 인라인 CSS 스타일의 배열입니다. <code>styleUrls</code> 또는 <code>styles</code> 중 하나를 사용할 수 있지만 둘 다 사용할 수는 없습니다.</li><li><code>providers</code>: 이 컴포넌트와 해당 하위 컴포넌트에 대한 종속성 주입 공급자의 배열입니다.</li><li><code>encapsulation</code>: 컴포넌트의 템플릿에 스타일이 적용되는 방식을 결정하는 속성입니다. ViewEncapsulation.None, ViewEncapsulation.Emulated 또는 ViewEncapsulation.ShadowDom 으로 설정할 수 있습니다.</li><li><code>changeDetection</code>: 컴포넌트의 변경 감지 전략을 결정하는 속성입니다. ChangeDetectionStrategy.Default 또는 ChangeDetectionStrategy.OnPush 로 설정할 수 있습니다.</li></ul><h2 id="코드-복잡성-관리">코드 복잡성 관리</h2><p><code>@Component</code> 데코레이터에서 사용할 수 있는 다양한 속성을 사용하면 문제를 명확하게 분리하고 컴포넌트의 리소스를 구성하여 코드 복잡성을 관리할 수 있습니다. 다음은 코드 복잡성 관리에 대한 몇 가지 팁입니다.</p><ul><li><p>템플릿(templateUrl)과 스타일(styleUrls)에 별도의 파일 사용: HTML 템플릿과 CSS 스타일을 별도의 파일에 배치하면 컴포넌트 클래스를 로직에 집중하고 유지 관리하기 쉽게 할 수 있습니다.</p></li><li><p>캡슐화(encapsulation) 활용: <code>ViewEncapsulation</code>을 활용하면 컴포넌트 스타일의 범위를 제어하여 원치 않는 부작용을 방지하고 스타일을 더욱 모듈화할 수 있습니다.</p></li><li><p>변경 감지 최적화: 적절한 <code>changeDetection</code> 전략을 선택하면 특히 크고 복잡한 애플리케이션에서 컴포넌트의 성능을 향상시킬 수 있습니다.</p></li></ul><p>예:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ViewEncapsulation, ChangeDetectionStrategy &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-complex'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./complex.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./complex.component.scss'</span>],</span><br><span class="line">  encapsulation: ViewEncapsulation.Emulated,</span><br><span class="line">  changeDetection: ChangeDetectionStrategy.OnPush,</span><br><span class="line">  providers: [CustomService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ComplexComponent &#123;</span><br><span class="line">  <span class="comment">// Component logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결론">결론</h2><p>강력하고 효율적인 Angular 컴포넌트를 생성하려면 <code>@Component</code> 데코레이터와 해당 속성을 이해하는 것이 필수적입니다. 다양한 속성을 활용하여 코드 복잡성을 관리하고, 성능을 개선하고, 유지 관리 가능한 모듈식 애플리케이션을 만들 수 있습니다. 계속해서 Angular를 탐색하고 컴포넌트로 작업하면서 코드를 최적화하고 원활한 사용자 경험을 만드는 새로운 방법을 발견하게 될 것입니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/11/28/angular-31/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular CLI] 명령어 사용 및 활용 방법</title>
      <link>http://hgko1207.github.io/2023/11/23/angular-30/</link>
      <guid>http://hgko1207.github.io/2023/11/23/angular-30/</guid>
      <pubDate>Thu, 23 Nov 2023 05:40:39 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular CLI&lt;/strong&gt;는 개발자가 Angular 애플리케이션을 쉽게 생성, 유지 및 관리하는 데 도움이 되는 강력한 명령줄 인터페이스입니다. 개발 워크플로우를 간소화하고 생산성을 향상시키는 다양한 기능을 제공합니다.&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular CLI</strong>는 개발자가 Angular 애플리케이션을 쉽게 생성, 유지 및 관리하는 데 도움이 되는 강력한 명령줄 인터페이스입니다. 개발 워크플로우를 간소화하고 생산성을 향상시키는 다양한 기능을 제공합니다.</p><p>이 글에서는 필수 Angular CLI 명령어와 이 명령어가 복잡하고 정교한 Angular 애플리케이션을 개발하는 데 어떻게 도움이 되는지 살펴보겠습니다.</p><h2 id="angular-cli-설치"><a class="markdownIt-Anchor" href="#angular-cli-설치"></a> Angular CLI 설치</h2><p>Angular CLI를 사용하려면 시스템에 전역적으로 설치해야 합니다. Node.js와 npm이 설치되어 있는지 확인한 후 다음 명령어를 실행하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure><h2 id="새로운-angular-애플리케이션-생성"><a class="markdownIt-Anchor" href="#새로운-angular-애플리케이션-생성"></a> 새로운 Angular 애플리케이션 생성</h2><p>새로운 Angular 애플리케이션을 만들려면 <code>ng new</code> 명령어 뒤에 프로젝트 이름을 사용하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new my-app</span><br></pre></td></tr></table></figure><p>이 명령어는 Angular 애플리케이션에 필요한 파일과 폴더를 포함하여 새 프로젝트 디렉터리를 생성합니다. 또한 필요한 종속성을 설치하고 로컬 개발 서버를 설정합니다.</p><h2 id="실행"><a class="markdownIt-Anchor" href="#실행"></a> 실행</h2><p>라이브 리로딩(live reloading)으로 로컬 개발 서버를 시작하려면 프로젝트의 루트 디렉터리로 이동하여 명령어를 실행하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure><p>기본적으로 <code>http://localhost:4200/</code> 주소로 애플리케이션이 실행됩니다.</p><h2 id="component-directive-service-생성"><a class="markdownIt-Anchor" href="#component-directive-service-생성"></a> Component, Directive, Service 생성</h2><p>Angular CLI를 사용하면 Component, Directive, Service, Pipe 및 Guard 와 같은 Angular 애플리케이션의 다양한 파일을 빠르게 생성할 수 있습니다.</p><ul><li>Component 생성</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ng generate component my-component</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">ng g c my-component</span><br></pre></td></tr></table></figure><ul><li>Directive 생성</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ng generate directive my-directive</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">ng g d my-directive</span><br></pre></td></tr></table></figure><ul><li>Service 생성</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ng generate service my-service</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">ng g s my-service</span><br></pre></td></tr></table></figure><ul><li>Module 생성</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ng generate module my-module</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">ng g m my-module</span><br></pre></td></tr></table></figure><p>이 명령어는 필요한 파일을 생성하고 해당 NgModule을 업데이트하여 새 요소를 등록합니다.</p><h2 id="빌드"><a class="markdownIt-Anchor" href="#빌드"></a> 빌드</h2><p>Angular 애플리케이션의 프로덕션 모드로 빌드를 하려면 다음 명령어를 실행하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --prod</span><br></pre></td></tr></table></figure><p>이 명령어는 <code>dist/</code> 폴더에 최적화된 빌드를 생성합니다.</p><h2 id="테스트-실행-및-linting"><a class="markdownIt-Anchor" href="#테스트-실행-및-linting"></a> 테스트 실행 및 Linting</h2><p>Angular CLI에는 테스트 실행 및 코드 Linting에 대한 지원이 내장되어 있습니다. 다음 명령어를 실행하세요.</p><ul><li>Karma로 단위 테스트 실행</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng <span class="built_in">test</span></span><br></pre></td></tr></table></figure><ul><li>Protractor를 사용하여 end-to-end 테스트 실행</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng e2e</span><br></pre></td></tr></table></figure><ul><li>TSLint로 코드 Lint</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng lint</span><br></pre></td></tr></table></figure><h2 id="custom-빌드-구성"><a class="markdownIt-Anchor" href="#custom-빌드-구성"></a> Custom 빌드 구성</h2><p>Angular CLI는 <code>angular.json</code> 파일을 사용하여 프로젝트 구성을 관리합니다. 이 파일을 수정하여 출력 경로, 파일 이름, 최적화 옵션과 같은 빌드 설정을 사용자에 맞게 설정할 수 있습니다.</p><p>예를 들어, <code>outputPath</code> 속성을 업데이트하여 프로덕션 모드 빌드의 출력 경로를 변경할 수 있습니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"configurations": &#123;</span><br><span class="line">  "production": &#123;</span><br><span class="line">    "outputPath": "custom-output-folder",</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="코드-복잡성-및-테마"><a class="markdownIt-Anchor" href="#코드-복잡성-및-테마"></a> 코드 복잡성 및 테마</h2><p>Angular CLI를 사용하면 코드를 Component, Directive, Service로 모듈화하여 애플리케이션의 복잡성을 관리할 수 있습니다. 이는 깨끗하고 체계적인 코드베이스를 유지하는 데 도움이 되므로 애플리케이션을 더 쉽게 확장하고 수정할 수 있습니다.</p><p>테마 설정과 관련하여 Angular CLI는 테마를 직접 처리하지 않지만 CSS나 SCSS 또는 LESS와 같은 전처리기를 사용하여 테마를 프로젝트에 통합할 수 있습니다. Bootstrap, Bulma 또는 Angular Material과 같은 널리 사용되는 CSS 프레임워크를 사용하여 일관되고 시각적으로 매력적인 사용자 인터페이스를 만들 수도 있습니다.</p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>Angular CLI는 복잡하고 정교한 Angular 애플리케이션을 쉽게 개발하는 데 도움이 되는 강력한 도구입니다. 프로젝트 생성, 유지 관리를 위한 필수 명령어로 워크플로우를 간소화함으로써 고품질 코드를 작성하고 최고의 사용자 경험을 제공하는 데 집중할 수 있습니다.</p><p>Angular CLI와 그 기능을 계속 탐색하면서 생산성을 향상하고 강력하고 확장 가능한 애플리케이션을 구축할 수 있는 더 많은 방법을 찾을 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/11/23/angular-30/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript 프레임워크 비교: Angular, React, Vue.js</title>
      <link>http://hgko1207.github.io/2023/11/17/js-dev-10/</link>
      <guid>http://hgko1207.github.io/2023/11/17/js-dev-10/</guid>
      <pubDate>Fri, 17 Nov 2023 06:32:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;웹 개발 세계에서 Angular, React 및 Vue.js와 같은 JavaScript 프레임워크는 개발자가 웹 애플리케이션을 구축할 수 있는 다양한 도구를 제공합니다.&lt;/p&gt;
&lt;p&gt;그러나 각각은 서로 다른 디자인 철학, 학습 곡선(learnin
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>웹 개발 세계에서 Angular, React 및 Vue.js와 같은 JavaScript 프레임워크는 개발자가 웹 애플리케이션을 구축할 수 있는 다양한 도구를 제공합니다.</p><p>그러나 각각은 서로 다른 디자인 철학, 학습 곡선(learning curve) 및 사용 사례를 가지고 있습니다. 다음은 이 세 가지 프레임워크를 비교한 것입니다.</p><h2 id="angular"><a class="markdownIt-Anchor" href="#angular"></a> Angular</h2><h3 id="장점"><a class="markdownIt-Anchor" href="#장점"></a> 장점</h3><ol><li><strong>모든 기능을 갖춘 프레임워크</strong><br />Angular는 광범위한 기능들을 자랑하며 필요한 모든 도구를 포함합니다. 따라서 크고 복잡한 애플리케이션에 적합합니다.<br /><br/></li><li><strong>Type Safety</strong><br />TypeScript 사용 덕분에 컴파일 타임(compile-time) 오류 감지 기능을 제공하여 보다 안전한 코드를 보장합니다.<br /><br/></li><li><strong>강력한 데이터 바인딩</strong><br />Angular의 강력한 기능인 양방향 데이터 바인딩은 원활한 데이터 동기화를 촉진합니다.</li></ol><h3 id="단점"><a class="markdownIt-Anchor" href="#단점"></a> 단점</h3><ol><li><strong>학습 곡선</strong>(Learning Curve)<br />Angular는 학습 곡선이 더 가파르기 때문에 즉 초기에 습득해야 하는 기술 양이 많기 때문에 초보자에게는 다소 어려울 수 있습니다.<br /><br/></li><li><strong>무게</strong><br />Angular는 어떤 경우에는 다른 프레임워크에 비해 무거워서 성능 제한이 발생할 수 있습니다.</li></ol><h2 id="react"><a class="markdownIt-Anchor" href="#react"></a> React</h2><h3 id="장점-2"><a class="markdownIt-Anchor" href="#장점-2"></a> 장점</h3><ol><li><strong>속도와 성능</strong><br />React는 가상 DOM을 사용하여 신속하고 효율적으로 작동하여 애플리케이션 성능을 향상시킵니다.<br /><br/></li><li><strong>모듈성</strong><br />컴포넌트 기반 아키텍처를 통해 React는 모듈식 애플리케이션 구조를 허용합니다.<br /><br/></li><li><strong>광범위한 생태계</strong><br />React는 대규모 커뮤니티를 자랑하며 광범위한 도구 및 라이브러리 생태계의 지원을 받습니다.</li></ol><h3 id="단점-2"><a class="markdownIt-Anchor" href="#단점-2"></a> 단점</h3><ol><li><strong>완전한 프레임워크가 아님</strong><br />React는 오로지 사용자 인터페이스 라이브러리이므로 완전한 프레임워크를 형성하기 위해 다른 라이브러리나 도구와 함께 사용해야 합니다.<br /><br/></li><li><strong>학습 곡선</strong>(Learning Curve)<br />JSX 및 Virtual DOM과 같은 개념은 일부 개발자의 학습 곡선을 약간 증가시킬 수 있습니다.</li></ol><h2 id="vuejs"><a class="markdownIt-Anchor" href="#vuejs"></a> Vue.js</h2><h3 id="장점-3"><a class="markdownIt-Anchor" href="#장점-3"></a> 장점</h3><ol><li><strong>경량</strong><br />Vue.js는 가벼운 성능을 갖춘 작은 크기의 라이브러리입니다.<br /><br/></li><li><strong>쉬운 통합</strong><br />Vue.js는 기존 프로젝트에 쉽게 통합되고 점진적으로 채택될 수 있습니다.<br /><br/></li><li><strong>문서</strong><br />Vue.js는 사용자 친화적인 문서를 제공하여 학습 과정을 촉진합니다.</li></ol><h3 id="단점-3"><a class="markdownIt-Anchor" href="#단점-3"></a> 단점</h3><ol><li><strong>소규모 커뮤니티</strong><br />다른 두 프레임워크에 비해 커뮤니티가 더 작기 때문에 특정 영역에서는 리소스가 더 제한될 수 있습니다.<br /><br/></li><li><strong>엔터프라이즈 수준 애플리케이션에는 적합하지 않습니다.</strong><br />Vue.js는 대규모의 복잡한 프로젝트에서 Angular 및 React에 비해 몇 가지 단점이 있을 수 있습니다.</li></ol><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>이 글에서는 각 프레임워크의 기능을 정리했습니다. 어떤 프레임워크를 사용할지는 프로젝트 요구 사항, 팀의 전문 지식, 선호도에 따라 선택됩니다. Angular, React 및 Vue.js는 모두 강력하고 효과적인 도구이므로 선택 시 프로젝트의 요구 사항과 개발 팀의 기술을 고려하는 것이 중요합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://angular.io/" target="_blank" rel="noopener">https://angular.io/</a></li><li><a href="https://react.dev/" target="_blank" rel="noopener">https://react.dev/</a></li><li><a href="https://vuejs.org/" target="_blank" rel="noopener">https://vuejs.org/</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/11/17/js-dev-10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Visual Studio Code] 생산성 향상을 위한 팁</title>
      <link>http://hgko1207.github.io/2023/11/03/info-4/</link>
      <guid>http://hgko1207.github.io/2023/11/03/info-4/</guid>
      <pubDate>Fri, 03 Nov 2023 06:54:32 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;(VS Code)는 개발 세계를 강타한 인기 있고 강력한 소스 코드 편집기입니다. 유연성, 확장성 및 풍부한 생태계 덕분에 많은 개발자가 선택합니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 코딩 경
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Visual Studio Code</strong>(VS Code)는 개발 세계를 강타한 인기 있고 강력한 소스 코드 편집기입니다. 유연성, 확장성 및 풍부한 생태계 덕분에 많은 개발자가 선택합니다.</p><p>이 글에서는 코딩 경험을 향상하고 생산성을 높이는 데 도움이 되는 몇 가지 유용한 팁과 테마를 공유하겠습니다.</p><h2 id="키보드-단축키-익히기">키보드 단축키 익히기</h2><p>키보드 단축키를 사용하면 시간과 노력을 절약하여 효율성을 높일 수 있습니다. 시작하는 데 도움이 되는 몇 가지 필수 단축키는 다음과 같습니다.</p><ul><li><code>Ctrl+P</code> 또는<code> Cmd+P</code>: 작업 공간에서 파일을 빠르게 엽니다.</li><li><code>Ctrl+Shift+F</code> 또는 <code>Cmd+Shift+F</code>: 전체 프로젝트에서 검색합니다.</li><li><code>Alt+Up</code> 또는 <code>Alt+Down</code>: 현재 줄을 위나 아래로 이동합니다.</li><li><code>Ctrl+D</code> 또는 <code>Cmd+D</code>: 현재 단어의 다음 항목을 선택합니다.</li><li><code>Ctrl+Shift+L</code> 또는 <code>Cmd+Shift+L</code>: 현재 단어와 일치하는 항목을 모두 선택합니다.</li></ul><p><strong>File &gt; Preferences &gt; Keyboard Shortcuts</strong> 로 이동하여 커스텀 키보드 단축키를 만들 수도 있습니다.</p><h2 id="통합-터미널-활용">통합 터미널 활용</h2><p>VS Code에는 워크플로우를 간소화하는 데 도움이 되는 통합 터미널이 함께 제공됩니다. 몇 가지 편리한 단축키가 포함되어 있습니다.</p><ul><li><code>Ctrl+</code> 또는 <code>Cmd+</code>: 터미널을 열거나 닫습니다.</li><li><code>Ctrl+Shift+5</code> 또는 <code>Cmd+Shift+5</code>: 터미널을 분할합니다.</li></ul><p><strong>File &gt; Preferences &gt; Settings</strong> 으로 이동하여 &quot;terminal&quot;을 검색하여 터미널을 커스터 마이징할 수도 있습니다.</p><h2 id="방해-없는-코딩을-위한-Zen-모드">방해 없는 코딩을 위한 Zen 모드</h2><p>Zen 모드는 모든 UI(상태 표시줄, 활동 표시줄, 패널 및 사이드바)를 숨기고 전체 화면에 편집기만 표시하는 VS Code의 기능입니다. <code>Ctrl+K Z</code> 또는 <code>Cmd+K Z</code>로 활성화하세요. Zen 모드를 종료하려면 Esc를 두 번 누릅니다.</p><h2 id="더-빠른-개발을-위한-코드-조각-Snippets">더 빠른 개발을 위한 코드 조각(Snippets)</h2><p>코드 조각(Snippets)은 자동으로 코드를 삽입하는 템플릿입니다. VS Code에는 널리 사용되는 언어에 대한 코드 조각이 내장되어 있으며 <strong>File &gt; Preferences &gt; Configure User Snippets</strong> 으로 이동하여 자신만의 코드 조각을 만들 수 있습니다. 다양한 언어 및 프레임워크에 대해 미리 만들어진 코드 조각을 사용하여 확장 프로그램을 설치할 수도 있습니다.</p><h2 id="편안한-코딩-환경을-위한-테마-Theme">편안한 코딩 환경을 위한 테마(Theme)</h2><p>VS Code는 코딩 환경을 커스터 마이징 할 수 있는 다양한 테마를 제공합니다. 다음은 인기 있는 것들입니다.</p><ul><li>Dark+ (default dark theme)</li><li>Light+ (default light theme)</li><li>Monokai</li><li>Solarized Dark</li><li>Dracula</li></ul><p><strong>File &gt; Preferences &gt; Theme &gt; Color Theme</strong> 로 이동하여 테마를 변경할 수 있습니다. 더 많은 테마를 탐색하려면 Visual Studio Code Marketplace를 방문하여 &quot;theme&quot;를 검색하세요.</p><h2 id="향상된-기능을-위한-확장-Extension">향상된 기능을 위한 확장(Extension)</h2><p>Extension 은 VS Code의 기능을 크게 확장할 수 있습니다. 일부 인기 있는 확장 기능은 다음과 같습니다.</p><ul><li>Prettier: 일련의 규칙에 따라 코드 형식을 자동으로 지정하는 코드 포맷터입니다.</li><li>ESLint: 코드 일관성을 유지하고 버그를 조기에 발견하는 데 도움이 되는 린터(linter)입니다.</li><li>Live Server: 정적 및 동적 페이지에 대한 라이브 다시 로드를 통해 로컬 개발 서버를 시작합니다.</li><li>GitLens: VS Code 내에서 Git 기능을 강화하세요.</li></ul><p>확장 프로그램을 관리하려면 활동 표시줄에서 확장 프로그램(Extensions) 아이콘을 클릭하거나 <code>Ctrl+Shift+X</code> 또는 <code>Cmd+Shift+X</code>를 누르세요.</p><h2 id="결론">결론</h2><p>Visual Studio Code는 생산성을 높이고 코딩 환경을 향상할 수 있는 수많은 방법을 제공합니다. 키보드 단축키를 익히고, 통합 터미널을 활용하고, Zen 모드를 사용하고, 코드 조각을 만들고, 테마를 커스터 마이징하고, 강력한 확장 기능을 설치함으로써 이 다재다능한 편집기의 잠재력을 진정으로 활용할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/11/03/info-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] ChangeDetectorRef: 수동 변경 감지에 대해 자세히 알아보기</title>
      <link>http://hgko1207.github.io/2023/11/02/angular-29/</link>
      <guid>http://hgko1207.github.io/2023/11/02/angular-29/</guid>
      <pubDate>Thu, 02 Nov 2023 00:54:27 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;변경 감지&lt;/strong&gt;(Change Detection)는 Angular 애플리케이션의 중요한 측면으로, UI가 애플리케이션 상태와 동기화된 상태를 유지하도록 보장합니다. Angular는 효율적인 기본(default) 변경 감지 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>변경 감지</strong>(Change Detection)는 Angular 애플리케이션의 중요한 측면으로, UI가 애플리케이션 상태와 동기화된 상태를 유지하도록 보장합니다. Angular는 효율적인 기본(default) 변경 감지 전략을 제공하지만 성능 최적화나 복잡한 사용 사례에는 보다 세부적인 접근 방식이 필요한 경우가 있습니다.</p><p>이 글에서는 <strong>ChangeDetectorRef</strong>의 강력한 기능을 심층적으로 살펴보고 해당 방법을 검토하고 잠재력을 최대한 보여주는 예를 보여 드리겠습니다.</p><h2 id="ChangeDetectorRef-이해">ChangeDetectorRef 이해</h2><p><code>ChangeDetectorRef</code>는 변경 감지 메커니즘에 대한 직접적인 인터페이스를 제공하는 Angular 클래스입니다. 이를 통해 개발자는 변경 감지를 수동으로 트리거(trigger)하고, 변경 감지 트리에서 컴포넌트를 분리하거나 다시 연결하고, 향후 변경 감지를 위해 컴포넌트를 표시할 수 있습니다. <code>ChangeDetectorRef</code>를 사용하면 개발자는 변경 감지 프로세스를 더 효과적으로 제어할 수 있어 애플리케이션의 성능과 유연성이 향상됩니다.</p><p><code>ChangeDetectorRef</code>가 제공하는 주요 메소드는 다음과 같습니다.</p><ul><li><code>detectorChanges()</code>: 현재 컴포넌트와 해당 하위 컴포넌트에 대한 변경 감지를 수동으로 트리거합니다.</li><li><code>markForCheck()</code>: 다음 변경 감지 주기 동안 현재 컴포넌트와 해당 상위 컴포넌트에 변경 감지가 필요한 것으로 표시합니다.</li><li><code>detach()</code>: 변경 감지 트리에서 현재 컴포넌트를 분리하여 이 컴포넌트와 해당 하위 컴포넌트에 대한 자동 변경 감지를 효과적으로 중지합니다.</li><li><code>reattach()</code>: 현재 컴포넌트를 변경 감지 트리에 다시 연결하여 자동 변경 감지를 다시 한 번 활성화합니다.</li></ul><h2 id="예제-1-동적-컴포넌트-로딩-및-변경-감지">예제 1: 동적 컴포넌트 로딩 및 변경 감지</h2><p>사용자 상호 작용에 따라 컴포넌트가 동적으로 로드되는 애플리케이션을 상상해 보세요. 이러한 시나리오에서는 <code>ChangeDetectorRef</code>를 사용하여 변경 감지를 최적화하고 필요한 경우에만 UI가 업데이트되도록 할 수 있습니다.</p><p>먼저 컴포넌트를 동적으로 로드하는 디렉티브을 만들어 보겠습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ComponentFactoryResolver, Directive, Input, OnInit, ViewContainerRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">'[appDynamicComponentLoader]'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DynamicComponentLoaderDirective <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="meta">@Input</span>(<span class="string">'appDynamicComponentLoader'</span>) component: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> viewContainerRef: ViewContainerRef, <span class="keyword">private</span> componentFactoryResolver: ComponentFactoryResolver</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">const</span> factory = <span class="keyword">this</span>.componentFactoryResolver.resolveComponentFactory(<span class="keyword">this</span>.component);</span><br><span class="line">    <span class="keyword">this</span>.viewContainerRef.createComponent(factory);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 사용자 입력에 따라 동적으로 다양한 컴포넌트를 로드하는 컨테이너 컴포넌트를 만들어 보겠습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ComponentRef, ViewChild &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DynamicComponentLoaderDirective &#125; <span class="keyword">from</span> <span class="string">'./dynamic-component-loader.directive'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-container'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ng-container *appDynamicComponentLoader="selectedComponent"&gt;&lt;/ng-container&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)="loadComponent('A')"&gt;Load Component A&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)="loadComponent('B')"&gt;Load Component B&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ContainerComponent &#123;</span><br><span class="line">  <span class="meta">@ViewChild</span>(DynamicComponentLoaderDirective, &#123; <span class="keyword">static</span>: <span class="literal">true</span> &#125;) dynamicComponentLoader: DynamicComponentLoaderDirective;</span><br><span class="line"></span><br><span class="line">  selectedComponent: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  loadComponent(<span class="keyword">type</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.selectedComponent = <span class="keyword">type</span> === <span class="string">'A'</span> ? ComponentA : ComponentB;</span><br><span class="line">    <span class="keyword">this</span>.dynamicComponentLoader.detectChanges();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 새 컴포넌트가 로드될 때 변경 감지를 수동으로 트리거하기 위해 <code>discoverChanges()</code> 메서드를 사용하고 있습니다.</p><h2 id="예제-2-Observable을-사용한-고급-변경-감지">예제 2: Observable을 사용한 고급 변경 감지</h2><p>다양한 컴포넌트가 Observable을 통해 데이터 업데이트를 받는 애플리케이션을 생각해 보세요. 우리는 특정 컴포넌트가 새 데이터를 수신할 때만 발생하도록 변경 감지를 최적화하려고 합니다.</p><p>먼저 데이터 서비스를 만듭니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BehaviorSubject &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DataService &#123;</span><br><span class="line">  <span class="keyword">private</span> dataSubject = <span class="keyword">new</span> BehaviorSubject&lt;<span class="built_in">any</span>[]&gt;([]);</span><br><span class="line"></span><br><span class="line">  data$ = <span class="keyword">this</span>.dataSubject.asObservable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 데이터 서비스를 사용하고 여러 하위 컴포넌트가 있는 상위 컴포넌트를 만들어 보겠습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DataService &#125; <span class="keyword">from</span> <span class="string">'./data.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-parent'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Parent Component&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;app-child *ngFor="let item of items; index as i" [data]="item" [index]="i"&gt;&lt;/app-child&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParentComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  items: <span class="built_in">any</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> dataService: DataService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.dataService.data$.subscribe(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.items = data;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>마지막으로 데이터 업데이트를 수신하고 <code>ChangeDetectorRef</code>를 사용하는 하위 컴포넌트를 만듭니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input, OnInit, ChangeDetectorRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DataService &#125; <span class="keyword">from</span> <span class="string">'./data.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-child'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div *ngIf="data"&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;Child Component &#123;&#123; index &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; data &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ChildComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="meta">@Input</span>() data: <span class="built_in">any</span>;</span><br><span class="line">  <span class="meta">@Input</span>() index: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> cdr: ChangeDetectorRef, <span class="keyword">private</span> dataService: DataService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.cdr.detach();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.dataService.data$.subscribe(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newData = data[<span class="keyword">this</span>.index];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (newData !== <span class="keyword">this</span>.data) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data = newData;</span><br><span class="line">        <span class="keyword">this</span>.cdr.markForCheck();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>detach()</code>를 사용하여 변경 감지 트리에서 하위 컴포넌트를 분리했습니다. 그런 다음 <code>markForCheck()</code>를 사용하여 새 데이터가 수신될 때 변경 사항 감지를 위한 컴포넌트를 표시했습니다.</p><h2 id="결론">결론</h2><p><code>ChangeDetectorRef</code>는 개발자에게 Angular의 변경 감지 프로세스를 수동으로 제어할 수 있는 강력한 방법을 제공합니다. 기능을 이해하고 방법을 활용하면 성능을 위해 애플리케이션을 최적화하고 복잡한 사용 사례를 쉽게 처리할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/11/02/angular-29/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] Pipe 소개 및 사용방법</title>
      <link>http://hgko1207.github.io/2023/11/01/angular-28/</link>
      <guid>http://hgko1207.github.io/2023/11/01/angular-28/</guid>
      <pubDate>Wed, 01 Nov 2023 06:33:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular 파이프&lt;/strong&gt;(Pipe)는 Angular 애플리케이션의 필수 부분으로, 데이터를 변환하고 형식을 지정하는 간단한 방법을 제공합니다. 파이프를 사용하면 필요에 맞게 데이터를 쉽게 조작하고 이해하기 쉬운 형식으로
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular 파이프</strong>(Pipe)는 Angular 애플리케이션의 필수 부분으로, 데이터를 변환하고 형식을 지정하는 간단한 방법을 제공합니다. 파이프를 사용하면 필요에 맞게 데이터를 쉽게 조작하고 이해하기 쉬운 형식으로 표시할 수 있습니다.</p><p>이 글에서는 <strong>AsyncPipe, CurrentPipe, DatePipe, DecimalPipe, I18nPluralPipe, I18nSelectPipe, JsonPipe, KeyValuePipe, LowerCasePipe, PercentPipe, SlicePipe, TitleCasePipe 및 UpperCasePipe</strong>를 포함한 다양한 유형의 Angular 파이프를 살펴보겠습니다. 또한 Angular 파이프를 효과적으로 사용하기 위한 모범 사례에 대해서도 알아보겠습니다.</p><h2 id="asyncpipe"><a class="markdownIt-Anchor" href="#asyncpipe"></a> AsyncPipe</h2><p>AsyncPipe는 Angular에서 비동기 데이터를 처리하는 데 사용됩니다. 이를 통해 HTTP 요청 또는 Promise와 같은 비동기 작업에서 반환된 데이터를 표시할 수 있습니다. AsyncPipe는 Observable 또는 Promise를 구독(subscribe)하고 데이터가 변경되면 자동으로 뷰를 업데이트합니다. 다음은 AsyncPipe를 사용하여 비동기 데이터를 처리하는 예입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; (data$ | async)?.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="currencypipe"><a class="markdownIt-Anchor" href="#currencypipe"></a> CurrencyPipe</h2><p>CurrencyPipe는 Angular에서 통화(currency) 값의 형식을 지정하는 데 사용됩니다. 통화 기호, 천 단위 및 소수 구분 기호를 사용하여 특정 통화 형식으로 숫자를 표시할 수 있습니다. 다음은 통화 값 형식을 지정하기 위해 CurrencyPipe를 사용하는 예입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; 10000 | currency:'USD':'symbol':'1.2-2' &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Output: '$10,000.00' --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="datepipe"><a class="markdownIt-Anchor" href="#datepipe"></a> DatePipe</h2><p>DatePipe는 Angular에서 날짜 형식을 지정하는 데 사용됩니다. ‘short’, ‘medium’, ‘long’ 등 특정 형식으로 날짜를 표시할 수 있습니다. 커스텀(custom) 날짜 형식을 지정할 수도 있습니다. 다음은 DatePipe를 사용하여 날짜 형식을 지정하는 예입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; today | date:'shortDate' &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Output: '11/1/23' --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="decimalpipe"><a class="markdownIt-Anchor" href="#decimalpipe"></a> DecimalPipe</h2><p>DecimalPipe는 Angular에서 십진수 값의 형식을 지정하는 데 사용됩니다. 소수 구분 기호와 천 단위 구분 기호를 사용하여 특정 소수 형식으로 숫자를 표시할 수 있습니다. 다음은 DecimalPipe를 사용하여 10진수 값의 형식을 지정하는 예입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; 1000.5 | number:'1.2-2' &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Output: '1,000.50' --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="i18npluralpipe"><a class="markdownIt-Anchor" href="#i18npluralpipe"></a> I18nPluralPipe</h2><p>I18nPluralPipe는 Angular에서 복수형을 처리하는 데 사용됩니다. 항목 수에 따라 다른 텍스트를 표시할 수 있습니다. 다음은 I18nPluralPipe를 사용하여 복수화를 처리하는 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">items = [<span class="string">'Message 1'</span>];</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; items.length &#125;&#125; / &#123;&#123; items.length | i18nPlural : &#123; '=0': 'No items', '=1': '1 item', other: '# items' &#125; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Output: '1 / 1 item' --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="i18nselectpipe"><a class="markdownIt-Anchor" href="#i18nselectpipe"></a> I18nSelectPipe</h2><p>I18nSelectPipe는 Angular에서 select 문을 처리하는 데 사용됩니다. 조건에 따라 다른 텍스트를 표시할 수 있습니다. 다음은 I18nSelectPipe를 사용하여 select 문을 처리하는 예입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; gender | select: &#123; 'male': 'He', 'female': 'She', 'other': 'They' &#125; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jsonpipe"><a class="markdownIt-Anchor" href="#jsonpipe"></a> JsonPipe</h2><p>JsonPipe는 Angular에서 JSON 데이터를 표시하는 데 사용됩니다. JSON 데이터를 읽을 수 있는 형식으로 표시할 수 있습니다. 다음은 JsonPipe를 사용하여 JSON 데이터를 표시하는 예입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; data | json &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="lowercasepipe"><a class="markdownIt-Anchor" href="#lowercasepipe"></a> LowerCasePipe</h2><p>LowerCasePipe는 문자열을 소문자로 변환하는 데 사용됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 'HELLO WORLD' | lowercase &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- Output: hello world --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="percentpipe"><a class="markdownIt-Anchor" href="#percentpipe"></a> PercentPipe</h2><p>PercentPipe는 숫자를 백분율로 형식화하는 데 사용됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 0.25 | percent &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- Output: 25% --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="slicepipe"><a class="markdownIt-Anchor" href="#slicepipe"></a> SlicePipe</h2><p>SlicePipe는 배열 또는 문자열의 조각을 추출하는 데 사용됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 'abcdefghijk' | slice:0:5 &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- Output: abcde --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="titlecasepipe"><a class="markdownIt-Anchor" href="#titlecasepipe"></a> TitleCasePipe</h2><p>TitleCasePipe는 문자열을 title 케이스로 변환하는 데 사용됩니다(각 단어의 첫 글자를 대문자로 표시).</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 'hello world' | titlecase &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- Output: Hello World --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="uppercasepipe"><a class="markdownIt-Anchor" href="#uppercasepipe"></a> UpperCasePipe</h2><p>UpperCasePipe는 문자열을 대문자로 변환하는 데 사용됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 'hello world' | uppercase &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- Output: HELLO WORLD --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>이 글에서는 다양한 Angular 파이프와 그 기능을 살펴보았습니다. 파이프는 애플리케이션에서 데이터를 쉽게 변환하고 형식을 지정할 수 있게 해주는 Angular의 중요한 기능입니다.</p><p>이러한 파이프를 이해하고 활용함으로써 Angular 애플리케이션을 보다 효율적이고 동적이고 사용자 친화적으로 만들 수 있습니다.</p><p>특정 사용 사례에 적합한 파이프를 사용하고 파이프를 철저히 테스트하는 것을 잊지 마세요.</p><p>이 글를 통해 Angular 파이프에 대한 더 나은 이해와 응용 프로그램에서 이를 효과적으로 사용하는 방법을 얻을 수 있기를 바랍니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/11/01/angular-28/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] 데코레이터(Decorator) 소개 및 사용방법(2)</title>
      <link>http://hgko1207.github.io/2023/10/31/angular-27/</link>
      <guid>http://hgko1207.github.io/2023/10/31/angular-27/</guid>
      <pubDate>Tue, 31 Oct 2023 02:32:38 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular Decorator&lt;/strong&gt;는 Angular 애플리케이션 구축의 기본 측면입니다. 이는 Angular에 처리 및 사용 방법을 알려주는 메타데이터를 제공하여 클래스, 속성, 메서드 및 매개 변수의 동작을 향상시키는
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular Decorator</strong>는 Angular 애플리케이션 구축의 기본 측면입니다. 이는 Angular에 처리 및 사용 방법을 알려주는 메타데이터를 제공하여 클래스, 속성, 메서드 및 매개 변수의 동작을 향상시키는 데 사용됩니다.</p><p>이 글에서는 Angular의 다양한 데코레이터 유형을 살펴보고 이를 효과적으로 사용하는 시기와 방법을 알아봅니다.</p><h2 id="ngmodule"><a class="markdownIt-Anchor" href="#ngmodule"></a> @NgModule</h2><p><code>@NgModule</code>은 Angular 모듈을 생성하고 구성하는 데 사용되는 데코레이터입니다. Angular 모듈은 components, services, directives, pipes 등과 같은 애플리케이션의 다양한 부분을 위한 컨테이너입니다. 이는 애플리케이션의 여러 부분 간의 종속성을 구성하고 관리하는 데 사용됩니다.</p><p><code>@NgModule</code> 데코레이터를 사용하는 방법의 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [AppComponent],</span><br><span class="line">  imports: [BrowserModule],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>위의 예에서는 BrowserModule과 AppComponent를 가져오고 declarations 배열에서 AppComponent를 선언합니다. 또한 bootstrap 컴포넌트를 AppComponent로 지정합니다.</p><p>@NgModule 데코레이터에는 구성할 수 있는 여러 속성이 있습니다.</p><ul><li>declarations: 이 모듈에 속하는 components, directives 및 pipes의 배열입니다.</li><li>imports: 이 모듈이 의존하는 모듈의 배열입니다.</li><li>exports: 다른 모듈에서 사용할 수 있는 components, directives 및 pipes의 배열입니다.</li><li>providers: 이 모듈에서 제공하는 서비스 배열입니다.</li><li>bootstrap: 이 모듈에 의해 부트스트랩되어야 하는 주요 컴포넌트입니다.</li></ul><p>@NgModule 데코레이터를 사용하면 Angular 애플리케이션에서 모듈을 쉽게 만들고 관리할 수 있습니다.</p><h2 id="optional"><a class="markdownIt-Anchor" href="#optional"></a> @Optional</h2><p><code>@Optional</code> 데코레이터는 종속성을 컴포넌트나 서비스에 주입할 때 종속성을 선택적으로 허용하는 데 사용됩니다. 종속성을 찾을 수 없는 경우 injector 는 오류를 발생시키지 않고 대신 종속성에 대해 <code>null</code> 값을 제공합니다.</p><p>예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Optional &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MyService &#125; <span class="keyword">from</span> <span class="string">'./my.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'my-component'</span>,</span><br><span class="line">  template: <span class="string">'&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyComponent &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="meta">@Optional</span>() <span class="keyword">private</span> myService: MyService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> message(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.myService) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.myService.getMessage();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'MyService not available.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서 <code>MyService</code> 종속성은 <code>@Optional</code> 데코레이터를 사용하여 선택 사항으로 표시됩니다. 서비스를 찾을 수 없으면 <code>message()</code> 메서드는 오류를 발생시키는 대신 기본 문자열을 반환합니다.</p><p>선택 사항으로 표시된 종속성이 실제로 컴포넌트나 서비스의 올바른 작동을 위해 필요한 경우 <code>@Optional</code> 데코레이터를 사용해서는 안 된다는 점에 유의하는 것이 중요합니다. 대신 종속성을 필수로 표시하고 적절한 오류 처리를 구현해야 합니다.</p><h2 id="self"><a class="markdownIt-Anchor" href="#self"></a> @Self</h2><p><code>@Self</code> 데코레이터는 종속성 해결 범위를 현재 컴포넌트 또는 디렉티브 인스턴스로 제한하는 데 사용됩니다. 즉, Angular는 컴포넌트나 디렉티브의 자체 인젝터에서만 종속성을 찾고 상위 인젝터에서는 찾지 않습니다.</p><p><code>@Self</code>를 사용하는 방법의 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, Self &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MyService &#125; <span class="keyword">from</span> <span class="string">'./my-service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'my-component'</span>,</span><br><span class="line">  template: <span class="string">'&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;'</span>,</span><br><span class="line">  providers: [MyService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  message: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="meta">@Self</span>() <span class="keyword">private</span> myService: MyService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.myService.getMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>@Self</code> 데코레이터를 사용하여 <code>MyService</code> 종속성을 <code>MyComponent</code> 컴포넌트에 주입합니다. <code>MyService</code> 종속성은 컴포넌트 수준에서 정의됩니다. 즉, 현재 컴포넌트에만 사용할 수 있고 상위 컴포넌트에는 사용할 수 없습니다.</p><p><code>MyService</code> 종속성이 <code>AppModule</code> 또는 상위 컴포넌트와 같이 더 높은 수준에서 정의된 경우 Angular는 이를 찾을 때까지 현재 컴포넌트의 인젝터, 그 다음 상위 인젝터 등에서 이를 찾습니다. 그러나 <code>@Self</code>데코레이터를 사용하면 종속성 해결 범위를 현재 컴포넌트로만 제한합니다.</p><p>요약하자면, <code>@Self</code> 데코레이터는 상위 컴포넌트나 디렉티브가 아닌 현재 컴포넌트나 디렉티브의 컨텍스트 내에서만 종속성을 확인하는 데 사용됩니다.</p><h2 id="skipself"><a class="markdownIt-Anchor" href="#skipself"></a> @SkipSelf</h2><p><code>@SkipSelf</code> 데코레이터는 Angular에서 컴포넌트 계층 내 서비스의 가시성과 주입을 제어하는 데 사용됩니다. 컴포넌트나 디렉티브가 서비스를 요청하면 Angular는 현재 인젝터에서 이를 찾기 시작하고 요청된 서비스를 찾거나 트리 상단에 도달할 때까지 인젝터 트리를 탐색합니다.</p><p>기본적으로 컴포넌트나 디렉티브가 서비스를 요청하면 Angular는 현재 인젝터에서 해당 서비스를 찾습니다. 즉, 컴포넌트와 모든 하위 컴포넌트에서 서비스를 사용할 수 있다는 뜻입니다. 그러나 어떤 경우에는 현재 인젝터를 건너뛰고 상위 인젝터에서 서비스를 찾을 수 있습니다. 이는 서비스가 동일한 상위를 가진 여러 컴포넌트 간에 공유된다는 의미입니다.</p><p><code>@SkipSelf</code> 데코레이터는 Angular에게 현재 인젝터를 건너뛰고 상위 인젝터에서 요청된 서비스를 찾도록 지시하는 데 사용됩니다. 이는 상위가 동일하지만 서로 직접적으로 관련되지 않은 여러 컴포넌트 간에 서비스를 공유하려는 경우에 유용합니다.</p><p><code>@SkipSelf</code> 데코레이터를 사용하는 방법의 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Inject, SkipSelf &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MyService &#125; <span class="keyword">from</span> <span class="string">'./my.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'my-child-component'</span>,</span><br><span class="line">  template: <span class="string">` &lt;p&gt;My Child Component&lt;/p&gt; `</span>,</span><br><span class="line">  providers: [&#123; provide: MyService, useValue: &#123; message: <span class="string">'Hello from child component!'</span> &#125; &#125;],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyChildComponent &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="meta">@SkipSelf</span>() <span class="keyword">private</span> myService: MyService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.myService.message); <span class="comment">// Output: "Hello from parent component!"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서 <code>MyChildComponent</code>는 <code>@SkipSelf</code> 데코레이터를 사용하여 상위 인젝터에서 <code>MyService</code>를 요청합니다. 상위 컴포넌트는 providers 배열을 사용하여 <code>MyService</code>를 제공합니다. 이는 모든 하위 컴포넌트에서 서비스를 사용할 수 있음을 의미합니다. <code>MyChildComponent</code>가 초기화되면 상위 컴포넌트의 메시지를 기록합니다.</p><p>전반적으로 <code>@SkipSelf</code> 데코레이터는 동일한 부모를 가진 여러 컴포넌트 간에 서비스를 공유하고 동일한 컴포넌트 계층 내에서 동일한 서비스를 여러 번 주입하지 않으려는 경우에 유용합니다.</p><h2 id="viewchild"><a class="markdownIt-Anchor" href="#viewchild"></a> @ViewChild</h2><p><code>@ViewChild</code> 데코레이터는 컴포넌트의 템플릿 보기에서 element 또는 컴포넌트의 참조를 가져오는 데 사용됩니다. 하위 컴포넌트 또는 상위 컴포넌트에 있는 element의 속성 및 메서드에 액세스하는 데 사용할 수 있습니다.</p><p><code>@ViewChild</code>와 함께 사용할 수 있는 selectors에는 두 가지 유형이 있습니다.</p><ol><li>Component Selector가 사용되면 <code>@ViewChild</code>는 컴포넌트 인스턴스에 대한 참조를 반환합니다.</li></ol><p>다음은 Component Selector와 함께 <code>@ViewChild</code>를 사용하는 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ViewChild &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ChildComponent &#125; <span class="keyword">from</span> <span class="string">'./child.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'parent-component'</span>,</span><br><span class="line">  template: <span class="string">'&lt;child-component&gt;&lt;/child-component&gt;'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParentComponent &#123;</span><br><span class="line">  <span class="meta">@ViewChild</span>(ChildComponent) childComponentRef: ChildComponent;</span><br><span class="line"></span><br><span class="line">  ngAfterViewInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.childComponentRef.doSomething();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예제에서는 <code>@ViewChild</code>를 사용하여 <code>ChildComponent</code> 인스턴스에 대한 참조를 가져온 다음 <code>doSomething</code> 메서드를 호출하는 데 사용합니다.</p><ol start="2"><li>템플릿 참조 변수(Template Reference Variable): 템플릿 참조 변수가 사용되면 <code>@ViewChild</code>는 해당 변수와 연결된 요소 또는 컴포넌트에 대한 참조를 반환합니다.</li></ol><p>다음은 템플릿 참조 변수와 함께 <code>@ViewChild</code>를 사용하는 예입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child-component</span> #<span class="attr">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ViewChild &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ChildComponent &#125; <span class="keyword">from</span> <span class="string">'./child.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'parent-component'</span>,</span><br><span class="line">  template: <span class="string">'&lt;child-component #child&gt;&lt;/child-component&gt;'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParentComponent &#123;</span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">'child'</span>) childComponentRef: ChildComponent;</span><br><span class="line"></span><br><span class="line">  ngAfterViewInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.childComponentRef.doSomething();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서 <code>@ViewChild</code>는 템플릿 참조 변수 <code>#child</code>를 사용하여 <code>ChildComponent</code> 인스턴스에 대한 참조를 가져오는 데 사용됩니다.</p><p><code>@ViewChild</code>는 하위 컴포넌트가 상위 컴포넌트보다 먼저 렌더링되는 경우에만 작동한다는 점에 유의하는 것이 중요합니다. 상위 컴포넌트가 렌더링되기 전에 하위 컴포넌트에 액세스하려고 하면 결과가 정의되지 않습니다. 이를 방지하려면 <code>ngAfterViewInit()</code> 생명주기 훅 메소드를 사용하여 <code>@ViewChild</code>로 액세스를 시도하기 전에 하위 컴포넌트가 렌더링되었는지 확인할 수 있습니다.</p><h2 id="viewchildren"><a class="markdownIt-Anchor" href="#viewchildren"></a> @ViewChildren</h2><p><code>@ViewChildren</code> 데코레이터는 컴포넌트 또는 디렉티브의 템플릿에서 selector 와 일치하는 요소의 <code>QueryList</code>를 가져오는 데 사용됩니다.</p><p>다음은 <code>@ViewChildren</code>을 사용하여 특정 디렉티브가 있는 하위 요소의 <code>QueryList</code>를 가져오는 방법에 대한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Directive, ViewChildren &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">'[myDirective]'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyDirective &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'my-component'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div myDirective&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div myDirective&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyComponent &#123;</span><br><span class="line">  <span class="meta">@ViewChildren</span>(MyDirective) myDirectives: QueryList&lt;MyDirective&gt;;</span><br><span class="line"></span><br><span class="line">  ngAfterViewInit() &#123;</span><br><span class="line">    <span class="comment">// Access the elements with MyDirective</span></span><br><span class="line">    <span class="keyword">this</span>.myDirectives.forEach(<span class="function">(<span class="params">directive</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(directive);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>@ViewChildren</code>을 사용하여 <code>MyComponent</code> 템플릿의 <code>MyDirective</code> 디렉티브가 있는 요소의 <code>QueryList</code>를 가져옵니다. <code>ngAfterViewInit</code> 생명주기 훅 메소드는 요소에 액세스하고 이를 콘솔에 기록하는 데 사용됩니다.</p><p><code>@ViewChildren</code> 데코레이터는 템플릿의 요소와 일치하도록 디렉티브 유형 대신 문자열 selector를 사용할 수도 있습니다.</p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>이러한 데코레이터를 적절하게 사용하면 Angular 컴포넌트, 디렉티브 및 서비스의 기능을 향상하고 필요한 상용구 코드의 양을 줄일 수 있습니다. 각 데코레이터는 고유한 목적을 수행하며 사용법을 익히면 강력하고 효율적인 Angular 애플리케이션을 만들 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/10/31/angular-27/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] 데코레이터(Decorator) 소개 및 사용방법(1)</title>
      <link>http://hgko1207.github.io/2023/10/30/angular-26/</link>
      <guid>http://hgko1207.github.io/2023/10/30/angular-26/</guid>
      <pubDate>Mon, 30 Oct 2023 03:24:03 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular Decorator&lt;/strong&gt;는 Angular 애플리케이션 구축의 기본 측면입니다. 이는 Angular에 처리 및 사용 방법을 알려주는 메타데이터를 제공하여 클래스, 속성, 메서드 및 매개 변수의 동작을 향상시키는
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular Decorator</strong>는 Angular 애플리케이션 구축의 기본 측면입니다. 이는 Angular에 처리 및 사용 방법을 알려주는 메타데이터를 제공하여 클래스, 속성, 메서드 및 매개 변수의 동작을 향상시키는 데 사용됩니다.</p><p>이 글에서는 Angular의 다양한 데코레이터 유형을 살펴보고 이를 효과적으로 사용하는 시기와 방법을 알아봅니다.</p><h2 id="component"><a class="markdownIt-Anchor" href="#component"></a> @Component</h2><p><code>@Component</code> 데코레이터는 Angular에서 새 컴포넌트(Component)를 정의하는 데 사용됩니다. selector, template, styles 등과 같은 컴포넌트에 대한 메타데이터를 제공하는 데 사용됩니다. 구성 개체를 매개 변수로 사용하는 클래스 데코레이터입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-my-component'</span>,</span><br><span class="line">  template: <span class="string">'&lt;h1&gt;Hello World!&lt;/h1&gt;'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyComponent &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="directive"><a class="markdownIt-Anchor" href="#directive"></a> @Directive</h2><p><code>@Directive</code> 데코레이터는 Angular에서 새로운 디렉티브(Directive)을 만드는 데 사용됩니다. selector, inputs, outputs 등과 같은 지시어에 대한 메타데이터를 제공하는 데 사용됩니다. 구성 개체를 매개 변수로 사용하는 클래스 데코레이터입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">'[appMyDirective]'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyDirective &#123;</span><br><span class="line">  <span class="meta">@Input</span>() appMyDirective: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="injectable"><a class="markdownIt-Anchor" href="#injectable"></a> @Injectable</h2><p><code>@Injectable</code> 데코레이터는 Angular에서 새로운 서비스를 정의하는 데 사용됩니다. dependencies, scope 등과 같은 서비스에 대한 메타데이터를 제공하는 데 사용됩니다. 구성 개체를 매개 변수로 사용하는 클래스 데코레이터입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyService &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="pipe"><a class="markdownIt-Anchor" href="#pipe"></a> @Pipe</h2><p><code>@Pipe</code> 데코레이터는 Angular에서 새 파이프를 만드는 데 사용됩니다. name, pureness 등과 같은 파이프에 대한 메타데이터를 제공하는 데 사용됩니다. 구성 개체를 매개 변수로 사용하는 클래스 데코레이터입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pipe</span>(&#123;</span><br><span class="line">  name: <span class="string">'myPipe'</span>,</span><br><span class="line">  pure: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyPipe <span class="keyword">implements</span> PipeTransform &#123;</span><br><span class="line">  transform(value: <span class="built_in">any</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.toUpperCase();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="input"><a class="markdownIt-Anchor" href="#input"></a> @Input</h2><p><code>@Input</code> 데코레이터는 컴포넌트나 디렉티브에서 입력 속성을 정의하는 데 사용됩니다. name, type 등 입력에 대한 메타데이터를 제공하는 데 사용됩니다. 입력 속성의 이름을 지정하는 선택적 매개 변수를 사용하는 속성 데코레이터입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-my-component'</span>,</span><br><span class="line">  template: <span class="string">'&lt;h1&gt;&#123;&#123;myInput&#125;&#125;&lt;/h1&gt;'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyComponent &#123;</span><br><span class="line">  <span class="meta">@Input</span>() myInput: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="output"><a class="markdownIt-Anchor" href="#output"></a> @Output</h2><p><code>@Output</code> 데코레이터는 컴포넌트나 디렉티브에서 출력 속성을 정의하는 데 사용됩니다. name, type 등 출력에 대한 메타데이터를 제공하는 데 사용됩니다. 출력 속성의 이름을 지정하는 선택적 매개 변수를 사용하는 속성 데코레이터입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-my-component'</span>,</span><br><span class="line">  template: <span class="string">'&lt;button (click)="onClick()"&gt;Click Me&lt;/button&gt;'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyComponent &#123;</span><br><span class="line">  <span class="meta">@Output</span>() myOutput: EventEmitter&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line">  onClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.myOutput.emit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hostbinding"><a class="markdownIt-Anchor" href="#hostbinding"></a> @HostBinding</h2><p><code>@HostBinding</code> 데코레이터는 디렉티브이나 컴포넌트의 host element 속성을 디렉티브이나 컴포넌트 클래스의 속성에 바인딩하는 데 사용됩니다. 바인딩할 host 속성의 이름을 지정하는 매개변수를 받는 속성 데코레이터입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">'[appHighlight]'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HighlightDirective &#123;</span><br><span class="line">  <span class="meta">@Input</span>(<span class="string">'appHighlight'</span>) isHighlighted: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostBinding</span>(<span class="string">'style.backgroundColor'</span>) backgroundColor: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnChanges() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isHighlighted) &#123;</span><br><span class="line">      <span class="keyword">this</span>.backgroundColor = <span class="string">'blue'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.backgroundColor = <span class="string">'transparent'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서 @HostBinding 데코레이터는 디렉티브의 <code>backgroundColor</code> 속성을 호스트 요소의 <code>style.BackgroundColor</code> 속성에 바인딩하는 데 사용됩니다. 이는 <code>isHighlighted</code> 입력이 변경되면 그에 따라 <code>backgroundColor</code> 속성이 업데이트된다는 의미입니다.</p><p>@HostBinding 데코레이터를 사용하여 클래스 이름과 같은 호스트 요소의 다른 속성을 바인딩할 수도 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">'[appButton]'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ButtonDirective &#123;</span><br><span class="line">  <span class="meta">@HostBinding</span>(<span class="string">'class.btn'</span>) isButton = <span class="literal">true</span>;</span><br><span class="line">  <span class="meta">@HostBinding</span>(<span class="string">'class.btn-primary'</span>) isPrimary = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서 @HostBinding 데코레이터는 <code>isButton</code> 속성을 호스트 요소의 <code>btn</code> 클래스에 바인딩하고 <code>isPrimary</code> 속성을 호스트 요소의 <code>btn-primary</code> 클래스에 바인딩하는 데 사용됩니다. 이 지시어는 모든 요소에 사용되어 부트스트랩 스타일 버튼 모양을 제공할 수 있습니다.</p><p>@HostBinding을 다른 지시어 및 서비스와 함께 사용하면 Angular 애플리케이션에서 복잡하고 동적인 UI 요소를 쉽게 생성할 수 있습니다.</p><h2 id="attribute"><a class="markdownIt-Anchor" href="#attribute"></a> @Attribute</h2><p><code>@Attribute</code> 데코레이터는 호스트 요소의 속성 값을 디렉티브에 삽입하는 데 사용됩니다. 이 데코레이터는 HTML 요소에서 값을 가져와 디렉티브에 사용해야 할 때 사용됩니다.</p><p><code>@Attribute</code>를 사용하는 방법의 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, Input, Attribute &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">'[myDirective]'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyDirective &#123;</span><br><span class="line">  <span class="meta">@Input</span>() myInput: <span class="built_in">string</span>;</span><br><span class="line">  myAttribute: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="meta">@Attribute</span>(<span class="string">'my-attribute'</span>) myAttribute: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.myAttribute = myAttribute;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서 @Attribute 데코레이터는 호스트 요소의 <code>my-attribute</code> 속성 값을 디렉티브의 myAttribute 속성에 삽입하는 데 사용됩니다.</p><p>속성 값은 문자열로 삽입되므로 다른 형식의 값이 필요한 경우 추가 구문 분석이나 유형 변환을 수행해야 할 수도 있습니다.</p><p>@Attribute 데코레이터는 HTML 요소에서 값을 가져와 디렉티브 로직에 사용해야 할 때 유용할 수 있습니다. 그러나 이 접근 방식은 앱의 HTML 구조가 변경되면 취약한 코드로 이어질 수 있다는 점을 명심하는 것이 중요합니다.</p><h2 id="contentchild"><a class="markdownIt-Anchor" href="#contentchild"></a> @ContentChild</h2><p><code>@ContentChild</code> 데코레이터를 사용하면 컴포넌트가 해당 콘텐츠에 투영되는 디렉티브 또는 컴포넌트의 단일 인스턴스를 쿼리할 수 있습니다.</p><h3 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h3><p><code>@ContentChild</code> 데코레이터는 두 가지 방법으로 사용할 수 있습니다.</p><ol><li>유형별로 디렉티브나 컴포넌트를 쿼리합니다.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContentChild</span>(MyDirective) myDirective!: MyDirective;</span><br><span class="line"><span class="meta">@ContentChild</span>(MyComponent) myComponent!: MyComponent;</span><br></pre></td></tr></table></figure><ol start="2"><li>템플릿 참조 변수로 디렉티브나 컴포넌트를 쿼리합니다.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> #<span class="attr">myComponentRef</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContentChild</span>(<span class="string">'myComponentRef'</span>, &#123; <span class="keyword">static</span>: <span class="literal">true</span> &#125;) myComponent!: MyComponent;</span><br></pre></td></tr></table></figure><h3 id="options"><a class="markdownIt-Anchor" href="#options"></a> Options</h3><p><code>@ContentChild</code> 데코레이터는 다음 속성을 가진 옵션 개체를 사용할 수 있습니다.</p><ul><li><code>static</code> (boolean): 변경 감지가 실행되기 전에 쿼리를 해결할지 여부(기본값은 <code>false</code>).</li></ul><h3 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h3><p>다음은 <code>@ContentChild</code> 데코레이터를 사용하여 투영된 컴포넌트를 쿼리하는 예입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-child-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-child-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'my-component'</span>,</span><br><span class="line">  template: <span class="string">` &lt;ng-content&gt;&lt;/ng-content&gt; `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyComponent &#123;</span><br><span class="line">  <span class="meta">@ContentChild</span>(MyChildComponent) myChildComponent!: MyChildComponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서 <code>MyComponent</code> 컴포넌트는 해당 콘텐츠에 투영되는 <code>MyChildComponent</code> 인스턴스를 쿼리합니다.</p><h3 id="사용-시기"><a class="markdownIt-Anchor" href="#사용-시기"></a> 사용 시기</h3><p>컴포넌트의 콘텐츠에 프로젝션되는 디렉티브나 컴포넌트의 단일 인스턴스를 쿼리해야 하는 경우 <code>@ContentChild</code> 데코레이터를 사용하세요.</p><h3 id="notes"><a class="markdownIt-Anchor" href="#notes"></a> Notes</h3><ul><li>쿼리된 디렉티브 또는 컴포넌트의 여러 인스턴스가 콘텐츠에 프로젝션되는 경우 발견된 첫 번째 인스턴스가 반환됩니다.</li><li>쿼리된 디렉티브나 컴포넌트의 인스턴스가 콘텐츠에 프로젝션되지 않으면 쿼리는 <code>undefined</code>를 반환합니다.</li><li>정적 옵션이 <code>true</code>로 설정된 경우 변경 감지가 실행되기 전에 쿼리가 해결됩니다. 이는 <code>ngOnInit()</code> 또는 <code>ngAfterViewInit()</code>에서 쿼리된 인스턴스에 액세스해야 하는 경우 유용할 수 있습니다.</li></ul><h2 id="contentchildren"><a class="markdownIt-Anchor" href="#contentchildren"></a> @ContentChildren</h2><p><code>@ContentChildren</code> 데코레이터는 컴포넌트 또는 디렉티브의 하위 콘텐츠를 쿼리하고 액세스하는 데 사용됩니다. 이를 통해 컴포넌트는 콘텐츠 영역에 프로젝션된 하위 컴포넌트 및 디렉티브에 액세스할 수 있습니다.</p><p>데코레이터는 두 가지 인수를 사용합니다.</p><ul><li>삽입할 디렉티브를 식별하는 selector 문자열입니다.</li><li>injection 에 대한 추가 옵션을 지정하는 선택적 구성 개체입니다.</li></ul><p>다음은 <code>@ContentChildren</code> 데코레이터를 사용하여 투영된 하위 컴포넌트를 쿼리하고 액세스하는 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ContentChildren, QueryList &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TabComponent &#125; <span class="keyword">from</span> <span class="string">'./tab.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-tabs'</span>,</span><br><span class="line">  template: <span class="string">` &lt;ng-content&gt;&lt;/ng-content&gt; `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TabsComponent &#123;</span><br><span class="line">  <span class="meta">@ContentChildren</span>(TabComponent) tabs: QueryList&lt;TabComponent&gt;;</span><br><span class="line"></span><br><span class="line">  ngAfterContentInit() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.tabs);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서 <code>TabsComponent</code>는 <code>@ContentChildren</code> 데코레이터를 사용하여 예상되는 모든 <code>TabComponent</code> 하위 항목을 쿼리합니다. 결과 <code>QueryList</code>는 컴포넌트의 <code>tabs</code> 속성에서 사용할 수 있습니다.</p><p><code>ngAfterContentInit</code> 생명주기 훅 메소드는 프로젝션된 콘텐츠가 초기화된 후 <code>tabs</code> 속성에 액세스하는 데 사용됩니다.</p><p>기본적으로 <code>@ContentChildren</code> 데코레이터는 요청된 하위 컴포넌트 또는 디렉티브가 처음으로 나타나는 경우만 반환합니다. 모든 항목을 얻으려면 <code>read</code> 옵션을 사용할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContentChildren</span>(TabComponent, &#123; read: ElementRef &#125;) tabs: QueryList&lt;ElementRef&gt;;</span><br></pre></td></tr></table></figure><p>이 예제에서는 <code>ElementRef</code>가 읽기 토큰으로 지정되어 <code>@ContentChildren</code> 데코레이터가 <code>TabComponent</code> 대신 <code>ElementRef</code>를 반환하게 됩니다.</p><p>전반적으로 <code>@ContentChildren</code> 데코레이터는 Angular 컴포넌트 및 디렉티브의 하위 콘텐츠에 액세스하고 상호 작용하기 위한 강력한 도구입니다.</p><h2 id="host"><a class="markdownIt-Anchor" href="#host"></a> @Host</h2><p><code>@Host</code> 데코레이터는 주어진 토큰과 일치하는 가장 가까운 호스트 요소의 종속성을 주입하는 데 사용됩니다. 이는 하위 요소에 디렉티브를 적용했지만 상위 요소의 속성이나 서비스에 액세스하려는 경우에 특히 유용합니다.</p><p><code>@Host</code> 데코레이터의 사용 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, Host, Optional &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ParentDirective &#125; <span class="keyword">from</span> <span class="string">'./parent.directive'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">'[child]'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ChildDirective &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="meta">@Host</span>() <span class="meta">@Optional</span>() <span class="keyword">private</span> parentDirective?: ParentDirective</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.parentDirective) &#123;</span><br><span class="line">      <span class="keyword">this</span>.parentDirective.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 예에는 <code>ParentDirective</code>가 적용된 요소의 하위 요소에 적용되는 child 디렉티브가 있습니다. <code>@Host</code> 데코레이터는 <code>ParentDirective</code>가 적용된 가장 가까운 호스트 요소에서 <code>ParentDirective</code> 인스턴스를 주입하는 데 사용됩니다. <code>@Optional</code> 데코레이터는 <code>ParentDirective</code>가 포함된 호스트 요소가 없는 경우 생성자가 오류를 발생시키지 않도록 하는 데 사용됩니다.</p><h2 id="hostlistener"><a class="markdownIt-Anchor" href="#hostlistener"></a> @HostListener</h2><p><code>@HostListener</code> 데코레이터는 디렉티브의 호스트 요소에 이벤트 리스너를 등록하는 데 사용됩니다. 이 데코레이터는 <code>@Directive</code> 데코레이터의 <code>host</code> 속성과 함께 사용됩니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, HostListener &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">'[appMyDirective]'</span>,</span><br><span class="line">  host: &#123;</span><br><span class="line">    <span class="string">'(click)'</span>: <span class="string">'onClick($event)'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyDirective &#123;</span><br><span class="line">  onClick(event: MouseEvent) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Clicked!'</span>, event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>@HostListener</code> 데코레이터가 명시적으로 사용되지 않지만 <code>host</code> 속성에 암시되어 있습니다. <code>'click'</code> 이벤트는 <code>(click)</code> 구문을 사용하여 <code>onClick()</code> 메서드에 등록됩니다.</p><p><code>@HostListener</code> 데코레이터를 명시적으로 사용할 수도 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, HostListener &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">'[appMyDirective]'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyDirective &#123;</span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">'click'</span>, [<span class="string">'$event'</span>])</span><br><span class="line">  onClick(event: MouseEvent) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Clicked!'</span>, event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예제에서는 <code>@HostListener</code> 데코레이터를 명시적으로 사용하여 <code>onClick()</code> 메서드에 <code>'click'</code> 이벤트를 등록합니다. <code>'$event'</code> 인수는 이벤트 객체를 메소드에 전달하는 데 사용됩니다.</p><p><code>@HostListener</code> 데코레이터는 클릭 이벤트뿐만 아니라 모든 호스트 요소 이벤트와 함께 사용할 수 있습니다.</p><h2 id="inject"><a class="markdownIt-Anchor" href="#inject"></a> @Inject</h2><p><code>@Inject</code> 데코레이터를 사용하면 클래스의 종속성을 해결하는 데 사용할 토큰을 지정할 수 있습니다.<code>@Injectable</code> 및 <code>@InjectableProvider</code>와 함께 사용하여 종속성에 대한 custom provider를 제공할 수 있습니다.</p><p>예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, Inject &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigService &#125; <span class="keyword">from</span> <span class="string">'./config.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppConfig &#125; <span class="keyword">from</span> <span class="string">'./app.config'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="meta">@Inject</span>(ConfigService) <span class="keyword">private</span> config: AppConfig</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>ConfigService</code> 토큰과 함께 <code>@Inject</code> 데코레이터를 사용하여 <code>ConfigService</code> 인스턴스를 <code>MyService</code>에 주입합니다. 이는 Angular가 <code>ConfigService</code> 공급자를 사용하여 종속성을 해결하도록 지시합니다.</p><p>다음과 같이 문자열 토큰과 함께 <code>@Inject</code> 데코레이터를 사용할 수도 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, Inject &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="meta">@Inject</span>(<span class="string">'MY_CONFIG'</span>) <span class="keyword">private</span> config: <span class="built_in">any</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>'MY_CONFIG'</code> 토큰과 함께 값을 주입합니다. 원하는 문자열 토큰을 사용할 수 있지만 오타를 방지하려면 상수 값을 사용하는 것이 가장 좋습니다.</p><p>전반적으로 <code>@Inject</code> 데코레이터는 애플리케이션의 종속성 주입 동작을 커스터 마이징할 수 있는 강력한 도구입니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/10/30/angular-26/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] ViewRef: 뷰(View) 변경 감지 및 업데이트 알아보기</title>
      <link>http://hgko1207.github.io/2023/10/26/angular-25/</link>
      <guid>http://hgko1207.github.io/2023/10/26/angular-25/</guid>
      <pubDate>Thu, 26 Oct 2023 02:43:28 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;는 개발자가 동적이고 반응성이 뛰어난 애플리케이션을 구축할 수 있는 강력한 프런트 엔드 프레임워크입니다. Angular의 주요 기능 중 하나는 데이터가 변경될 때마다 뷰를 자동으로 업데이트하는 변경 감지
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong>는 개발자가 동적이고 반응성이 뛰어난 애플리케이션을 구축할 수 있는 강력한 프런트 엔드 프레임워크입니다. Angular의 주요 기능 중 하나는 데이터가 변경될 때마다 뷰를 자동으로 업데이트하는 변경 감지 시스템입니다.</p><p>이 글에서는 Angular의 <strong>ViewRef</strong> 클래스에 대해 자세히 알아보고 이 클래스를 사용하여 변경 감지 프로세스 및 뷰 업데이트를 제어하는 방법을 살펴보겠습니다.</p><h2 id="angular의-변경-감지-이해"><a class="markdownIt-Anchor" href="#angular의-변경-감지-이해"></a> Angular의 변경 감지 이해</h2><p>변경 감지는 뷰가 항상 데이터와 함께 최신 상태를 유지하도록 보장하므로 Angular 프레임워크의 중요한 부분입니다. Angular는 데이터 변경 사항을 자동으로 추적하고 그에 따라 뷰를 업데이트하는 영역 기반 변경 감지 시스템을 사용합니다. 이 변경 감지 프로세스는 사용자 입력이나 데이터 업데이트 등 애플리케이션에서 이벤트가 발생할 때마다 트리거됩니다.</p><p>자동 변경 감지 프로세스 외에도 Angular는 개발자에게 ViewRef 클래스를 사용하여 수동 변경 감지를 트리거하는 기능도 제공합니다. ViewRef 클래스는 컴포넌트의 뷰에 대한 참조이며 보기와 상호 작용하고 변경 감지 프로세스를 제어하는 데 사용할 수 있습니다.</p><h2 id="viewref-클래스-이해"><a class="markdownIt-Anchor" href="#viewref-클래스-이해"></a> ViewRef 클래스 이해</h2><p>ViewRef 클래스는 Angular 변경 감지 시스템의 핵심 컴포넌트입니다. 이는 개발자에게 뷰와 상호 작용하고 변경 감지 프로세스를 제어할 수 있는 방법을 제공합니다. ViewRef 클래스에는 개발자가 뷰를 관리하는 데 사용할 수 있는 몇 가지 주요 메서드와 속성이 있습니다.</p><ul><li><code>discoverChanges()</code>: 이 메소드는 뷰에 대한 변경 감지 프로세스를 트리거합니다. 이는 Angular에게 데이터 변경 사항을 확인하고 그에 따라 뷰를 업데이트하도록 지시합니다.</li><li><code>markForCheck()</code>: 이 메소드는 Angular가 다음 변경 감지 주기 동안 변경 사항을 확인하도록 뷰에 표시합니다.</li><li><code>detach()</code>: 이 메소드는 변경 감지 시스템에서 뷰를 분리합니다. 이는 변경 감지를 트리거하지 않고 뷰를 수동으로 업데이트하려는 상황에서 유용할 수 있습니다.</li><li><code>destroy()</code>: 이 메소드는 뷰를 파괴하고 DOM에서 제거합니다.</li></ul><h2 id="viewref를-사용하여-변경-감지-제어"><a class="markdownIt-Anchor" href="#viewref를-사용하여-변경-감지-제어"></a> ViewRef를 사용하여 변경 감지 제어</h2><p>ViewRef 클래스는 개발자에게 Angular의 변경 감지 프로세스를 제어하는 방법을 제공합니다. <code>detectorChanges()</code> 메서드를 사용하면 개발자가 수동으로 변경 감지를 트리거하고 뷰를 업데이트할 수 있습니다. 이는 사용자 입력을 기반으로 뷰를 업데이트하는 경우와 같이 자동 변경 감지 시스템이 충분하지 않은 상황에서 유용할 수 있습니다.</p><p>변경 감지를 수동으로 트리거하는 것 외에도 개발자는 <code>markForCheck()</code> 메서드를 사용하여 변경 감지 프로세스를 최적화할 수도 있습니다. 이 메서드가 호출되면 Angular는 전체 컴포넌트 트리를 확인하는 대신 뷰와 해당 하위 항목의 변경 사항만 확인합니다. 이는 대규모 애플리케이션의 성능을 크게 향상시킬 수 있습니다.</p><h2 id="예제"><a class="markdownIt-Anchor" href="#예제"></a> 예제</h2><p>다음은 Angular에서 <code>ViewRef</code>를 사용하기 위한 몇 가지 코드 예제입니다.</p><p>예 1) 현재 컴포넌트의 뷰에 대한 참조 가져오기</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ViewChild, ViewContainerRef, AfterViewInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  template: <span class="string">` &lt;h1 #header&gt;Hello, World!&lt;/h1&gt; `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> AfterViewInit &#123;</span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">'header'</span>, &#123; read: ViewContainerRef &#125;) headerRef: ViewContainerRef;</span><br><span class="line"></span><br><span class="line">  ngAfterViewInit() &#123;</span><br><span class="line">    <span class="keyword">const</span> viewRef = <span class="keyword">this</span>.headerRef[<span class="string">'_view'</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(viewRef);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>예 2) 동적으로 뷰를 생성하고 컴포넌트에 연결</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, ViewContainerRef, ViewChild, ComponentFactoryResolver &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ViewRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; CustomComponent &#125; <span class="keyword">from</span> <span class="string">'./custom.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  template: <span class="string">` &lt;div #container&gt;&lt;/div&gt; `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">'container'</span>, &#123; read: ViewContainerRef &#125;) containerRef: ViewContainerRef;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> componentFactoryResolver: ComponentFactoryResolver</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="comment">// Create a reference to the custom component factory</span></span><br><span class="line">    <span class="keyword">const</span> customComponentFactory = <span class="keyword">this</span>.componentFactoryResolver.resolveComponentFactory(CustomComponent);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a new instance of the custom component and attach it to the view</span></span><br><span class="line">    <span class="keyword">const</span> customComponentRef = customComponentFactory.create(<span class="keyword">this</span>.containerRef.injector);</span><br><span class="line">    <span class="keyword">this</span>.containerRef.insert(customComponentRef.hostView);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get a reference to the newly created view</span></span><br><span class="line">    <span class="keyword">const</span> viewRef = customComponentRef.hostView <span class="keyword">as</span> ViewRef;</span><br><span class="line">    <span class="built_in">console</span>.log(viewRef);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>예 3) 컴포넌트에서 뷰 분리</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ViewChild, ViewContainerRef, AfterViewInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ViewRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  template: <span class="string">` &lt;h1 #header&gt;Hello, World!&lt;/h1&gt; `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> AfterViewInit &#123;</span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">'header'</span>, &#123; read: ViewContainerRef &#125;) headerRef: ViewContainerRef;</span><br><span class="line"></span><br><span class="line">  ngAfterViewInit() &#123;</span><br><span class="line">    <span class="keyword">const</span> viewRef = <span class="keyword">this</span>.headerRef[<span class="string">'_view'</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(viewRef);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Detach the view from the component</span></span><br><span class="line">    viewRef.detach();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if the view is still attached to the component</span></span><br><span class="line">    <span class="built_in">console</span>.log(viewRef[<span class="string">'_attached'</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>결론적으로 ViewRef 클래스는 개발자에게 뷰와 상호 작용하고 변경 감지 프로세스를 제어할 수 있는 방법을 제공하는 Angular 프레임워크의 강력한 도구입니다. ViewRef 클래스를 사용하여 개발자는 수동으로 변경 감지를 트리거하고, 변경 감지 프로세스를 최적화하고, View 생명 주기를 제어할 수 있습니다. ViewRef 클래스를 사용하는 방법을 이해하는 것은 복잡하고 반응성이 뛰어난 Angular 애플리케이션을 개발하는 데 필수적인 부분입니다.</p><p>이 글에 설명된 모범 사례를 따르면 ViewRef 클래스를 사용하여 변경 감지 프로세스를 최적화하고 뷰를 최신 데이터로 최신 상태로 유지할 수 있습니다. Angular의 변경 감지 시스템을 손쉽게 활용하면 원활한 사용자 경험을 제공하는 동적이고 반응성이 뛰어난 애플리케이션을 구축할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/10/26/angular-25/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] ViewEncapsulation: 다양한 모드 및 사용 방법 알아보기</title>
      <link>http://hgko1207.github.io/2023/10/25/angular-24/</link>
      <guid>http://hgko1207.github.io/2023/10/25/angular-24/</guid>
      <pubDate>Wed, 25 Oct 2023 05:35:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;는 개발자에게 &lt;strong&gt;ViewEncapsulation&lt;/strong&gt;을 포함하여 컴포넌트를 빌드하고 스타일을 지정할 수 있는 여러 도구를 제공합니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 ViewEncapsu
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong>는 개발자에게 <strong>ViewEncapsulation</strong>을 포함하여 컴포넌트를 빌드하고 스타일을 지정할 수 있는 여러 도구를 제공합니다.</p><p>이 글에서는 ViewEncapsulation이 무엇인지, ViewEncapsulation이 제공하는 다양한 모드와 각 모드를 언제 사용하는지 살펴보겠습니다.</p><h2 id="viewencapsulation-이란"><a class="markdownIt-Anchor" href="#viewencapsulation-이란"></a> ViewEncapsulation 이란</h2><p>ViewEncapsulation은 컴포넌트의 스타일을 캡슐화하는 Angular 기능입니다. 즉, 원치 않는 스타일 충돌을 방지하기 위해 컴포넌트의 스타일을 애플리케이션의 다른 부분과 분리합니다. 또한 ViewEncapsulation을 사용하면 컴포넌트가 다른 컴포넌트에 영향을 주지 않는 자체 비공개 스타일을 가질 수 있습니다.</p><p>Angular는 Emulated, None 및 Shadow DOM의 세 가지 ViewEncapsulation 모드를 제공합니다. 각 모드를 자세히 살펴보고 각 모드를 언제 사용해야 하는지 알아보겠습니다.</p><h2 id="emulated"><a class="markdownIt-Anchor" href="#emulated"></a> Emulated</h2><p>Emulated는 Angular의 기본 ViewEncapsulation 모드입니다. 이 모드에서 Angular는 컴포넌트의 스타일 범위를 해당 요소에만 적용하기 위해 컴포넌트의 HTML 요소에 고유한 속성을 추가합니다.</p><p>예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-example'</span>,</span><br><span class="line">  template: <span class="string">` &lt;h1&gt;Hello World!&lt;/h1&gt; `</span>,</span><br><span class="line">  styles: [</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      h1 &#123;</span></span><br><span class="line"><span class="string">        color: red;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ExampleComponent &#123;&#125;</span><br></pre></td></tr></table></figure><p>Emulated 모드에서 Angular는 위 컴포넌트의 HTML과 CSS를 다음과 같이 변환합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-example</span> <span class="attr">_ngcontent-abc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">_ngcontent-abc</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-example</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-attr">[_ngcontent-abc]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>h1 요소의 스타일 범위를 해당 컴포넌트로만 지정하는 <code>_ngcontent-abc</code> 속성이 추가되었습니다.</p><p>컴포넌트의 스타일을 캡슐화하고 원치 않는 스타일 충돌을 방지하려면 Emulated 모드를 사용하십시오.</p><h2 id="none"><a class="markdownIt-Anchor" href="#none"></a> None</h2><p>None은 캡슐화를 완전히 제거하는 Angular의 또 다른 ViewEncapsulation 모드입니다. 이 모드에서 Angular는 컴포넌트의 HTML 요소에 속성을 추가하지 않으므로 스타일이 컴포넌트 밖으로 누출되어 애플리케이션의 다른 부분에 영향을 미칠 수 있습니다.</p><p>예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-example'</span>,</span><br><span class="line">  template: <span class="string">` &lt;h1&gt;Hello World!&lt;/h1&gt; `</span>,</span><br><span class="line">  styles: [</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      h1 &#123;</span></span><br><span class="line"><span class="string">        color: red;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  ],</span><br><span class="line">  encapsulation: ViewEncapsulation.None,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ExampleComponent &#123;&#125;</span><br></pre></td></tr></table></figure><p>None 모드에서 Angular는 컴포넌트의 HTML과 CSS를 어떤 방식으로든 변환하지 않습니다.</p><p>전역 스타일을 적용해야 하거나 다른 컴포넌트의 스타일을 재정의하려는 경우 None 모드를 사용하세요.</p><h2 id="shadow-dom"><a class="markdownIt-Anchor" href="#shadow-dom"></a> Shadow DOM</h2><p>Shadow DOM은 Angular의 최종 ViewEncapsulation 모드입니다. 이 모드에서 Angular는 브라우저의 기본 Shadow DOM을 사용하여 컴포넌트의 스타일을 캡슐화합니다. Shadow DOM은 컴포넌트의 HTML 및 CSS에 대해 별도의 DOM 트리를 생성하여 컴포넌트의 스타일을 애플리케이션의 다른 부분과 격리합니다.</p><p>예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-example'</span>,</span><br><span class="line">  template: <span class="string">` &lt;h1&gt;Hello World!&lt;/h1&gt; `</span>,</span><br><span class="line">  styles: [</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      h1 &#123;</span></span><br><span class="line"><span class="string">        color: red;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  ],</span><br><span class="line">  encapsulation: ViewEncapsulation.ShadowDom,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ExampleComponent &#123;&#125;</span><br></pre></td></tr></table></figure><p>Shadow DOM 모드에서 Angular는 브라우저의 기본 Shadow DOM을 사용하여 컴포넌트의 HTML 및 CSS에 대한 별도의 DOM 트리를 생성합니다.</p><p>최고 수준의 캡슐화를 원하고 컴포넌트 스타일이 애플리케이션의 나머지 부분에 영향을 받는 것을 원하지 않을 때 Shadow DOM 모드를 사용하세요.</p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>Angular의 ViewEncapsulation을 이해하면 재사용 및 유지 관리가 가능한 컴포넌트를 만드는 능력이 크게 향상될 수 있습니다. ViewEncapsulation을 적절하게 사용하면 컴포넌트 간의 스타일 및 레이아웃 충돌을 방지하고 일관된 사용자 인터페이스를 유지할 수 있습니다.</p><p>Emulated, Native 또는 None ViewEncapsulation 중 무엇을 사용하든 각 옵션과 관련된 장단점을 염두에 두고 프로젝트 요구 사항에 가장 적합한 옵션을 선택하는 것이 중요합니다.</p><p>전반적으로 ViewEncapsulation은 간과해서는 안 되는 Angular 개발의 중요한 측면입니다. 모범 사례를 따르고 정보에 입각한 결정을 내리면 확장 가능하고 유지 관리 가능한 고품질 Angular 애플리케이션을 만들 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/10/25/angular-24/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] 생명주기(Lifecycle) 와 훅(Hook) 메소드 이해</title>
      <link>http://hgko1207.github.io/2023/10/24/angular-23/</link>
      <guid>http://hgko1207.github.io/2023/10/24/angular-23/</guid>
      <pubDate>Tue, 24 Oct 2023 02:00:01 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;는 개발자가 동적이고 반응성이 뛰어난 웹 애플리케이션을 구축할 수 있는 강력한 프레임워크입니다. Angular의 주요 기능 중 하나는 각 컴포넌트가 고유한 생명주기(Lifecycle)를 갖는 컴포넌트 기
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong>는 개발자가 동적이고 반응성이 뛰어난 웹 애플리케이션을 구축할 수 있는 강력한 프레임워크입니다. Angular의 주요 기능 중 하나는 각 컴포넌트가 고유한 생명주기(Lifecycle)를 갖는 컴포넌트 기반 아키텍처입니다. 이러한 생명주기를 이해하는 것은 효율적이고 성능이 뛰어난 애플리케이션을 구축하는 데 중요합니다.</p><p>이 글에서는 Angular에서 사용할 수 있는 다양한 생명주기 훅(Hook) 메소드와 차이점, 그리고 이를 사용하는 모범 사례를 살펴보겠습니다.</p><h2 id="생명주기-훅-메소드이란-무엇입니까">생명주기 훅 메소드이란 무엇입니까?</h2><p>Angular 생명주기 훅 메소드는 컴포넌트 생명 주기 중 특정 지점에서 호출되는 메서드입니다. 이러한 훅 메소드를 사용하면 컴포넌트(component)의 초기화, 생성 및 삭제와 같은 특정 시점에 작업을 수행할 수 있습니다.</p><p>Angular에는 8개의 생명주기 메소드가 있습니다.</p><ol><li><code>ngOnChanges()</code>: 컴포넌트의 입력 속성 중 하나 이상이 변경될 때 호출됩니다.</li><li><code>ngOnInit()</code>: 컴포넌트의 입력 속성이 초기화된 후 컴포넌트가 표시되기 전에 호출됩니다.</li><li><code>ngDoCheck()</code>: 모든 변경 감지 주기 동안 호출되므로 변경 사항을 감지하고 그에 따라 조치를 취할 수 있습니다.</li><li><code>ngAfterContentInit()</code>: 컴포넌트의 콘텐츠가 해당 뷰에 투영된 후에 호출됩니다.</li><li><code>ngAfterContentChecked()</code>: 컴포넌트의 콘텐츠를 확인할 때마다 호출됩니다.</li><li><code>ngAfterViewInit()</code>: 컴포넌트의 뷰가 초기화된 후에 호출됩니다.</li><li><code>ngAfterViewChecked()</code>: 컴포넌트 뷰를 확인할 때마다 호출됩니다.</li><li><code>ngOnDestroy()</code>: 컴포넌트가 파괴되기 직전에 호출됩니다.</li></ol><p>이러한 각 메소드는 컴포넌트 생명 주기에서 특정 목적을 수행하므로 특정 시점에 작업을 수행할 수 있습니다.</p><h2 id="차이점">차이점</h2><p>이러한 생명 주기 훅 메소드 간의 몇 가지 차이점을 자세히 살펴보겠습니다.</p><h3 id="ngOnChanges-vs-ngOnInit"><code>ngOnChanges()</code> vs <code>ngOnInit()</code></h3><p><code>ngOnChanges()</code> 메소드는 컴포넌트의 입력 속성 중 하나 이상이 변경될 때 호출됩니다. 컴포넌트 입력 데이터의 변경 사항에 따라 작업을 수행해야 할 때 유용합니다.</p><p>반면에 <code>ngOnInit()</code>은 컴포넌트의 입력 속성이 초기화된 후 컴포넌트가 표시되기 전에 호출됩니다. 초기화 작업을 수행하거나 서비스에서 데이터를 검색해야 할 때 유용합니다.</p><h3 id="ngDoCheck-vs-ngAfterContentChecked"><code>ngDoCheck()</code> vs <code>ngAfterContentChecked()</code></h3><p><code>ngDoCheck()</code> 메소드는 모든 변경 감지 주기 동안 호출되므로 변경 사항을 감지하고 그에 따라 조치를 취할 수 있습니다. 사용자 정의(Custom) 변경 감지를 수행해야 하거나 사용자 정의 변경 감지 전략을 구현해야 할 때 유용합니다.</p><p>반면에 <code>ngAfterContentChecked()</code>는 컴포넌트의 콘텐츠를 확인할 때마다 호출됩니다. 뷰 업데이트와 같이 컴포넌트 콘텐츠의 변경 사항에 따라 작업을 수행해야 할 때 유용합니다.</p><h3 id="ngAfterViewInit-vs-ngAfterViewChecked"><code>ngAfterViewInit()</code> vs <code>ngAfterViewChecked()</code></h3><p><code>ngAfterViewInit()</code> 메소드는 컴포넌트의 뷰가 초기화된 후에 호출됩니다. 컴포넌트의 뷰에 액세스해야 하는 초기화 작업을 수행해야 할 때 유용합니다.</p><p>반면에 <code>ngAfterViewChecked()</code>는 컴포넌트 뷰를 확인할 때마다 호출됩니다. 뷰 업데이트와 같이 컴포넌트 뷰의 변경 사항에 따라 작업을 수행해야 할 때 유용합니다.</p><h2 id="사례">사례</h2><ol><li><p><code>ngOnInit()</code> 메소드에서 복잡한 논리를 피하십시오. 컴포넌트 속성을 초기화하고 기본 설정 작업을 수행하는 데에만 사용해야 합니다. 더 복잡한 로직을 수행해야 하는 경우 별도의 서비스나 기능으로 이동하는 것을 고려해보세요.</p></li><li><p>반응형 입력 처리를 위해 <code>ngOnChanges()</code>를 사용하세요. 입력 속성에 대한 변경 사항을 처리하기 위해 특별히 설계되었습니다. 이를 사용하여 컴포넌트 상태를 업데이트하거나 입력 값의 변경 사항에 따라 다른 작업을 수행합니다.</p></li><li><p>DOM 조작을 위해 <code>ngAfterViewInit()</code> 메소드를 사용하세요. 뷰가 초기화된 후에 호출되며 DOM을 조작하기에 적합한 위치입니다. 이를 사용하여 이벤트 리스너를 설정하고 요소를 추가 또는 제거하거나 기타 DOM 관련 작업을 수행합니다.</p></li><li><p>정리를 위해 <code>ngOnDestroy()</code>를 사용하지 마세요. 컴포넌트 리소스를 정리하도록 설계되었지만 항상 신뢰할 수 있는 것은 아닙니다. 대신 서비스를 사용하거나 컴포넌트의 ngOnDestroy 이벤트를 구독하여 정리 작업을 수행하는 것을 고려해 보세요.</p></li></ol><p>다음은 <code>ngOnDestroy()</code>에만 의존하는 대신 서비스를 사용하여 정리 작업을 수행하는 방법에 대한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Subscription &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CleanupService &#123;</span><br><span class="line">  <span class="keyword">private</span> subscriptions: Subscription[] = [];</span><br><span class="line"></span><br><span class="line">  addSubscription(subscription: Subscription): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscriptions.push(subscription);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cleanup(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscriptions.forEach(<span class="function">(<span class="params">subscription</span>) =&gt;</span> subscription.unsubscribe());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그런 다음 컴포넌트에 <code>CleanupService</code>를 삽입하고 이를 사용하여 Subscription(구독)을 관리할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, OnDestroy &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; interval, Subscription &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CleanupService &#125; <span class="keyword">from</span> <span class="string">'./cleanup.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-example'</span>,</span><br><span class="line">  template: <span class="string">'&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ExampleComponent <span class="keyword">implements</span> OnInit, OnDestroy &#123;</span><br><span class="line">  message: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> subscription: Subscription;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> cleanupService: CleanupService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscription = interval(<span class="number">1000</span>).subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'Hello, world!'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.cleanupService.addSubscription(<span class="keyword">this</span>.subscription);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnDestroy(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// Don't use ngOnDestroy for cleanup!</span></span><br><span class="line">    <span class="comment">// Instead, use the CleanupService to perform cleanup tasks.</span></span><br><span class="line">    <span class="keyword">this</span>.cleanupService.cleanup();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 예에서는 <code>CleanupService</code>를 사용하여 컴포넌트의 Subscription을 관리합니다. <code>addSubscription()</code> 메서드는 Subscription 배열에 추가하고 <code>cleanup()</code> 메서드는 배열의 각 Subscription에 대해 <code>unsubscribe()</code>를 호출합니다. 그런 다음 컴포넌트의 <code>ngOnDestroy()</code> 메서드에서 <code>ngOnDestroy()</code>에만 의존하는 대신 <code>CleanupService</code>를 사용하여 정리 작업을 수행합니다. 이렇게 하면 어떤 이유로 <code>ngOnDestroy()</code>가 호출되지 않더라도 컴포넌트의 리소스가 적절하게 정리됩니다.</p><p>이러한 사례를 따르면 일반적인 함정을 피하고 성능을 향상시키면서 컴포넌트가 현재 작업에 적합한 생명 주기를 사용하고 있는지 확인할 수 있습니다.</p><p>결론적으로, 고품질의 고성능 Angular 애플리케이션을 구축하려면 Angular 생명 주기를 이해하는 것이 중요합니다. 각 훅 메소드 간의 차이점을 살펴보고 사례를 따르면 Angular 프레임워크를 최대한 활용하고 강력하고 유지 관리가 가능한 애플리케이션을 구축할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/10/24/angular-23/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[.NET Core] 코드 예제를 통해 멀티스레딩 마스터하기</title>
      <link>http://hgko1207.github.io/2023/10/23/csharp-6/</link>
      <guid>http://hgko1207.github.io/2023/10/23/csharp-6/</guid>
      <pubDate>Mon, 23 Oct 2023 01:09:59 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;C# .NET Core의 멀티스레딩과 관련하여 최적의 성능을 달성하고 일반적인 함정을 피하기 위해 명심해야 할 몇 가지 모범 사례가 있습니다.&lt;/p&gt;
&lt;p&gt;몇 가지 코드 예제를 통해 각각에 대해 자세히 살펴보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;과도한
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>C# .NET Core의 멀티스레딩과 관련하여 최적의 성능을 달성하고 일반적인 함정을 피하기 위해 명심해야 할 몇 가지 모범 사례가 있습니다.</p><p>몇 가지 코드 예제를 통해 각각에 대해 자세히 살펴보겠습니다.</p><h2 id="과도한-잠금-방지"><a class="markdownIt-Anchor" href="#과도한-잠금-방지"></a> 과도한 잠금 방지</h2><p>다중 스레드 코드로 작업할 때 흔히 저지르는 실수 중 하나는 너무 많은 잠금을 사용하는 것입니다. 여러 스레드가 동시에 액세스하지 못하도록 공유 리소스를 보호하려면 잠금이 필요하지만 과도한 잠금은 스레드 경합 및 성능 저하를 초래할 수 있습니다. 대신 필요한 경우에만 잠금을 사용하고 적절한 경우 <code>Interlocked</code> 작업 또는 <code>Concurrent</code> 컬렉션 클래스와 같은 다른 동기화 메커니즘을 사용하는 것을 고려하십시오.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">object</span> _lock = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> _count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IncrementCount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">lock</span> (_lock)</span><br><span class="line">    &#123;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="thread-safe-데이터-구조-사용"><a class="markdownIt-Anchor" href="#thread-safe-데이터-구조-사용"></a> Thread-Safe 데이터 구조 사용</h2><p>공유 데이터 구조로 작업할 때 데이터 손상이나 경합 조건을 방지하기 위해 thread-safe 컬렉션을 사용하는 것이 중요합니다. .NET Core 라이브러리는 스레드 간에 데이터를 안전하게 공유하는 데 사용할 수 있는 <code>ConcurrentDictionary</code> 및 <code>ConcurrentQueue</code> 와 같은 여러 스레드로부터 안전한 컬렉션을 제공합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> ConcurrentDictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt; _dict = <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddOrUpdateDict</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _dict.AddOrUpdate(key, <span class="keyword">value</span>, (k, v) =&gt; v + <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="threadpool-사용"><a class="markdownIt-Anchor" href="#threadpool-사용"></a> ThreadPool 사용</h2><p>스레드를 만들고 관리하는 작업은 비용이 많이 들 수 있으므로 가능하면 .NET Core ThreadPool을 사용하는 것이 가장 좋습니다. ThreadPool은 재사용할 수 있는 스레드 풀을 관리하므로 스레드 생성 및 삭제에 따른 오버헤드를 줄여 성능을 향상시킬 수 있습니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ThreadPool.QueueUserWorkItem((state) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Do some work on a background thread</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="교착상태-주의"><a class="markdownIt-Anchor" href="#교착상태-주의"></a> 교착상태 주의</h2><p>교착 상태는 두 개 이상의 스레드가 서로 리소스를 해제할 때까지 기다리면서 차단되어 더 이상 진행이 불가능한 상황이 발생하는 경우에 발생합니다. 교착 상태를 방지하려면 잠금을 올바른 순서로 획득 및 해제하고 장기간 잠금을 유지하지 않는 것이 중요합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">object</span> _lock1 = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">object</span> _lock2 = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">lock</span> (_lock1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Do some work</span></span><br><span class="line">        <span class="keyword">lock</span> (_lock2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Do some more work</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="비동기-프로그래밍-사용"><a class="markdownIt-Anchor" href="#비동기-프로그래밍-사용"></a> 비동기 프로그래밍 사용</h2><p>비동기 프로그래밍은 다중 스레드 코드로 작업할 때 호출 스레드를 차단하지 않고 여러 작업을 동시에 수행할 수 있는 강력한 도구가 될 수 있습니다. <code>async</code> 및 <code>await</code> 키워드를 사용하면 동기적인 것처럼 보이지만 실제로는 별도의 스레드에서 비동기적으로 실행되는 코드를 작성할 수 있습니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">DownloadAsync</span>(<span class="params"><span class="keyword">string</span> url</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.GetAsync(url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="모범-사례"><a class="markdownIt-Anchor" href="#모범-사례"></a> 모범 사례</h2><p>이러한 모범 사례를 따르면 C# .NET Core에서 확장 가능한 고성능 다중 스레드 코드를 작성할 수 있습니다.</p><p>다음은 .NET Core의 다중 스레딩에 대한 모범 사례를 사용하는 몇 가지 실제 예입니다.</p><h3 id="비동기식-http-요청"><a class="markdownIt-Anchor" href="#비동기식-http-요청"></a> 비동기식 HTTP 요청</h3><p>웹 애플리케이션에서는 다른 서비스에 HTTP 요청을 보내는 것이 일반적입니다. 기본 스레드를 차단하지 않으려면 이러한 요청은 <code>HttpClient</code>를 사용하여 비동기적으로 이루어져야 합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">GetApiDataAsync</span>(<span class="params"><span class="keyword">string</span> apiUrl</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> client.GetAsync(apiUrl);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cpu-바인딩된-작업-병렬화"><a class="markdownIt-Anchor" href="#cpu-바인딩된-작업-병렬화"></a> CPU 바인딩된 작업 병렬화</h3><p>CPU 바인딩된(CPU-bound) 작업을 수행할 때 여러 스레드에 걸쳐 작업을 병렬화하여 성능을 향상시키는 것이 유용한 경우가 많습니다. .NET Core의 Parallel 클래스는 루프를 병렬화하는 쉬운 방법을 제공합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Parallel.For(<span class="number">0</span>, <span class="number">100000</span>, (i) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Perform CPU-bound work here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="경쟁-조건을-피하기-위해-잠금-사용"><a class="markdownIt-Anchor" href="#경쟁-조건을-피하기-위해-잠금-사용"></a> 경쟁 조건을 피하기 위해 잠금 사용</h3><p>여러 스레드가 공유 리소스에 액세스하면 한 스레드가 리소스를 읽거나 수정하는 동안 다른 스레드도 리소스에 액세스하는 경쟁 조건이 발생할 위험이 있습니다. 이를 방지하기 위해 잠금을 사용하여 한 번에 하나의 스레드만 공유 리소스에 액세스할 수 있도록 할 수 있습니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">object</span> _lock = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> _sharedResource = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IncrementSharedResource</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">lock</span> (_lock)</span><br><span class="line">    &#123;</span><br><span class="line">        _sharedResource++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="메인-스레드에서-blocking-방지"><a class="markdownIt-Anchor" href="#메인-스레드에서-blocking-방지"></a> 메인 스레드에서 blocking 방지</h3><p>UI 애플리케이션에서는 기본 스레드를 blocking하고 애플리케이션이 응답하지 않게 만드는 것을 방지하기 위해 파일 I/O 또는 데이터베이스 쿼리와 같은 blocking 작업을 백그라운드 스레드에서 수행해야 합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">LoadDataAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">await</span> GetDataFromDatabaseAsync();</span><br><span class="line">    <span class="comment">// Update UI with data on the main thread</span></span><br><span class="line">    <span class="keyword">await</span> Task.Run(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Perform file I/O or other blocking operation on a background thread</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// Continue updating UI with more data on the main thread</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="예제"><a class="markdownIt-Anchor" href="#예제"></a> 예제</h2><p>제품 정보, 가격 및 가용성에 대한 대량의 동시 요청을 처리하는 대규모 전자 상거래 웹 사이트용 애플리케이션을 구축한다고 가정해 보겠습니다. 웹사이트는 각 제품 카테고리에 대해 별도의 서비스를 제공하는 마이크로서비스 아키텍처를 사용하며, 각 서비스는 여러 클라이언트의 요청을 처리합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ReaderWriterLockSlim _lock = <span class="keyword">new</span> ReaderWriterLockSlim();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ConcurrentDictionary&lt;<span class="keyword">int</span>, Product&gt; _products = <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="keyword">int</span>, Product&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;Product&gt; <span class="title">GetProductAsync</span>(<span class="params"><span class="keyword">int</span> productId</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// Use a read lock to allow multiple threads to read from the dictionary simultaneously</span></span><br><span class="line">        _lock.EnterReadLock();</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_products.TryGetValue(productId, <span class="keyword">out</span> Product product))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> product;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// If the product is not found in the dictionary, use a write lock to add it</span></span><br><span class="line">                _lock.ExitReadLock();</span><br><span class="line">                _lock.EnterWriteLock();</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    product = <span class="keyword">await</span> GetProductFromServiceAsync(productId);</span><br><span class="line">                    _products.TryAdd(productId, product);</span><br><span class="line">                    <span class="keyword">return</span> product;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span></span><br><span class="line">                &#123;</span><br><span class="line">                    _lock.ExitWriteLock();</span><br><span class="line">                    _lock.EnterReadLock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            _lock.ExitReadLock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;Product&gt; <span class="title">GetProductFromServiceAsync</span>(<span class="params"><span class="keyword">int</span> productId</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// Use async/await to make an asynchronous API call</span></span><br><span class="line">        <span class="keyword">using</span> (HttpClient client = <span class="keyword">new</span> HttpClient())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">string</span> url = <span class="string">$"https://api.example.com/products/<span class="subst">&#123;productId&#125;</span>"</span>;</span><br><span class="line">            HttpResponseMessage response = <span class="keyword">await</span> client.GetAsync(url);</span><br><span class="line">            <span class="keyword">string</span> json = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">            <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;Product&gt;(json);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 여러 스레드가 <code>_products</code>에서 동시에 읽을 수 있도록 <code>ReaderWriterLockSlim</code>을 사용하고 있습니다. Dictionary에 없는 제품이 요청되면 write lock을 사용하여 추가합니다. 또한 제품 데이터를 검색하기 위해 비동기 API 호출을 만들기 위해 async/await를 사용하고 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/10/23/csharp-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Node.js, Express를 사용하여 간단한 웹 크롤러 만들기</title>
      <link>http://hgko1207.github.io/2023/10/19/nodejs-6/</link>
      <guid>http://hgko1207.github.io/2023/10/19/nodejs-6/</guid>
      <pubDate>Thu, 19 Oct 2023 02:49:28 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;스파이더라고도 알려진 &lt;strong&gt;웹 크롤러&lt;/strong&gt;(Web crawler)는 인터넷을 탐색하고, 웹사이트를 방문하고, 다양한 목적으로 데이터를 추출하는 자동화된 프로그램입니다. 웹 크롤러를 구축하는 것은 복잡한 작업일 수 있지만 올바른
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>스파이더라고도 알려진 <strong>웹 크롤러</strong>(Web crawler)는 인터넷을 탐색하고, 웹사이트를 방문하고, 다양한 목적으로 데이터를 추출하는 자동화된 프로그램입니다. 웹 크롤러를 구축하는 것은 복잡한 작업일 수 있지만 올바른 도구와 지침을 사용하면 보람 있는 경험이 될 수 있습니다.</p><p>이 글에서는 Node.js, Express 및 TypeScript를 사용하여 간단한 웹 크롤러를 구축하는 방법을 살펴보겠습니다.</p><h2 id="1-프로젝트-설정">1. 프로젝트 설정</h2><p>시작하려면 새 Node.js 프로젝트를 만들고 필요한 종속성을 설치해야 합니다. 우리는 다음 패키지를 사용할 것입니다.</p><ol><li><code>Express</code> — 쉽게 서버를 생성하고 HTTP 요청을 처리할 수 있게 해주는 인기 있는 Node.js 웹 프레임워크입니다.</li><li><code>Cheerio</code> — HTML 및 XML 문서를 탐색하고 조작할 수 있게 해주는 jQuery와 유사한 Node.js용 라이브러리입니다.</li><li><code>Request</code> — HTTP 요청을 쉽게 보내고 응답을 처리할 수 있게 해주는 간단한 Node.js용 HTTP 클라이언트입니다.</li></ol><p>새 Node.js 프로젝트를 생성한 후 다음 명령을 사용하여 패키지를 설치할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express cheerio request</span><br></pre></td></tr></table></figure><p>다음을 실행하여 TypeScript를 dev 종속성(devDependencies)으로 설치할 수도 있습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D typescript @types/node @types/express @types/cheerio @types/request</span><br></pre></td></tr></table></figure><h2 id="2-서버-설정">2. 서버 설정</h2><p>이 섹션에서는 HTTP 요청을 수신하고 응답을 반환하는 간단한 Express 서버를 만듭니다. 또한 웹 크롤러가 크롤링을 시작할 수 있는 경로를 추가할 것입니다.</p><p>먼저 <code>server.ts</code>라는 새 파일을 만들고 다음 코드를 추가하겠습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express, &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'Welcome to the Web Crawler'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/crawl'</span>, <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Add code for crawling here</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server running on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이 코드는 새로운 Express 애플리케이션을 생성하고 <code>/</code> 및 <code>/crawl</code>이라는 두 가지 경로를 정의합니다. <code>/</code> 경로는 단순히 사용자에게 환영 메시지를 반환하는 반면 <code>/crawl</code> 경로는 크롤링 프로세스를 시작하는 데 사용됩니다.</p><h2 id="3-웹사이트-크롤링">3. 웹사이트 크롤링</h2><p>이제 서버를 설정했으므로 웹사이트 크롤링을 시작할 수 있습니다. 이 예에서는 Google 홈페이지를 크롤링하고 페이지 제목을 추출합니다.</p><p><code>/crawl</code> 경로 내에 다음 코드를 추가합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'request'</span>;</span><br><span class="line"><span class="keyword">import</span> cheerio <span class="keyword">from</span> <span class="string">'cheerio'</span>;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/crawl'</span>, <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'https://www.google.com'</span>;</span><br><span class="line"></span><br><span class="line">  request(url, <span class="function">(<span class="params">error, response, html</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> $ = cheerio.load(html);</span><br><span class="line">      <span class="keyword">const</span> title = $(<span class="string">'title'</span>).text();</span><br><span class="line">      res.send(<span class="string">`The title of <span class="subst">$&#123;url&#125;</span> is: <span class="subst">$&#123;title&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(<span class="string">`Error crawling <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이 코드는 HTTP GET 요청을 지정된 URL로 보내고 HTML 응답을 Cheerio 개체에 로드합니다. 그런 다음 Cheerio를 사용하여 페이지 제목을 추출하고 이를 사용자에게 응답으로 다시 보낼 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/10/19/nodejs-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] Tree Shaking: 애플리케이션 크기 최적화</title>
      <link>http://hgko1207.github.io/2023/10/16/angular-22/</link>
      <guid>http://hgko1207.github.io/2023/10/16/angular-22/</guid>
      <pubDate>Mon, 16 Oct 2023 07:03:12 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;는 단일 페이지 애플리케이션을 구축하기 위한 강력한 프레임워크입니다. 그러나 애플리케이션이 복잡해지면 크기도 커지며 이로 인해 로드 시간이 느려지고 성능이 저하될 수 있습니다. Angular 애플리케이션
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong>는 단일 페이지 애플리케이션을 구축하기 위한 강력한 프레임워크입니다. 그러나 애플리케이션이 복잡해지면 크기도 커지며 이로 인해 로드 시간이 느려지고 성능이 저하될 수 있습니다. Angular 애플리케이션의 크기를 최적화하는 한 가지 기술은 <strong>트리 쉐이킹</strong>(Tree Shaking)을 이용하는 것입니다.</p><p>이 글에서는 트리 쉐이킹이 무엇인지, 어떻게 작동하는지, Angular 프로젝트에서 구현하는 방법을 살펴보겠습니다.</p><h2 id="트리-쉐이킹-Tree-Shaking-이란-무엇입니까">트리 쉐이킹(Tree Shaking)이란 무엇입니까?</h2><p>트리 쉐이킹은 애플리케이션에서 사용되지 않는 코드를 제거하는 프로세스입니다. 코드와 해당 종속성을 분석하고 사용되지 않는 부분을 식별한 다음 안전하게 제거할 수 있는 방식으로 작동합니다. 트리 쉐이킹은 모듈과 종속성이 많은 대규모 애플리케이션에 특히 유용합니다.</p><h2 id="트리-쉐이킹은-어떻게-작동하나요">트리 쉐이킹은 어떻게 작동하나요?</h2><p>트리 쉐이킹은 JavaScript 모듈의 정적 특성에 의존합니다. 모듈을 임포트하면 모듈 전체가 로드되지만 실제로 사용되는 부분만 실행됩니다. 사용되지 않은 코드는 실행되지 않으므로 최종 번들에 포함되지 않습니다. 이렇게 하면 애플리케이션의 크기가 크게 줄어들고 성능이 향상될 수 있습니다.</p><h2 id="Angular에서-트리-쉐이킹-구현">Angular에서 트리 쉐이킹 구현</h2><p>Angular 애플리케이션에서 트리 쉐이킹을 구현하려면 Webpack과 같은 이를 지원하는 빌드 도구를 사용해야 합니다. 애플리케이션을 빌드할 때 Webpack은 코드를 분석하고 사용되지 않는 코드를 제거하여 번들 크기를 더 작게 만듭니다.</p><p>지연 로딩을 사용하여 필요한 모듈만 로드하고, 전역 변수를 피하고, 실제로 사용되는 모듈 부분만 가져오는 등 Angular 개발에 대한 모범 사례를 따르면 트리 쉐이킹 프로세스에 도움이 될 수도 있습니다.</p><h2 id="트리-쉐이킹-검증">트리 쉐이킹 검증</h2><p>응용 프로그램에서 트리 쉐이킹이 실제로 작동하는지 확인하는 것이 중요합니다. 트리 쉐이킹을 구현하기 전과 후에 번들로 제공되는 JavaScript 파일의 크기를 분석하여 이를 수행할 수 있습니다. 또한 사용되지 않더라도 여전히 포함되어 있는 애플리케이션 부분을 식별하려면 Webpack Bundle Analyser와 같은 도구를 사용해야 합니다.</p><h2 id="일반적인-함정-및-팁">일반적인 함정 및 팁</h2><p>트리 쉐이킹을 구현할 때 흔히 발생하는 함정 중 하나는 트리 쉐이킹에 최적화되지 않은 타사 라이브러리에 너무 많이 의존한다는 것입니다. 트리 쉐이킹을 지원하는 라이브러리를 사용하거나 이 기술에 최적화된 대체 라이브러리를 사용하십시오.</p><p>또 다른 팁은 Webpack이 코드를 분석하고 트리 쉐이킹을 적절하게 적용하기 어렵게 만들 수 있는 동적 가져오기를 사용하지 않는 것입니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/10/16/angular-22/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] Zone.js 파일: 성능 향상을 위해 이해하고 사용하기</title>
      <link>http://hgko1207.github.io/2023/10/08/angular-21/</link>
      <guid>http://hgko1207.github.io/2023/10/08/angular-21/</guid>
      <pubDate>Sun, 08 Oct 2023 14:01:36 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;는 가장 널리 사용되는 JavaScript 프레임워크 중 하나이며 개발을 보다 효율적으로 만들어주는 많은 도구와 기능을 갖추고 있습니다. 그러한 도구 중 하나가 개발자가 애플리케이션의 변경 사항을 추적하
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong>는 가장 널리 사용되는 JavaScript 프레임워크 중 하나이며 개발을 보다 효율적으로 만들어주는 많은 도구와 기능을 갖추고 있습니다. 그러한 도구 중 하나가 개발자가 애플리케이션의 변경 사항을 추적하고 성능을 향상시키는 데 도움이 되는 라이브러리인 <strong>Zone.js</strong>입니다.</p><p>이 글에서는 Zone.js가 무엇인지, 어떻게 작동하는지, 그리고 이를 사용하여 Angular 애플리케이션을 최적화할 수 있는 방법에 대해 자세히 살펴보겠습니다.</p><h2 id="Zone-js-란-무엇입니까">Zone.js 란 무엇입니까?</h2><p>Zone.js는 개발자가 애플리케이션의 변경 사항을 추적하는 데 도움이 되는 JavaScript 라이브러리입니다. 타이머, 이벤트, XHR 요청과 같은 브라우저의 API에 연결하여 이를 수행합니다. Zone.js가 설치되면 추적하려는 코드 주위에 “zone” 이 생성됩니다. 이 영역은 그 안에서 발생하는 모든 변경 사항을 추적하며 성능을 최적화하는 데 사용될 수 있습니다.</p><h2 id="Zone-js는-어떻게-작동하나요">Zone.js는 어떻게 작동하나요?</h2><p>Zone.js는 코드 주위에 &quot;zone&quot;이라고 하는 wrapper를 생성하여 작동합니다. 이 영역에는 변경 사항을 포함하여 애플리케이션 상태에 대한 정보가 포함되어 있습니다. 영역 내에서 변경 사항이 발생할 때마다 Zone.js는 이를 기록하고 그에 따라 애플리케이션을 업데이트합니다.</p><p>예를 들어, HTTP 요청을 하는 Angular 컴포넌트가 있는 경우 Zone.js는 컴포넌트의 코드 주위에 영역을 만듭니다. HTTP 요청이 이루어지면 Zone.js는 이를 추적하고 그에 따라 컴포넌트의 상태를 업데이트합니다.</p><h2 id="성능-최적화를-위해-Zone-js-사용">성능 최적화를 위해 Zone.js 사용</h2><p>Zone.js는 HTTP 요청 수를 줄이고 애플리케이션의 응답성을 향상시키는 등 다양한 성능 최적화 작업에 사용할 수 있습니다. Zone.js를 사용하는 한 가지 방법은 HTTP 요청을 그룹화하여 HTTP 요청 수를 줄이는 것입니다.</p><p>예를 들어 <code>zone.runOutsideAngular()</code> 메서드를 사용하여 Angular 영역 외부에서 HTTP 요청을 실행할 수 있습니다. 이렇게 하면 요청이 Zone.js에 의해 추적되지 않고 성능 향상을 위해 다른 요청과 함께 그룹화될 수 있습니다.</p><p>성능 최적화를 위해 Zone.js를 사용하는 또 다른 방법은 애플리케이션의 응답성을 향상시키는 것입니다. <code>zone.run()</code> 메서드를 사용하여 영역 내에서 애플리케이션의 상태를 업데이트할 수 있습니다. 이렇게 하면 다음 변경 감지 주기를 기다리지 않고 즉시 변경이 이루어집니다.</p><h2 id="고급-Zone-js-기술">고급 Zone.js 기술</h2><p>Zone.js에는 보다 복잡한 성능 최적화 작업에 사용할 수 있는 몇 가지 고급 기능이 있습니다. 그러한 기능 중 하나는 사용자 정의 영역(custom zone)을 생성하는 기능입니다. 사용자 정의 영역을 사용하면 전체 애플리케이션이 아닌 애플리케이션의 특정 부분의 변경 사항을 추적할 수 있습니다.</p><p>또 다른 고급 기술은 Zone.js를 사용하여 변경 감지를 제어하는 ​​기능입니다. 기본적으로 Angular는 NgZone 클래스를 사용하여 변경 감지를 처리합니다. 그러나 Zone.js를 사용하여 변경 감지를 제어하고 특정 애플리케이션에 맞게 최적화할 수 있습니다.</p><h2 id="결론">결론</h2><p>결론적으로 Zone.js는 Angular 애플리케이션의 성능 최적화를 위한 강력한 도구입니다. 코드 주위에 영역을 생성하여 변경 사항을 추적하고 그에 따라 애플리케이션을 업데이트하는 방식으로 작동합니다. Zone.js를 사용하면 HTTP 요청 수를 줄이고 애플리케이션의 응답성을 향상시키며 성능 향상을 위해 변경 감지를 제어할 수 있습니다.</p><p>이 글에서 다루는 기술을 사용하면 Zone.js를 사용하여 더 나은 성능을 위해 Angular 애플리케이션을 최적화할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/10/08/angular-21/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[.NET Core] RabbitMQ 사용 가이드</title>
      <link>http://hgko1207.github.io/2023/09/13/csharp-5/</link>
      <guid>http://hgko1207.github.io/2023/09/13/csharp-5/</guid>
      <pubDate>Wed, 13 Sep 2023 01:06:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;는 안정적이고 확장 가능한 메시징을 위해 최신 분산 시스템에서 널리 사용되는 오픈 소스 메시지 브로커 소프트웨어입니다. Erlang으로 작성되었으며 AMQP, MQTT, STOMP와 같은 여러 프로토콜
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>RabbitMQ</strong>는 안정적이고 확장 가능한 메시징을 위해 최신 분산 시스템에서 널리 사용되는 오픈 소스 메시지 브로커 소프트웨어입니다. Erlang으로 작성되었으며 AMQP, MQTT, STOMP와 같은 여러 프로토콜을 지원합니다. RabbitMQ는 확장성이 뛰어나며 다양한 프로그래밍 언어 및 프레임워크와 통합될 수 있습니다.</p><p>이 글에서는 크로스 플랫폼 웹 애플리케이션 구축을 위한 인기 있고 강력한 프레임워크인 .NET Core와 함께 RabbitMQ를 사용하는 방법을 살펴보겠습니다. RabbitMQ의 기본 사항, 아키텍처 및 개념, .NET Core 애플리케이션과 통합하는 방법을 다룹니다.</p><h2 id="1-rabbitmq란-무엇입니까"><a class="markdownIt-Anchor" href="#1-rabbitmq란-무엇입니까"></a> 1. RabbitMQ란 무엇입니까?</h2><p>RabbitMQ는 다양한 소프트웨어 애플리케이션 간의 통신을 가능하게 하는 메시지 브로커 소프트웨어입니다. 이는 AMQP(Advanced Message Queuing Protocol)를 기반으로 하며 최신 분산 시스템을 위한 안정적이고 확장 가능한 메시징 솔루션을 제공합니다.</p><p>RabbitMQ는 다양한 애플리케이션과 서비스 간의 비동기 통신을 허용합니다. 확장성이 뛰어나며 다양한 프로그래밍 언어 및 프레임워크와 통합될 수 있습니다.</p><h2 id="2-rabbitmq-아키텍처-및-개념"><a class="markdownIt-Anchor" href="#2-rabbitmq-아키텍처-및-개념"></a> 2. RabbitMQ 아키텍처 및 개념</h2><p>RabbitMQ는 서버가 메시지 저장 및 전달을 담당하고 클라이언트가 메시지 생성 및 소비를 담당하는 client-server 모델을 따릅니다. 이는 메시지가 대기열에 배치된 다음 클라이언트에서 사용되는 대기열 기반 모델을 사용합니다.</p><p>RabbitMQ는 AMQP, MQTT, STOMP와 같은 여러 메시징 프로토콜을 지원합니다. 또한 메시지 라우팅, 메시지 확인, 메시지 지속성과 같은 고급 기능도 지원합니다.</p><h2 id="3-rabbitmq-서버-설치"><a class="markdownIt-Anchor" href="#3-rabbitmq-서버-설치"></a> 3. RabbitMQ 서버 설치</h2><p>.NET Core에서 RabbitMQ를 사용하려면 먼저 RabbitMQ 서버를 설치해야 합니다. RabbitMQ는 Windows, macOS, Linux 등 다양한 플랫폼에서 사용할 수 있습니다.</p><p>Windows에 RabbitMQ를 설치하려면 <a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener">공식 웹사이트</a>에서 설치 프로그램을 다운로드하고 실행합니다. Linux에서는 패키지 관리자를 사용하여 RabbitMQ를 설치할 수 있습니다.</p><h2 id="4-net-core에서-rabbitmq-설정"><a class="markdownIt-Anchor" href="#4-net-core에서-rabbitmq-설정"></a> 4. .NET Core에서 RabbitMQ 설정</h2><p>.NET Core에서 RabbitMQ를 사용하려면 <code>RabbitMQ.Client</code> NuGet 패키지를 설치해야 합니다. 이 패키지에는 RabbitMQ와 상호 작용하는 데 필요한 클래스와 메서드가 포함되어 있습니다.</p><p>또한 RabbitMQ에 대한 연결 설정을 구성해야 합니다. 연결 설정에는 RabbitMQ 서버의 호스트 이름(hostname), 포트(port), 사용자 이름(username) 및 비밀번호(password)가 포함됩니다.</p><h2 id="5-메시지-publishing-및-consuming"><a class="markdownIt-Anchor" href="#5-메시지-publishing-및-consuming"></a> 5. 메시지 Publishing 및 Consuming</h2><p>.NET Core 애플리케이션에서 RabbitMQ를 설정하고 나면 메시지 게시(Publishing) 및 소비(Consuming)를 시작할 수 있습니다. 메시지를 게시하려면 RabbitMQ에 대한 연결을 만든 다음 채널을 만들어야 합니다. 그런 다음 채널을 사용하여 메시지를 대기열에 게시할 수 있습니다.</p><p>메시지를 소비하려면 대기열을 수신하고 메시지를 처리하는 소비자(Consumers)를 생성해야 합니다. <code>BasicConsume</code> 메서드 또는 <code>EventingBasicConsumer</code> 클래스와 같은 다양한 메시지 소비 전략을 사용할 수 있습니다.</p><h2 id="6-net-core와-함께-rabbitmq를-사용하는-모범-사례"><a class="markdownIt-Anchor" href="#6-net-core와-함께-rabbitmq를-사용하는-모범-사례"></a> 6. .NET Core와 함께 RabbitMQ를 사용하는 모범 사례</h2><p>.NET Core와 함께 RabbitMQ를 사용할 때 최고의 성능과 안정성을 보장하려면 몇 가지 모범 사례를 따라야 합니다. 여기에는 연결 풀링 설정, 메시지 승인 사용, 메시지 재시도 구성이 포함됩니다.</p><p>또한 오류나 문제가 있는지 RabbitMQ 서버를 모니터링하고 적절한 로깅 및 오류 처리를 구성해야 합니다.</p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>RabbitMQ는 최신 분산 시스템을 위한 강력하고 안정적인 메시징 솔루션입니다. 이 글에서는 .NET Core와 함께 RabbitMQ를 사용하는 방법을 살펴보았습니다.</p><p>다음은 .NET Core에서 RabbitMQ를 사용하기 위한 몇 가지 코드 예제입니다.</p><p>RabbitMQ 클라이언트 라이브러리 설치</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package RabbitMQ.Client</span><br></pre></td></tr></table></figure><p>RabbitMQ에 연결</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> factory = <span class="keyword">new</span> ConnectionFactory() &#123; HostName = <span class="string">"localhost"</span> &#125;;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Do something with the channel</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>대기열 선언</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> queueName = <span class="string">"my-queue"</span>;</span><br><span class="line">channel.QueueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>메시지 게시</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RabbitMQ.Client;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> queueName = <span class="string">"my-queue"</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">"Hello, World!"</span>;</span><br><span class="line"><span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">channel.BasicPublish(<span class="string">""</span>, queueName, <span class="literal">null</span>, body);</span><br></pre></td></tr></table></figure><p>메시지 소비</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RabbitMQ.Client;</span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client.Events;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> queueName = <span class="string">"my-queue"</span>;</span><br><span class="line"><span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</span><br><span class="line">consumer.Received += (model, ea) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> body = ea.Body.ToArray();</span><br><span class="line">    <span class="keyword">var</span> message = Encoding.UTF8.GetString(body);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do something with the message</span></span><br><span class="line"></span><br><span class="line">    channel.BasicAck(ea.DeliveryTag, <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">channel.BasicConsume(queueName, <span class="literal">false</span>, consumer);</span><br></pre></td></tr></table></figure><p>참고: 이러한 코드 예제는 시작점일 뿐이며 특정 사용 사례에 맞게 조정해야 할 수도 있습니다. .NET Core에서 RabbitMQ를 사용하는 방법에 대한 자세한 내용은 공식 RabbitMQ 설명서를 참조하는 것이 좋습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/09/13/csharp-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>OAuth와 JWT 차이점 및 사용 사례</title>
      <link>http://hgko1207.github.io/2023/09/10/backend-1/</link>
      <guid>http://hgko1207.github.io/2023/09/10/backend-1/</guid>
      <pubDate>Sun, 10 Sep 2023 12:33:10 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;OAuth&lt;/strong&gt;와 &lt;strong&gt;JWT&lt;/strong&gt;는 웹 애플리케이션에서 일반적으로 사용되는 두 가지 보안 메커니즘입니다. 둘 다 인증 기능을 제공하지만 접근 방식과 사용 사례가 다릅니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 O
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>OAuth</strong>와 <strong>JWT</strong>는 웹 애플리케이션에서 일반적으로 사용되는 두 가지 보안 메커니즘입니다. 둘 다 인증 기능을 제공하지만 접근 방식과 사용 사례가 다릅니다.</p><p>이 글에서는 OAuth와 JWT의 차이점과 각각을 언제 사용하는지 살펴보겠습니다.</p><h2 id="Section-1-OAuth">Section 1: OAuth</h2><p>OAuth는 자격 증명을 노출하지 않고 타사 애플리케이션이 사용자의 리소스에 액세스할 수 있도록 하는 개방형 인증 표준입니다. OAuth 흐름에는 리소스 소유자(사용자), 클라이언트(애플리케이션) 및 권한 부여 서버 이 세 가지가 관련됩니다. 클라이언트는 Authorization Server를 통해 리소스 소유자에게 Authorization(권한부여)을 요청하고, 승인이 나면 클라이언트는 리소스에 접근하기 위한 Access Token을 받습니다.<br>OAuth는 일반적으로 사용자가 Facebook 또는 Google 자격 증명을 사용하여 애플리케이션에 로그인할 수 있는 소셜 미디어 로그인에 사용됩니다.</p><h2 id="Section-2-JWT">Section 2: JWT</h2><p>JWT(JSON Web Token)는 두 당사자 간에 전송될 클레임(claim)을 표현하는 URL 안전의 컴팩트한 수단입니다. 헤더(header), 페이로드(payload), 서명(signature)의 세 부분으로 구성됩니다. 헤더는 토큰 유형과 서명 알고리즘을 지정하고, 페이로드에는 클레임이 포함되며, 서명은 토큰의 무결성을 확인하는 데 사용됩니다.<br>JWT는 일반적으로 사용자가 애플리케이션에 로그인하고 JWT를 응답으로 받는 인증에 사용됩니다. 그런 다음 JWT를 사용하여 애플리케이션 내의 보호된 리소스에 액세스할 수 있습니다.</p><h2 id="Section-3-OAuth와-JWT의-차이점">Section 3: OAuth와 JWT의 차이점</h2><p>OAuth와 JWT는 서로 다른 목적으로 사용되며 사용 사례도 다릅니다. OAuth는 권한부여(authorization)에 사용되고 JWT는 인증(authentication)에 사용됩니다. OAuth는 타사 애플리케이션에 리소스에 대한 액세스 권한을 부여하는 데 사용되는 반면, JWT는 애플리케이션 내의 보호된 리소스에 액세스하는 데 사용됩니다.<br>OAuth에는 인증 서버가 필요하지만 JWT에는 그렇지 않습니다. OAuth 흐름에는 여러 단계와 당사자가 포함되는 반면, JWT 흐름은 더 간단하고 두 당사자만 포함합니다.</p><h2 id="Section-4-OAuth를-사용해야-하는-경우">Section 4: OAuth를 사용해야 하는 경우</h2><p>OAuth는 자격 증명을 노출하지 않고 사용자 리소스에 대한 액세스 권한을 타사 애플리케이션에 부여해야 할 때 유용합니다.<br>예를 들어 소셜 미디어 앱을 구축하는 경우 사용자가 Facebook 또는 Google 계정으로 로그인하도록 허용할 수 있습니다. 이 경우 OAuth를 사용하면 자격 증명을 입력하지 않고도 사용자를 인증할 수 있습니다.</p><h2 id="Section-5-JWT를-사용해야-하는-경우">Section 5: JWT를 사용해야 하는 경우</h2><p>JWT는 사용자를 인증하고 애플리케이션 내의 보호된 리소스에 대한 액세스 권한을 부여해야 할 때 유용합니다.<br>예를 들어 사용자가 로그인해야 하는 웹 애플리케이션을 구축하는 경우 JWT를 사용하여 사용자를 인증하고 애플리케이션의 특정 부분에 대한 액세스를 보호할 수 있습니다. JWT를 사용하여 당사자 간에 데이터를 안전하게 전송할 수도 있습니다.</p><h2 id="결론">결론</h2><p>OAuth와 JWT는 모두 웹 애플리케이션 보안을 위한 강력한 도구입니다. 유사해 보일 수도 있지만 용도가 다르며 사용 사례도 다릅니다. OAuth와 JWT의 차이점을 이해하면 특정 사용 사례에 적합한 도구를 선택하고 애플리케이션의 보안을 보장할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/09/10/backend-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>.NET Core에서 Swagger를 사용하는 방법</title>
      <link>http://hgko1207.github.io/2023/09/07/csharp-4/</link>
      <guid>http://hgko1207.github.io/2023/09/07/csharp-4/</guid>
      <pubDate>Thu, 07 Sep 2023 02:41:41 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Swagger&lt;/strong&gt;는 RESTful API를 문서화하고 테스트하는 데 널리 사용되는 오픈 소스 도구입니다. 개발자가 API를 테스트하고 실시간으로 문서를 생성할 수 있는 사용자 친화적인 인터페이스를 제공합니다.&lt;/p&gt;
&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Swagger</strong>는 RESTful API를 문서화하고 테스트하는 데 널리 사용되는 오픈 소스 도구입니다. 개발자가 API를 테스트하고 실시간으로 문서를 생성할 수 있는 사용자 친화적인 인터페이스를 제공합니다.</p><p>이 글에서는 .NET Core와 함께 Swagger를 사용하여 API Endpoint를 문서화하고 테스트하는 방법을 살펴보겠습니다.</p><blockquote><p>Endpoint는 API가 RESTful API를 인터페이스를 통해 서버의 리소스에 액세스 할 수 있도록 해주는 URL입니다.</p></blockquote><h2 id="전제-조건-🛠️">전제 조건 🛠️</h2><ul><li>컴퓨터에 .NET Core 3.1 이상이 설치되어 있어야 함</li><li>RESTful API 아키텍처에 대한 기본 이해</li><li>Visual Studio Code 또는 Visual Studio 2019 이상</li></ul><h2 id="시작하기-🚀">시작하기 🚀</h2><h3 id="1단계-NET-Core-웹-API-프로젝트-만들기">1단계: .NET Core 웹 API 프로젝트 만들기</h3><p>첫 번째 단계는 새 .NET Core Web API 프로젝트를 만드는 것입니다. Visual Studio 또는 Visual Studio Code를 열고 새 .NET Core Web API 프로젝트를 만듭니다.</p><h3 id="2단계-Swashbuckle-AspNetCore-NuGet-패키지-설치">2단계: Swashbuckle.AspNetCore NuGet 패키지 설치</h3><p>Swagger는 .NET Core용 NuGet 패키지로 제공됩니다. 설치하려면 IDE에서 NuGet 패키지 관리자를 열고 Swashbuckle.AspNetCore를 검색하세요. 최신 버전의 패키지를 설치하십시오.</p><h3 id="3단계-애플리케이션-파이프라인에-Swagger-미들웨어-추가">3단계: 애플리케이션 파이프라인에 Swagger 미들웨어 추가</h3><p><code>Startup.cs</code> 파일의 구성 메서드에 다음 코드를 추가하여 Swagger 미들웨어를 애플리케이션 파이프라인에 추가합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwagger();</span><br><span class="line">app.UseSwaggerUI(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.SwaggerEndpoint( <span class="string">"/swagger/v1/swagger.json"</span> , <span class="string">"My API V1"</span> );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>그러면 미들웨어 파이프라인에 Swagger가 추가되고 개발자가 API를 테스트할 수 있는 UI가 생성됩니다.</p><h3 id="4단계-Swagger-구성">4단계: Swagger 구성</h3><p><code>SwaggerGenOptions</code> 클래스를 사용하여 Swagger를 구성할 수 있습니다. 이 클래스는 Swagger에서 생성된 문서를 커스터마이징 하는 메소드를 제공합니다. Swagger를 구성하려면 <code>Startup.cs</code> 파일의 <code>ConfigureServices</code> 메서드에 다음 코드를 추가하세요.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.SwaggerDoc( <span class="string">"v1"</span> , <span class="keyword">new</span> OpenApiInfo &#123; Title = <span class="string">"My API"</span> , Version = <span class="string">"v1"</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>그러면 SwaggerGen 미들웨어가 애플리케이션 파이프라인에 추가되고 Swagger UI가 구성됩니다.</p><h3 id="5단계-API-Endpoint-문서-생성">5단계: API Endpoint 문서 생성</h3><p>Swagger는 XML 문서 주석을 사용하여 API Endpoint에 대한 문서를 생성합니다. API Endpoint에 XML 주석을 추가하여 문서화하세요. 다음은 GET 엔드포인트에 XML 문서 주석을 추가하는 방법의 예입니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Gets all items.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>All items.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;Item&gt; <span class="title">GetAll</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> repository.GetAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6단계-Swagger-UI를-사용하여-API-Endpoint-테스트">6단계: Swagger UI를 사용하여 API Endpoint 테스트</h3><p>애플리케이션을 실행하고 Swagger UI Endpoint로 이동합니다. 그러면 개발자가 API Endpoint를 테스트할 수 있는 사용자 친화적인 인터페이스를 제공하는 Swagger UI가 열립니다.</p><h2 id="결론">결론</h2><p>Swagger는 RESTful API를 문서화하고 테스트하기 위한 강력한 도구입니다. 개발자가 API를 테스트하고 실시간으로 문서를 생성할 수 있는 사용자 친화적인 인터페이스를 제공합니다. 이 글에서는 .NET Core와 함께 Swagger를 사용하여 API Endpoint를 문서화하고 테스트하는 방법을 살펴보았습니다. Swagger를 사용하면 API가 잘 문서화되고 테스트되어 개발자가 더 쉽게 API를 사용할 수 있도록 보장할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/09/07/csharp-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>웹 개발자를 위한 AWS 소개 🚀</title>
      <link>http://hgko1207.github.io/2023/09/06/aws-1/</link>
      <guid>http://hgko1207.github.io/2023/09/06/aws-1/</guid>
      <pubDate>Wed, 06 Sep 2023 14:28:39 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Amazon Web Services&lt;/strong&gt;(AWS)는 웹 애플리케이션 구축, 배포 및 관리를 위한 다양한 서비스를 제공하는 클라우드 기반 플랫폼입니다. AWS는 컴퓨팅, 스토리지, 네트워킹 기능을 포함한 다양한 서비스를 제
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Amazon Web Services</strong>(AWS)는 웹 애플리케이션 구축, 배포 및 관리를 위한 다양한 서비스를 제공하는 클라우드 기반 플랫폼입니다. AWS는 컴퓨팅, 스토리지, 네트워킹 기능을 포함한 다양한 서비스를 제공합니다.</p><p>이 글에서는 AWS의 기본 사항과 AWS가 웹 개발자에게 어떤 이점을 줄 수 있는지 살펴보겠습니다.</p><h2 id="AWS-서비스-📦">AWS 서비스 📦</h2><p>AWS는 웹 애플리케이션을 구축하는 데 사용할 수 있는 다양한 서비스를 제공합니다. 가장 인기 있는 서비스 중 일부는 다음과 같습니다.</p><ol><li><strong>EC2</strong>(Elastic Compute Cloud): 클라우드에서 크기 조정 가능한 컴퓨팅 용량을 제공하는 서비스입니다.</li><li><strong>S3</strong>(Simple Storage Service): 안전하고 내구성이 뛰어나며 확장성이 뛰어난 객체 스토리지를 제공하는 서비스입니다.</li><li><strong>RDS</strong>(관계형 데이터베이스 서비스): MySQL, PostgreSQL, Oracle 및 Microsoft SQL Server에 관리형 데이터베이스 서비스를 제공하는 서비스입니다.</li><li><strong>Lambda</strong>: 서버를 프로비저닝하거나 관리하지 않고도 코드를 실행할 수 있는 서버리스 컴퓨팅 서비스입니다.</li><li><strong>API 게이트웨이</strong>: API를 쉽게 생성, 게시, 관리할 수 있게 해주는 서비스입니다.</li><li><strong>CloudFront</strong>: 웹 콘텐츠를 사용자에게 빠르게 전달하는 콘텐츠 전달 네트워크(CDN)입니다.</li></ol><h2 id="AWS-배포-🚀">AWS 배포 🚀</h2><p>AWS는 웹 애플리케이션을 클라우드에 배포하기 위한 다양한 도구를 제공합니다. 가장 널리 사용되는 도구는 다음과 같습니다.</p><ol><li>Elastic Beanstalk: 웹 애플리케이션 배포 및 확장을 위한 완전관리형 서비스입니다.</li><li>CodeDeploy: Amazon EC2 인스턴스 및 온프레미스에서 실행되는 인스턴스를 포함하여 모든 인스턴스에 대한 코드 배포를 자동화하는 서비스입니다.</li><li>CloudFormation: Amazon Web Services 리소스를 모델링하고 설정하여 해당 리소스를 관리하는 데 드는 시간을 줄이고 AWS에서 실행되는 애플리케이션에 더 많은 시간을 집중할 수 있도록 도와주는 서비스입니다.</li><li>OpsWorks: 애플리케이션 배포, 확장 및 관리 자동화를 위해 Chef 및 Puppet의 관리형 인스턴스를 제공하는 서비스입니다.</li></ol><h2 id="AWS-보안-🔒">AWS 보안 🔒</h2><p>AWS는 웹 애플리케이션을 보호하는 데 도움이 되는 다양한 보안 서비스와 기능을 제공합니다. 가장 중요한 보안 기능 중 일부는 다음과 같습니다.</p><ol><li><strong>IAM</strong>(Identity and Access Management): AWS 리소스에 대한 액세스를 안전하게 제어하는 ​​데 도움이 되는 서비스입니다.</li><li><strong>WAF</strong>(웹 애플리케이션 방화벽): 일반적인 웹 공격으로부터 웹 애플리케이션을 보호하는 데 도움이 되는 웹 애플리케이션 방화벽입니다.</li><li><strong>키 관리 서비스</strong>(KMS): 데이터를 암호화하는 데 사용되는 암호화 키를 쉽게 생성하고 제어할 수 있게 해주는 서비스입니다.</li></ol><h2 id="결론🔑">결론🔑</h2><p>AWS는 웹 애플리케이션을 구축, 배포 및 관리하기 위한 강력한 플랫폼을 제공합니다. 다양한 서비스와 기능을 통해 애플리케이션을 빠르고 쉽게 구축하고 확장할 수 있습니다. 이 글에서는 AWS 서비스, 배포 도구 및 보안 기능에 대한 개요를 제공했습니다. 이러한 지식을 바탕으로 AWS를 시작하고 강력한 클라우드 기반 플랫폼을 활용할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/09/06/aws-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>효율적인 버전 제어를 위한 Git 명령</title>
      <link>http://hgko1207.github.io/2023/09/05/git-2/</link>
      <guid>http://hgko1207.github.io/2023/09/05/git-2/</guid>
      <pubDate>Tue, 05 Sep 2023 08:21:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;은 코드베이스를 효율적으로 관리할 수 있는 강력한 버전 제어 시스템입니다. 이는 협업, 디버깅 및 깔끔한 코드베이스 유지에 필수적입니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 효율적인 버전 관리를 위해 알아야 할 몇 가지 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Git</strong>은 코드베이스를 효율적으로 관리할 수 있는 강력한 버전 제어 시스템입니다. 이는 협업, 디버깅 및 깔끔한 코드베이스 유지에 필수적입니다.</p><p>이 글에서는 효율적인 버전 관리를 위해 알아야 할 몇 가지 필수 Git 명령을 다룰 것입니다.</p><h2 id="🚀-1-Git-시작하기"><a class="header-anchor" href="#🚀-1-Git-시작하기">¶</a>🚀 1. Git 시작하기</h2><p>Git은 일반적으로 대부분의 시스템에 사전 설치되어 있지만, 그렇지 않은 경우 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">공식 웹사이트</a>에서 다운로드할 수 있습니다. 설치가 완료되면 다음 명령을 사용하여 사용자 이름과 이메일을 구성해야 합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">git config --global user.email <span class="string">"youremail@domain.com"</span></span><br></pre></td></tr></table></figure><p>Git이 올바르게 설치 및 구성되었는지 확인하려면 다음 명령을 실행하십시오.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>그러면 시스템에 설치된 Git의 현재 버전이 반환됩니다.</p><h2 id="🚀-2-Git-저장소-만들기"><a class="header-anchor" href="#🚀-2-Git-저장소-만들기">¶</a>🚀 2. Git 저장소 만들기</h2><p>새 Git 리포지토리를 생성하려면 코드가 포함된 디렉터리로 이동하여 다음 명령을 실행하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>그러면 현재 디렉터리에 새 Git 저장소가 생성됩니다. 이제 코드 변경 사항 추적을 시작할 수 있습니다.</p><h2 id="🚀-3-코드-변경"><a class="header-anchor" href="#🚀-3-코드-변경">¶</a>🚀 3. 코드 변경</h2><p>Git 리포지토리를 생성한 후에는 코드 변경을 시작할 수 있습니다. 준비 영역에 변경 사항을 추가하려면 다음 명령을 실행하십시오.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>그러면 지정된 파일이 준비 영역에 추가됩니다. 다음 명령을 사용하여 모든 변경 사항을 추가할 수도 있습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>변경 사항을 저장소에 커밋하려면 다음 명령어를 실행하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"Commit message"</span></span><br></pre></td></tr></table></figure><p>그러면 지정된 커밋 메시지를 사용하여 저장소에 대한 변경 사항이 커밋됩니다.</p><h2 id="🚀-4-분기-및-병합"><a class="header-anchor" href="#🚀-4-분기-및-병합">¶</a>🚀 4. 분기 및 병합</h2><p>분기(Branch) 및 병합(Merge)은 코드베이스의 다양한 기능을 동시에 작업할 수 있게 해주는 Git의 필수 기능입니다. 새 분기를 만들려면 다음 명령을 실행합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branch명&gt;</span><br></pre></td></tr></table></figure><p>그러면 지정된 이름을 가진 새 분기가 생성됩니다. 새 분기로 전환하려면 다음 명령을 실행합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch명&gt;</span><br></pre></td></tr></table></figure><p>한 분기의 변경 사항을 다른 분기에 병합하려면 다음 명령을 실행하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch명&gt;</span><br></pre></td></tr></table></figure><p>그러면 지정된 분기의 변경 사항이 현재 분기에 병합됩니다.</p><h2 id="🚀-5-원격으로-작업하기"><a class="header-anchor" href="#🚀-5-원격으로-작업하기">¶</a>🚀 5. 원격으로 작업하기</h2><p>원격 저장소는 협업에 필수적이며 코드베이스를 다른 사람과 공유할 수 있게 해줍니다. 원격 저장소를 추가하려면 다음 명령을 실행하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;원격 저장소 URL&gt;</span><br></pre></td></tr></table></figure><p>그러면 지정된 이름과 URL을 가진 새 원격 저장소가 추가됩니다. 변경 사항을 원격 저장소에 푸시하려면 다음 명령어를 실행하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;branch명&gt;</span><br></pre></td></tr></table></figure><p>그러면 지정된 분기의 변경 사항이 지정된 원격 저장소로 푸시됩니다.</p><h2 id="🚀-6-고급-Git-명령"><a class="header-anchor" href="#🚀-6-고급-Git-명령">¶</a>🚀 6. 고급 Git 명령</h2><p>Git에는 코드베이스를 효율적으로 관리할 수 있는 다양한 고급 명령이 있습니다. 가장 유용한 명령 중 일부는 다음과 같습니다.</p><ul><li><code>git log</code>: 저장소의 모든 커밋 목록을 표시합니다.</li><li><code>git reset</code>: 스테이징 영역에서 변경 사항을 제거합니다.</li><li><code>git stash</code>: 커밋할 준비가 되지 않은 변경 사항을 임시로 저장합니다.</li></ul><h2 id="결론"><a class="header-anchor" href="#결론">¶</a>결론</h2><p>Git은 코드베이스를 효율적으로 관리하는 데 도움이 되는 강력한 버전 제어 시스템입니다. 이러한 필수 Git 명령을 익히면 효과적으로 협업하고 효율적으로 디버그하며 깔끔한 코드베이스를 유지할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/09/05/git-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>소프트웨어 개발에서 테스트의 중요성</title>
      <link>http://hgko1207.github.io/2023/09/04/info-3/</link>
      <guid>http://hgko1207.github.io/2023/09/04/info-3/</guid>
      <pubDate>Mon, 04 Sep 2023 01:49:32 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;테스트는 소프트웨어 개발의 필수적인 부분으로, 개발자가 오류를 파악하고 코드 품질을 보장할 수 있도록 해줍니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 테스트의 중요성을 살펴보고 다양한 테스트 유형의 예를 제공합니다.&lt;/p&gt;
&lt;h2 id=&quot;테스트가-중요한-이유
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>테스트는 소프트웨어 개발의 필수적인 부분으로, 개발자가 오류를 파악하고 코드 품질을 보장할 수 있도록 해줍니다.</p><p>이 글에서는 테스트의 중요성을 살펴보고 다양한 테스트 유형의 예를 제공합니다.</p><h2 id="테스트가-중요한-이유"><a class="header-anchor" href="#테스트가-중요한-이유">¶</a>테스트가 중요한 이유</h2><p>테스트를 통해 코드가 의도한 대로 작동하고 이해관계자가 설정한 요구 사항을 충족하는지 확인합니다. 테스트하지 않으면 오류와 버그가 쉽게 빠져나가 사용자에게 문제를 일으키고 소프트웨어의 평판을 손상시킬 수 있습니다. 또한 테스트를 통해 개발 초기에 문제를 파악하고 장기적으로 시간과 리소스를 절약할 수 있습니다.</p><h2 id="테스트-유형"><a class="header-anchor" href="#테스트-유형">¶</a>테스트 유형</h2><h3 id="단위-테스트"><a class="header-anchor" href="#단위-테스트">¶</a>단위 테스트</h3><p>단위 테스트는 메서드나 함수와 같은 단일 코드 단위의 기능을 확인하는 자동화된 테스트입니다. 이는 일반적으로 개발자가 작성하며 개발 프로세스 초기에 오류를 포착할 수 있습니다.</p><h3 id="통합-테스트"><a class="header-anchor" href="#통합-테스트">¶</a>통합 테스트</h3><p>통합 테스트는 서로 다른 코드 단위 또는 시스템 간의 상호 작용을 확인합니다. 이는 다양한 구성 요소의 통합으로 인해 발생할 수 있는 문제를 파악하는 데 유용합니다.</p><h3 id="승인-테스트"><a class="header-anchor" href="#승인-테스트">¶</a>승인 테스트</h3><p>end-to-end 테스트라고도 알려진 승인 테스트는 전체 시스템이 사용자 관점에서 예상대로 작동하는지 확인합니다. 일반적으로 테스터나 품질 보증 전문가가 작성합니다.</p><h3 id="Test-Driven-Development-TDD"><a class="header-anchor" href="#Test-Driven-Development-TDD">¶</a>Test-Driven Development(TDD)</h3><p>TDD(테스트 중심 개발)는 코드를 작성하기 전에 테스트 작성을 강조하는 소프트웨어 개발 방식입니다. 이 접근 방식을 사용하면 모든 기능에 대한 테스트가 작성되고 개발 프로세스 초기에 오류를 포착할 수 있습니다.</p><h3 id="지속적인-통합-및-제공"><a class="header-anchor" href="#지속적인-통합-및-제공">¶</a>지속적인 통합 및 제공</h3><p>CI(지속적 통합) 및 CD(지속적 전달)는 코드 변경 사항이 의도한 대로 작동하는지 확인하기 위해 정기적으로 코드 변경 사항을 구축하고 테스트하는 방식입니다. CI/CD 파이프라인은 코드 변경 사항을 빌드, 테스트 및 배포하는 프로세스를 자동화하여 더 빠르고 빈번한 릴리스를 가능하게 합니다.</p><h2 id="결론"><a class="header-anchor" href="#결론">¶</a>결론</h2><p>테스트는 소프트웨어 개발의 중요한 부분이므로 처음부터 개발 프로세스에 통합되어야 합니다. 자동화된 테스트를 작성하고 이를 CI/CD 파이프라인에 통합함으로써 개발자는 오류를 조기에 포착하고 코드 변경 사항이 사용자에게 빠르고 안전하게 전달되도록 할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/09/04/info-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[HTTP] POST와 GET 차이점 및 사용 시기</title>
      <link>http://hgko1207.github.io/2023/09/03/info-2/</link>
      <guid>http://hgko1207.github.io/2023/09/03/info-2/</guid>
      <pubDate>Sun, 03 Sep 2023 13:37:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;HTTP&lt;/strong&gt;(Hypertext Transfer Protocol)는 인터넷을 통해 데이터를 전송하는 데 사용되는 프로토콜입니다. 다양한 HTTP 방법이 있지만 가장 일반적으로 사용되는 두 가지 방법은 HTTP POST와 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>HTTP</strong>(Hypertext Transfer Protocol)는 인터넷을 통해 데이터를 전송하는 데 사용되는 프로토콜입니다. 다양한 HTTP 방법이 있지만 가장 일반적으로 사용되는 두 가지 방법은 HTTP POST와 HTTP GET입니다. 이러한 방법에는 서로 다른 목적이 있으므로 효과적인 웹 애플리케이션을 개발하려면 각 방법을 언제 사용해야 하는지 아는 것이 필수적입니다.</p><p>이 글에서는 HTTP POST와 HTTP GET의 차이점을 살펴보고 각 방법을 사용하는 경우의 예를 제공합니다. 또한 웹 애플리케이션에서 이러한 방법을 사용하는 몇 가지 모범 사례에 대해서도 알아보겠습니다.</p><h2 id="http-post와-get이란-무엇입니까"><a class="markdownIt-Anchor" href="#http-post와-get이란-무엇입니까"></a> HTTP POST와 GET이란 무엇입니까?</h2><p>HTTP POST 및 HTTP GET은 웹 서버에 데이터를 보내는 데 사용되는 두 가지 방법입니다. 두 방법의 주요 차이점은 데이터가 전송되는 방식입니다.</p><p>HTTP GET은 URL의 일부로 데이터를 보내는 반면, HTTP POST는 HTTP 요청 본문의 일부로 데이터를 보냅니다. 다음은 HTTP GET 요청의 예입니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://example.com?param1=value1&amp;param2=value2</span><br></pre></td></tr></table></figure><p>다음은 HTTP POST 요청의 예입니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/submit-form</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: example.com</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 33</span><br><span class="line"></span><br><span class="line">param1=value1&amp;param2=value2&amp;param3=value3</span><br></pre></td></tr></table></figure><p>HTTP GET 요청에서 데이터는 URL의 일부로 전송됩니다. HTTP POST 요청에서 데이터는 요청 본문에 key-value 쌍 집합으로 전송됩니다.</p><h2 id="http-get을-사용하는-경우"><a class="markdownIt-Anchor" href="#http-get을-사용하는-경우"></a> HTTP GET을 사용하는 경우</h2><p>HTTP GET은 일반적으로 서버가 데이터 검색만 예상하고 서버에 데이터를 보낼 필요가 없을 때 사용됩니다. 요청된 데이터가 민감하지 않거나 비공개인 경우에도 유용합니다. 다음은 HTTP GET을 사용하는 경우에 대한 몇 가지 예입니다.</p><ul><li>서버에서 데이터 검색</li><li>데이터 필터링</li><li>데이터 페이지 매기기</li><li>데이터 검색 중</li><li>정적 리소스 가져오기(예: 이미지, CSS)</li></ul><h2 id="http-post를-사용하는-경우"><a class="markdownIt-Anchor" href="#http-post를-사용하는-경우"></a> HTTP POST를 사용하는 경우</h2><p>HTTP POST는 일반적으로 서버가 데이터를 생성, 업데이트 또는 삭제해야 할 때 사용됩니다. URL에 표시되어서는 안 되는 대량의 데이터나 민감한 정보를 보낼 때도 유용합니다. 다음은 HTTP POST를 사용하는 경우에 대한 몇 가지 예입니다.</p><ul><li>서버에 새 리소스 생성</li><li>서버의 기존 리소스 업데이트</li><li>서버에서 리소스 삭제</li><li>많은 양의 데이터가 포함된 양식 제출</li><li>파일 업로드</li></ul><h2 id="모범-사례"><a class="markdownIt-Anchor" href="#모범-사례"></a> 모범 사례</h2><p>HTTP GET 또는 HTTP POST를 사용할 때 웹 애플리케이션이 안전하고 효율적인지 확인하기 위해 몇 가지 모범 사례를 따르는 것이 중요합니다. 따라야 할 몇 가지 모범 사례는 다음과 같습니다.</p><ul><li>안전한 멱등성 작업을 위해 HTTP GET을 사용하세요.</li><li>서버의 데이터를 수정하는 안전하지 않은 작업에는 HTTP POST를 사용합니다.</li><li>HTTPS를 사용하여 인터넷을 통해 전송되는 데이터를 암호화합니다.</li><li>단일 요청으로 전송되는 데이터의 양을 제한합니다.</li><li>주입 공격을 방지하기 위해 모든 사용자 입력을 검증합니다.</li><li>SQL 삽입 공격을 방지하려면 매개변수화된 쿼리를 사용하세요.</li></ul><blockquote><p>멱등법칙 또는 멱등성은 수학이나 전산학에서 연산의 한 성질을 나타내는 것으로, 연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질을 의미한다. <a href="https://ko.wikipedia.org/wiki/%EB%A9%B1%EB%93%B1%EB%B2%95%EC%B9%99" target="_blank" rel="noopener">위키백과</a></p></blockquote><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>HTTP POST 및 HTTP GET은 웹 애플리케이션에서 사용되는 두 가지 중요한 HTTP 방법입니다. 안전하고 효율적인 웹 애플리케이션을 개발하려면 각 방법을 언제 사용해야 하는지 아는 것이 중요합니다. 모범 사례를 따르고 이러한 방법을 적절하게 사용하면 안정적이고 확장 가능하며 안전한 웹 애플리케이션을 만들 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/09/03/info-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular 패키지 생성 및 NPM에 게시</title>
      <link>http://hgko1207.github.io/2023/09/02/angular-20/</link>
      <guid>http://hgko1207.github.io/2023/09/02/angular-20/</guid>
      <pubDate>Sat, 02 Sep 2023 05:13:46 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular 패키지&lt;/strong&gt;를 만드는 것은 여러 프로젝트에서 코드를 재사용하는 효율적인 방법이므로 시간과 노력을 절약할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 Angular 패키지를 생성하고 이를 NPM 레지스트리에 게시하
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular 패키지</strong>를 만드는 것은 여러 프로젝트에서 코드를 재사용하는 효율적인 방법이므로 시간과 노력을 절약할 수 있습니다.</p><p>이 글에서는 Angular 패키지를 생성하고 이를 NPM 레지스트리에 게시하는 방법에 대해 설명합니다. 새 패키지를 만들고, 새 모듈을 만들고, 패키지에 코드를 추가하는 데 필요한 단계를 진행하겠습니다.</p><h2 id="1단계-프로젝트-설정"><a class="header-anchor" href="#1단계-프로젝트-설정">¶</a>1단계: 프로젝트 설정</h2><p>첫 번째 단계는 프로젝트를 설정하는 것입니다. Angular CLI를 사용하여 새 프로젝트를 생성하겠습니다. 터미널을 열고 다음 명령을 실행하십시오.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new my-package --create-application=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>그러면 애플리케이션 없이 새로운 Angular 프로젝트가 생성됩니다. 이제 다음 명령을 사용하여 프로젝트 폴더로 이동할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-package</span><br></pre></td></tr></table></figure><h2 id="2단계-새-모듈-만들기"><a class="header-anchor" href="#2단계-새-모듈-만들기">¶</a>2단계: 새 모듈 만들기</h2><p>다음 단계는 패키지에 대한 새 모듈을 만드는 것입니다. 다음 명령을 실행하여 새 모듈을 만듭니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g module my-module</span><br></pre></td></tr></table></figure><p>그러면 프로젝트에 새 모듈이 생성됩니다. 이제 모듈에 코드를 추가할 수 있습니다.</p><h2 id="3단계-모듈에-코드-추가"><a class="header-anchor" href="#3단계-모듈에-코드-추가">¶</a>3단계: 모듈에 코드 추가</h2><p>이제 모듈에 코드를 추가할 수 있습니다. 다음 명령을 사용하여 새 컴포넌트를 만듭니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g component my-component</span><br></pre></td></tr></table></figure><p>그러면 모듈에 새 컴포넌트가 생성됩니다. 이제 컴포넌트에 코드를 추가할 수 있습니다.</p><h2 id="4단계-패키지-빌드-Build"><a class="header-anchor" href="#4단계-패키지-빌드-Build">¶</a>4단계: 패키지 빌드(Build)</h2><p>다음 단계는 패키지를 빌드하는 것입니다. 다음 명령을 실행하여 패키지를 빌드합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build my-package</span><br></pre></td></tr></table></figure><p>그러면 프로젝트 디렉터리에 <code>dist</code> 라는 새 폴더가 생성됩니다.</p><h2 id="5단계-패키지-게시-Publish"><a class="header-anchor" href="#5단계-패키지-게시-Publish">¶</a>5단계: 패키지 게시(Publish)</h2><p>마지막 단계는 NPM에 패키지를 게시하는 것입니다. NPM 계정이 없다면 무료로 만들 수 있습니다. 다음 명령을 실행하여 NPM 계정에 로그인하세요.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>NPM 사용자 이름, 비밀번호, 이메일 주소를 입력하세요. 로그인한 후 다음 명령을 실행하여 패키지를 게시합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish dist/my-package-0.0.1.tgz</span><br></pre></td></tr></table></figure><p>그러면 NPM 레지스트리에 패키지가 게시됩니다.</p><h2 id="결론"><a class="header-anchor" href="#결론">¶</a>결론</h2><p>이 글에서는 Angular 패키지를 생성하고 이를 NPM 레지스트리에 게시하는 방법에 대해 설명했습니다. 새 패키지를 만들고, 새 모듈을 만들고, 패키지에 코드를 추가하는 데 필요한 단계를 거쳤습니다. NPM에 패키지를 게시한 후에는 여러 프로젝트에서 코드를 재사용하여 시간과 노력을 절약할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/09/02/angular-20/#disqus_thread</comments>
    </item>
    
    <item>
      <title>사용자 정의 스크립트로 Angular 워크플로우(Workflow) 자동화</title>
      <link>http://hgko1207.github.io/2023/09/01/angular-19/</link>
      <guid>http://hgko1207.github.io/2023/09/01/angular-19/</guid>
      <pubDate>Fri, 01 Sep 2023 02:27:04 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;는 확장 가능한 웹 애플리케이션을 구축하기 위한 강력한 프레임워크입니다. 그러나 이를 사용하는 것은 때로는 시간이 많이 걸리고 지루할 수 있습니다. 특히 반복적인 작업의 경우 더욱 그렇습니다. 다행히 약
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong>는 확장 가능한 웹 애플리케이션을 구축하기 위한 강력한 프레임워크입니다. 그러나 이를 사용하는 것은 때로는 시간이 많이 걸리고 지루할 수 있습니다. 특히 반복적인 작업의 경우 더욱 그렇습니다. 다행히 약간의 자동화를 통해 작업 흐름을 간소화하고 일반적인 작업에 소요되는 시간을 절약할 수 있습니다.</p><p>이 글에서는 사용자 정의 스크립트(Custom Scripts)를 사용하여 Angular 워크플로를 자동화하는 방법을 살펴보겠습니다. 몇 가지 일반적인 사용 사례를 다루고 시작하는 데 도움이 되는 몇 가지 코드 예제를 알아보겠습니다.</p><h2 id="환경-설정"><a class="markdownIt-Anchor" href="#환경-설정"></a> 환경 설정</h2><p>사용자 정의 스크립트를 시작하기 전에 환경을 설정해야 합니다. 먼저 시스템에 Node.js와 NPM이 설치되어 있는지 확인하세요. 공식 웹사이트에서 최신 버전의 Node.js를 다운로드할 수 있습니다.</p><p>다음으로 Angular 프로젝트를 생성해야 합니다. 아직 수행하지 않은 경우 터미널에서 다음 명령을 실행하여 새 프로젝트를 생성할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new my-app</span><br></pre></td></tr></table></figure><p>프로젝트를 설정한 후에는 사용자 정의 스크립트를 생성하여 작업 흐름을 자동화할 수 있습니다.</p><h2 id="일반적인-사용-사례"><a class="markdownIt-Anchor" href="#일반적인-사용-사례"></a> 일반적인 사용 사례</h2><p>다음은 Angular 프로젝트의 사용자 정의 스크립트에 대한 몇 가지 일반적인 사용 사례입니다.</p><h3 id="1-애플리케이션-구축-및-배포"><a class="markdownIt-Anchor" href="#1-애플리케이션-구축-및-배포"></a> 1. 애플리케이션 구축 및 배포</h3><p>애플리케이션을 구축하고 배포하는 것은 시간이 많이 걸리는 프로세스일 수 있으며, 특히 수동으로 수행하는 경우 더욱 그렇습니다. 사용자 정의 스크립트를 사용하면 이 프로세스를 자동화하고 시간을 절약할 수 있습니다.</p><p>다음은 애플리케이션을 빌드하고 원격 서버에 배포하는 예제 스크립트입니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ng build --prod</span><br><span class="line">scp -r dist/my-app/* user@remote-server:/usr/share/nginx/html</span><br></pre></td></tr></table></figure><p>이 스크립트는 production 모드에서 Angular 애플리케이션을 구축한 다음 **SCP(Secure Copy)**를 사용하여 원격 서버에 배포합니다.</p><blockquote><p>시큐어 카피(Secure copy) 또는 SCP는 로컬 호스트와 원격 호스트 간 또는 두 개의 원격 호스트 간에 컴퓨터 파일을 안전하게 전송하는 수단이다. 시큐어 셸 프로토콜 기반이다. SCP라는 용어는 SCP 프로토콜 또는 SCP 프로그램 중 하나를 가리킬 수 있다. <a href="https://ko.wikipedia.org/wiki/%EC%8B%9C%ED%81%90%EC%96%B4_%EC%B9%B4%ED%94%BC" target="_blank" rel="noopener">위키백과</a></p></blockquote><h3 id="2-linters-and-code-formatters-실행"><a class="markdownIt-Anchor" href="#2-linters-and-code-formatters-실행"></a> 2. Linters and Code Formatters 실행</h3><p>린터와 코드 포맷터는 코드 품질과 일관성을 유지하는 데 필수적인 도구입니다. 그러나 수동으로 실행하는 것은 번거로울 수 있습니다. 사용자 정의 스크립트를 사용하면 이 프로세스를 자동화하고 코드가 항상 올바른 형식으로 지정되고 린트되도록 할 수 있습니다.</p><p>다음은 프로젝트에서 Prettier 코드 포맷터와 ESLint 린터를 실행하는 예제 스크립트입니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">npm run format</span><br><span class="line">npm run lint</span><br></pre></td></tr></table></figure><p>이 스크립트는 <code>npm run format</code> 및 <code>npm run lint</code> 명령을 실행합니다. 이 명령은 각각 Prettier로 코드 형식을 지정하고 ESLint로 lint합니다.</p><h3 id="3테스트-실행"><a class="markdownIt-Anchor" href="#3테스트-실행"></a> 3.테스트 실행</h3><p>테스트 실행은 개발 프로세스에서 중요한 부분이지만 수동으로 수행해야 하는 경우 시간이 많이 걸릴 수 있습니다. 사용자 정의 스크립트를 사용하면 이 프로세스를 자동화하고 단일 명령으로 테스트를 실행할 수 있습니다.</p><p>다음은 테스트를 실행하고 결과를 콘솔에 출력하는 예제 스크립트입니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ng <span class="built_in">test</span> --watch=<span class="literal">false</span> --code-coverage=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>이 스크립트는 <code>ng test</code> 명령을 사용하여 테스트를 실행하고 결과를 콘솔에 출력합니다. 또한 프로젝트에 대한 코드 적용 범위 보고서도 생성됩니다.</p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>사용자 정의 스크립트를 사용하면 Angular 프로젝트의 일반적인 작업을 자동화하고 많은 시간과 번거로움을 줄일 수 있습니다. 이 문서에서는 몇 가지 일반적인 사용 사례를 다루고 시작하는 데 도움이 되는 몇 가지 코드 예제를 제공했습니다.</p><p>항상 스크립트를 철저히 테스트하고 주의해서 사용하세요. 약간의 자동화를 통해 Angular 워크플로를 한 단계 더 발전시킬 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/09/01/angular-19/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] Http Client 사용 방법</title>
      <link>http://hgko1207.github.io/2023/08/31/angular-18/</link>
      <guid>http://hgko1207.github.io/2023/08/31/angular-18/</guid>
      <pubDate>Thu, 31 Aug 2023 08:06:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Angular의 &lt;code&gt;HttpClient&lt;/code&gt; 모듈은 HTTP 요청을 만들고 응답을 처리하는 간단한 방법을 제공합니다. &lt;code&gt;@angular/common/http&lt;/code&gt; 패키지의 일부이며 &lt;code&gt;XMLHttpReques
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Angular의 <code>HttpClient</code> 모듈은 HTTP 요청을 만들고 응답을 처리하는 간단한 방법을 제공합니다. <code>@angular/common/http</code> 패키지의 일부이며 <code>XMLHttpRequest</code> API 위에 구축되었습니다.</p><p>이 글에서는 <code>HttpClient</code> 모듈의 다양한 기능을 자세히 살펴보고 이를 사용하여 Angular에서 HTTP 요청을 만드는 방법을 알아봅니다.</p><h2 id="Getting-started"><a class="header-anchor" href="#Getting-started">¶</a>Getting started</h2><p>Angular 애플리케이션에서 <code>HttpClient</code> 모듈을 사용하려면 루트 모듈(일반적으로 <code>app.module.ts</code>)에서 <code>HttpClientModule</code> 을 가져와야 합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClientModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [HttpClientModule],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>HttpClientModule</code> 을 가져오면 이제 <code>HttpClient</code> 서비스를 사용하여 HTTP 요청을 할 수 있습니다.</p><h2 id="HTTP-요청하기"><a class="header-anchor" href="#HTTP-요청하기">¶</a>HTTP 요청하기</h2><p><code>HttpClient</code> 서비스를 사용하여 HTTP 요청을 만들려면 <code>get()</code>, <code>post()</code>, <code>put()</code>, <code>delete()</code> 및 <code>patch()</code> 메서드 중 하나를 호출하면 됩니다. 이 메소드는 요청 완료 시 응답을 내보내는 <code>Observable</code> 을 반환합니다.</p><p>다음은 <code>HttpClient</code> 서비스를 사용하여 <code>GET</code> 요청을 만드는 방법에 대한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HttpClient &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getData(): Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.get&lt;<span class="built_in">any</span>&gt;(<span class="string">'https://api.example.com/data'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 예에서는 <code>HttpClient</code> 서비스를 <code>ApiService</code> 라는 서비스에 주입합니다. 그런 다음 <code>any</code> 유형의 <code>Observable</code> 을 반환하는 <code>getData()</code> 라는 메서드를 정의합니다. <code>HttpClient</code> 서비스의 <code>get()</code> 메서드는 지정된 URL에 대한 <code>GET</code> 요청을 만드는 데 사용됩니다.</p><p>마찬가지로, 다른 HTTP 메소드를 사용하여 요청을 수행하고 적절한 데이터를 메소드의 두 번째 인수로 전달할 수 있습니다.</p><h2 id="HTTP-응답-처리"><a class="header-anchor" href="#HTTP-응답-처리">¶</a>HTTP 응답 처리</h2><p><code>HttpClient</code> 서비스는 도착 시 응답을 내보내는 <code>Observable</code> 을 반환합니다. 응답을 처리하기 위해 <code>Observable</code> 의 <code>subscribe()</code> 메소드를 사용할 수 있습니다.</p><p>다음은 <code>getData()</code> 메서드의 응답을 처리하는 방법에 대한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.apiService.getData().subscribe(</span><br><span class="line">  (response) =&gt; &#123;</span><br><span class="line">    <span class="comment">// handle the response here</span></span><br><span class="line">  &#125;,</span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    <span class="comment">// handle the error here</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>위의 예에서는 <code>ApiService</code> 서비스의 <code>getData()</code> 메소드를 호출하고 <code>Observable</code> 의 <code>subscribe()</code> 메소드를 사용하여 응답을 구독합니다. <code>subscribe()</code> 메서드의 첫 번째 콜백은 응답이 도착할 때 호출되고, 두 번째 콜백은 오류가 있을 때 호출됩니다.</p><h2 id="HTTP-헤더"><a class="header-anchor" href="#HTTP-헤더">¶</a>HTTP 헤더</h2><p><code>HttpHeaders</code> 클래스의 <code>set()</code> 메서드를 사용하여 요청에 대한 HTTP 헤더를 설정할 수도 있습니다. <code>Authorization</code> 헤더를 설정하는 방법의 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HttpClient, HttpHeaders &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getData(): Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> headers = <span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">      Authorization: <span class="string">'Bearer my-token'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.get&lt;<span class="built_in">any</span>&gt;(<span class="string">'https://api.example.com/data'</span>, &#123; headers &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 예에서는 <code>HttpHeaders</code> 클래스의 새 인스턴스를 생성하고 <code>Authorization</code> 헤더를 <code>Bearer my-token</code> 으로 설정합니다. 그런 다음 헤더 개체를 <code>HttpClient</code> 서비스의 <code>get()</code> 메서드에 대한 두 번째 인수로 전달합니다.</p><h2 id="Query-parameters"><a class="header-anchor" href="#Query-parameters">¶</a>Query parameters</h2><p><code>HttpParams</code> 클래스를 사용하여 HTTP 요청에 쿼리 매개변수를 전달할 수도 있습니다. 쿼리 매개변수를 전달하는 방법의 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HttpClient, HttpParams &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getData(page: <span class="built_in">number</span>, limit: <span class="built_in">number</span>): Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> params = <span class="keyword">new</span> HttpParams();</span><br><span class="line">    params = params.append(<span class="string">'page'</span>, page.toString());</span><br><span class="line">    params = params.append(<span class="string">'limit'</span>, limit.toString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.get&lt;<span class="built_in">any</span>&gt;(<span class="string">'https://api.example.com/data'</span>, &#123; params &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 예에서는 <code>HttpParams</code> 클래스의 새 인스턴스를 만들고 <code>append()</code> 메서드를 사용하여 <code>page</code> 및 <code>limit</code> 매개변수를 여기에 추가합니다. 그런 다음 <code>params</code> 개체를 <code>HttpClient</code> 서비스의 <code>get()</code> 메서드에 대한 두 번째 인수로 전달합니다.</p><h2 id="오류-처리"><a class="header-anchor" href="#오류-처리">¶</a>오류 처리</h2><p>HTTP 요청을 할 때 오류를 적절하게 처리하는 것이 중요합니다. <code>HttpClient</code> 서비스는 <code>rxjs</code> 라이브러리의 <code>catchError()</code> 연산자를 사용하여 오류를 처리하는 방법을 제공합니다.</p><p>다음은 <code>getData()</code> 메서드에서 오류를 처리하는 방법에 대한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HttpClient, HttpErrorResponse &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; catchError &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; throwError &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getData(): Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.get&lt;<span class="built_in">any</span>&gt;(<span class="string">'https://api.example.com/data'</span>).pipe(</span><br><span class="line">      catchError(<span class="function">(<span class="params">error: HttpErrorResponse</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> errorMessage = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (error.error <span class="keyword">instanceof</span> ErrorEvent) &#123;</span><br><span class="line">          <span class="comment">// client-side error</span></span><br><span class="line">          errorMessage = <span class="string">`Error: <span class="subst">$&#123;error.error.message&#125;</span>`</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// server-side error</span></span><br><span class="line">          errorMessage = <span class="string">`Error Code: <span class="subst">$&#123;error.status&#125;</span>\nMessage: <span class="subst">$&#123;error.message&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.error(errorMessage);</span><br><span class="line">        <span class="keyword">return</span> throwError(errorMessage);</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 예에서는 <code>rxjs</code> 라이브러리의 <code>catchError()</code> 연산자를 사용하여 오류를 처리합니다. 오류가 발생하면 <code>catchError()</code> 연산자는 오류를 발생시키고 Observable 체인을 중지합니다. 그런 다음 <code>rxjs</code> 라이브러리의 <code>throwError()</code> 함수를 사용하여 오류를 내보내고 Observable 체인을 계속합니다.</p><p>다음은 <code>HttpClient</code> 모듈의 많은 기능을 사용하는 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClient, HttpHeaders, HttpErrorResponse &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable, throwError &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; catchError &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span><br><span class="line">  <span class="keyword">private</span> baseUrl = <span class="string">'https://example.com/api'</span>;</span><br><span class="line">  <span class="keyword">private</span> headers = <span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> handleError(error: HttpErrorResponse) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.error <span class="keyword">instanceof</span> ErrorEvent) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'An error occurred:'</span>, error.error.message);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`Backend returned code <span class="subst">$&#123;error.status&#125;</span>, `</span> + <span class="string">`body was: <span class="subst">$&#123;error.error&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> throwError(<span class="string">'Something bad happened; please try again later.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> getAuthHeaders() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">      Authorization: <span class="string">`Bearer <span class="subst">$&#123;localStorage.getItem(<span class="string">'access_token'</span>)&#125;</span>`</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">get</span>&lt;T&gt;(path: <span class="built_in">string</span>): Observable&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http</span><br><span class="line">      .get&lt;T&gt;(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.baseUrl&#125;</span><span class="subst">$&#123;path&#125;</span>`</span>, &#123;</span><br><span class="line">        headers: <span class="keyword">this</span>.getAuthHeaders(),</span><br><span class="line">      &#125;)</span><br><span class="line">      .pipe(catchError(<span class="keyword">this</span>.handleError));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> post&lt;T&gt;(path: <span class="built_in">string</span>, data: <span class="built_in">any</span>): Observable&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http</span><br><span class="line">      .post&lt;T&gt;(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.baseUrl&#125;</span><span class="subst">$&#123;path&#125;</span>`</span>, data, &#123;</span><br><span class="line">        headers: <span class="keyword">this</span>.getAuthHeaders(),</span><br><span class="line">      &#125;)</span><br><span class="line">      .pipe(catchError(<span class="keyword">this</span>.handleError));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> put&lt;T&gt;(path: <span class="built_in">string</span>, data: <span class="built_in">any</span>): Observable&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http</span><br><span class="line">      .put&lt;T&gt;(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.baseUrl&#125;</span><span class="subst">$&#123;path&#125;</span>`</span>, data, &#123;</span><br><span class="line">        headers: <span class="keyword">this</span>.getAuthHeaders(),</span><br><span class="line">      &#125;)</span><br><span class="line">      .pipe(catchError(<span class="keyword">this</span>.handleError));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">delete</span>&lt;T&gt;(path: <span class="built_in">string</span>): Observable&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http</span><br><span class="line">      .delete&lt;T&gt;(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.baseUrl&#125;</span><span class="subst">$&#123;path&#125;</span>`</span>, &#123;</span><br><span class="line">        headers: <span class="keyword">this</span>.getAuthHeaders(),</span><br><span class="line">      &#125;)</span><br><span class="line">      .pipe(catchError(<span class="keyword">this</span>.handleError));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTP-요청-테스트"><a class="header-anchor" href="#HTTP-요청-테스트">¶</a>HTTP 요청 테스트</h2><p><code>@angular/common/http/testing</code> 모듈은 <code>HttpClient</code> 서비스로 생성된 HTTP 요청을 테스트하기 위한 유틸리티 세트를 제공합니다.</p><p>이 모듈에서 제공하는 주요 클래스는 <code>HttpTestingController</code> 입니다. 이 클래스를 사용하여 HTTP 요청 및 응답을 모의하고 테스트 중인 애플리케이션에서 올바른 요청이 이루어졌는지 확인할 수 있습니다.</p><p><code>HttpTestingController</code> 를 사용하려면 먼저 테스트 케이스에 삽입해야 합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TestBed &#125; <span class="keyword">from</span> <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClientTestingModule, HttpTestingController &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http/testing'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'MyComponent'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> httpTestingController: HttpTestingController;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      imports: [HttpClientTestingModule],</span><br><span class="line">      providers: [MyComponent],</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    httpTestingController = TestBed.inject(HttpTestingController);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Mocking-HTTP-Requests"><a class="header-anchor" href="#Mocking-HTTP-Requests">¶</a>Mocking HTTP Requests</h3><p>HTTP 요청을 모의하려면 <code>HttpTestingController</code> 인스턴스에서 <code>ExpectOne()</code> 메서드를 호출하여 URL 또는 <code>HttpRequest</code> 객체를 전달할 수 있습니다. 이 메소드는 요청에 대한 응답을 제어하는 데 사용할 수 있는 <code>TestRequest</code> 객체를 반환합니다.</p><p>다음은 <code>ExpectOne()</code> 을 사용하여 HTTP GET 요청을 모의하는 방법에 대한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should make an HTTP GET request'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> expectedData = &#123; id: <span class="number">1</span>, name: <span class="string">'John Doe'</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'/api/user/1'</span>;</span><br><span class="line"></span><br><span class="line">  myComponent.getUser(<span class="number">1</span>).subscribe(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    expect(data).toEqual(expectedData);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> req = httpTestingController.expectOne(url);</span><br><span class="line">  expect(req.request.method).toEqual(<span class="string">'GET'</span>);</span><br><span class="line">  req.flush(expectedData);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>MyComponent</code> 인스턴스에서 <code>getUser()</code> 메서드를 테스트하고 있습니다. 이 메서드는 <code>/api/user/1</code> 에 대한 HTTP GET 요청을 만들고 응답 데이터를 내보내는 <code>Observable</code> 을 반환합니다.</p><p>이 메소드를 테스트하기 위해 <code>getUser()</code> 를 호출하고 그것이 반환하는 <code>Observable</code> 을 구독합니다. 그런 다음 요청과 동일한 URL을 사용하여 <code>httpTestingController.expectOne()</code> 을 호출하고 반환된 <code>TestRequest</code> 객체를 사용하여 예상 데이터가 포함된 응답을 flush 합니다.</p><h3 id="HTTP-요청-확인"><a class="header-anchor" href="#HTTP-요청-확인">¶</a>HTTP 요청 확인</h3><p><code>HttpTestingController</code> 를 사용하여 HTTP 요청을 모의한 후 해당 메서드를 사용하여 예상되는 요청이 테스트 중인 애플리케이션에서 이루어졌는지 확인할 수 있습니다.</p><p>예를 들어, <code>verify()</code> 메서드를 사용하여 예기치 않은 요청이 발생하지 않았는지 확인할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should make an HTTP GET request'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  myComponent.getUser(<span class="number">1</span>).subscribe(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    expect(data).toEqual(expectedData);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> req = httpTestingController.expectOne(<span class="string">'/api/user/1'</span>);</span><br><span class="line">  req.flush(expectedData);</span><br><span class="line"></span><br><span class="line">  httpTestingController.verify();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>httpTestingController.verify()</code> 를 사용하여 테스트 중인 애플리케이션에서 다른 요청이 이루어지지 않았는지 확인합니다. 다른 요청이 이루어진 경우 이 메서드는 오류를 발생시킵니다.</p><p><code>expectNone()</code> 메서드를 사용하여 요청이 이루어지지 않았는지 확인할 수도 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should not make an HTTP GET request with incorrect ID'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  myComponent.getUser(<span class="number">2</span>).subscribe(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    expect(data).toBeUndefined();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  httpTestingController.expectNone(<span class="string">'/api/user/2'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>getUser()</code> 메서드가 <code>/api/user/2</code> 에 HTTP 요청을 하지 않는지 테스트하고 있습니다. 요청과 동일한 URL로 <code>httpTestingController.expectNone()</code> 을 호출하고 요청이 없으므로 테스트가 통과됩니다.</p><h2 id="결론"><a class="header-anchor" href="#결론">¶</a>결론</h2><p>Angular의 <code>HttpClient</code> 모듈의 다양한 기능을 살펴보았습니다. HTTP 요청을 작성하고 응답을 처리하고, HTTP 헤더 및 쿼리 매개변수를 설정하고, 오류를 처리하는 방법을 배웠습니다. <code>HttpClient</code> 모듈은 Angular 애플리케이션에서 HTTP 요청을 만들기 위한 강력하고 사용하기 쉬운 API를 제공합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/08/31/angular-18/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JavaScript] Array Methods</title>
      <link>http://hgko1207.github.io/2023/08/30/js-dev-9/</link>
      <guid>http://hgko1207.github.io/2023/08/30/js-dev-9/</guid>
      <pubDate>Wed, 30 Aug 2023 04:43:21 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;는 배열 작업을 위한 많은 강력한 도구를 제공하는 다용도 언어입니다. 가장 일반적으로 사용되는 도구 중 하나는 배열을 조작하고 변환하기 위한 다양한 메서드를 제공하는 Array 개체입니다. 이 글에
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>JavaScript</strong>는 배열 작업을 위한 많은 강력한 도구를 제공하는 다용도 언어입니다. 가장 일반적으로 사용되는 도구 중 하나는 배열을 조작하고 변환하기 위한 다양한 메서드를 제공하는 Array 개체입니다. 이 글에서는 JavaScript에서 가장 중요하고 유용한 배열 메서드 중 일부를 자세히 살펴보겠습니다.</p><h2 id="foreach"><a class="markdownIt-Anchor" href="#foreach"></a> forEach()</h2><p><code>forEach()</code> 메서드는 배열을 반복하고 각 요소에 대해 콜백 함수를 실행합니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">numbers.forEach(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">number</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="map"><a class="markdownIt-Anchor" href="#map"></a> map()</h2><p><code>map()</code> 메서드는 배열의 각 요소에 콜백 함수를 적용하여 새 배열을 만듭니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doubledNumbers = numbers.map(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">number</span> * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doubledNumbers);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 4, 6, 8, 10]</span><br></pre></td></tr></table></figure><h2 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> filter()</h2><p><code>filter()</code> 메서드는 특정 테스트를 통과한 모든 요소가 포함된 새 배열을 만듭니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> evenNumbers = numbers.filter(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">number</span> % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(evenNumbers);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 4]</span><br></pre></td></tr></table></figure><h2 id="reduce"><a class="markdownIt-Anchor" href="#reduce"></a> reduce()</h2><p><code>reduce()</code> 메서드는 배열의 각 요소에 콜백 함수를 적용하여 배열을 단일 값으로 줄입니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = numbers.reduce(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><h2 id="find"><a class="markdownIt-Anchor" href="#find"></a> find()</h2><p><code>find()</code> 메소드는 배열에서 특정 조건을 만족하는 첫 번째 요소의 값을 반환합니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstEvenNumber = numbers.find(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">number</span> % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstEvenNumber);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="findindex"><a class="markdownIt-Anchor" href="#findindex"></a> findIndex()</h2><p><code>findIndex()</code> 메소드는 배열에서 특정 조건을 만족하는 첫 번째 요소의 인덱스를 반환합니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstEvenNumberIndex = numbers.findIndex(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">number</span> % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstEvenNumberIndex);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="some"><a class="markdownIt-Anchor" href="#some"></a> some()</h2><p><code>some()</code> 메서드는 배열의 요소 중 하나 이상이 특정 조건을 만족하는지 확인합니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hasEvenNumbers = numbers.some(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">number</span> % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hasEvenNumbers);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="every"><a class="markdownIt-Anchor" href="#every"></a> every()</h2><p><code>every()</code> 메소드는 배열의 모든 요소가 특정 기준을 충족하는지 확인합니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allEven = numbers.every(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">number</span> % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(allEven);</span><br></pre></td></tr></table></figure><h2 id="sort"><a class="markdownIt-Anchor" href="#sort"></a> sort()</h2><p><code>sort()</code> 메서드는 배열의 요소를 정렬합니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sortedFruits = fruits.sort();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortedFruits);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"orange"</span>]</span><br></pre></td></tr></table></figure><h2 id="includes"><a class="markdownIt-Anchor" href="#includes"></a> includes()</h2><p><code>include()</code> 메소드는 배열에 특정 값이 포함되어 있는지 확인합니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hasNumberThree = numbers.includes(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hasNumberThree);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="flat"><a class="markdownIt-Anchor" href="#flat"></a> flat()</h2><p><code>flat()</code> 메서드는 모든 하위 배열 요소가 지정된 깊이까지 반복적으로 연결되어 있는 새 배열을 만듭니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flattenedNumbers = numbers.flat(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flattenedNumbers);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure><h2 id="flatmap"><a class="markdownIt-Anchor" href="#flatmap"></a> flatMap()</h2><p><code>flatMap()</code> 메서드는 먼저 매핑 함수를 사용하여 각 요소를 매핑한 다음 결과를 새 배열로 평면화합니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doubledAndFlattenedNumbers = numbers.flatMap(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="built_in">number</span> * <span class="number">2</span>];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doubledAndFlattenedNumbers);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 4, 6, 8, 10]</span><br></pre></td></tr></table></figure><h2 id="from"><a class="markdownIt-Anchor" href="#from"></a> from()</h2><p><code>from()</code> 메서드는 배열 유사 객체 또는 반복 가능 객체에서 새 배열을 만듭니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayLikeObject = &#123; <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span>, length: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArray = <span class="built_in">Array</span>.from(arrayLikeObject);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArray);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br></pre></td></tr></table></figure><h2 id="array-destructuring"><a class="markdownIt-Anchor" href="#array-destructuring"></a> Array Destructuring</h2><p>Array Destructuring 를 사용하면 배열에서 값을 추출하여 변수에 할당할 수 있습니다. 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a, b, c] = numbers;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br></pre></td></tr></table></figure><p>그러면 다음이 출력됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>이 글에서는 JavaScript 에서 가장 중요하고 유용한 Array 메소드 중 일부를 살펴보았습니다. 이러한 메서드는 배열 작업을 위한 강력한 도구를 제공하며 코드를 더욱 간결하고 표현력있게 만들 수 있습니다. 이러한 방법을 익히면 더욱 효율적이고 효과적인 JavaScript 개발자가 될 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/08/30/js-dev-9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] Error Handling</title>
      <link>http://hgko1207.github.io/2023/08/29/angular-17/</link>
      <guid>http://hgko1207.github.io/2023/08/29/angular-17/</guid>
      <pubDate>Tue, 29 Aug 2023 00:42:08 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Error Handling&lt;/strong&gt; 는 모든 애플리케이션의 필수적인 부분이며 Angular도 예외는 아닙니다. Angular 프레임워크는 다양한 시나리오에서 오류를 처리할 수 있는 강력한 도구 세트를 제공합니다.&lt;/p&gt;
&lt;p
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Error Handling</strong> 는 모든 애플리케이션의 필수적인 부분이며 Angular도 예외는 아닙니다. Angular 프레임워크는 다양한 시나리오에서 오류를 처리할 수 있는 강력한 도구 세트를 제공합니다.</p><p>이번 글에서는 Angular의 다양한 오류 유형과 이를 효과적으로 처리하는 방법을 살펴보겠습니다.</p><h2 id="Types-of-Errors-in-Angular">Types of Errors in Angular</h2><p>Angular 애플리케이션에서 발생할 수 있는 오류에는 주로 두 가지 유형이 있습니다.</p><ol><li>컴파일 시간 오류: 이러한 오류는 Angular 애플리케이션이 빌드되는 컴파일 단계에서 발생합니다. 컴파일 시간 오류는 일반적으로 코드의 구문 또는 논리적 오류를 나타내며 애플리케이션이 실행되지 못하게 합니다.</li><li>런타임 오류: 이러한 오류는 Angular 애플리케이션을 실행하는 동안 발생합니다. 런타임 오류는 네트워크 문제, 서버 오류, 코드의 논리적 오류 등 다양한 원인으로 인해 발생할 수 있습니다.</li></ol><h2 id="Handling-Compile-time-Errors">Handling Compile-time Errors</h2><p>컴파일 시간 오류는 일반적으로 쉽게 수정할 수 있으며 Angular CLI는 개발자가 문제를 신속하게 식별하는 데 도움이 되는 자세한 오류 메시지를 제공합니다. 오류 메시지에는 오류가 발생한 줄 번호와 파일 이름이 포함됩니다. 개발자는 오류 메시지를 사용하여 문제를 해결하고 애플리케이션을 다시 빌드할 수 있습니다.</p><h2 id="Handling-Runtime-Errors">Handling Runtime Errors</h2><p>런타임 오류는 컴파일 타임 오류보다 처리하기가 더 복잡합니다. 이러한 오류는 네트워크 문제나 서버 오류 등 다양한 이유로 인해 발생할 수 있습니다. 이러한 시나리오에서 애플리케이션은 오류를 적절하게 처리하고 사용자에게 유용한 피드백을 제공해야 합니다.</p><p>Angular는 <code>ErrorHandler</code> 클래스와 같은 런타임 오류를 처리하기 위한 내장 오류 처리기 세트를 제공합니다. <code>ErrorHandler</code> 클래스는 오류 처리를 위한 기본 구현을 제공하는 추상 클래스입니다. 개발자는 <code>ErrorHandler</code> 클래스를 확장하고 사용자에 맞게 오류 처리 로직을 구현할 수 있습니다.</p><h2 id="Custom-Error-Handling">Custom Error Handling</h2><p>개발자는 <code>ErrorHandler</code> 클래스를 사용하여 사용자에 맞게 오류 처리 로직을 구현할 수 있습니다. <code>ErrorHandler</code> 클래스에는 응용 프로그램에서 오류가 발생할 때 호출되는 <code>handlerError(error: any)</code> 라는 단일 메서드가 있습니다. 이 메서드는 오류 개체를 매개 변수로 사용하고 개발자에게 오류를 처리할 수 있는 기회를 제공합니다.</p><p>다음은 커스텀 오류 처리기 구현의 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ErrorHandler &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CustomErrorHandler <span class="keyword">implements</span> ErrorHandler &#123;</span><br><span class="line">  handleError(error: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="comment">// Implement custom error handling logic here</span></span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 예에서는 <code>ErrorHandler</code> 클래스를 implements 하고 <code>handlerError()</code> 메서드를 재정의하는 <code>CustomErrorHandler</code> 클래스를 만들었습니다. 이 예에서는 단순히 오류를 콘솔에 기록하지만 개발자는 사용자에게 친숙한 오류 메시지를 표시하는 등 사용자 지정 오류 처리 로직을 구현할 수 있습니다.</p><h2 id="Error-Interceptors">Error Interceptors</h2><p>Angular는 인터셉터를 사용하여 HTTP 응답을 가로채고 전역적으로 오류를 처리하는 메커니즘을 제공합니다. 인터셉터를 사용하면 개발자는 HTTP 응답이 호출 컴포넌트에 반환되기 전에 이를 가로챌 수 있습니다. 개발자는 인터셉터를 사용하여 오류를 전체적으로 처리하고 일관된 사용자 경험을 제공할 수 있습니다.</p><p>다음은 HTTP 오류 인터셉터의 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; catchError &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; throwError &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HttpErrorInterceptor <span class="keyword">implements</span> HttpInterceptor &#123;</span><br><span class="line">  intercept(request: HttpRequest&lt;<span class="built_in">any</span>&gt;, next: HttpHandler) &#123;</span><br><span class="line">    <span class="keyword">return</span> next.handle(request).pipe(</span><br><span class="line">      catchError(<span class="function">(<span class="params">error: HttpErrorResponse</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> errorMessage = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span> (error.error <span class="keyword">instanceof</span> ErrorEvent) &#123;</span><br><span class="line">          <span class="comment">// client-side error</span></span><br><span class="line">          errorMessage = <span class="string">`Error: <span class="subst">$&#123;error.error.message&#125;</span>`</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// server-side error</span></span><br><span class="line">          errorMessage = <span class="string">`Error Code: <span class="subst">$&#123;error.status&#125;</span>\nMessage: <span class="subst">$&#123;error.message&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.error(errorMessage);</span><br><span class="line">        <span class="keyword">return</span> throwError(errorMessage);</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClientModule, HTTP_INTERCEPTORS &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpErrorInterceptor &#125; <span class="keyword">from</span> <span class="string">'./http-error.interceptor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [AppComponent],</span><br><span class="line">  imports: [BrowserModule, HttpClientModule],</span><br><span class="line">  providers: [&#123; provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: <span class="literal">true</span> &#125;],</span><br><span class="line">  bootstrap: [AppComponent],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClient &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)="makeRequest()"&gt;Make Request&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;div *ngIf="error"&gt;&#123;&#123; error &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  error: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  makeRequest() &#123;</span><br><span class="line">    <span class="keyword">this</span>.http.get(<span class="string">'https://someURL.con/posts/1'</span>).subscribe(</span><br><span class="line">      (data) =&gt; <span class="built_in">console</span>.log(data),</span><br><span class="line">      (error) =&gt; (<span class="keyword">this</span>.error = error)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드에서는 HttpClient 서비스를 사용하여 API 에 GET 요청을 보냅니다. 요청이 성공하면 응답 데이터가 콘솔에 기록됩니다. 오류가 있는 경우 템플릿에 오류 메시지가 표시됩니다.</p><p><code>HttpErrorInterceptor</code> 를 사용하면 요청 중에 발생하는 모든 오류가 인터셉터에 의해 차단되어 처리됩니다. 오류 메시지는 콘솔에 기록되고 관찰 가능한 오류로 발생하며 컴포넌트에서 이를 포착하고 처리할 수 있습니다.</p><p>Angular 앱에서 오류 인터셉터를 사용하면 오류 처리 로직을 중앙 집중화하고 모든 HTTP 요청에서 오류를 처리하는 일관된 방법을 제공할 수 있습니다. 이를 통해 코드 유지 관리가 더 용이해지고 앱에 대한 사용자 경험이 더 좋아질 수 있습니다.</p><h2 id="결론">결론</h2><p>오류 처리는 강력하고 안정적인 애플리케이션을 구축하는 데 필수적인 부분입니다. Angular에는 <code>try/catch</code> 블록 사용, 컴포넌트 수준에서 오류 처리, 오류 인터셉터 사용 등 오류를 처리하는 다양한 방법이 있습니다. 포괄적인 오류 처리 전략을 구현하면 애플리케이션이 사용자에게 원활하고 오류 없는 환경을 제공하도록 할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/08/29/angular-17/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Node.js 와 TypeScript 콜백(callback) 지옥 피하는 방법</title>
      <link>http://hgko1207.github.io/2023/08/28/nodejs-5/</link>
      <guid>http://hgko1207.github.io/2023/08/28/nodejs-5/</guid>
      <pubDate>Mon, 28 Aug 2023 04:16:12 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt;는 Chrome의 V8 JavaScript 엔진을 기반으로 구축된 이벤트 중심의 non-blocking I/O 플랫폼입니다. 웹 서버를 포함하여 확장 가능한 네트워크 애플리케이션을 구축하는 데 널리 사용
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Node.js</strong>는 Chrome의 V8 JavaScript 엔진을 기반으로 구축된 이벤트 중심의 non-blocking I/O 플랫폼입니다. 웹 서버를 포함하여 확장 가능한 네트워크 애플리케이션을 구축하는 데 널리 사용됩니다.</p><p>이러한 애플리케이션을 구축할 때 콜백 지옥(callback hell) 문제가 발생할 수 있습니다. 이는 여러 개의 중첩된 콜백이 있어 코드를 읽고 유지 관리하기 어렵게 만드는 문제를 의미합니다.</p><p>이 글에서는 Express 웹 프레임워크와 TypeScript를 사용하여 Node.js 애플리케이션을 구축할 때 콜백 지옥을 피하는 방법에 대해 설명합니다.</p><h2 id="Promises"><a class="header-anchor" href="#Promises">¶</a>Promises</h2><p>Promises 은 보다 읽기 쉽고 관리하기 쉬운 방식으로 비동기 작업을 처리하는 방법입니다. 이는 아직 사용할 수 없지만 미래에는 사용할 수 있는 값을 나타냅니다. Promise를 서로 연결하면 여러 비동기 작업을 순차적으로 처리할 수 있습니다.</p><p>Node.js에서 Promise를 사용하는 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'Data received!'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData()</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>이 예에서 <code>getData</code> 는 1초 후에 해결되는 약속을 반환합니다. 그런 다음 <code>.then</code> 메서드를 사용하여 확인된 값을 처리하고 <code>.catch</code> 메서드를 사용하여 오류를 처리할 수 있습니다.</p><h2 id="Async-Await"><a class="header-anchor" href="#Async-Await">¶</a>Async/Await</h2><p>Async/await 는 Promise 위에 추가되는 Syntatic Sugar(문법 설탕) 으로, 비동기 작업 작업을 더 쉽게 만듭니다. 이를 통해 동기적으로 보이는 비동기 코드를 작성할 수 있으므로 읽고 유지하기가 더 쉬워집니다.</p><blockquote><p>컴퓨터 과학에서 Syntactic sugar(구문 설탕)은 더 쉽게 읽거나 표현하도록 설계된 프로그래밍 언어 내의 구문입니다. 그것은 인간이 사용하기에 언어를 &quot;더 달콤&quot;하게 만듭니다. 사물을 더 명확하고 간결하게 표현하거나 일부 사람들이 선호하는 대체 스타일로 표현할 수 있습니다. <a href="https://en.wikipedia.org/wiki/Syntactic_sugar" target="_blank" rel="noopener">위키백과</a></p></blockquote><p>Node.js에서 async/await를 사용하는 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'Data received!'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> getData();</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>이 예에서 <code>main</code> 은 <code>wait</code> 키워드를 사용하여 <code>getData</code> 함수의 확인된 값을 기다리는 비동기 함수입니다. <code>try/catch</code> 블록을 사용하여 오류를 처리할 수 있습니다.</p><h2 id="Promisify"><a class="header-anchor" href="#Promisify">¶</a>Promisify</h2><p>Promisify는 callback-based 함수를 promise-based 함수로 변환할 수 있도록 Node.js에서 제공하는 유틸리티 함수입니다. 이는 Promise를 사용하지 않는 오래된 라이브러리나 모듈로 작업할 때 유용할 수 있습니다.</p><p>Node.js에서 promisify를 사용하는 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(fs.readFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> readFile(<span class="string">'file.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>예에서는 <code>util.promisify</code> 를 사용하여 Node.js의 <code>fs.readFile</code> 함수를 promise-based 함수로 변환합니다. 그런 다음 Promise 기반 함수를 사용하여 <code>file.txt</code> 파일의 내용을 읽습니다.</p><h2 id="Use-Control-Flow-Libraries"><a class="header-anchor" href="#Use-Control-Flow-Libraries">¶</a>Use Control Flow Libraries</h2><p>복잡한 비동기 코드로 작업하는 경우 Promise 와 async/await 만으로는 코드를 깔끔하고 유지 관리하기 쉽도록 유지하는 데 충분하지 않다는 것을 알 수 있습니다. 이 경우 제어 흐름(flow library) 라이브러리를 사용하여 비동기 코드를 관리하는 데 도움을 받을 수 있습니다.</p><p>제어 흐름 라이브러리는 비동기 작업의 흐름을 관리하는 방법을 제공하여 해당 작업이 올바른 순서로 실행되고 오류가 적절하게 처리되도록 합니다. Node.js의 인기 있는 제어 흐름 라이브러리로는 Async, Bluebird 및 Q가 있습니다.</p><p>다음은 Async 라이브러리를 사용하여 일련의 비동기 작업을 관리하는 방법에 대한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.series(</span><br><span class="line">  [</span><br><span class="line">    (callback) =&gt; &#123;</span><br><span class="line">      fs.readFile(<span class="string">'file1.txt'</span>, <span class="string">'utf8'</span>, callback);</span><br><span class="line">    &#125;,</span><br><span class="line">    (callback) =&gt; &#123;</span><br><span class="line">      fs.readFile(<span class="string">'file2.txt'</span>, <span class="string">'utf8'</span>, callback);</span><br><span class="line">    &#125;,</span><br><span class="line">    (callback) =&gt; &#123;</span><br><span class="line">      fs.readFile(<span class="string">'file3.txt'</span>, <span class="string">'utf8'</span>, callback);</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  (error, results) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(results);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>async.series</code> 메서드를 사용하여 일련의 비동기 작업(이 경우 세 파일의 내용 읽기)을 순서대로 실행합니다. 모든 작업이 완료되면 최종 콜백이 호출되고 결과 배열을 받습니다.</p><h2 id="결론"><a class="header-anchor" href="#결론">¶</a>결론</h2><p>콜백 지옥은 Node.js에서 비동기 코드 작업을 어렵고 실망스럽게 만들 수 있지만, 이를 방지하기 위해 사용할 수 있는 많은 전략은 위과 같습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/08/28/nodejs-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>C# and .NET Core 멀티스레딩(multithreading)</title>
      <link>http://hgko1207.github.io/2023/08/27/csharp-3/</link>
      <guid>http://hgko1207.github.io/2023/08/27/csharp-3/</guid>
      <pubDate>Sun, 27 Aug 2023 12:44:48 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;멀티스레딩&lt;/strong&gt;은 프로그램을 여러 스레드로 나누는 방식을 의미하며, 각 스레드는 독립적으로 동시에 실행될 수 있습니다. 이로 인해 특히 I/O 또는 네트워크 통신과 같은 작업의 경우 성능과 응답성이 향상될 수 있습니다. 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>멀티스레딩</strong>은 프로그램을 여러 스레드로 나누는 방식을 의미하며, 각 스레드는 독립적으로 동시에 실행될 수 있습니다. 이로 인해 특히 I/O 또는 네트워크 통신과 같은 작업의 경우 성능과 응답성이 향상될 수 있습니다. C# 및 .NET Core에서는 System.Threading 네임스페이스를 사용하여 스레드를 만들고 관리할 수 있습니다.</p><p>다음은 Thread 클래스를 사용하여 C#에서 새 스레드를 만드는 예입니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> &#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(Worker));</span><br><span class="line">        thread.Start();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">"Main thread is running."</span>);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Worker</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Worker thread is running."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예제에서는 <code>Thread</code> 클래스를 사용하여 새 스레드를 만들고 <code>Worker</code> 메서드에 대리자를 전달합니다. 그런 다음 <code>Start</code> 메서드를 사용하여 스레드를 시작하고 <code>Worker</code> 메서드는 <code>Main</code> 메서드와 동시에 실행됩니다. 이 프로그램을 실행하면 다음과 같은 출력이 표시됩니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Main thread <span class="keyword">is</span> running.</span><br><span class="line">Worker thread <span class="keyword">is</span> running.</span><br></pre></td></tr></table></figure><p>.NET Core는 다중 스레드 코드 작업을 위한 다양한 클래스와 구문도 제공합니다. 그 중 하나는 병렬 작업을 실행하는 간단한 방법을 제공하는 TPL(작업 병렬 라이브러리)입니다. 다음은 TPL 을 사용하여 병렬 루프를 실행하는 예입니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> &#123;</span><br><span class="line">        Parallel.For(<span class="number">0</span>, <span class="number">10</span>, i =&gt; &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Processing item &#123;0&#125; on thread &#123;1&#125;"</span>, i, Task.CurrentId);</span><br><span class="line">        &#125;);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예제에서는 <code>Parallel.For</code> 메서드를 사용하여 루프를 병렬로 실행하며 각 반복은 별도의 스레드에서 실행됩니다. <code>Task.CurrentId</code> 속성을 사용하여 현재 반복을 실행하는 스레드의 ID를 표시합니다. 이 프로그램을 실행하면 다음과 유사한 출력이 표시됩니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Processing item <span class="number">0</span> <span class="keyword">on</span> thread <span class="number">4</span></span><br><span class="line">Processing item <span class="number">1</span> <span class="keyword">on</span> thread <span class="number">6</span></span><br><span class="line">Processing item <span class="number">2</span> <span class="keyword">on</span> thread <span class="number">5</span></span><br><span class="line">Processing item <span class="number">3</span> <span class="keyword">on</span> thread <span class="number">7</span></span><br><span class="line">Processing item <span class="number">4</span> <span class="keyword">on</span> thread <span class="number">8</span></span><br><span class="line">Processing item <span class="number">5</span> <span class="keyword">on</span> thread <span class="number">4</span></span><br><span class="line">Processing item <span class="number">6</span> <span class="keyword">on</span> thread <span class="number">6</span></span><br><span class="line">Processing item <span class="number">7</span> <span class="keyword">on</span> thread <span class="number">5</span></span><br><span class="line">Processing item <span class="number">8</span> <span class="keyword">on</span> thread <span class="number">7</span></span><br><span class="line">Processing item <span class="number">9</span> <span class="keyword">on</span> thread <span class="number">8</span></span><br></pre></td></tr></table></figure><p>이는 C# 및 .NET Core가 다중 스레드 프로그래밍을 지원하는 다양한 방식 중 작은 예일 뿐입니다.</p><p>이미지 처리 또는 비디오 트랜스코딩과 같이 CPU를 많이 사용하는 장기 실행 작업을 수행해야 하는 웹 API가 있는 시나리오를 생각해 보세요. 메인 스레드에서 이 작업을 수행하면 다른 수신 요청이 차단되고 API의 응답 속도가 느려집니다. 이 문제를 해결하려면 멀티스레딩을 사용하여 별도의 스레드에서 작업을 수행하고 기본 스레드가 들어오는 요청을 처리할 수 있도록 남겨둘 수 있습니다.</p><p>다음은 작업 병렬 라이브러리를 사용하여 .NET Core 웹 API에서 이를 달성할 수 있는 방법의 예입니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="meta-string">"[controller]"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ImageController</span> : <span class="title">ControllerBase</span> &#123;</span><br><span class="line">    [<span class="meta">HttpPost</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">ProcessImage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// Parse incoming request and extract image data</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start processing on a separate thread</span></span><br><span class="line">        Task&lt;<span class="keyword">byte</span>[]&gt; task = Task.Run(() =&gt; &#123;</span><br><span class="line">            <span class="comment">// Perform CPU-intensive image processing</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">return</span> processedImageData;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return a response immediately, while the image is being processed</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> task;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 이미지 데이터가 포함된 수신 HTTP POST 요청을 처리하는 웹 API 컨트롤러에 <code>ProcessImage</code> 작업 메서드를 정의합니다. 그런 다음 별도의 스레드에서 지정된 대리자를 실행하는 새 <code>Task </code>을 만드는 <code>Task.Run</code> 메서드를 사용하여 별도의 스레드에서 이미지 처리를 시작합니다. 처리가 완료될 때까지 기다리고 처리된 이미지 데이터를 반환하기 위해 <code>wait</code> 키워드를 사용하여 <code>Task</code>를 응답으로 즉시 반환합니다.</p><p>이 방식을 사용하면 웹 API의 기본 스레드가 들어오는 요청에 계속 응답하는 동시에 이미지 처리가 별도의 스레드에서 수행됩니다. 이는 API의 전반적인 성능과 확장성을 향상시키는 데 도움이 될 수 있습니다.</p><p>첫 번째 예에서는 <code>System.Threading</code> 네임스페이스를 사용하여 C# 및 .NET Core에서 스레드를 만들고 관리하는 방법을 살펴보았습니다. 우리는 새로운 스레드를 생성하고 해당 스레드에서 별도의 메서드를 실행하는 간단한 프로그램을 만들었습니다. 이를 통해 두 개의 별도 코드 조각을 동시에 실행할 수 있어 특정 시나리오에서 성능과 응답성을 향상시킬 수 있습니다.</p><p>두 번째 예에서는 .NET Core 웹 API에서 고급 멀티스레딩 기술을 사용하는 방법을 살펴보았습니다. 우리는 Task Parallel 라이브러리를 사용하여 별도의 스레드에서 long-running, CPU-intensive 작업을 시작하는 동시에 기본 스레드는 들어오는 요청을 처리할 수 있도록 자유롭게 유지했습니다. 이는 특히 long-running 작업으로 인해 들어오는 요청이 차단될 수 있는 시나리오에서 API의 전반적인 성능과 확장성을 개선하는 데 도움이 될 수 있습니다.</p><p>전반적으로 멀티스레딩은 C# 및 .NET Core 애플리케이션의 성능과 응답성을 향상시키는 강력한 도구가 될 수 있습니다. 그러나 이를 현명하게 사용하고 복잡성 증가, 잠재적 경합 조건 또는 동기화 문제, 리소스 사용량 증가와 같은 잠재적인 절충안을 이해하는 것이 중요합니다. 특정 시나리오에 적합한 스레딩 구성 및 기술을 사용하면 이러한 잠재적 위험을 피하면서 멀티스레딩의 이점을 활용할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/08/27/csharp-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] 재사용 가능한 컴포넌트(Component)</title>
      <link>http://hgko1207.github.io/2023/08/26/angular-16/</link>
      <guid>http://hgko1207.github.io/2023/08/26/angular-16/</guid>
      <pubDate>Sat, 26 Aug 2023 06:33:52 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;웹 애플리케이션 구축에 &lt;strong&gt;Angular&lt;/strong&gt; 를 사용하는 주요 이점 중 하나는 재사용 가능한 컴포넌트를 생성할 수 있다는 것입니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 컴포넌트 구조, 입력 및 출력 속성, 콘텐츠 프로젝션을 포함하여 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>웹 애플리케이션 구축에 <strong>Angular</strong> 를 사용하는 주요 이점 중 하나는 재사용 가능한 컴포넌트를 생성할 수 있다는 것입니다.</p><p>이 글에서는 컴포넌트 구조, 입력 및 출력 속성, 콘텐츠 프로젝션을 포함하여 Angular를 사용하여 재사용 가능한 컴포넌트를 구축하기 위한 사례를 살펴보겠습니다.</p><h2 id="1-Component-Structure"><a class="header-anchor" href="#1-Component-Structure">¶</a>1. Component Structure</h2><p>Angular에서 재사용 가능한 컴포넌트를 만들려면 다양한 상황에서 쉽게 사용할 수 있는 방식으로 컴포넌트를 구성하는 것이 중요합니다. 컴포넌트에는 입력 및 출력 속성이 잘 정의된 명확한 API가 있어야 하며 다양한 사용 사례를 처리할 수 있을 만큼 유연해야 합니다.</p><p>다음은 항목 목록을 표시하는 재사용 가능한 간단한 컴포넌트의 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-item-list'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li *ngFor="let item of items"&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ItemListComponent &#123;</span><br><span class="line">  <span class="meta">@Input</span>() items: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서 <code>ItemListComponent</code> 에는 문자열 배열인 항목이라는 Single Input 속성이 있습니다. 컴포넌트는 <code>*ngFor</code> 지시문을 사용하여 <code>items</code> 배열을 반복하고 목록의 각 항목을 표시합니다.</p><h2 id="2-Input-and-Output-Properties"><a class="header-anchor" href="#2-Input-and-Output-Properties">¶</a>2. Input and Output Properties</h2><p>입력 및 출력 속성은 Angular에서 재사용 가능한 컴포넌트를 만드는 데 중요한 부분입니다. Input 속성을 사용하면 상위 컴포넌트에서 데이터를 컴포넌트로 전달할 수 있고, Output 속성을 사용하면 컴포넌트에서 상위 컴포넌트로 이벤트를 내보낼 수 있습니다.</p><p>다음은 사용자가 목록에서 값을 선택할 수 있도록 하는 재사용 가능한 컴포넌트의 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input, Output, EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-select'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;select [ngModel]="selectedValue" (ngModelChange)="selectValue.emit($event)"&gt;</span></span><br><span class="line"><span class="string">      &lt;option *ngFor="let option of options" [value]="option"&gt;&#123;&#123; option &#125;&#125;&lt;/option&gt;</span></span><br><span class="line"><span class="string">    &lt;/select&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SelectComponent &#123;</span><br><span class="line">  <span class="meta">@Input</span>() options: <span class="built_in">string</span>[];</span><br><span class="line">  <span class="meta">@Input</span>() selectedValue: <span class="built_in">string</span>;</span><br><span class="line">  <span class="meta">@Output</span>() selectValue = <span class="keyword">new</span> EventEmitter&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서 <code>SelectComponent</code> 에는 두 개의 입력 속성인 <code>options</code> 와 <code>selectedValue</code> 와 하나의 출력 속성인 <code>selectValue</code> 가 있습니다. 컴포넌트는 <code>ngModel</code> 지시문을 사용하여 선택한 값을 <code>selectedValue</code> 속성에 바인딩하고 사용자가 목록에서 새 값을 선택할 때 <code>selectValue</code> 이벤트를 발생시킵니다.</p><h2 id="3-Content-Projection"><a class="header-anchor" href="#3-Content-Projection">¶</a>3. Content Projection</h2><p>콘텐츠 프로젝션은 Angular에서 재사용 가능한 컴포넌트를 구축하는 또 다른 주요 기능입니다. 콘텐츠 프로젝션을 통해 컴포넌트는 상위 항목의 임의 콘텐츠를 허용할 수 있으며, 이는 컴포넌트의 모양이나 동작을 사용자 지정하는 데 사용할 수 있습니다.</p><p>콘텐츠 프로젝션의 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-section'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="section"&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;ng-content&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  styles: [</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      .section &#123;</span></span><br><span class="line"><span class="string">        border: 1px solid black;</span></span><br><span class="line"><span class="string">        padding: 10px;</span></span><br><span class="line"><span class="string">        margin-bottom: 20px;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      h2 &#123;</span></span><br><span class="line"><span class="string">        margin-bottom: 10px;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SectionComponent &#123;</span><br><span class="line">  <span class="meta">@Input</span>() title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-parent'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;app-section title="Section 1"&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;Content for section 1 goes here.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/app-section&gt;</span></span><br><span class="line"><span class="string">    &lt;app-section title="Section 2"&gt;</span></span><br><span class="line"><span class="string">      &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;Item 1&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;Item 2&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;Item 3&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/app-section&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParentComponent &#123;&#125;</span><br></pre></td></tr></table></figure><p>title 이 상위 컴포넌트에서 전달될 수 있도록 <code>title</code> 속성에 <code>@Input</code> 데코레이터를 추가했습니다. <code>SectionComponent</code> 템플릿은 보간을 사용하여 제목을 표시하고 <code>ng-content</code> 지시문은 상위 컴포넌트의 임의 콘텐츠를 투영하는 데 사용됩니다.</p><p>각 <code>SectionComponent</code> 인스턴스에 대한 입력으로 제목을 전달하고 있으며, 각 섹션의 콘텐츠는 <code>ng-content</code> 지시어를 사용하여 상위 컴포넌트에서 투영됩니다.</p><h2 id="결론"><a class="header-anchor" href="#결론">¶</a>결론</h2><p>이 글에서는 컴포넌트 구조, 입력 및 출력 속성, 콘텐츠 프로젝션을 포함하여 Angular를 사용하여 재사용 가능한 컴포넌트를 구축하기 위한 사례를 살펴보았습니다.</p><p>또한 이러한 기능을 사용하여 다양한 상황에서 사용할 수 있는 간단한 재사용 가능한 컴포넌트를 만드는 방법에 대한 몇 가지 예도 살펴보았습니다. 이러한 사례를 따르면 사용 및 유지 관리가 쉽고 Angular 애플리케이션의 전반적인 품질을 향상시키는 데 도움이 되는 컴포넌트를 만들 수 있습니다.</p><p>Angular 에서 재사용 가능한 컴포넌트를 사용하는 주요 이점 중 하나는 코드 중복을 줄이고 코드 유지 관리성을 높이는 기능입니다. 잘 설계되고 잘 문서화된 컴포넌트 세트를 만들면 다른 개발자가 우리 애플리케이션에서 더 쉽게 작업할 수 있을 뿐만 아니라 시간이 지남에 따라 코드를 더 쉽게 유지 관리하고 업데이트할 수도 있습니다.</p><p>전반적으로 Angular를 사용하여 재사용 가능한 컴포넌트를 구축하는 것은 웹 애플리케이션의 품질과 유지 관리성을 향상시키는 강력한 기술입니다. 이러한 사례를 따르고 다양한 컴포넌트 디자인을 실험함으로써 다양한 웹 애플리케이션을 구축하는 데 사용할 수 있는 강력하고 유연한 컴포넌트 세트를 만들 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/08/26/angular-16/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] 애니메이션(Animation) 설명</title>
      <link>http://hgko1207.github.io/2023/08/25/angular-15/</link>
      <guid>http://hgko1207.github.io/2023/08/25/angular-15/</guid>
      <pubDate>Fri, 25 Aug 2023 13:36:44 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;는 동적 웹 애플리케이션을 생성하기 위한 다양한 도구와 기능을 제공하는 강력한 JavaScript 프레임워크입니다. Angular의 주요 기능 중 하나는 애니메이션을 만드는 기능입니다. Angular 애
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong>는 동적 웹 애플리케이션을 생성하기 위한 다양한 도구와 기능을 제공하는 강력한 JavaScript 프레임워크입니다. Angular의 주요 기능 중 하나는 애니메이션을 만드는 기능입니다. Angular 애니메이션은 움직임, 전환 및 기타 시각 효과를 추가하여 웹 애플리케이션에 생기를 불어넣는 방법을 제공합니다.</p><p>이 글에서는 interfaces, functions, classes, type aliases 및 lifecycle hooks 등을 포함하여 Angular 애니메이션의 다양한 측면을 다룰 것입니다.</p><h2 id="Animations-Module">Animations Module</h2><p>Angular 애니메이션 모듈은 Angular 애플리케이션에서 애니메이션을 정의하고 관리하는 기본 모듈입니다. 복잡하고 아름다운 애니메이션을 만드는 데 사용할 수 있는 다양한 인터페이스, 클래스 및 기능을 제공합니다.</p><h3 id="Animation-Metadata">Animation Metadata</h3><p>AnimationMetadata 인터페이스는 애니메이션 메타데이터를 정의하는 데 사용되는 기본 인터페이스입니다. <code>AnimationStyleMetadata</code>, <code>AnimationKeyframesSequenceMetadata</code> 및 <code>AnimationAnimateMetadata</code>를 포함한 여러 하위 인터페이스가 있습니다. 이러한 인터페이스는 생성할 수 있는 다양한 유형의 애니메이션을 정의하는 데 사용됩니다.</p><h4 id="AnimationStyleMetadata">AnimationStyleMetadata</h4><p>AnimationStyleMetadata 인터페이스는 애니메이션 스타일을 정의하는 데 사용됩니다. 여기에는 애니메이션의 타이밍과 모양을 정의하는 데 사용할 수 있는 <code>offset</code>, <code>style</code> 및 <code>animateChild</code> 와 같은 속성이 있습니다.</p><h4 id="AnimationKeyframesSequenceMetadata">AnimationKeyframesSequenceMetadata</h4><p>AnimationKeyframesSequenceMetadata 인터페이스는 애니메이션 키프레임 시퀀스를 정의하는 데 사용됩니다. 여기에는 애니메이션의 키프레임과 옵션을 정의하는 데 사용할 수 있는 <code>steps</code> 및 <code>options</code> 과 같은 속성이 있습니다.</p><h4 id="AnimationAnimateMetadata">AnimationAnimateMetadata</h4><p>AnimationAnimateMetadata 인터페이스는 애니메이션 시퀀스를 정의하는 데 사용됩니다. 여기에는 애니메이션의 스타일, 키프레임 및 옵션을 정의하는 데 사용할 수 있는 <code>style</code>, <code>keyframes</code> 및 <code>options</code> 과 같은 속성이 있습니다.</p><h3 id="AnimationTriggerMetadata">AnimationTriggerMetadata</h3><p>AnimationTriggerMetadata 인터페이스는 애니메이션 트리거를 정의하는 데 사용됩니다. 여기에는 트리거 이름, 애니메이션 정의 및 트리거 옵션을 정의하는 데 사용할 수 있는 <code>name</code>, <code>definitions</code> 및 <code>options</code> 과 같은 속성이 있습니다.</p><h3 id="AnimationBuilder">AnimationBuilder</h3><p>AnimationBuilder 클래스는 애니메이션을 생성하고 구성하는 데 사용됩니다. 여기에는 애니메이션 시퀀스를 사용자에 맞게 사용할 수 있는 <code>build</code>, <code>before</code>, <code>after</code> 및 <code>delay</code> 과 같은 메서드가 있습니다.</p><h3 id="AnimationFactory">AnimationFactory</h3><p>AnimationFactory 클래스는 애니메이션 팩토리를 만드는 데 사용됩니다. 여기에는 새 애니메이션 팩토리를 만드는 데 사용할 수 있는 <code>create</code> 와 같은 메서드가 있습니다.</p><h3 id="AnimationPlayer">AnimationPlayer</h3><p>AnimationPlayer 클래스는 애니메이션을 관리하는 데 사용됩니다. 여기에는 애니메이션 수명주기를 관리하는 데 사용할 수 있는 <code>play</code>, <code>pause</code>, <code>reset</code>, <code>finish</code> 와 같은 메서드가 있습니다.</p><h3 id="AnimationEvent">AnimationEvent</h3><p>AnimationEvent 클래스는 애니메이션 이벤트를 나타내는 데 사용됩니다. 여기에는 애니메이션 이벤트에 대한 정보를 검색하는 데 사용할 수 있는 <code>fromState</code>, <code>toState</code> 및 <code>totalTime</code> 과 같은 속성이 있습니다.</p><h3 id="AnimationDriver">AnimationDriver</h3><p>AnimationDriver 인터페이스는 애니메이션 드라이버를 정의하는 데 사용됩니다. 여기에는 애니메이션을 생성하고 관리하는 데 사용할 수 있는 <code>animate</code>, <code>Listen</code> 및 <code>Flush</code> 와 같은 메서드가 있습니다.</p><h2 id="Animation-Types">Animation Types</h2><p>Angular는 역동적이고 매력적인 웹 애플리케이션을 만드는 데 사용할 수 있는 다양한 유형의 애니메이션을 제공합니다. 이러한 애니메이션 유형은 다음과 같습니다.</p><h3 id="Transition-Animation">Transition Animation</h3><p>Transition Animation은 상태나 뷰 간의 원활한 전환을 만드는 데 사용됩니다. fades, slides, rotations 과 같은 애니메이션을 만드는 데 사용할 수 있습니다.</p><h3 id="Animation-Sequencing">Animation Sequencing</h3><p>Animation Sequencing은 특정 순서로 발생하는 애니메이션을 만드는 데 사용됩니다. 여러 단계나 시퀀스가 포함된 복잡한 애니메이션을 만드는 데 사용할 수 있습니다.</p><h3 id="Keyframe-Animation">Keyframe Animation</h3><p>Keyframe Animation은 특정 키프레임이나 시점에 발생하는 애니메이션을 만드는 데 사용됩니다. 진동하는 버튼이나 깜박이는 배너와 같은 애니메이션을 만드는 데 사용할 수 있습니다.</p><h3 id="State-Change-Animation">State Change Animation</h3><p>상태 변경 애니메이션은 상태가 변경될 때 발생하는 애니메이션을 만드는 데 사용됩니다. 확인란을 전환하거나 패널을 확장하는 등의 애니메이션을 만드는 데 사용할 수 있습니다.</p><h2 id="Animations-Interfaces">Animations Interfaces</h2><p>앞서 설명한 AnimationMetadata 및 AnimationTriggerMetadata 인터페이스 외에도 Angular에서 애니메이션을 만드는 데 사용할 수 있는 다른 인터페이스가 몇 가지 있습니다. 이러한 인터페이스에는 다음이 포함됩니다.</p><h3 id="AnimationStateMetadata">AnimationStateMetadata</h3><p>AnimationStateMetadata 인터페이스는 애니메이션 상태를 정의하는 데 사용됩니다. 여기에는 상태 이름과 스타일을 정의하는 데 사용할 수 있는 <code>name</code> 및 <code>style</code> 과 같은 속성이 있습니다.</p><h3 id="AnimationTransitionMetadata">AnimationTransitionMetadata</h3><p>AnimationTransitionMetadata 인터페이스는 애니메이션 전환을 정의하는 데 사용됩니다. 여기에는 한 상태에서 다른 상태로의 전환을 정의하는 데 사용할 수 있는 <code>fromState</code>, <code>toState</code> 및 <code>animation</code> 과 같은 속성이 있습니다.</p><h3 id="AnimationQueryMetadata">AnimationQueryMetadata</h3><p>AnimationQueryMetadata 인터페이스는 애니메이션 쿼리를 정의하는 데 사용됩니다. 여기에는 쿼리에 대한 선택기, 애니메이션 및 제한을 정의하는 데 사용할 수 있는 <code>selector</code>, <code>animation</code> 및 <code>limit</code> 과 같은 속성이 있습니다.</p><h3 id="AnimationStaggerMetadata">AnimationStaggerMetadata</h3><p>AnimationStaggerMetadata 인터페이스는 애니메이션 스태거를 정의하는 데 사용됩니다. 여기에는 애니메이션 순서와 타이밍을 정의하는 데 사용할 수 있는 <code>animate</code>, <code>start</code>, <code>interval</code> 및 <code>by</code> 과 같은 속성이 있습니다.</p><h3 id="AnimationGroupMetadata">AnimationGroupMetadata</h3><p>AnimationGroupMetadata 인터페이스는 애니메이션 그룹을 정의하는 데 사용됩니다. 여기에는 애니메이션 그룹의 단계를 정의하는 데 사용할 수 있는 <code>steps</code> 와 같은 속성이 있습니다.</p><h2 id="Animation-Functions">Animation Functions</h2><p>Angular는 애니메이션을 만드는 데 사용할 수 있는 여러 내장 함수를 제공합니다. 이러한 기능에는 다음이 포함됩니다.</p><h3 id="animate">animate()</h3><p>animate() 함수는 키프레임 애니메이션을 만드는 데 사용됩니다. 지속 시간과 일련의 키프레임을 매개변수로 사용합니다.</p><h3 id="transition">transition()</h3><p>transition() 함수는 전환 애니메이션을 생성하는 데 사용됩니다. 두 가지 상태, 스타일 세트, 선택적 타이밍 기능을 매개변수로 사용합니다.</p><h3 id="trigger">trigger()</h3><p>trigger() 함수는 애니메이션 트리거를 정의하는 데 사용됩니다. 이름과 일련의 애니메이션 정의를 매개변수로 사용합니다.</p><h2 id="Animation-Enums">Animation Enums</h2><p>Angular는 애니메이션을 구성하는 데 사용할 수 있는 여러 열거형도 제공합니다. 이러한 열거형에는 다음이 포함됩니다.</p><h3 id="AnimationStyleMetadata-2">AnimationStyleMetadata</h3><p>AnimationStyleMetadata 열거형은 애니메이션의 타이밍과 모양을 정의하는 데 사용됩니다. 여기에는 애니메이션의 모양과 타이밍을 정의하는 데 사용할 수 있는 <code>opacity</code>, <code>transform</code> 및 <code>display</code> 와 같은 속성이 있습니다.</p><h3 id="AnimationMetadataType">AnimationMetadataType</h3><p>AnimationMetadataType 열거형은 애니메이션 메타데이터 유형을 정의하는 데 사용됩니다. 여기에는 다양한 유형의 애니메이션 메타데이터에 해당하는 <code>Style</code>, <code>Keyframes</code>, <code>Animate</code> 과 같은 값이 있습니다.</p><h2 id="Animation-Consts">Animation Consts</h2><p>마지막으로 Angular는 애니메이션을 구성하는 데 사용할 수 있는 몇 가지 내장 상수를 제공합니다. 이러한 상수에는 다음이 포함됩니다.</p><h3 id="AUTO-STYLE">AUTO_STYLE</h3><p>AUTO_STYLE 상수는 요소의 스타일을 자동 스타일로 설정하는 데 사용됩니다. 요소의 자연 상태에 적응하는 동적 애니메이션을 만드는 데 사용할 수 있습니다.</p><h3 id="TIME">TIME</h3><p>TIME 상수는 애니메이션의 타이밍을 설정하는 데 사용됩니다. 특정 기간 동안 발생하는 애니메이션을 만드는 데 사용할 수 있습니다.</p><h2 id="Animation-Lifecycle-Hooks">Animation Lifecycle Hooks</h2><p>Angular는 애니메이션을 제어하는 데 사용할 수 있는 여러 수명 주기 후크를 제공합니다. 이러한 후크에는 다음이 포함됩니다.</p><h3 id="AnimationStart">AnimationStart</h3><p>AnimationStart Hook 는 애니메이션 재생이 시작될 때 호출됩니다.</p><h3 id="AnimationDone">AnimationDone</h3><p>AnimationDone Hook 는 애니메이션이 완료되면 호출됩니다.</p><h3 id="AnimationDestroy">AnimationDestroy</h3><p>AnimationDestroy Hook 는 애니메이션이 삭제될 때 호출됩니다.</p><p>이러한 Hook 를 사용하면 애니메이션이 완료될 때 다른 애니메이션을 시작하거나 중지하는 등의 추가 작업을 수행할 수 있습니다.</p><h2 id="Animation-Testing">Animation Testing</h2><p>Angular는 단위 및 통합 테스트에서 애니메이션을 테스트하기 위한 여러 도구를 제공합니다. 이러한 도구에는 다음이 포함됩니다.</p><h3 id="MockAnimationPlayer">MockAnimationPlayer</h3><p>MockAnimationPlayer 클래스는 테스트에 사용할 수 있는 모의 애니메이션 플레이어를 만드는 데 사용됩니다. 애니메이션 재생, 일시정지, 완료 등 애니메이션을 시뮬레이션하는 방법을 제공합니다.</p><h3 id="NoopAnimationsModule">NoopAnimationsModule</h3><p>NoopAnimationsModule은 테스트에서 애니메이션을 비활성화하는 데 사용됩니다. 실제로 애니메이션을 실행하지 않고 애니메이션을 사용하는 컴포넌트를 테스트하는 데 사용할 수 있습니다.</p><p>다음은 Angular 애니메이션의 사용을 보여주는 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  trigger,</span><br><span class="line">  state,</span><br><span class="line">  style,</span><br><span class="line">  transition,</span><br><span class="line">  animate,</span><br><span class="line">  AnimationEvent,</span><br><span class="line">  AnimationBuilder,</span><br><span class="line">  AnimationFactory,</span><br><span class="line">  AnimationPlayer,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@angular/animations'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-animation-example'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div (click)="toggleState()" [@myTrigger]="currentState"&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; currentState &#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  animations: [</span><br><span class="line">    trigger(<span class="string">'myTrigger'</span>, [</span><br><span class="line">      state(<span class="string">'one'</span>, style(&#123; transform: <span class="string">'translateX(0)'</span> &#125;)),</span><br><span class="line">      state(<span class="string">'two'</span>, style(&#123; transform: <span class="string">'translateX(100%)'</span> &#125;)),</span><br><span class="line">      transition(<span class="string">'one =&gt; two'</span>, animate(<span class="string">'500ms ease-in'</span>)),</span><br><span class="line">      transition(<span class="string">'two =&gt; one'</span>, animate(<span class="string">'500ms ease-out'</span>)),</span><br><span class="line">    ]),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AnimationExampleComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  currentState = <span class="string">'one'</span>;</span><br><span class="line">  <span class="keyword">private</span> player: AnimationPlayer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> builder: AnimationBuilder</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.createPlayer();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toggleState(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentState = <span class="keyword">this</span>.currentState === <span class="string">'one'</span> ? <span class="string">'two'</span> : <span class="string">'one'</span>;</span><br><span class="line">    <span class="keyword">this</span>.player.play();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> createPlayer(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> factory: AnimationFactory = <span class="keyword">this</span>.builder.build([style(&#123; opacity: <span class="number">0</span> &#125;), animate(<span class="string">'1s'</span>, style(&#123; opacity: <span class="number">1</span> &#125;))]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.player = factory.create(<span class="built_in">document</span>.querySelector(<span class="string">'div'</span>));</span><br><span class="line">    <span class="keyword">this</span>.player.play();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onAnimationStart(event: AnimationEvent): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Animation started: <span class="subst">$&#123;event.triggerName&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onAnimationDone(event: AnimationEvent): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Animation ended: <span class="subst">$&#123;event.triggerName&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에는 <code>[@myTrigger]</code> 애니메이션 트리거를 사용하여 두 상태 간을 전환하는 간단한 컴포넌트가 있습니다. 트리거 이름과 상태 및 전환 배열을 사용하는 <code>trigger()</code> 함수를 사용하여 트리거를 정의합니다. 또한 컴포넌트에 대한 페이드인 애니메이션을 생성하는 <code>AnimationBuilder</code> 클래스를 사용하여 두 번째 애니메이션을 정의합니다.</p><p>컴포넌트가 초기화되면 <code>AnimationFactory</code> 클래스와 <code>AnimationBuilder</code> 를 사용하여 <code>AnimationPlayer</code> 클래스의 인스턴스를 만듭니다. 이 플레이어를 사용하여 컴포넌트가 로드될 때 페이드인 애니메이션을 재생합니다.</p><p>사용자가 컴포넌트를 클릭하면 현재 상태를 전환하고 <code>AnimationPlayer</code> 를 사용하여 전환 애니메이션을 재생합니다.</p><p>마지막으로 애니메이션이 시작되고 끝날 때 각각 호출되는 <code>onAnimationStart</code> 및 <code>onAnimationDone</code> 이라는 두 개의 수명 주기 Hook 를 정의합니다. 이 예에서는 이러한 Hook 가 호출될 때 콘솔에 메시지를 기록합니다.</p><p>다음은 Angular 애니메이션을 사용하여 커스터마이징 애니메이션 로딩 스피너를 만드는 방법을 보여주는 좀 더 복잡한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  trigger,</span><br><span class="line">  style,</span><br><span class="line">  animate,</span><br><span class="line">  transition,</span><br><span class="line">  keyframes,</span><br><span class="line">  AnimationBuilder,</span><br><span class="line">  AnimationFactory,</span><br><span class="line">  AnimationPlayer,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@angular/animations'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-spinner'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="spinner" *ngIf="show"&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="bar" *ngFor="let bar of bars; let i = index" [@loadingState]="i + 1"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  styles: [</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      .spinner &#123;</span></span><br><span class="line"><span class="string">        display: flex;</span></span><br><span class="line"><span class="string">        justify-content: center;</span></span><br><span class="line"><span class="string">        align-items: center;</span></span><br><span class="line"><span class="string">        height: 100%;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      .bar &#123;</span></span><br><span class="line"><span class="string">        width: 5px;</span></span><br><span class="line"><span class="string">        height: 20px;</span></span><br><span class="line"><span class="string">        margin: 0 5px;</span></span><br><span class="line"><span class="string">        border-radius: 2px;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  ],</span><br><span class="line">  animations: [</span><br><span class="line">    trigger(<span class="string">'loadingState'</span>, [</span><br><span class="line">      transition(</span><br><span class="line">        <span class="string">'* =&gt; 1'</span>,</span><br><span class="line">        animate(</span><br><span class="line">          <span class="string">'&#123;&#123;duration&#125;&#125;'</span>,</span><br><span class="line">          keyframes([</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(0)'</span>, offset: <span class="number">0</span> &#125;),</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(1)'</span>, offset: <span class="number">0.5</span> &#125;),</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(0)'</span>, offset: <span class="number">1</span> &#125;),</span><br><span class="line">          ])</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">      transition(</span><br><span class="line">        <span class="string">'* =&gt; 2'</span>,</span><br><span class="line">        animate(</span><br><span class="line">          <span class="string">'&#123;&#123;duration&#125;&#125; &#123;&#123;delay&#125;&#125;'</span>,</span><br><span class="line">          keyframes([</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(0)'</span>, offset: <span class="number">0</span> &#125;),</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(1)'</span>, offset: <span class="number">0.5</span> &#125;),</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(0)'</span>, offset: <span class="number">1</span> &#125;),</span><br><span class="line">          ])</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">      transition(</span><br><span class="line">        <span class="string">'* =&gt; 3'</span>,</span><br><span class="line">        animate(</span><br><span class="line">          <span class="string">'&#123;&#123;duration&#125;&#125; &#123;&#123;delay&#125;&#125;'</span>,</span><br><span class="line">          keyframes([</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(0)'</span>, offset: <span class="number">0</span> &#125;),</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(1)'</span>, offset: <span class="number">0.5</span> &#125;),</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(0)'</span>, offset: <span class="number">1</span> &#125;),</span><br><span class="line">          ])</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">      transition(</span><br><span class="line">        <span class="string">'* =&gt; 4'</span>,</span><br><span class="line">        animate(</span><br><span class="line">          <span class="string">'&#123;&#123;duration&#125;&#125; &#123;&#123;delay&#125;&#125;'</span>,</span><br><span class="line">          keyframes([</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(0)'</span>, offset: <span class="number">0</span> &#125;),</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(1)'</span>, offset: <span class="number">0.5</span> &#125;),</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(0)'</span>, offset: <span class="number">1</span> &#125;),</span><br><span class="line">          ])</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">      transition(</span><br><span class="line">        <span class="string">'* =&gt; 5'</span>,</span><br><span class="line">        animate(</span><br><span class="line">          <span class="string">'&#123;&#123;duration&#125;&#125; &#123;&#123;delay&#125;&#125;'</span>,</span><br><span class="line">          keyframes([</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(0)'</span>, offset: <span class="number">0</span> &#125;),</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(1)'</span>, offset: <span class="number">0.5</span> &#125;),</span><br><span class="line">            style(&#123; transform: <span class="string">'scaleY(0)'</span>, offset: <span class="number">1</span> &#125;),</span><br><span class="line">          ])</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    ]),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SpinnerComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="meta">@Input</span>() duration = <span class="string">'500ms'</span>;</span><br><span class="line">  <span class="meta">@Input</span>() delay = <span class="string">'100ms'</span>;</span><br><span class="line">  <span class="meta">@Input</span>() count = <span class="number">5</span>;</span><br><span class="line">  show = <span class="literal">false</span>;</span><br><span class="line">  bars: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> builder: AnimationBuilder</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.bars = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="keyword">this</span>.count).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.createPlayer();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> createPlayer(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> factory: AnimationFactory = <span class="keyword">this</span>.builder.build([</span><br><span class="line">      style(&#123; opacity: <span class="number">0</span> &#125;),</span><br><span class="line">      animate(<span class="string">'1s'</span>, style(&#123; opacity: <span class="number">1</span> &#125;)),</span><br><span class="line">      animate(<span class="string">'1s'</span>, style(&#123; opacity: <span class="number">0</span> &#125;)),</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.player = factory.create(<span class="built_in">document</span>.querySelector(<span class="string">'.spinner'</span>));</span><br><span class="line">    <span class="keyword">this</span>.player.onDone(<span class="function"><span class="params">()</span> =&gt;</span> (<span class="keyword">this</span>.show = <span class="literal">false</span>));</span><br><span class="line">    <span class="keyword">this</span>.player.play();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에는 사용자에 맞게 애니메이션 로딩 스피너를 표시하는 컴포넌트가 있습니다. 스피너는 순차적으로 펄스 및 크기 증가 및 감소하는 5개의 수직 막대로 구성됩니다. 애니메이션 키프레임을 지정하기 위해 <code>trigger()</code> 함수와 <code>keyframes()</code> 함수를 사용하여 애니메이션을 정의합니다.</p><h2 id="결론">결론</h2><p>요약하면 Angular는 웹 애플리케이션에서 애니메이션을 생성, 제어 및 테스트하기 위한 포괄적인 도구 세트를 제공합니다. 이러한 도구에는 사용자 경험을 향상하고 애플리케이션에 생명을 불어넣는 복잡하고 매력적인 애니메이션을 만드는 데 사용할 수 있는 interfaces, functions, classes, type aliases 및 lifecycle hooks 가 포함됩니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/08/25/angular-15/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] 성능 최적화(Performance optimization)</title>
      <link>http://hgko1207.github.io/2023/08/25/angular-14/</link>
      <guid>http://hgko1207.github.io/2023/08/25/angular-14/</guid>
      <pubDate>Fri, 25 Aug 2023 05:31:23 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;는 개발자가 고성능 웹 애플리케이션을 구축하는 데 도움을 줄 수 있는 강력한 프론트 엔드 프레임워크입니다. 그러나 애플리케이션이 복잡해짐에 따라 원하는 수준의 성능을 유지하는 것이 더욱 어려워질 수 있습
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong>는 개발자가 고성능 웹 애플리케이션을 구축하는 데 도움을 줄 수 있는 강력한 프론트 엔드 프레임워크입니다. 그러나 애플리케이션이 복잡해짐에 따라 원하는 수준의 성능을 유지하는 것이 더욱 어려워질 수 있습니다.</p><p>이 글에서는 Angular 성능을 최적화하는 몇 가지 기술을 살펴보겠습니다.</p><h2 id="1-지연-로딩-모듈-Lazy-Loading-Modules"><a class="header-anchor" href="#1-지연-로딩-모듈-Lazy-Loading-Modules">¶</a>1. 지연 로딩 모듈(Lazy Loading Modules)</h2><p>애플리케이션 성능이 저하되는 주요 이유 중 하나는 애플리케이션을 로드하는 데 걸리는 시간입니다. 이 문제를 해결하는 한 가지 방법은 지연 로딩을 사용하는 것입니다. 지연 로딩은 특정 경로에 필요한 모듈만 로드하는 기술입니다. 즉, 초기 로드 시간이 줄어들고 애플리케이션의 응답 속도가 빨라집니다.</p><p>다음은 Angular 애플리케이션에서 지연 로딩을 구현하는 방법에 대한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'admin'</span>,</span><br><span class="line">    loadChildren: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./admin/admin.module'</span>).then(<span class="function">(<span class="params">m</span>) =&gt;</span> m.AdminModule),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>admin</code> 경로에 액세스할 때 <code>AdminModule</code> 모듈을 지연 로딩합니다. 이 모듈은 필요할 때만 로드되므로 애플리케이션의 초기 로드 시간을 줄이는 데 도움이 됩니다.</p><h2 id="2-변화-감지-전략-Change-Detection-Strategies"><a class="header-anchor" href="#2-변화-감지-전략-Change-Detection-Strategies">¶</a>2. 변화 감지 전략(Change Detection Strategies)</h2><p>Angular는 변경 감지를 사용하여 데이터 변경 사항을 추적하고 그에 따라 뷰를 업데이트합니다. 기본적으로 Angular는 모든 변경 감지 주기에서 모든 컴포넌트를 확인하는 <code>Default</code> 라는 전략을 사용합니다. 특히 컴포넌트가 많은 대규모 애플리케이션의 경우 비용이 매우 많이 들 수 있습니다.</p><p>이 문제를 해결하기 위해 Angular는 몇 가지 변경 감지 전략을 제공합니다. 가장 일반적으로 사용되는 전략은 <code>OnPush</code> 입니다. 이 전략을 사용하면 컴포넌트의 입력 속성이 변경되거나 이벤트가 트리거될 때만 변경 감지가 실행됩니다. 이를 통해 불필요한 변경 감지 주기 수를 크게 줄일 수 있습니다.</p><p>다음은 <code>OnPush</code> 변경 감지 전략을 사용하는 방법에 대한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-my-component'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./my-component.component.html'</span>,</span><br><span class="line">  changeDetection: ChangeDetectionStrategy.OnPush,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyComponentComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="meta">@Input</span>() myData: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>MyComponentComponent</code> 에 대한 <code>OnPush</code> 변경 감지 전략을 사용하고 있습니다. 즉, 변경 감지는 <code>myData</code> 입력 속성이 변경되거나 이벤트가 트리거될 때만 실행됩니다.</p><h2 id="3-변경-감지-최적화-Change-Detection-Optimization"><a class="header-anchor" href="#3-변경-감지-최적화-Change-Detection-Optimization">¶</a>3. 변경 감지 최적화(Change Detection Optimization)</h2><p><code>OnPush</code> 변경 감지 전략을 사용하더라도 불필요한 변경 감지 주기로 인해 성능 문제가 발생할 수 있습니다. 이 문제를 해결하기 위해 여러 가지 최적화 기술을 사용할 수 있습니다.</p><h3 id="a-Immutable-Objects"><a class="header-anchor" href="#a-Immutable-Objects">¶</a>a. Immutable Objects</h3><p>불변 객체(Immutable Objects)는 생성된 후에는 변경할 수 없는 객체입니다. 애플리케이션에서 불변 객체를 사용함으로써 불필요한 변경 감지 주기 수를 줄일 수 있습니다. 변경 감지는 기존 객체가 업데이트될 때가 아니라 새 객체가 생성될 때만 실행되어야 하기 때문입니다.</p><p>다음은 Angular 애플리케이션에서 불변 객체를 사용하는 방법에 대한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> User &#123;</span><br><span class="line">  readonly id: <span class="built_in">number</span>;</span><br><span class="line">  readonly name: <span class="built_in">string</span>;</span><br><span class="line">  readonly email: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>readonly</code> 키워드를 사용하여 <code>User</code> 인터페이스의 속성을 변경할 수 없게 만듭니다.</p><h3 id="b-TrackBy-Function"><a class="header-anchor" href="#b-TrackBy-Function">¶</a>b. TrackBy Function</h3><p><code>trackBy</code> 함수는 Angular에 내장된 최적화 기술입니다. 항목 목록의 변경 사항을 추적하는 방법을 Angular에 알려주는 데 사용됩니다. 기본적으로 Angular는 목록에 있는 각 항목의 ID를 비교하여 변경 사항을 추적합니다. 그러나 이는 특히 큰 목록의 경우 비용이 매우 많이 들 수 있습니다.</p><p>다음은 Angular 애플리케이션에서 <code>trackBy</code> 함수를 사용하는 방법에 대한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li *ngFor=<span class="string">"let user of users; trackBy: trackByUserId"</span>&gt;</span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>trackBy</code> 함수를 사용하여 Angular 에 <code>id</code> 속성으로 <code>users</code> 목록의 변경 사항을 추적하도록 지시합니다. 이는 목록에 있는 항목의 <code>id</code> 속성이 변경될 때만 변경 감지가 실행되어야 함을 의미합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">trackByUserId(index: <span class="built_in">number</span>, user: User): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> user.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예제에서는 인덱스와 사용자 개체를 가져와 사용자 개체의 <code>id</code> 속성을 반환하는 <code>trackByUserId</code> 함수를 구현합니다.</p><h2 id="4-NgZone"><a class="header-anchor" href="#4-NgZone">¶</a>4. NgZone</h2><p><strong>NgZone</strong> 은 Angular 영역 외부에서 코드를 실행하는 방법을 제공하는 Angular 에 내장된 서비스입니다. Angular 영역은 변경 감지 및 기타 Angular 관련 작업을 담당하는 실행 컨텍스트입니다. Angular 영역 외부에서 코드를 실행하면 애플리케이션 성능을 향상시킬 수 있습니다.</p><p>다음은 Angular 애플리케이션에서 NgZone을 사용하는 방법에 대한 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, NgZone &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-my-component'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./my-component.component.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyComponentComponent &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> ngZone: NgZone</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  runOutsideAngular(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.ngZone.runOutsideAngular(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Code to run outside of the Angular zone</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>NgZone</code> 서비스를 사용하여 Angular 영역 외부에서 코드를 실행합니다. <code>runOutsideAngular</code> 메서드를 호출하고 Angular 영역 외부에서 실행되는 코드가 포함된 콜백 함수를 전달하여 이를 수행합니다.</p><p>외부 API 에서 일부 데이터를 가져와서 화면에 표시하는 컴포넌트가 있다고 가정해 보겠습니다. API 호출을 완료하는 데 오랜 시간이 걸릴 수 있으며, 이로 인해 애플리케이션이 정지되고 응답하지 않게 될 수 있습니다. 이러한 일이 발생하지 않도록 하려면 NgZone을 사용하여 Angular 영역 외부에서 API 호출을 실행하면 애플리케이션이 계속해서 원활하게 실행될 수 있습니다.</p><p>컴포넌트의 코드는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, NgZone &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClient &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-my-component'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./my-component.component.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyComponentComponent &#123;</span><br><span class="line">  data: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient, <span class="keyword">private</span> ngZone: NgZone</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  fetchData(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// Run the API call outside of the Angular zone</span></span><br><span class="line">    <span class="keyword">this</span>.ngZone.runOutsideAngular(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Make the API call</span></span><br><span class="line">      <span class="keyword">this</span>.http.get(<span class="string">'https://api.example.com/data'</span>).subscribe(</span><br><span class="line">        (data) =&gt; &#123;</span><br><span class="line">          <span class="comment">// Update the data property with the fetched data</span></span><br><span class="line">          <span class="keyword">this</span>.ngZone.run(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        (error) =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(error);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예에서는 <code>HttpClient</code> 서비스를 사용하여 <code>https://api.example.com/data</code>에 대한 API 호출을 만듭니다. 또한 <code>NgZone</code> 서비스를 사용하여 Angular 영역 외부에서 API 호출을 실행한 다음 Angular 영역 내부에서 가져온 데이터로 <code>data</code> 속성을 업데이트합니다. 이렇게 하면 API 호출이 진행되는 동안 애플리케이션의 응답성이 유지됩니다.</p><p>또한 API 호출 중에 발생할 수 있는 모든 오류를 콘솔에 기록하여 처리하고 있습니다.</p><p>템플릿에서 이 컴포넌트를 사용하려면 다음과 같이 할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;button (click)=<span class="string">"fetchData()"</span>&gt;Fetch Data&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div *ngIf="data"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li *ngFor="let item of data"&gt;</span></span><br><span class="line"><span class="regexp">      &#123;&#123; item.name &#125;&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>li&gt;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h2 id="결론"><a class="header-anchor" href="#결론">¶</a>결론</h2><p>Angular 성능을 최적화하기 위한 몇 가지 기술을 살펴보았습니다. 지연 로딩, 변경 감지 전략, 변경 감지 최적화 기술 및 NgZone을 사용하여 애플리케이션 성능을 향상하고 더 나은 사용자 경험을 제공할 수 있습니다. 성능 최적화는 지속적인 프로세스라는 점을 명심하는 것이 중요하며 잠재적인 개선 영역이 있는지 애플리케이션을 지속적으로 평가해야 합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/08/25/angular-14/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C#] 콘솔 프로그램 백그라운드(창 없이) 실행 방법</title>
      <link>http://hgko1207.github.io/2023/07/31/csharp-2/</link>
      <guid>http://hgko1207.github.io/2023/07/31/csharp-2/</guid>
      <pubDate>Mon, 31 Jul 2023 13:25:39 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;일반적으로 C# 에서 외부 프로그램(.exe 등)을 실행시킬 때 &lt;code&gt;Process&lt;/code&gt; 를 많이 사용합니다.&lt;/p&gt;
&lt;p&gt;콘솔(Console; 도스 커맨드 창)로 실행되는 프로그램을 실행하는 경우 콘솔 창이 화면에 나타나서 UI 상
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>일반적으로 C# 에서 외부 프로그램(.exe 등)을 실행시킬 때 <code>Process</code> 를 많이 사용합니다.</p><p>콘솔(Console; 도스 커맨드 창)로 실행되는 프로그램을 실행하는 경우 콘솔 창이 화면에 나타나서 UI 상으로 불편한 경우가 있습니다.</p><p><code>Process</code> 로 콘솔 창을 띄우는 외부 프로그램을 실행 시 콘솔 창을 백그라운드로 실행해 안보이도록 하려면 아래와 같이 합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test.Utils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">string</span> arg = <span class="string">"..."</span>;</span><br><span class="line"></span><br><span class="line">            Process process = <span class="keyword">new</span> Process();</span><br><span class="line">            process.StartInfo.FileName = <span class="string">@".\ffmpeg.exe"</span>;</span><br><span class="line">            process.StartInfo.Arguments = arg;</span><br><span class="line"></span><br><span class="line">            process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;  <span class="comment">// 윈도우 속성을 windows hidden 으로 지정</span></span><br><span class="line">            process.StartInfo.CreateNoWindow = <span class="literal">true</span>;                    <span class="comment">// hidden 을 시키기 위해서 이 속성도 true 로 체크해야 함</span></span><br><span class="line"></span><br><span class="line">            process.Start();</span><br><span class="line">            process.WaitForExit(); <span class="comment">// 종료시까지 대기</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>추가로 외부 프로그램에서 출력한 값을 읽어와서 출력하는 방법은 아래와 같습니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test.Utils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">string</span> arg = <span class="string">"..."</span>;</span><br><span class="line"></span><br><span class="line">            Process process = <span class="keyword">new</span> Process();</span><br><span class="line">            process.StartInfo.FileName = <span class="string">@".\ffmpeg.exe"</span>;</span><br><span class="line">            process.StartInfo.Arguments = arg;</span><br><span class="line"></span><br><span class="line">            process.StartInfo.UseShellExecute = <span class="literal">false</span>;       <span class="comment">// 스트림을 읽는데 필요</span></span><br><span class="line">            process.StartInfo.CreateNoWindow = <span class="literal">false</span>;</span><br><span class="line">            process.StartInfo.RedirectStandardOutput = <span class="literal">true</span>; <span class="comment">// 실행한 프로그램의 출력을 얻는다.</span></span><br><span class="line"></span><br><span class="line">            process.Start();</span><br><span class="line">            process.WaitForExit(); <span class="comment">// 종료시까지 대기</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> result = process.StandardOutput.ReadToEnd(); <span class="comment">// 실행한 프로그램의 출력을 읽는다.</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/07/31/csharp-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Eclipse] 프로젝트에 jar 파일 추가하는 방법</title>
      <link>http://hgko1207.github.io/2023/07/29/eclipse-1/</link>
      <guid>http://hgko1207.github.io/2023/07/29/eclipse-1/</guid>
      <pubDate>Sat, 29 Jul 2023 04:48:04 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;이클립스에서 라이브러리(jar 파일)를 추가하는 방법입니다.&lt;br /&gt;
일반적인 자바 프로젝트와 웹 프로젝트일 경우 두 가지로 방법으로 나눠집니다.&lt;/p&gt;
&lt;h2 id=&quot;자바-프로젝트&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>이클립스에서 라이브러리(jar 파일)를 추가하는 방법입니다.<br />일반적인 자바 프로젝트와 웹 프로젝트일 경우 두 가지로 방법으로 나눠집니다.</p><h2 id="자바-프로젝트"><a class="markdownIt-Anchor" href="#자바-프로젝트"></a> 자바 프로젝트</h2><p><strong>1. 프로젝트 우클릭 &gt; properties</strong></p><img width="50%" src="/images/eclipse/1.png" alt="다운로드" title="" ><p><strong>2. Java Build Path &gt; Libraries &gt; Add External JARs</strong></p><p><img src="/images/eclipse/2.png" alt="Add External JARs" /></p><p><strong>3. 폴더에서 jar 파일 선택</strong></p><p><img src="/images/eclipse/3.png" alt="jar 파일 선택" /></p><p><strong>4. 라이브러리 추가 후 [Apply and Close] 클릭</strong></p><p><img src="/images/eclipse/4.png" alt="Apply and Close" /></p><h2 id="웹-프로젝트maven"><a class="markdownIt-Anchor" href="#웹-프로젝트maven"></a> 웹 프로젝트(Maven)</h2><p><strong>1. 아래와 같이 <code>src/main/web/WEB-INF/lib</code> 폴더를 생성하고 lib 폴더에 라이브러리 파일을 넣어준다.</strong></p><p><img src="/images/eclipse/5.png" alt="폴더" /></p><p><strong>2. 프로젝트 우클릭 &gt; properties</strong></p><img width="50%" src="/images/eclipse/1.png" alt="properties" title="properties" ><p><strong>3. Java Build Path &gt; Libraries &gt; Add Library</strong></p><p><img src="/images/eclipse/6.png" alt="Add Library" /></p><p><strong>4. Web App Libraries 선택 후 [Next] 클릭</strong></p><p><img src="/images/eclipse/7.png" alt="Web App Libraries" /></p><p><strong>5. 프로젝트 선택 후 [Finish] 클릭</strong></p><img width="70%" src="/images/eclipse/8.png" alt="Finish" title="Finish" ><p><strong>6. Web App Libraries 추가 확인 후 [Apply and Close] 클릭</strong></p><p><img src="/images/eclipse/9.png" alt="Apply and Close" /></p><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>라이브러리(jar 파일) 추가 후 코드에서 import해서 사용하시면 됩니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/07/29/eclipse-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>자동가입 방지문자(SimpleCaptcha) 사용 방법</title>
      <link>http://hgko1207.github.io/2023/07/29/web-1/</link>
      <guid>http://hgko1207.github.io/2023/07/29/web-1/</guid>
      <pubDate>Sat, 29 Jul 2023 04:25:33 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;로그인 또는 회원가입 시 자동 등록 방지가 필요할 경우가 있다.&lt;br /&gt;
이를 구현하기 위해 여러가지가 있는데 CATPCHA를 사용하는 방법을 사용하였다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CAPTCHA는 HIP 기술의 일종으로, 어떠한 사용
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>로그인 또는 회원가입 시 자동 등록 방지가 필요할 경우가 있다.<br />이를 구현하기 위해 여러가지가 있는데 CATPCHA를 사용하는 방법을 사용하였다.</p><blockquote><p>CAPTCHA는 HIP 기술의 일종으로, 어떠한 사용자가 실제 사람인지 컴퓨터 프로그램인지를 구별하기 위해 사용되는 방법이다. 사람은 구별할 수 있지만 컴퓨터는 구별하기 힘들게 의도적으로 비틀거나 덧칠한 그림을 주고 그 그림에 쓰여 있는 내용을 물어보는 방법이 자주 사용된다. <a href="https://ko.wikipedia.org/wiki/CAPTCHA" target="_blank" rel="noopener">위키백과</a></p></blockquote><h2 id="다운로드"><a class="markdownIt-Anchor" href="#다운로드"></a> 다운로드</h2><p>CATPCHA를 사용하기 위해선 <a href="https://sourceforge.net/projects/simplecaptcha/" target="_blank" rel="noopener">https://sourceforge.net/projects/simplecaptcha/</a> 사이트로 이동해서 jar 파일을 다운로드 받는다.</p><p><img src="/images/web/1.png" alt="다운로드" /></p><h2 id="jar-파일-추가"><a class="markdownIt-Anchor" href="#jar-파일-추가"></a> jar 파일 추가</h2><p>사용하는 툴이 이클립스 일 경우 jar 파일을 프로젝트에 포함시켜야 한다.</p><p><a href="https://hgko1207.github.io/2023/07/29/eclipse-1/">[Eclipse] 프로젝트에 jar 파일 추가하는 방법</a> 사이트를 참고해서 추가합니다.</p><h2 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h2><h3 id="html"><a class="markdownIt-Anchor" href="#html"></a> HTML</h3><p>먼저 자동입력 방지 기능을 넣기 위한 화면 코드다. CATPCHA 이미지를 보여주고 이미지 안의 숫자들을 새로고침 할 수 있는 버튼을 만들었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mt-3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-label fw-bold"</span>&gt;</span>자동입력 방지문자<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-flex"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"captchaImg"</span> <span class="attr">src</span>=<span class="string">"captchaImg"</span> <span class="attr">title</span>=<span class="string">"캡차 이미지"</span> <span class="attr">alt</span>=<span class="string">"캡차 이미지"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"refresh_btn"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-gray w-50 ms-2"</span>&gt;</span>새로고침<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-flex mt-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"captcha"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control input-control"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="controller-부분"><a class="markdownIt-Anchor" href="#controller-부분"></a> Controller 부분</h3><p>html 에서 <code>/captchaImg</code> 경로를 호출하면 아래 컨트롤러가 호출된다. Captcha 이미지 설정을 한 후 세션에 값을 저장하고 이미지를 그려준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * captchaImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"captchaImg"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">captchaImg</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 폰트 설정 =========================================================</span></span><br><span class="line">    List&lt;Font&gt; fontList = <span class="keyword">new</span> ArrayList&lt;Font&gt;();</span><br><span class="line">    fontList.add(<span class="keyword">new</span> Font(<span class="string">""</span>, Font.HANGING_BASELINE, <span class="number">28</span>));</span><br><span class="line">    fontList.add(<span class="keyword">new</span> Font(<span class="string">"Courier"</span>, Font.ITALIC, <span class="number">28</span>));</span><br><span class="line">    fontList.add(<span class="keyword">new</span> Font(<span class="string">""</span>, Font.PLAIN, <span class="number">28</span>));</span><br><span class="line"></span><br><span class="line">    List&lt;Color&gt; colorList = <span class="keyword">new</span> ArrayList&lt;Color&gt;();</span><br><span class="line">    colorList.add(Color.black);</span><br><span class="line"></span><br><span class="line">    Captcha captcha = <span class="keyword">new</span> Captcha.Builder(<span class="number">200</span>, <span class="number">36</span>) <span class="comment">// 이미지 크기 설정</span></span><br><span class="line">        .addText(<span class="keyword">new</span> NumbersAnswerProducer(<span class="number">6</span>), <span class="keyword">new</span> DefaultWordRenderer(colorList, fontList))</span><br><span class="line">        <span class="comment">//.gimp(new DropShadowGimpyRenderer()).gimp() // 그림자 효과 추가</span></span><br><span class="line">        .addNoise().addNoise() <span class="comment">// 한번 호출할 떄마다 하나의 라인이 추가된다</span></span><br><span class="line">        .addBackground(<span class="keyword">new</span> GradiatedBackgroundProducer())  <span class="comment">// Gradiated백그라운드 효과 추가</span></span><br><span class="line">        .addBorder() <span class="comment">// 검정 테두리 선 생성</span></span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">    response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 캐쉬를 지우기 위해 헤더값을 설정</span></span><br><span class="line">    response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>);</span><br><span class="line">    response.setDateHeader(<span class="string">"Max-Age"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 리턴값을 image형태로 설정</span></span><br><span class="line">    response.setContentType(<span class="string">"image/png"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 세션에 자동가입방지 문자를 저장한다.</span></span><br><span class="line">    request.getSession().setAttribute(Captcha.NAME, captcha);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Image를 write 한다</span></span><br><span class="line">    CaptchaServletUtil.writeImage(response, captcha.getImage());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음은 현재 보여지는 자동입력 방지문자와 입력한 문자가 일치하는 하는지 확인하는 코드다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 자동입력 방지문자 확인</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"isCorrect"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; isCorrect(HttpServletRequest request, String answer) &#123;</span><br><span class="line">  <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  Captcha captcha = (Captcha) request.getSession().getAttribute(Captcha.NAME);</span><br><span class="line">  <span class="keyword">if</span> (captcha.isCorrect(answer)) &#123;</span><br><span class="line">    result = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(result, HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h3><p>화면단에서 자등입력 방지문자를 잘 입력했는지 확인하는 코드다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 자동입력 방지문자가 일치하는지 확인</span></span><br><span class="line"><span class="keyword">const</span> isCaptCha = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> answer = $(<span class="string">'#captcha'</span>).val();</span><br><span class="line">  <span class="keyword">if</span> (answer == <span class="string">''</span>) &#123;</span><br><span class="line">    alert(<span class="string">'자동입력 방지문자를 입력해주세요.'</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;contextPath&#125;</span>/signup/isCorrect`</span>,</span><br><span class="line">    type: <span class="string">'GET'</span>,</span><br><span class="line">    data: &#123; <span class="attr">answer</span>: answer &#125;,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">      result = response;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isCaptCha()) &#123;</span><br><span class="line">  alert(<span class="string">'자동입력 방지문자가 일치하지 않습니다.'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#captcha'</span>).focus();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">'자동입력 방지문자가 일치합니다.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>새로고침 버튼을 누를 경우 자동입력 방지문자 이미지 안의 숫자가 바뀐다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 자동입력 방지문자 새로고침</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$(<span class="string">'#refresh_btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'#captchaImg'</span>).attr(<span class="string">'src'</span>, <span class="string">'captchaImg'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="화면"><a class="markdownIt-Anchor" href="#화면"></a> 화면</h2><p>성공적으로 자동입력 방지문자 이미지를 가져왔다! 위의 방법처럼 쉽게 구현할 수 있다.</p><p><img src="/images/web/2.png" alt="방지문자" /></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/07/29/web-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] DI 수명(lifetime)</title>
      <link>http://hgko1207.github.io/2023/07/21/angular-13/</link>
      <guid>http://hgko1207.github.io/2023/07/21/angular-13/</guid>
      <pubDate>Fri, 21 Jul 2023 12:07:55 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;transient&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#transient&quot;&gt;&lt;/a&gt; Transient&lt;/h2&gt;
&lt;p&gt;Transient 서비스는 주입될 때마다 생성됩니다. 즉, 컴포넌트(component)가 서
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="transient"><a class="markdownIt-Anchor" href="#transient"></a> Transient</h2><p>Transient 서비스는 주입될 때마다 생성됩니다. 즉, 컴포넌트(component)가 서비스를 주입할 때마다 서비스의 새 인스턴스가 생성됩니다. Transient 서비스의 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TransientService &#123;</span><br><span class="line">  <span class="keyword">private</span> data: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = <span class="built_in">Math</span>.random();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>컴포넌트가 <code>TransientService</code> 를 주입하면 매번 서비스의 새 인스턴스가 생성됩니다.</p><h2 id="scoped"><a class="markdownIt-Anchor" href="#scoped"></a> Scoped</h2><p>Scoped 서비스는 Angular 모듈당 한 번 생성됩니다. 이는 동일한 모듈 내의 컴포넌트(component)가 서비스를 주입할 때마다 동일한 서비스 인스턴스가 사용됨을 의미합니다. Scoped 서비스의 예는 다음과 같습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'my-module'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ScopedService &#123;</span><br><span class="line">  <span class="keyword">private</span> data: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = <span class="built_in">Math</span>.random();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>동일한 모듈 내의 컴포넌트가 <code>ScopedService</code> 를 주입하면 동일한 서비스 인스턴스가 사용됩니다.</p><h2 id="singleton"><a class="markdownIt-Anchor" href="#singleton"></a> Singleton</h2><p>Singleton 서비스는 한 번 생성되고 동일한 인스턴스가 애플리케이션 전체에서 사용됩니다. 다음은 Singleton 서비스의 예입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SingletonService &#123;</span><br><span class="line">  <span class="keyword">private</span> data: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = <span class="built_in">Math</span>.random();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>컴포넌트가 <code>SingletonService</code> 를 주입하면 애플리케이션 전체에서 동일한 서비스 인스턴스가 사용됩니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/07/21/angular-13/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] OpenLayers로 지도 생성</title>
      <link>http://hgko1207.github.io/2023/07/18/angular-12/</link>
      <guid>http://hgko1207.github.io/2023/07/18/angular-12/</guid>
      <pubDate>Tue, 18 Jul 2023 05:05:29 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://openlayers.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OpenLayers&lt;/a&gt; 는 개인 또는 상업 프로젝트에 지도를 추가해야 하는 경우 광범위한 사용 사례에 적합한 오픈 소스 라이브
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><a href="https://openlayers.org/" target="_blank" rel="noopener">OpenLayers</a> 는 개인 또는 상업 프로젝트에 지도를 추가해야 하는 경우 광범위한 사용 사례에 적합한 오픈 소스 라이브러리입니다. 아래 단계를 따라하면 몇 분 안에 빠르게 실행할 수 있습니다.</p><p>Angular 프로젝트를 한 번도 해본 적이 없는 경우 새 프로젝트를 만드는 방법을 보여 드리겠습니다. 하지만 해당 부분을 건너뛰고 OpenLayers를 기존 프로젝트에 추가 할 수 있습니다.</p><h2 id="새-Angular-프로젝트-만들기"><a class="header-anchor" href="#새-Angular-프로젝트-만들기">¶</a>새 Angular 프로젝트 만들기</h2><p>이 시점에서 첫 번째 Angular 프로젝트를 설정하는 방법을 보여 드리겠습니다. 모든 컴퓨터 운영 체제를 사용할 수 있으며 Angular는 macOS, Linux 및 Windows에서 작동합니다. 이것은 지금 사용하는 설정입니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Angular</span> <span class="string">CLI: 16.1.0</span></span><br><span class="line"><span class="attr">Node</span>: <span class="string">18.15.0</span></span><br><span class="line"><span class="attr">Package</span> <span class="string">Manager: npm 9.5.0</span></span><br><span class="line"><span class="attr">OS</span>: <span class="string">win32 x64</span></span><br></pre></td></tr></table></figure><p>먼저 Angular를 처음 사용하는 경우 로컬 환경을 설정해야 합니다. <a href="https://nodejs.org/en/about" target="_blank" rel="noopener">Node.js</a> 와 <a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm" target="_blank" rel="noopener">npm</a>이 필요합니다.</p><p>설치된 버전을 확인하려면 다음 명령을 실행하십시오.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node</span> <span class="string">-v</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure><p>자, 새 프로젝트를 만들어 봅시다.</p><p>command line interface(터미널, 명령 프롬프트)를 열고 새 Angular 프로젝트에 사용하려는 디렉토리로 이동합니다. Angular CLI를 설치하려면 다음을 실행합니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -g @angular/cli</span></span><br></pre></td></tr></table></figure><p>이제 작업 공간을 만듭니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ng</span> <span class="string">new openlayers-demo</span></span><br></pre></td></tr></table></figure><p>그리고 앱을 실행할 수 있는지 확인하십시오.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">openlayers-demo</span></span><br><span class="line"><span class="attr">ng</span> <span class="string">serve — open</span></span><br></pre></td></tr></table></figure><p>잘하셨습니다. 이제 OpenLayers 설정을 시작할 준비가 되었습니다.</p><h2 id="Angular-프로젝트에-OpenLayers-추가"><a class="header-anchor" href="#Angular-프로젝트에-OpenLayers-추가">¶</a>Angular 프로젝트에 OpenLayers 추가</h2><p>최신 버전의 OpenLayers를 설치합니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install --save ol</span></span><br></pre></td></tr></table></figure><p>이 시점에서 앱을 제공하려고 하면 앱이 컴파일되지 않는 것을 알 수 있습니다. 이 문제는 Openlayers 6.6 이상 버전에 존재하므로 위의 명령에 @6.5를 추가하여 Openlayers 6.5 버전을 사용하도록 결정할 수도 있습니다.</p><p>그러나 이후 버전에 존재하는 문제를 해결하는 방법을 살펴보겠습니다. 아래와 같이 ol 라이브러리와 관련된 오류가 표시됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error: node_modules/ol/<span class="built_in">source</span>/Cluster.d.ts:136:31 - error TS2314: Generic <span class="built_in">type</span> <span class="string">'Feature&lt;Geometry&gt;'</span> requires 1 <span class="built_in">type</span> argument(s).</span><br><span class="line">136     protected features: Array&lt;Feature&gt;;</span><br><span class="line">Error: node_modules/ol/<span class="built_in">source</span>/Cluster.d.ts:152:23 - error TS2314: Generic <span class="built_in">type</span> <span class="string">'VectorSource&lt;Geometry&gt;'</span> requires 1 <span class="built_in">type</span> argument(s).</span><br><span class="line">152     protected <span class="built_in">source</span>: VectorSource;</span><br></pre></td></tr></table></figure><p>오류를 해결하려면 <code>tsconfig.json</code> 파일을 열고 compilerOptions 안에 <code>&quot;skipLibCheck&quot;:true</code> 옵션을 추가합니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compileOnSave"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"./src"</span>,</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist/out-tsc"</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"declaration"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es2020"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"importHelpers"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es2020"</span>,</span><br><span class="line">    <span class="attr">"typeRoots"</span>: [<span class="string">"node_modules/@types"</span>],</span><br><span class="line">    <span class="attr">"lib"</span>: [<span class="string">"es2018"</span>, <span class="string">"dom"</span>],</span><br><span class="line">    <span class="attr">"paths"</span>: &#123;</span><br><span class="line">      <span class="attr">"@core"</span>: [<span class="string">"@core/"</span>],</span><br><span class="line">      <span class="attr">"environments"</span>: [<span class="string">"environments/"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"resolveJsonModule"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"skipLibCheck"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"angularCompilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"fullTemplateTypeCheck"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"strictInjectionParameters"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 OpenLayers CSS Style을 프로젝트에 추가하십시오. <code>angular.json</code> 파일을 열고 기존 CSS Style 옆에 <code>&quot;node_modules/ol/ol.css&quot;</code> 를 추가합니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"./node_modules/@angular/cli/lib/config/schema.json"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"newProjectRoot"</span>: <span class="string">"projects"</span>,</span><br><span class="line">  <span class="attr">"projects"</span>: &#123;</span><br><span class="line">    <span class="attr">"openlayers-demo"</span>: &#123;</span><br><span class="line">      <span class="attr">"projectType"</span>: <span class="string">"application"</span>,</span><br><span class="line">      <span class="attr">"schematics"</span>: &#123;</span><br><span class="line">        <span class="attr">"@schematics/angular:component"</span>: &#123;</span><br><span class="line">          <span class="attr">"style"</span>: <span class="string">"scss"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"root"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"sourceRoot"</span>: <span class="string">"src"</span>,</span><br><span class="line">      <span class="attr">"prefix"</span>: <span class="string">"app"</span>,</span><br><span class="line">      <span class="attr">"architect"</span>: &#123;</span><br><span class="line">        <span class="attr">"build"</span>: &#123;</span><br><span class="line">          <span class="attr">"builder"</span>: <span class="string">"@angular-devkit/build-angular:browser"</span>,</span><br><span class="line">          <span class="attr">"options"</span>: &#123;</span><br><span class="line">              ...</span><br><span class="line">              "styles": [</span><br><span class="line">                "src/styles.scss",</span><br><span class="line">                <span class="string">"node_modules/ol/ol.css"</span></span><br><span class="line">              ],</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 지도를 넣을 수 있는 컴포넌트를 만들 차례입니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ng</span> <span class="string">generate component map</span></span><br></pre></td></tr></table></figure><p>컴포넌트의 콘텐츠를 추가합니다.</p><p><code>map.component.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>map.component.scss</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.map</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>map.component.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'ol/ol.css'</span>;</span><br><span class="line"><span class="keyword">import</span> Map <span class="keyword">from</span> <span class="string">'ol/Map'</span>;</span><br><span class="line"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">'ol/View'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; OSM &#125; <span class="keyword">from</span> <span class="string">'ol/source'</span>;</span><br><span class="line"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">'ol/layer/Tile'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-map'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./map.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./map.component.scss'</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MapComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="keyword">public</span> map!: Map;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.map = <span class="keyword">new</span> Map(&#123;</span><br><span class="line">      layers: [</span><br><span class="line">        <span class="keyword">new</span> TileLayer(&#123;</span><br><span class="line">          source: <span class="keyword">new</span> OSM(),</span><br><span class="line">        &#125;),</span><br><span class="line">      ],</span><br><span class="line">      target: <span class="string">'map'</span>,</span><br><span class="line">      view: <span class="keyword">new</span> View(&#123;</span><br><span class="line">        center: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        zoom: <span class="number">2</span>,</span><br><span class="line">        maxZoom: <span class="number">18</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OSM 은 OpenStreetMaps를 의미하며 여기서는 표준 지도를 사용하지만 OpenLayers는 다양한 지도 Tile Servers, 이미지 등과 함께 작동하며 사용자 고유의 레이어를 만들고 사용자 지정할 수도 있습니다.</p><p>마지막 단계는 지도 컴포넌트의 내용을 포함하도록 루트 html 파일 <code>app.component.html</code>의 내용을 바꾸는 것입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-map</span>&gt;</span><span class="tag">&lt;/<span class="name">app-map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이제 작동하는 웹사이트를 확인할 시간입니다!</p><p><img src="/images/angular/openlayers.png" alt="openlayers"></p><p>이 글에서는 OpenLayers 라이브러리로 Angular 프로젝트를 설정하여 웹사이트에서 지도를 사용하는 방법을 배웠습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/07/18/angular-12/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C#] FileSystemWatcher 파일 감시 모니터링</title>
      <link>http://hgko1207.github.io/2023/07/18/csharp-1/</link>
      <guid>http://hgko1207.github.io/2023/07/18/csharp-1/</guid>
      <pubDate>Tue, 18 Jul 2023 04:49:39 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;FileSystemWatcher&lt;/strong&gt; 는 특정 폴더 경로(디렉토리)의 모든 파일이 생성되거나 변경되면 함수 호출을 해줍니다.&lt;/p&gt;
&lt;h2 id=&quot;사용-방법&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>FileSystemWatcher</strong> 는 특정 폴더 경로(디렉토리)의 모든 파일이 생성되거나 변경되면 함수 호출을 해줍니다.</p><h2 id="사용-방법"><a class="markdownIt-Anchor" href="#사용-방법"></a> 사용 방법</h2><p>사용 방법 순서입니다.</p><ol><li><code>FileSystemWatcher</code> 생성자 호출</li><li>감시할 폴더 설정(디렉토리)</li><li>감시할 항목들 설정 (파일 생성, 크기, 이름, 마지막 접근 변경 등)</li><li>감시할 이벤트 설정 (생성, 변경, 삭제 등)</li><li>FIleSystemWatcher 감시 모니터링 활성화</li><li>감시할 폴더 내부 변경 시 event 호출</li></ol><h2 id="구현"><a class="markdownIt-Anchor" href="#구현"></a> 구현</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test.Utils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileWatcher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWatcher</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">string</span> filePath = <span class="string">$"D:\\files\\"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1. FileSystemWatcher 생성자 호출</span></span><br><span class="line">            FileSystemWatcher watcher = <span class="keyword">new</span> FileSystemWatcher();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 감시할 폴더 설정(디렉토리)</span></span><br><span class="line">            watcher.Path = filePath;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 감시할 항목들 설정 (파일 생성, 크기, 이름, 마지막 접근 변경 등)</span></span><br><span class="line">            watcher.NotifyFilter = NotifyFilters.FileName |</span><br><span class="line">                                    NotifyFilters.DirectoryName |</span><br><span class="line">                                    NotifyFilters.Size |</span><br><span class="line">                                    NotifyFilters.LastAccess |</span><br><span class="line">                                    NotifyFilters.CreationTime |</span><br><span class="line">                                    NotifyFilters.LastWrite;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//감시할 파일 유형 선택 예) *.* 모든 파일</span></span><br><span class="line">            watcher.Filter = <span class="string">"*.*"</span>;</span><br><span class="line"></span><br><span class="line">            watcher.IncludeSubdirectories = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 감시할 이벤트 설정 (생성, 변경..)</span></span><br><span class="line">            watcher.Created += <span class="keyword">new</span> FileSystemEventHandler(Changed);</span><br><span class="line">            watcher.Changed += <span class="keyword">new</span> FileSystemEventHandler(Changed);</span><br><span class="line">            watcher.Renamed += <span class="keyword">new</span> RenamedEventHandler(Renamed);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. FIleSystemWatcher 감시 모니터링 활성화</span></span><br><span class="line">            watcher.EnableRaisingEvents = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 감시할 폴더 내부 변경 시 event 호출</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Changed</span>(<span class="params"><span class="keyword">object</span> source, FileSystemEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.Write(e.FullPath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 이름 변경 시 event 호출</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Renamed</span>(<span class="params"><span class="keyword">object</span> source, RenamedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MessageBox.Show(e.FullPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileSystemWatcher</code> 은 <code>using System.IO</code> 를 선언해 주어야 합니다.</p><p><code>initWatcher()</code> 함수를 실행시키면 <strong>D:\files\</strong> 해당 경로에 파일이 생기면 바로 <code>Changed()</code> 이벤트가 호출됩니다.</p><p>호출 될 때 담겨지는 파라미터 <code>FileSystemEventArgs e</code> 에서 e.Fullpath 를 통해 생성된 파일의 전체 경로를 가져옵니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 예)</span></span><br><span class="line">D:\files\새 텍스트 문서.txt</span><br></pre></td></tr></table></figure><p>이렇게 FileSystemWatcher 를 사용해서 해당 폴더를 실시간으로 감지 모니터링하는 기능을 구현했습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/07/18/csharp-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] cross-fetch 사용 방법</title>
      <link>http://hgko1207.github.io/2023/07/11/angular-11/</link>
      <guid>http://hgko1207.github.io/2023/07/11/angular-11/</guid>
      <pubDate>Tue, 11 Jul 2023 02:48:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt; 개발 시 api 통신을 하기 위해 Fetch API 사용해 보았다.&lt;/p&gt;
&lt;h2 id=&quot;fetch-api-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#fetch-api-란&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong> 개발 시 api 통신을 하기 위해 Fetch API 사용해 보았다.</p><h2 id="fetch-api-란"><a class="markdownIt-Anchor" href="#fetch-api-란"></a> Fetch API 란</h2><blockquote><p>Fetch API는 HTTP 파이프라인을 구성하는 요청과 응답 등의 요소를 JavaScript에서 접근하고 조작할 수 있는 인터페이스를 제공합니다. Fetch API가 제공하는 전역 fetch() 메서드로 네트워크의 리소스를 쉽게 비동기적으로 취득할 수도 있습니다.</p></blockquote><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p>Fetch API를 사용하기 위해 <code>cross-fetch</code> 패키지를 설치한다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm 을 사용하여 설치하는 경우</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install --save cross-fetch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn 을 사용하여 설치하는 경우</span></span><br><span class="line"><span class="attr">yarn</span> <span class="string">add cross-fetch</span></span><br></pre></td></tr></table></figure><h2 id="apiservice-구축"><a class="markdownIt-Anchor" href="#apiservice-구축"></a> ApiService 구축</h2><p>api는 전역에서 사용하는 것이기 때문에 service로 만든다.<br /><code>src/app/services</code> 폴더 아래에 <code>api.service.ts</code> 파일을 만들었다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app/services/api.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="http-메서드-설정"><a class="markdownIt-Anchor" href="#http-메서드-설정"></a> http 메서드 설정</h2><p>HTTP 요청 메소드에서 자주 사용하는 <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> 를 사용하는 함수를 생성한다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'cross-fetch'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">get</span>(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;Response&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fetch(url, &#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">'Content-type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> post(url: <span class="built_in">string</span>, payload: BodyInit): <span class="built_in">Promise</span>&lt;Response&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fetch(url, &#123;</span><br><span class="line">      method: <span class="string">'POST'</span>,</span><br><span class="line">      body: payload,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">'Content-type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> put(url: <span class="built_in">string</span>, payload: BodyInit): <span class="built_in">Promise</span>&lt;Response&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fetch(url, &#123;</span><br><span class="line">      method: <span class="string">'PUT'</span>,</span><br><span class="line">      body: payload,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">'Content-type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">delete</span>(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;Response&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fetch(url, &#123;</span><br><span class="line">      method: <span class="string">'DELETE'</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">'Content-type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fetch 의 return 타입은 Promise 이기 때문에 <code>then</code> 함수를 사용하거나 <code>async</code> <code>await</code> 를 사용한다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app/app.components.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApiService &#125; <span class="keyword">from</span> <span class="string">'app/services/api.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.scss'</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="keyword">private</span> BASE_URL = <span class="string">'https://webtoon-crawler.nomadcoders.workers.dev'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> api: ApiService</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.api.get(<span class="string">`<span class="subst">$&#123;BASE_URL&#125;</span>/today`</span>).then(<span class="function">(<span class="params">response: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response.json());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">Fetch API 사용하기</a></li><li><a href="https://github.com/lquixada/cross-fetch" target="_blank" rel="noopener">https://github.com/lquixada/cross-fetch</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/07/11/angular-11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] HttpClient 사용 방법</title>
      <link>http://hgko1207.github.io/2023/07/11/angular-10/</link>
      <guid>http://hgko1207.github.io/2023/07/11/angular-10/</guid>
      <pubDate>Tue, 11 Jul 2023 02:13:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt; 개발 시 프로젝트 초기에 api 통신에 대해 설정 파일을 생성하고 설정해두면 작업하기가 편합니다.&lt;br&gt;
Angluar는 &lt;code&gt;@angular/common&lt;/code&gt; 안에 존재하는 http 패키
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong> 개발 시 프로젝트 초기에 api 통신에 대해 설정 파일을 생성하고 설정해두면 작업하기가 편합니다.<br>Angluar는 <code>@angular/common</code> 안에 존재하는 http 패키지를 사용하면 됩니다.</p><h2 id="import"><a class="header-anchor" href="#import">¶</a>import</h2><p>http 작업을 하기 위해 <code>src/app.module.ts</code> 파일에 HttpClientModule을 import 해야 합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClientModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppRoutingModule &#125; <span class="keyword">from</span> <span class="string">'./app-routing.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [AppComponent],</span><br><span class="line">  <span class="comment">// BrowserModule 다음에 HttpClientModule를 작성해야 한다</span></span><br><span class="line">  imports: [BrowserModule, HttpClientModule, AppRoutingModule],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="ApiService-구축"><a class="header-anchor" href="#ApiService-구축">¶</a>ApiService 구축</h2><p>api는 전역에서 사용하는 것이기 때문에 service로 만든다.<br><code>src/app/services</code> 폴더 아래에 <code>api.service.ts</code> 파일을 만들었다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app/services/api.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Injectable 이기 때문에 다른 module 에서 import 하지 않아도 바로 사용할 수 있다.</p></blockquote><h2 id="baseUrl-설정"><a class="header-anchor" href="#baseUrl-설정">¶</a>baseUrl 설정</h2><p>이제 불러 올 api의 baseUrl을 설정해준다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClient &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123; providedIn: <span class="string">'root'</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span><br><span class="line">  <span class="keyword">public</span> BASE_URL = <span class="string">'https://webtoon-crawler.nomadcoders.workers.dev'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>보통 <code>BASE_URL</code>은 각 프로젝트의 환경 별로 다르게 설정 가능하다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/environments/environments.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> environment = &#123;</span><br><span class="line">  production: <span class="literal">false</span>,</span><br><span class="line">  baseUrl: <span class="string">'https://test.api.example.com'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/environments/environment.prod.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> environment = &#123;</span><br><span class="line">  production: <span class="literal">true</span>,</span><br><span class="line">  baseUrl: <span class="string">'https://api.example.com'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위의 처럼 설정한 후 <code>src/api/api.service.ts</code>에 다음과 같이 불러와 사용하면 된다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">'environments/environment'</span>;</span><br><span class="line"><span class="comment">// ...생략</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span><br><span class="line">  <span class="keyword">public</span> BASE_URL = environment.baseUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="http-메서드-설정"><a class="header-anchor" href="#http-메서드-설정">¶</a>http 메서드 설정</h2><p>HTTP 요청 메소드에서 자주 사용하는 <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> 를 사용하는 함수를 생성한다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/api/api.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClient &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123; providedIn: <span class="string">'root'</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span><br><span class="line">  <span class="keyword">public</span> BASE_URL = <span class="string">'https://webtoon-crawler.nomadcoders.workers.dev'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>&lt;T&gt;(endPoint: <span class="built_in">string</span>): Observable&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.get&lt;T&gt;(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.BASE_URL&#125;</span><span class="subst">$&#123;endPoint&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  post&lt;T&gt;(endPoint: <span class="built_in">string</span>, body: <span class="built_in">any</span>): Observable&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.post&lt;T&gt;(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.BASE_URL&#125;</span><span class="subst">$&#123;endPoint&#125;</span>`</span>, body);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  put&lt;T&gt;(endPoint: <span class="built_in">string</span>, body: <span class="built_in">any</span>): Observable&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.put&lt;T&gt;(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.BASE_URL&#125;</span><span class="subst">$&#123;endPoint&#125;</span>`</span>, body);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>&lt;T&gt;(endPoint: <span class="built_in">string</span>): Observable&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.delete&lt;T&gt;(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.BASE_URL&#125;</span><span class="subst">$&#123;endPoint&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Angular의 http의 return 타입은 모두 Observable 이기 때문에, 할당할 변수의 타입도 Observable로 지정해야 한다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app/app.components.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApiService &#125; <span class="keyword">from</span> <span class="string">'app/services/api.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> WebToonInfo &#123;</span><br><span class="line">  id: <span class="built_in">string</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">  thumb: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.scss'</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  webToons$: Observable&lt;WebToonInfo[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> api: ApiService</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.webToons$ = <span class="keyword">this</span>.api.get(<span class="string">'/today'</span>);</span><br><span class="line">    <span class="keyword">this</span>.webToons$.subscribe(<span class="built_in">console</span>.log); <span class="comment">// console 확인</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Error-처리"><a class="header-anchor" href="#Error-처리">¶</a>Error 처리</h2><p>만약 에러를 처리하고 싶다면, 각 api 요청마다 설정할 수도 있지만 <code>api.service.ts</code> 에서 설정 해줘도 된다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app/services/api.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClient, HttpErrorResponse &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable, throwError &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; catchError &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123; providedIn: <span class="string">'root'</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span><br><span class="line">  <span class="comment">// ... 생략</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> handleError(error: HttpErrorResponse) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.status === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, error.error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`Backend error <span class="subst">$&#123;error.status&#125;</span>, <span class="subst">$&#123;error.error&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> throwError(<span class="string">'예기치 못한 에러가 발생했습니다. 다시 시도해주세요.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>&lt;T&gt;(endPoint: <span class="built_in">string</span>): Observable&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.get&lt;T&gt;(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.BASE_URL&#125;</span><span class="subst">$&#123;endPoint&#125;</span>`</span>).pipe(catchError(<span class="keyword">this</span>.handleError));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="header-anchor" href="#참고">¶</a>참고</h2><ul><li><a href="https://angular.io/guide/understanding-communicating-with-http#requesting-data-from-a-server" target="_blank" rel="noopener">Understanding communicating with backend services using HTTP</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/07/11/angular-10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Flutter 업그레이드</title>
      <link>http://hgko1207.github.io/2023/05/30/flutter-2/</link>
      <guid>http://hgko1207.github.io/2023/05/30/flutter-2/</guid>
      <pubDate>Tue, 30 May 2023 05:14:11 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;flutter-버전-오류&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#flutter-버전-오류&quot;&gt;&lt;/a&gt; Flutter 버전 오류&lt;/h2&gt;
&lt;p&gt;Flutter 프로젝트를 진행하면서 http 패키지를 설치하려고 &lt;co
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="flutter-버전-오류"><a class="markdownIt-Anchor" href="#flutter-버전-오류"></a> Flutter 버전 오류</h2><p>Flutter 프로젝트를 진행하면서 http 패키지를 설치하려고 <code>flutter pub get</code> 명령어를 실행했을때 다음과 같은 오류가 발생했습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[flutter\example] flutter pub get</span><br><span class="line">Resolving dependencies...</span><br><span class="line">The current Dart SDK version is 3.0.0-431.0.dev</span><br><span class="line"></span><br><span class="line">Because example depends on http &gt;=1.0.0 which requires SDK version ^3.0.0, version solving failed.</span><br><span class="line">exit code 1</span><br></pre></td></tr></table></figure><p>http 패키지의 <code>1.0.0</code> 버전을 설치하는데 현재 Dart SDK 버전이 <code>&gt;=3.0.0 &lt;4.0.0</code> 범위에 포함되지 않아 발생한 오류였습니다.</p><p>현재 Dart SDK 버전 <code>3.0.0-431.0.dev</code> 이 <code>&gt;=3.0.0 &lt;4.0.0</code> 범위에 포함되는 것 같지만 실제로는 조건에 충족하지 않습니다.</p><h2 id="오류-해결"><a class="markdownIt-Anchor" href="#오류-해결"></a> 오류 해결</h2><p>Dart SDK 버전을 올려주면 해결됩니다. 버전을 올리기 위해 Dart 를 새로 설치를 해도 되지만 번거롭습니다.</p><p>flutter 명령어로 Flutter 와 Dart 의 버전을 올릴 수 있기 때문에 flutter CLI 명령어로 버전을 변경합니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter</span> <span class="string">upgrade</span></span><br></pre></td></tr></table></figure><p>위의 명령어를 실행하면 다음와 같이 업그레이드를 진행합니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Upgrading</span> <span class="string">engine...</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-arm-profile/windows-x64 tools...               387ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-arm-release/windows-x64 tools...               101ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-arm64-profile/windows-x64 tools...             132ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-arm64-release/windows-x64 tools...              97ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-x64-profile/windows-x64 tools...               101ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-x64-release/windows-x64 tools...               103ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-x86 tools...                                   639ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-x64 tools...                                   628ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-arm tools...                                   521ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-arm-profile tools...                           216ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-arm-release tools...                           142ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-arm64 tools...                                 526ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-arm64-profile tools...                         261ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-arm64-release tools...                         201ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-x64-profile tools...                           258ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-x64-release tools...                           214ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">android-x86-jit-release tools...                       337ms</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">Web SDK...                                           1,662ms</span></span><br><span class="line"><span class="attr">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Flutter</span> <span class="string">3.11.0-15.0.pre.48 • channel master • https://github.com/flutter/flutter.git</span></span><br><span class="line"><span class="attr">Framework</span> <span class="string">• revision c5f45d7121 (54 minutes ago) • 2023-05-30 00:15:34 -0400</span></span><br><span class="line"><span class="attr">Engine</span> <span class="string">• revision b5f60d2b33</span></span><br><span class="line"><span class="attr">Tools</span> <span class="string">• Dart 3.1.0 (build 3.1.0-155.0.dev) • DevTools 2.23.1</span></span><br></pre></td></tr></table></figure><p>flutter 업그레이드가 끝나고 다시 <code>flutter pub get</code> 명령어를 실행하면 정상적으로 dependency 를 가지고 오는 것을 확인 할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[flutter\example] flutter pub get</span><br><span class="line">Resolving dependencies...</span><br><span class="line">&gt; collection 1.17.2 (was 1.17.1)</span><br><span class="line">+ http 1.0.0</span><br><span class="line">+ http_parser 4.0.2</span><br><span class="line">  matcher 0.12.15 (0.12.16 available)</span><br><span class="line">&gt; material_color_utilities 0.5.0 (was 0.3.0)</span><br><span class="line">&gt; test_api 0.5.2 (was 0.5.1) (0.6.0 available)</span><br><span class="line">+ typed_data 1.3.2</span><br><span class="line">Changed 6 dependencies!</span><br><span class="line"><span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/05/30/flutter-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[NestJS] End-to-end 테스트</title>
      <link>http://hgko1207.github.io/2023/05/15/nest-7/</link>
      <guid>http://hgko1207.github.io/2023/05/15/nest-7/</guid>
      <pubDate>Mon, 15 May 2023 07:11:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;end-to-end-테스트&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#end-to-end-테스트&quot;&gt;&lt;/a&gt; End-to-end 테스트&lt;/h2&gt;
&lt;p&gt;개별 모듈과 클래스에 중점을 두는 &lt;strong&gt;Unit 테스트&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="end-to-end-테스트"><a class="markdownIt-Anchor" href="#end-to-end-테스트"></a> End-to-end 테스트</h2><p>개별 모듈과 클래스에 중점을 두는 <strong>Unit 테스트</strong>와 달리 <strong>end-to-end(e2e) 테스트</strong>는 보다 종합적인 수준에서 클래스와 모듈의 상호 작용을 다룹니다.</p><p>애플리케이션이 성장함에 따라 각 API endpoint 의 E2E 동작을 수동으로 테스트하기가 어려워집니다. 자동화된 E2E 테스트는 시스템의 전반적인 동작이 정확하고 프로젝트 요구 사항을 충족하는지 확인하는 데 도움이 됩니다.</p><p><strong>Nest</strong> 를 사용하면 SuperTest 라이브러리를 사용하여 HTTP request 를 쉽게 시뮬레이션할 수 있습니다. SuperTest 는 superagent 를 기반으로 하는 HTTP 검증 라이브러리입니다.</p><h3 id="request"><a class="markdownIt-Anchor" href="#request"></a> request()</h3><p>SuperTest 의 <code>request(app.getHttpServer())</code> 함수를 사용하여 HTTP 테스트를 시뮬레이션합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// localhost:3000/ 으로 라우팅될 때 Hello World!가 출력되는지 확인</span></span><br><span class="line">it(<span class="string">'/ (GET)'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(app.getHttpServer()).get(<span class="string">'/'</span>).expect(<span class="number">200</span>).expect(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이러한 HTTP request 가 실행 중인 Nest 앱으로 라우팅되기를 원하므로 <code>request()</code> 함수에 Nest 의 기반이 되는 HTTP 리스너에 대한 참조를 전달합니다.</p><h2 id="사용-예시"><a class="markdownIt-Anchor" href="#사용-예시"></a> 사용 예시</h2><p>기본적인 <strong>CRUD</strong> (Create/Read/Update/Delete) 에 대한 테스트를 하기 위해 다음과 같이 작성할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'/users'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">'GET'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request(app.getHttpServer()).get(<span class="string">'/users'</span>).expect(<span class="number">200</span>).expect([]);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'POST'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request(app.getHttpServer())</span><br><span class="line">      .post(<span class="string">'/users'</span>)</span><br><span class="line">      .send(&#123;</span><br><span class="line">        name: <span class="string">'hgko'</span>,</span><br><span class="line">        age: <span class="number">30</span>,</span><br><span class="line">        hobbies: [<span class="string">'soccer'</span>],</span><br><span class="line">      &#125;)</span><br><span class="line">      .expect(<span class="number">201</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'PATCH'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request(app.getHttpServer())</span><br><span class="line">      .patch(<span class="string">'/users/1'</span>)</span><br><span class="line">      .send(&#123;</span><br><span class="line">        age: <span class="number">35</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      .expect(<span class="number">200</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'DELETE'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request(app.getHttpServer()).delete(<span class="string">'/users/1'</span>).expect(<span class="number">200</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://docs.nestjs.com/fundamentals/testing#end-to-end-testing" target="_blank" rel="noopener">https://docs.nestjs.com/fundamentals/testing#end-to-end-testing</a></li><li><a href="https://github.com/visionmedia/supertest" target="_blank" rel="noopener">https://github.com/visionmedia/supertest</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/05/15/nest-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[NestJS] Jest 사용 방법</title>
      <link>http://hgko1207.github.io/2023/05/15/nest-6/</link>
      <guid>http://hgko1207.github.io/2023/05/15/nest-6/</guid>
      <pubDate>Mon, 15 May 2023 01:55:57 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;NestJS&lt;/strong&gt; 에서 &lt;strong&gt;Jest&lt;/strong&gt; 를 사용하는 방법에 대해 간략하게 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;jest&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#jest&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>NestJS</strong> 에서 <strong>Jest</strong> 를 사용하는 방법에 대해 간략하게 알아보겠습니다.</p><h2 id="jest"><a class="markdownIt-Anchor" href="#jest"></a> Jest</h2><p><strong>Jest</strong> 는 단순함에 초점을 맞춘 유쾌한 JavaScript 테스팅 프레임워크입니다.<br />Babel, TypeScript, Node, React, Angular, Vue 등을 사용하는 프로젝트에서 작동합니다.</p><h2 id="시작하기"><a class="markdownIt-Anchor" href="#시작하기"></a> 시작하기</h2><h3 id="describe"><a class="markdownIt-Anchor" href="#describe"></a> describe()</h3><p><code>describe()</code> 함수를 사용하면 작은 단위의 테스트 코드를 그룹화할 수 있습니다. 작성하는 테스트 코드가 특정 component 에 속하는 테스트 코드라면 다음과 같이 <code>describe()</code> 함수를 사용해서 해당 테스트 코드들을 그룹화하는 것이 좋습니다. 테스트 결과를 확인할 때 가시적으로 보기 편하게 테스트 케이스들을 확인할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'StudentService'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  test(<span class="string">'getAll'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  test(<span class="string">'getOne'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  test(<span class="string">'create'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="it-test"><a class="markdownIt-Anchor" href="#it-test"></a> it(), test()</h3><p>테스트 케이스를 생성합니다. <code>it()</code> 함수 대신 <code>test()</code>도 사용 가능합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should be 4'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  expect(<span class="number">2</span> + <span class="number">2</span>).toBe(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'should be 4'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  expect(<span class="number">2</span> + <span class="number">2</span>).toBe(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="expect"><a class="markdownIt-Anchor" href="#expect"></a> expect()</h3><p>값을 테스트할 때마다 <code>expect()</code> 함수가 사용됩니다. 테스트할 때 <code>expect()</code> 함수를 여러개 사용할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bestJuiceFlavor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'apple'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'the best flavor is apple'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  expect(bestJuiceFlavor()).toBe(<span class="string">'apple'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="using-matchers"><a class="markdownIt-Anchor" href="#using-matchers"></a> Using Matchers</h2><h3 id="common-matchers"><a class="markdownIt-Anchor" href="#common-matchers"></a> Common Matchers</h3><p><code>toBe()</code> 함수는 <code>Object.is</code> 를 사용하여 정확한 동등성을 테스트합니다. 객체의 값을 확인하려면 대신 <code>toEqual()</code> 함수를 사용하세요.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'two plus two is four'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  expect(<span class="number">2</span> + <span class="number">2</span>).toBe(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'object assignment'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123; one: <span class="number">1</span> &#125;;</span><br><span class="line">  data[<span class="string">'two'</span>] = <span class="number">2</span>;</span><br><span class="line">  expect(data).toEqual(&#123; one: <span class="number">1</span>, two: <span class="number">2</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="strings"><a class="markdownIt-Anchor" href="#strings"></a> Strings</h3><p><code>toMatch()</code> 함수를 사용하여 정규 표현식에 대해 문자열을 확인할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'but there is a "ko" in hgko'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  expect(<span class="string">'hgko'</span>).toMatch(<span class="regexp">/ko/</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="arrays-and-iterables"><a class="markdownIt-Anchor" href="#arrays-and-iterables"></a> Arrays and iterables</h3><p><code>toContain()</code> 함수를 사용하여 배열 또는 iterable 에 특정 항목이 포함되어 있는지 확인할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shoppingList = [<span class="string">'egg'</span>, <span class="string">'coffee'</span>, <span class="string">'tissue'</span>, <span class="string">'milk'</span>];</span><br><span class="line"></span><br><span class="line">it(<span class="string">'the shopping list has milk on it'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// array</span></span><br><span class="line">  expect(shoppingList).toContain(<span class="string">'milk'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// iterable</span></span><br><span class="line">  expect(<span class="keyword">new</span> Set(shoppingList)).toContain(<span class="string">'milk'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="exceptions"><a class="markdownIt-Anchor" href="#exceptions"></a> Exceptions</h3><p>특정 함수가 호출될 때 오류가 발생하는지 테스트하려면 <code>toThrow()</code> 함수를 사용합니다.<br />예외를 발생시키는 함수는 래핑 함수 내에서 호출해야 합니다. 그렇지 않으면 <code>toThrow</code> assertion 이 실패합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'getOne'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">'shoule find a student'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> student = service.getOne(<span class="number">1</span>);</span><br><span class="line">    expect(student).toBeDefined();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should throw 404 error'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      service.getOne(<span class="number">999</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      expect(e).toBeInstanceOf(NotFoundException);</span><br><span class="line">      expect(e.message).toEqual(<span class="string">`Student with ID: 999 not found.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>toBeInstanceOf(Class)</code> 함수를 사용하여 객체가 클래스의 인스턴스인지 확인 할 수 있습니다.</p><h2 id="테스트-전후-처리"><a class="markdownIt-Anchor" href="#테스트-전후-처리"></a> 테스트 전/후 처리</h2><h3 id="beforeeach"><a class="markdownIt-Anchor" href="#beforeeach"></a> beforeEach</h3><p>각각의 테스트가 실행되기 전에 매번 함수를 실행합니다.<br />각각의 테스트 전에 각 테스트에서 사용할 전역 상태를 재설정하려는 경우에 유용합니다.<br />함수가 promise 을 반환하거나 generator 인 경우 Jest 는 테스트를 실행하기 전에 해당 promise 가 해결될 때까지 기다립니다.<br />밀리초로 대기할 시간을 지정할 수 있습니다. (기본 시간 5초)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users: User[];</span><br><span class="line"></span><br><span class="line"><span class="comment">// test() 함수들이 실행될때마다 beforeEach()에서 설정한, users 데이터를 사용하게 된다.</span></span><br><span class="line">beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  users.push(&#123; id: <span class="number">1</span>, name: <span class="string">'hgko'</span> &#125;, &#123; id: <span class="number">2</span>, name: <span class="string">'eden'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'find all users'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ... 테스트하면서 users의 데이터들을 가져와 사용한다.</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'create a user'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ... 테스트하면서 users의 데이터들을 가져와 사용한다.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="aftereach"><a class="markdownIt-Anchor" href="#aftereach"></a> afterEach</h3><p>각각의 테스트가 완료된 후 함수를 실행합니다.</p><h3 id="beforeall"><a class="markdownIt-Anchor" href="#beforeall"></a> beforeAll</h3><p>모든 테스트가 실행되기 전에 딱 한 번 함수를 실행합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> connection;</span><br><span class="line"></span><br><span class="line">beforeAll(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 테스트 실행하기전에 데이터베이스에 접속할 연결(Connection) 개체를 만든다.</span></span><br><span class="line">  conection = openConnection(&#123; host: <span class="string">'...'</span>, port: <span class="string">'...'</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="afterall"><a class="markdownIt-Anchor" href="#afterall"></a> afterAll</h3><p>모든 테스트가 완료된 후 함수를 실행합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">afterAll(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 데이터베이스 Connection을 종료한다.</span></span><br><span class="line">  conection.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="실행"><a class="markdownIt-Anchor" href="#실행"></a> 실행</h2><p>NestJS 개발환경에서 <code>package.json</code> 파일에 Testing 하는 명령어가 정의되어 있습니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "test": "jest",</span><br><span class="line">    "test:watch": "jest --watch",</span><br><span class="line">    "test:cov": "jest --coverage",</span><br><span class="line">    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",</span><br><span class="line">    "test:e2e": "jest --config ./test/jest-e2e.json"</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음과 같이 테스트 하려는 방식에 따라 명령어를 실행해서 테스트합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Unit 테스트</span></span><br><span class="line">npm run test</span><br><span class="line">npm run test:watch</span><br><span class="line">npm run test:cov</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> E2E 테스트</span></span><br><span class="line">npm rum test:e2e</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://jestjs.io/" target="_blank" rel="noopener">https://jestjs.io/</a></li><li><a href="https://jestjs.io/docs/getting-started" target="_blank" rel="noopener">https://jestjs.io/docs/getting-started</a></li><li><a href="https://jestjs.io/docs/expect" target="_blank" rel="noopener">https://jestjs.io/docs/expect</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/05/15/nest-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[NestJS] Mapped types의 Partial 사용 방법</title>
      <link>http://hgko1207.github.io/2023/05/13/nest-5/</link>
      <guid>http://hgko1207.github.io/2023/05/13/nest-5/</guid>
      <pubDate>Sat, 13 May 2023 12:46:39 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;mapped-types&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mapped-types&quot;&gt;&lt;/a&gt; Mapped types&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CRUD&lt;/strong&gt; (Create/Read/Update/
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="mapped-types"><a class="markdownIt-Anchor" href="#mapped-types"></a> Mapped types</h2><p><strong>CRUD</strong> (Create/Read/Update/Delete) 와 같은 기능을 구축할 때 기본 엔터티 클래스를 기능에 맞게 변형하는 것이 필요한 경우가 많습니다. Nest 는 이 작업을 보다 편리하게 만들기 위해 클래스 변환을 수행하는 여러 유틸리티 기능을 제공합니다.</p><h2 id="partial"><a class="markdownIt-Anchor" href="#partial"></a> Partial</h2><p>input validation types(DTO라고도 함)을 빌드할 때 동일한 클래스에 대한 <strong>create</strong> 및 <strong>update</strong> 클래스로 변형하는 것이 필요한 경우가 많습니다. 예를 들어, <strong>create</strong> 에는 모든 필드가 필요할 수 있지만 <strong>update</strong> 는 모든 필드를 선택 사항으로 만들 수 있습니다. Nest 는 이 작업을 더 쉽게 만들고 보일러플레이트(Boilerplate) 코드를 최소화하기 위해 <code>PartialType()</code> 유틸리티 함수를 제공합니다. <code>PartialType()</code> 함수는 입력 클래스의 모든 속성이 선택 사항으로 설정된 클래스를 반환합니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p>Mapped types 설치를 통해 PartialType 을 가져올 수 있습니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">i @nestjs/mapped-types</span></span><br></pre></td></tr></table></figure><h2 id="사용-예시"><a class="markdownIt-Anchor" href="#사용-예시"></a> 사용 예시</h2><p>이전 글 <a href="https://hgko1207.github.io/2023/05/11/nest-4/">[NestJS] ValidationPipe 사용 방법</a> 에서 생성한 사용자 등록 DTO 클래스를 이용합니다. 사용자 등록 DTO 클래스의 필드들은 모두 필수 항목입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create-user.dto.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; IsString, IsNumber &#125; <span class="keyword">from</span> <span class="string">'class-validator'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CreateUserDto &#123;</span><br><span class="line">  <span class="meta">@IsString</span>()</span><br><span class="line">  readonly name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@IsNumber</span>()</span><br><span class="line">  readonly age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@IsString</span>(&#123; each: <span class="literal">true</span> &#125;)</span><br><span class="line">  readonly hobbies: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용자 등록 DTO 클래스와 동일한 필드를 가지지만 각 필드가 선택 사항인 사용자 수정 DTO 클래스를 생성하려면 <code>PartialType()</code> 함수를 상속 받고 사용자 등록 DTO 클래스인 <code>CreateUserDto</code> 를 인수로 전달합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// update-user.dto.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; PartialType &#125; <span class="keyword">from</span> <span class="string">'@nestjs/mapped-types'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CreateUserDto &#125; <span class="keyword">from</span> <span class="string">'./create-user.dto'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UpdateUserDto <span class="keyword">extends</span> PartialType(CreateUserDto) &#123;&#125;</span><br></pre></td></tr></table></figure><p>사용자 수정 요청을 받기 위해 컨트롤러 클래스를 생성합니다. <code>update</code> 함수의 파라미터에 생성한 DTO 클래스를 타입으로 지정합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Body, Controller, Patch &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UpdateUserDto &#125; <span class="keyword">from</span> <span class="string">'./dto/update-user.dto'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 사용자 수정</span></span><br><span class="line"><span class="comment">   * @param userData</span></span><br><span class="line"><span class="comment">   * @returns</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Patch</span>()</span><br><span class="line">  update(<span class="meta">@Body</span>() userData: UpdateUserDto) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'사용자 수정 성공'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용자 수정 요청을 해보겠습니다. Postman 또는 Insomnia 툴을 이용합니다.<br /><a href="http://localhost:3000/student/" target="_blank" rel="noopener">http://localhost:3000/student/</a> 주소를 PATCH 방식으로 요청합니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 클라이언트 측에서 전송한 데이터가 다음과 같을 경우</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"height"</span>: <span class="number">180</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 서버에서 응답</span></span><br><span class="line">사용자 수정 성공</span><br></pre></td></tr></table></figure><p>사용자 등록과 달리 모든 필드가 선택 사항으로 설정되어 있어 요청할 때 속성들을 입력하지 않아도 잘 동작하는 것을 확인할 수 있습니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://docs.nestjs.com/openapi/mapped-types#partial" target="_blank" rel="noopener">https://docs.nestjs.com/openapi/mapped-types#partial</a></li><li><a href="https://www.npmjs.com/package/class-validator" target="_blank" rel="noopener">https://www.npmjs.com/package/class-validator</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/05/13/nest-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[NestJS] ValidationPipe 사용 방법</title>
      <link>http://hgko1207.github.io/2023/05/11/nest-4/</link>
      <guid>http://hgko1207.github.io/2023/05/11/nest-4/</guid>
      <pubDate>Thu, 11 May 2023 03:10:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;validation&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#validation&quot;&gt;&lt;/a&gt; Validation&lt;/h2&gt;
&lt;p&gt;웹 애플리케이션으로 전송되는 데이터의 검증을 도와줍니다.&lt;br /&gt;
들어오는 요청을 자
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="validation"><a class="markdownIt-Anchor" href="#validation"></a> Validation</h2><p>웹 애플리케이션으로 전송되는 데이터의 검증을 도와줍니다.<br />들어오는 요청을 자동으로 검증하기 위해 Nest 는 즉시 사용할 수 있는 여러 파이프를 제공합니다.</p><h2 id="validationpipe"><a class="markdownIt-Anchor" href="#validationpipe"></a> ValidationPipe</h2><p><strong>ValidationPipe</strong>는 강력한 클래스 유효성 검사기 패키지와 선언적 유효성 검사 데코레이터를 사용합니다. <strong>ValidationPipe</strong>는 들어오는 모든 클라이언트 페이로드에 대해 유효성 검사 규칙을 적용하는 편리한 접근 방식을 제공합니다.</p><p>ValidationPipe 사용을 위한 <code>class-validator</code>, <code>class-transformer</code> 패키지를 설치합니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">i --save class-validator class-transformer</span></span><br></pre></td></tr></table></figure><h3 id="사용-예시"><a class="markdownIt-Anchor" href="#사용-예시"></a> 사용 예시</h3><p>ValidationPipe 를 사용하기 위해 <code>main.ts</code> 파일에 다음과 같이 추가합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">'@nestjs/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">'./app.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ValidationPipe &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">  <span class="comment">// ValidationPipe 추가</span></span><br><span class="line">  app.useGlobalPipes(<span class="keyword">new</span> ValidationPipe());</span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br></pre></td></tr></table></figure><p>유효성 검사를 위해 사용자 등록을 예시로 작성했습니다.</p><p>먼저 사용자 등록을 위한 DTO(Data Transfer Object) 클래스를 생성합니다. 그리고 validation decorator(IsString, IsNumber 등)를 유효성 검사하기 위한 필드에 추가합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create-user.dto.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; IsString, IsNumber &#125; <span class="keyword">from</span> <span class="string">'class-validator'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CreateUserDto &#123;</span><br><span class="line">  <span class="meta">@IsString</span>()</span><br><span class="line">  readonly name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@IsNumber</span>()</span><br><span class="line">  readonly age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@IsString</span>(&#123; each: <span class="literal">true</span> &#125;)</span><br><span class="line">  readonly hobbies: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용자 등록 요청을 받기 위해 컨트롤러 클래스를 생성합니다. <code>create</code> 함수의 파라미터에 생성한 DTO 클래스를 타입으로 지정합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Body, Controller, Post &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CreateUserDto &#125; <span class="keyword">from</span> <span class="string">'./dto/create-user.dto'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 사용자 등록</span></span><br><span class="line"><span class="comment">   * @param userData</span></span><br><span class="line"><span class="comment">   * @returns</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  create(<span class="meta">@Body</span>() userData: CreateUserDto) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'사용자 등록 성공!!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용자 등록 요청을 해보겠습니다. Postman 또는 Insomnia 툴을 이용합니다.<br /><a href="http://localhost:3000/student/" target="_blank" rel="noopener">http://localhost:3000/student/</a> 주소를 POST 방식으로 요청합니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 클라이언트 측에서 전송한 데이터가 다음과 같을 경우</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"height"</span>: <span class="number">180</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 서버에서 응답</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"statusCode"</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">"message"</span>: [</span><br><span class="line">    <span class="string">"name must be a string"</span>,</span><br><span class="line">    <span class="string">"age must be a number conforming to the specified constraints"</span>,</span><br><span class="line">    <span class="string">"each value in hobbies must be a string"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Bad Request"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>요청 하는 데이터가 “name”, “age”, “hobbies” 필드가 존재하지 않으므로 예외를 응답합니다. 즉, ValidationPipe 를 사용하면 모든 엔드포인트가 잘못된 데이터를 수신하지 못하도록 보호됩니다. 간단한 설정만으로 유효성 체크를 할 수 있습니다.</p><h2 id="옵션"><a class="markdownIt-Anchor" href="#옵션"></a> 옵션</h2><h3 id="whitelist"><a class="markdownIt-Anchor" href="#whitelist"></a> whitelist</h3><p><code>whitelist: true</code>로 설정하면 유효성 검사기는 class-validator의 유효성 검사 데코레이터를 적어도 하나라도 사용하지 않은 모든 속성 객체를 제거합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.useGlobalPipes(</span><br><span class="line">  <span class="keyword">new</span> ValidationPipe(&#123;</span><br><span class="line">    whitelist: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="forbidnonwhitelisted"><a class="markdownIt-Anchor" href="#forbidnonwhitelisted"></a> forbidNonWhitelisted</h3><p><code>forbidNonWhitelisted: true</code>로 설정하면 화이트리스트에 없는 속성을 제거하는 대신 유효성 검사기가 예외를 발생합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.useGlobalPipes(</span><br><span class="line">  <span class="keyword">new</span> ValidationPipe(&#123;</span><br><span class="line">    whitelist: <span class="literal">true</span>,</span><br><span class="line">    forbidNonWhitelisted: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>whitelist 와 forbidNonWhitelisted 옵션을 true 로 설정하면 “height” 이라는 속성은 화이트리스트에 존재하지 않으므로 HttpException 을 응답합니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 클라이언트 측에서 전송한 데이터가 다음과 같을 경우</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hgko"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">35</span>,</span><br><span class="line">  <span class="attr">"hobbies"</span>: [<span class="string">"soccer"</span>],</span><br><span class="line">  <span class="attr">"height"</span>: <span class="number">180</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 서버에서 응답</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"statusCode"</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">"message"</span>: [<span class="string">"property height should not exist"</span>],</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Bad Request"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="transform-자동-형변환"><a class="markdownIt-Anchor" href="#transform-자동-형변환"></a> transform (자동 형변환)</h3><p>네트워크를 통해 들어오는 payload 는 일반 JavaScript 객체입니다. ValidationPipe 는 payload 를 DTO 클래스에 따라 유형이 지정된 객체로 자동 변환할 수 있습니다. 자동 변환을 활성화하려면 transform 을 true 로 설정하십시오. 이 동작을 전역적으로 활성화하려면 전역 파이프에서 옵션을 설정합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.useGlobalPipes(</span><br><span class="line">  <span class="keyword">new</span> ValidationPipe(&#123;</span><br><span class="line">    transform: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://docs.nestjs.com/techniques/validation" target="_blank" rel="noopener">https://docs.nestjs.com/techniques/validation</a></li><li><a href="https://www.npmjs.com/package/class-validator" target="_blank" rel="noopener">https://www.npmjs.com/package/class-validator</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/05/11/nest-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[NestJS] Param decorators</title>
      <link>http://hgko1207.github.io/2023/05/10/nest-3/</link>
      <guid>http://hgko1207.github.io/2023/05/10/nest-3/</guid>
      <pubDate>Wed, 10 May 2023 03:05:36 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;param-decorators&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#param-decorators&quot;&gt;&lt;/a&gt; Param decorators&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Nest&lt;/strong&gt; 는 HTTP 라
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="param-decorators"><a class="markdownIt-Anchor" href="#param-decorators"></a> Param decorators</h2><p><strong>Nest</strong> 는 HTTP 라우트 핸들러와 함께 사용할 수 있는 유용한 매개변수 데코레이터 세트를 제공합니다.<br />다음은 제공된 데코레이터와 이들이 나타내는 일반 Express(또는 Fastify) 객체의 목록과 사용 예시입니다.</p><h3 id="param"><a class="markdownIt-Anchor" href="#param"></a> @Param</h3><p>Param 은 Path Variable 을 받아올 때 사용합니다. (예, /users/123)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NestJS</span></span><br><span class="line"><span class="meta">@Param</span>(param?: <span class="built_in">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExpressJS</span></span><br><span class="line">req.params / req.params[param]</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Param &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">'/:id'</span>)</span><br><span class="line">  getOne(<span class="meta">@Param</span>(<span class="string">'id'</span>) userId: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`This will return one user with the id: <span class="subst">$&#123;userId&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="body"><a class="markdownIt-Anchor" href="#body"></a> @Body</h3><p>Body 는 JSON 형식으로 받아올 때 사용합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NestJS</span></span><br><span class="line"><span class="meta">@Body</span>(param?: <span class="built_in">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExpressJS</span></span><br><span class="line">req.body / req.body[param]</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Body, Controller, Param, Patch, Post &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  create(<span class="meta">@Body</span>() userData) &#123;</span><br><span class="line">    <span class="keyword">return</span> userData;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Patch</span>(<span class="string">'/:id'</span>)</span><br><span class="line">  update(<span class="meta">@Param</span>(<span class="string">'id'</span>) userId: <span class="built_in">string</span>, <span class="meta">@Body</span>() updateData) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      updateData: userId,</span><br><span class="line">      ...updateData,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="query"><a class="markdownIt-Anchor" href="#query"></a> @Query</h3><p>Query 는 Query Parameter 를 받아올 때 사용합니다. (예, /users?id=123)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NestJS</span></span><br><span class="line"><span class="meta">@Query</span>(param?: <span class="built_in">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExpressJS</span></span><br><span class="line">req.query / req.query[param]</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Query &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">'search'</span>)</span><br><span class="line">  search(<span class="meta">@Query</span>(<span class="string">'id'</span>) userId: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`We are searching for a user made after: <span class="subst">$&#123;userId&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://docs.nestjs.com/custom-decorators#param-decorators" target="_blank" rel="noopener">https://docs.nestjs.com/custom-decorators#param-decorators</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/05/10/nest-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[NestJS] Controller, Provider, Module 이란?</title>
      <link>http://hgko1207.github.io/2023/05/08/nest-2/</link>
      <guid>http://hgko1207.github.io/2023/05/08/nest-2/</guid>
      <pubDate>Mon, 08 May 2023 02:40:07 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;NestJS&lt;/strong&gt; 에서 사용하는 &lt;strong&gt;Controller, Provider, Module&lt;/strong&gt; 에 대한 간략한 내용을 정리하였습니다.&lt;/p&gt;
&lt;h2 id=&quot;controllers&quot;&gt;&lt;a class=&quot;ma
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>NestJS</strong> 에서 사용하는 <strong>Controller, Provider, Module</strong> 에 대한 간략한 내용을 정리하였습니다.</p><h2 id="controllers"><a class="markdownIt-Anchor" href="#controllers"></a> Controllers</h2><p>컨트롤러는 들어오는 요청을 처리하고 클라이언트에 응답을 반환하는 역할을 합니다. express 의 라우터 같은 역할을 합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">'./app.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppController &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly appService: AppService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  getHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.appService.getHello();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">'/hello'</span>)</span><br><span class="line">  sayHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello everyone'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Controller()</code>: express 의 <code>app.use('/', router)</code> 에서 '/'와 같은 역할을 합니다. <code>@Controller('req')</code> 이렇게 인자로 string을 넘겨주면 express 에서 <code>app.use('/req', router)</code> 처럼 코드를 작성한 것과 같습니다.</li><li><code>@Get()</code>: Route 핸들러(메소드) 데코레이터입니다. HTTP GET 요청을 지정된 경로로 라우팅합니다. <code>@Get('hello')</code> 이렇게 인자로 string을 넘겨주면 express 에서 <code>router.get('/hello', sayHello)</code> 처럼 코드를 작성한 것과 같습니다.</li></ul><h2 id="providers"><a class="markdownIt-Anchor" href="#providers"></a> Providers</h2><p>Provider 는 Nest 의 기본 개념입니다. 대부분의 기본 Nest Class 인 services, repositories, factories, helpers 등은 provider 로 취급될 수 있습니다. provider 는 단순히 <code>@Injectable()</code> 데코레이터가 달린 클래스입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppService &#123;</span><br><span class="line">  getHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>provider 의 주요 아이디어는 의존성을 <strong>주입</strong> 할 수 있다는 것입니다. 즉, 개체가 서로 다양한 관계를 만들 수 있으며 개체 인스턴스를 &quot;연결&quot;하는 기능은 대부분 Nest 런타임 시스템에 위임 할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">'./app.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppController &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly appService: AppService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  getHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.appService.getHello();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 <code>AppController</code> 생성자에 변수의 타입을 <code>AppService</code> 로 지정해줌으로써 Nest Injector 가 appService 변수를 <code>AppService</code>의 인스턴스로 만들어줍니다(인스턴스화한다).</p><h2 id="modules"><a class="markdownIt-Anchor" href="#modules"></a> Modules</h2><p>NestJS 에는 모듈이 있습니다. <code>@Module()</code> 데코레이터로 모듈을 만들 수 있습니다.<br />Nest 어플리케이션을 만들면 최소 하나의 모듈, 루트 모듈(<code>AppModule</code>)이 있습니다.<br />이 루트 모듈은 Nest가 Module 및 Provider 관계와 의존성을 해결하는 데 사용하는 내부 데이터 구조를 구축하는 시작점입니다. 모듈을 만들면 루트 모듈과 연결되어야합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">'./app.controller'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">'./app.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">  providers: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>@Module()</code> 데코레이터는 하나의 객체를 인자로 가지며, 객체가 가질 수 있는 프로퍼티는 다음과 같습니다.</p><ul><li><code>providers</code>: Nest injector에 의해 인스턴스화되고, 인스턴스들은 모듈 안에서 최소한으로 공유됩니다.</li><li><code>controllers</code>: 해당 모듈에서 정의된, 인스턴스화 되어야 하는 Controller 의 집합입니다.</li><li><code>imports</code>: 임포트된 모듈들의 리스트입니다. 이 리스트의 모듈들은 데코레이터에 사용 중인 모듈에서 필요한 <code>providers</code> 를 export 하고 있어야 합니다.</li><li><code>exports</code>: <code>providers</code> 의 하위 집합으로, 데코레이터를 사용 중인 모듈이 제공받은 Provider 의 일부를 내보낼 수 있습니다. 이는 다른 모듈에서 <code>import</code> 할 때 사용됩니다.</li></ul><h2 id="파일-생성"><a class="markdownIt-Anchor" href="#파일-생성"></a> 파일 생성</h2><h3 id="module-생성"><a class="markdownIt-Anchor" href="#module-생성"></a> Module 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest g mo module-name</span><br></pre></td></tr></table></figure><h3 id="controller-생성"><a class="markdownIt-Anchor" href="#controller-생성"></a> Controller 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest g co controller-name</span><br></pre></td></tr></table></figure><h3 id="service-생성"><a class="markdownIt-Anchor" href="#service-생성"></a> Service 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest g s service-name</span><br></pre></td></tr></table></figure><h3 id="provider-생성"><a class="markdownIt-Anchor" href="#provider-생성"></a> Provider 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest g pr provider-name</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://docs.nestjs.com/controllers#controllers" target="_blank" rel="noopener">https://docs.nestjs.com/controllers#controllers</a></li><li><a href="https://docs.nestjs.com/controllers#routing" target="_blank" rel="noopener">https://docs.nestjs.com/controllers#routing</a></li><li><a href="https://docs.nestjs.com/providers#providers" target="_blank" rel="noopener">https://docs.nestjs.com/providers#providers</a></li><li><a href="https://docs.nestjs.com/modules#modules" target="_blank" rel="noopener">https://docs.nestjs.com/modules#modules</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/05/08/nest-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[NestJS] 설치 및 프로젝트 생성</title>
      <link>http://hgko1207.github.io/2023/05/08/nest-1/</link>
      <guid>http://hgko1207.github.io/2023/05/08/nest-1/</guid>
      <pubDate>Mon, 08 May 2023 02:22:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;설치&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#설치&quot;&gt;&lt;/a&gt; 설치&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Nest CLI&lt;/strong&gt; 를 사용하면 새 프로젝트를 설정하는 것이 매우 간단합니다.&lt;br /&gt;
npm 이 설
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p><strong>Nest CLI</strong> 를 사용하면 새 프로젝트를 설정하는 것이 매우 간단합니다.<br />npm 이 설치된 상태에서 터미널에서 다음 명령을 사용하여 Nest CLI 를 설치합니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">i -g @nestjs/cli</span></span><br></pre></td></tr></table></figure><h2 id="프로젝트-생성"><a class="markdownIt-Anchor" href="#프로젝트-생성"></a> 프로젝트 생성</h2><p><code>nest new</code> 명령어로 새 Nest 프로젝트를 만들 수 있습니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nest</span> <span class="string">new project-name</span></span><br></pre></td></tr></table></figure><p><code>nest new</code> 로 프로젝트 생성이 안된다면 <code>npx nest new</code> 로 진행합니다.</p><p>예시로 프로젝트를 생성해 보겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\project\Study\nestjs&gt; nest new test-nestjs</span><br><span class="line">⚡  We will scaffold your app in a few seconds..</span><br><span class="line"></span><br><span class="line">? Which package manager would you ❤️  to use? (Use arrow keys)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm</span></span><br><span class="line">  yarn</span><br><span class="line">  pnpm</span><br></pre></td></tr></table></figure><p>기본적으로 npm 을 선택합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">D:\project\Study\nestjs&gt; nest new test-nestjs</span><br><span class="line">⚡  We will scaffold your app in a few seconds..</span><br><span class="line"></span><br><span class="line">? Which package manager would you ❤️  to use? npm</span><br><span class="line">CREATE test-nestjs/.eslintrc.js (663 bytes)</span><br><span class="line">CREATE test-nestjs/.prettierrc (51 bytes)</span><br><span class="line">CREATE test-nestjs/nest-cli.json (171 bytes)</span><br><span class="line">CREATE test-nestjs/package.json (1942 bytes)</span><br><span class="line">CREATE test-nestjs/README.md (3340 bytes)</span><br><span class="line">CREATE test-nestjs/tsconfig.build.json (97 bytes)</span><br><span class="line">CREATE test-nestjs/tsconfig.json (546 bytes)</span><br><span class="line">CREATE test-nestjs/src/app.controller.spec.ts (617 bytes)</span><br><span class="line">CREATE test-nestjs/src/app.controller.ts (274 bytes)</span><br><span class="line">CREATE test-nestjs/src/app.module.ts (249 bytes)</span><br><span class="line">CREATE test-nestjs/src/app.service.ts (142 bytes)</span><br><span class="line">CREATE test-nestjs/src/main.ts (208 bytes)</span><br><span class="line">CREATE test-nestjs/test/app.e2e-spec.ts (630 bytes)</span><br><span class="line">CREATE test-nestjs/test/jest-e2e.json (183 bytes)</span><br><span class="line"></span><br><span class="line">✔ Installation in progress... ☕</span><br><span class="line"></span><br><span class="line">🚀  Successfully created project test-nestjs</span><br><span class="line">👉  Get started with the following commands:</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="built_in">test</span>-nestjs</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm run start</span></span><br><span class="line"></span><br><span class="line">                          Thanks for installing Nest 🙏</span><br><span class="line">                 Please consider donating to our open collective</span><br><span class="line">                        to help us maintain this package.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               🍷  Donate: https://opencollective.com/nest</span><br></pre></td></tr></table></figure><p>프로젝트에 필요한 파일과 폴더를 생성하고, 패키지들을 설치합니다. Nest CLI 를 사용하면 직접 파일을 만들 필요 없어 편리합니다.</p><h2 id="프로젝트-시작"><a class="markdownIt-Anchor" href="#프로젝트-시작"></a> 프로젝트 시작</h2><p>파일의 변경 사항을 감시하려면 다음 명령를 실행하여 프로젝트를 시작할 수 있습니다. 이 명령은 파일을 감시하여 자동으로 서버를 다시 컴파일하고 다시 로드합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start:dev</span><br></pre></td></tr></table></figure><p><code>http://localhost:3000/</code> 주소로 접속해서 정상적으로 시작됐는지 확인합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://docs.nestjs.com/first-steps" target="_blank" rel="noopener">https://docs.nestjs.com/first-steps</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/05/08/nest-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Git] detached HEAD 문제 해결 방법</title>
      <link>http://hgko1207.github.io/2023/05/04/git-1/</link>
      <guid>http://hgko1207.github.io/2023/05/04/git-1/</guid>
      <pubDate>Thu, 04 May 2023 06:22:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;git 을 사용할 때 add 와 commit 까진 실행이 잘 되는데 다음과 같이 &lt;strong&gt;detached HEAD&lt;/strong&gt; 문제로 push 가 안 될 때 해결 방법을 정리하였습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>git 을 사용할 때 add 와 commit 까진 실행이 잘 되는데 다음과 같이 <strong>detached HEAD</strong> 문제로 push 가 안 될 때 해결 방법을 정리하였습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\project\Study\react&gt; git push</span><br><span class="line">fatal: You are not currently on a branch.</span><br><span class="line">To push the history leading to the current (detached HEAD)</span><br><span class="line">state now, use</span><br><span class="line"></span><br><span class="line">    git push origin HEAD:&lt;name-of-remote-branch&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Detached Head 란, 말 그대로 head가 (branch로부터) 떨어져있는 상태를 뜻한다.<br />즉, branch 를 통해서가 아니라 직접 다이렉트로 commit 을 참조하고 있는 상태를 뜻한다.</p></blockquote><p><code>git branch</code> 명령어를 사용하여 살펴보니 지금 현재 브랜치는 <strong>HEAD detached from bdcfe3d8</strong> 로 설정되어 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\project\Study\react&gt; git branch -a</span><br><span class="line">* (HEAD detached from 537d4a3)</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><h2 id="해결-방법"><a class="markdownIt-Anchor" href="#해결-방법"></a> 해결 방법</h2><p>임시로 새로운 브랜치를 만들어 main 브랜치와 병합하여 해결하는 방법입니다.</p><h3 id="브랜치-생성"><a class="markdownIt-Anchor" href="#브랜치-생성"></a> 브랜치 생성</h3><p>현재 Head 분기를 참조하게끔 임시 브랜치를 생성합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch temp</span><br><span class="line">git checkout temp</span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -b 명령어 사용</span></span><br><span class="line">git checkout -b temp</span><br></pre></td></tr></table></figure><p>이렇게 하면 temp 라는 브랜치가 만들어지고, temp 로 checkout 을 하게 됩니다.</p><h3 id="master-브랜치로-이동"><a class="markdownIt-Anchor" href="#master-브랜치로-이동"></a> master 브랜치로 이동</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><h3 id="병합"><a class="markdownIt-Anchor" href="#병합"></a> 병합</h3><p>새로운 브랜치와 master 브랜치를 병합합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge temp</span><br></pre></td></tr></table></figure><h3 id="새로운-브랜치-삭제"><a class="markdownIt-Anchor" href="#새로운-브랜치-삭제"></a> 새로운 브랜치 삭제</h3><p>임시로 만든 temp 라는 브랜치를 삭제합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d temp</span><br></pre></td></tr></table></figure><h3 id="push"><a class="markdownIt-Anchor" href="#push"></a> push</h3><p>마지막으로 push 를 실행하면 됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>push 를 실행했을 때 다음과 같이 내용이 보이면 <code>git push --set-upstream origin master</code> 명령어를 사용해서 기본 브랜치를 설정합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\project\Study\react&gt; git push</span><br><span class="line">fatal: The current branch master has no upstream branch.</span><br><span class="line">To push the current branch and set the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream origin master</span><br><span class="line"></span><br><span class="line">To have this happen automatically for branches without a tracking</span><br><span class="line">upstream, see 'push.autoSetupRemote' in 'git help config'.</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/05/04/git-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Chocolatey를 이용한 Flutter 설치 방법</title>
      <link>http://hgko1207.github.io/2023/04/25/flutter-1/</link>
      <guid>http://hgko1207.github.io/2023/04/25/flutter-1/</guid>
      <pubDate>Tue, 25 Apr 2023 01:58:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;윈도우 환경에서 &lt;strong&gt;Chocolatey&lt;/strong&gt; 를 이용해서 &lt;strong&gt;Flutter&lt;/strong&gt; 를 설치하고 안드로이드 기기와 연결하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;1-chocolatey-설치&quot;&gt;&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>윈도우 환경에서 <strong>Chocolatey</strong> 를 이용해서 <strong>Flutter</strong> 를 설치하고 안드로이드 기기와 연결하는 방법에 대해 알아보겠습니다.</p><h2 id="1-chocolatey-설치"><a class="markdownIt-Anchor" href="#1-chocolatey-설치"></a> 1. Chocolatey 설치</h2><p>이전 글 <strong><a href="https://hgko1207.github.io/2021/07/21/chocolatey/">Chocolatey 설치</a></strong> 를 참고해서 Chocolatey 를 먼저 설치를 합니다.</p><h2 id="2-flutter-설치"><a class="markdownIt-Anchor" href="#2-flutter-설치"></a> 2. Flutter 설치</h2><p>관리자 권한으로 PowerShell 을 열고 다음 명령어를 실행하여 설치를 합니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">choco</span> <span class="string">install flutter</span></span><br></pre></td></tr></table></figure><p>설치가 완료되면 <code>flutter</code> 명령어를 실행하였을 때 다음과 같이 메시지가 나옵니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt; flutter</span><br><span class="line">Common commands:</span><br><span class="line"></span><br><span class="line">  flutter create &lt;output directory&gt;</span><br><span class="line">    Create a new Flutter project in the specified directory.</span><br><span class="line"></span><br><span class="line">  flutter run [options]</span><br><span class="line">    Run your Flutter application on an attached device or in an emulator.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Run "flutter help &lt;command&gt;" for more information about a command.</span><br><span class="line">Run "flutter help -v" for verbose help output, including less commonly used options.</span><br></pre></td></tr></table></figure><h2 id="3-안드로이드-연결"><a class="markdownIt-Anchor" href="#3-안드로이드-연결"></a> 3. 안드로이드 연결</h2><p>안드로이드 앱을 개발하려고 한다면 <a href="https://docs.flutter.dev/get-started/install/windows#android-setup" target="_blank" rel="noopener">Android setup</a> 사이트에 접속해서 가이드대로 Android 에뮬레이터를 설치하고 연결하면 됩니다.</p><p>설치 방법은 아래 기술하였습니다.</p><h3 id="1-android-studio-설치"><a class="markdownIt-Anchor" href="#1-android-studio-설치"></a> 1) Android Studio 설치</h3><p><a href="https://developer.android.com/studio" target="_blank" rel="noopener">https://developer.android.com/studio</a> 사이트에 접속해서 Android Studio 를 다운로드 합니다. 다운로드가 완료되면 설치를 진행합니다.</p><h3 id="2-android-sdk-빌드-도구-설치"><a class="markdownIt-Anchor" href="#2-android-sdk-빌드-도구-설치"></a> 2) Android SDK 빌드 도구 설치</h3><p>Android Studio 를 시작하고 <strong>‘Android Studio Setup Wizard’</strong> 를 진행합니다. 이렇게 하면 Android 용으로 개발할 때 Flutter 에 필요한 최신 <strong>Android SDK, Android SDK Command-line Tools</strong> 및 <strong>Android SDK Build-Tools</strong> 가 설치됩니다.</p><p>PowerShell 에서 <code>flutter doctor</code> 명령어를 실행해서 Flutter 가 설치된 Android Studio 를 찾았는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt; flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[√] Flutter (Channel master, 3.10.0-4.0.pre, on Microsoft Windows [Version 10.0.22621.1555], locale ko-KR)</span><br><span class="line">[√] Windows Version (Installed version of Windows is version 10 or higher)</span><br><span class="line">[!] Android toolchain - develop for Android devices (Android SDK version 33.0.2)</span><br><span class="line">    X cmdline-tools component is missing</span><br><span class="line">      Run `path/to/sdkmanager --install "cmdline-tools;latest"`</span><br><span class="line">      See https://developer.android.com/studio/command-line for more details.</span><br><span class="line">    X Android license status unknown.</span><br><span class="line">      Run `flutter doctor --android-licenses` to accept the SDK licenses.</span><br><span class="line">      See https://flutter.dev/docs/get-started/install/windows#android-setup for more details.</span><br><span class="line">[√] Chrome - develop for the web</span><br><span class="line">[√] Visual Studio - develop for Windows (Visual Studio Professional 2019 16.11.25)</span><br><span class="line">[√] Android Studio (version 2022.2)</span><br><span class="line">[√] VS Code (version 1.77.1)</span><br><span class="line">[√] Connected device (3 available)</span><br><span class="line">[√] Network resources</span><br></pre></td></tr></table></figure><h3 id="3-android-에뮬레이터-설정"><a class="markdownIt-Anchor" href="#3-android-에뮬레이터-설정"></a> 3) Android 에뮬레이터 설정</h3><p>Android 에뮬레이터에서 Flutter 앱을 실행하고 테스트할 준비를 하려면 다음 단계를 진행합니다.</p><ol><li>Machine 에서 <a href="https://developer.android.com/studio/run/emulator-acceleration?hl=ko#accel-vm" target="_blank" rel="noopener">VM acceleration</a> 를 활성화합니다.</li><li>Android Studio 를 실행하고 <strong>Tools &gt; Device Manager</strong> 메뉴를 클릭하거나 <strong>Device Manager 아이콘</strong>을 클릭한 다음 <strong>Virtual</strong> 탭 에서 <strong>Create Device</strong> 를 선택합니다.</li></ol><ul><li>이전 버전의 Android Studio 에서는 대신 <strong>Android Studio &gt; Tools &gt; Android &gt; AVD Manager</strong> 를 실행 하고 <strong>Create Virtual Device</strong> 를 선택해야 합니다. (Android 하위 메뉴는 Android 프로젝트 내부에만 있습니다.)</li><li>열려 있는 프로젝트가 없으면 <strong>점 3개 Menu / More Actions &gt; Virtual Device Manager</strong> 메뉴를 클릭한 다음 <strong>Create Device</strong> 를 선택할 수 있습니다.</li></ul><ol start="3"><li><strong>Visual Device Configuration</strong> 창에서 장치를 선택하고 <strong>Next</strong> 버튼을 클릭합니다. (저는 Pixel 3 XL 모델을 선택했습니다.)</li><li>에뮬레이션하려는 Android 버전의 시스템 이미지를 하나 이상 선택하고 <strong>Next</strong> 버튼을 클릭합니다. x86 또는 x86_64 이미지를 권장합니다.</li><li><strong>Verify Configuration</strong> 에서 하단에 Emulated Performance 에서 Graphics 를 <strong>Hardware-GLES 2.0</strong> 으로 선택 후 <strong>Finish</strong> 버튼을 클릭하여 하드웨어 가속을 활성화합니다.</li><li>Android Virtual Device Manager 의 도구 모음에서 실행(▶)을 클릭합니다. 에뮬레이터가 시작되고 선택한 OS 버전 및 장치에 대한 기본 캔버스를 표시합니다.</li></ol><img width="100%" src="/images/flutter/flutter_1.png" alt=""><h3 id="4-android-라이선스에-동의"><a class="markdownIt-Anchor" href="#4-android-라이선스에-동의"></a> 4) Android 라이선스에 동의</h3><p>Flutter 를 사용하려면 먼저 Android SDK 플랫폼의 라이선스에 동의해야 합니다. 이 단계는 위에 나열된 도구를 설치한 후에 수행해야 합니다.</p><ul><li>자바 8 버전 이상이 설치되어 있고 JDK 의 폴더가 환경 변수 설정되어 있는지 확인합니다.</li></ul><p>PowerShell 또는 명령 프롬프트에서 다음 명령어를 실행하여 라이언스 서명을 시작합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor --android-licenses</span><br></pre></td></tr></table></figure><h4 id="에러-발생-해결-방법"><a class="markdownIt-Anchor" href="#에러-발생-해결-방법"></a> 에러 발생 해결 방법</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt; flutter doctor --android-licenses</span><br><span class="line">Android sdkmanager not found. Update to the latest Android SDK and ensure that the cmdline-tools are installed to</span><br><span class="line">resolve this.</span><br></pre></td></tr></table></figure><p>만약 cmdline-tools 가 없으므로 설치하라는 빨간 메시지가 출력된다면 다음의 절차를 진행합니다.</p><ol><li>Android Studio 에서 <strong>SDK Manager</strong> 를 실행합니다.</li><li>좌측의 <strong>System Settings</strong> 에서 <strong>Android SDK</strong> 를 선택하고 우측 화면에서 <strong>SDK Tools</strong> 탭을 선택합니다.</li><li><strong>Android SDK Command-line Tools(latest)</strong> 를 체크한 후 <strong>OK</strong> 버튼을 클릭해 설치를 진행합니다.</li><li>설치가 완료되었다면 <strong>Finish</strong> 를 클릭하고 <code>flutter doctor --android-licenses</code> 명령어를 다시 입력합니다. 이때 동의에 대해 묻는데 y 입력해주시면 됩니다.</li><li><strong>All SDK package licenses accepted</strong> 메시지가 출력 되면 라이센스 동의가 끝났습니다.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt; flutter doctor --android-licenses</span><br><span class="line">...</span><br><span class="line">Accept? (y/N): y</span><br><span class="line">All SDK package licenses accepted</span><br></pre></td></tr></table></figure><h3 id="5-확인"><a class="markdownIt-Anchor" href="#5-확인"></a> 5) 확인</h3><p>라이선스 동의가 완료되면 <code>flutter doctor</code> 명령어를 다시 입력하여 Flutter 를 사용할 준비가 되었는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt; flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[√] Flutter (Channel master, 3.10.0-4.0.pre, on Microsoft Windows [Version 10.0.22621.1555], locale ko-KR)</span><br><span class="line">[√] Windows Version (Installed version of Windows is version 10 or higher)</span><br><span class="line">[√] Android toolchain - develop for Android devices (Android SDK version 33.0.2)</span><br><span class="line">[√] Chrome - develop for the web</span><br><span class="line">[√] Visual Studio - develop for Windows (Visual Studio Professional 2019 16.11.25)</span><br><span class="line">[√] Android Studio (version 2022.2)</span><br><span class="line">[√] VS Code (version 1.77.1)</span><br><span class="line">[√] Connected device (4 available)</span><br><span class="line">[√] Network resources</span><br></pre></td></tr></table></figure><h4 id="에러-발생-해결-방법-2"><a class="markdownIt-Anchor" href="#에러-발생-해결-방법-2"></a> 에러 발생 해결 방법</h4><p><code>flutter doctor</code> 명령어를 실행하였을 때 Windows 10 SDK 이 없다고 하는 메시지가 출력될 경우 해결 방법입니다.</p><ol><li><a href="https://visualstudio.microsoft.com/ko/downloads/" target="_blank" rel="noopener">https://visualstudio.microsoft.com/ko/downloads/</a> 사이트에서 Visual Studio 2022 버전의 <strong>무료 다운로드</strong>를 클릭하여 다운로드하고 설치해줍니다.</li><li>Visual Studio Installer 창이 열리면 데스크톱 및 모바일에서 <strong>C++를 이용한 데스크톱 개발</strong>을 선택 후 설치합니다.</li></ol><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>Chocolatey 를 사용해서 Flutter 를 설치하면 zip 파일을 다운받고, 열어서 설치하고, path 설정하고, 여러가지 설정하는 것보다 훨씬 쉬운 방법입니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/04/25/flutter-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Dart] 클래스(Class) 사용 방법</title>
      <link>http://hgko1207.github.io/2023/04/18/dart-6/</link>
      <guid>http://hgko1207.github.io/2023/04/18/dart-6/</guid>
      <pubDate>Tue, 18 Apr 2023 04:55:52 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt; 에서 클래스(Class) 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;class&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#class&quot;&gt;&lt;/a&gt; Class&lt;/h2&gt;
&lt;p&gt;클
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Dart</strong> 에서 클래스(Class) 사용 방법에 대해 알아보겠습니다.</p><h2 id="class"><a class="markdownIt-Anchor" href="#class"></a> Class</h2><p>클래스 안에서 property 를 선언할 때는 타입을 사용해서 정의합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name = <span class="string">'eden'</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> age = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> sayName() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hi my name is <span class="subst">$name</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// new 를 꼭 붙이지 않아도 됩니다.</span></span><br><span class="line">  <span class="keyword">var</span> player = Player();</span><br><span class="line">  player.sayName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클래스 메서드 안에서는 this 를 붙이지 않는 것을 Dart 에서는 권장하나, 어쩔 수 없이 같은 변수명이 있을 때는 this 를 붙여서 사용해야 합니다.</p><h2 id="constructor"><a class="markdownIt-Anchor" href="#constructor"></a> Constructor</h2><p>생성자(constructor) 함수는 클래스 이름과 같아야 합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">  <span class="comment">// late 사용</span></span><br><span class="line">  late <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  late <span class="keyword">final</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  Player(<span class="built_in">String</span> name, <span class="built_in">int</span> age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// Player 클래스의 인스턴스 생성</span></span><br><span class="line">  <span class="keyword">var</span> player = Player(<span class="string">"eden"</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 생성자 함수는 다음과 같이 줄일 수 있습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">  <span class="comment">// late 사용 안함</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  Player(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드는 <code>late</code> 를 사용하였지만 아래 코드에서 사용하지 않은 이유는 생성자 함수를 만들 때 변수에 값을 할당하지 않았기 때문입니다.</p><p>이전 생성자 함수를 만들 때에는 <code>this.name = name;</code> 식으로 값을 할당했기 때문에 먼저 선언한 변수에 <code>late</code> 를 붙여야 오류가 발생하지 않습니다.</p><h2 id="named-constructor-parameters"><a class="markdownIt-Anchor" href="#named-constructor-parameters"></a> Named Constructor Parameters</h2><p>클래스가 거대해질 경우 다음과 같이 생성자 함수를 만드는 것은 비효율적일 것입니다. 많은 파라미터를 받아야 하고 각 파라미터의 의미를 알 수가 없습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> members;</span><br><span class="line">  <span class="built_in">int</span> ranking;</span><br><span class="line">  <span class="built_in">String</span> description;</span><br><span class="line"></span><br><span class="line">  Team(<span class="keyword">this</span>.name, <span class="keyword">this</span>.members, <span class="keyword">this</span>.ranking, <span class="keyword">this</span>.description);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> team = Team(<span class="string">"Tottenham"</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="string">"Tottenham Hotspur Football Club"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>문제를 해결할려면 너무 간단합니다. 생성자 함수 생성할 때 중괄호({})를 사용하는 것입니다. 그리고 클래스를 정의할 때 Named Paramaters 를 사용합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> members;</span><br><span class="line">  <span class="built_in">int</span> ranking;</span><br><span class="line">  <span class="built_in">String</span> description;</span><br><span class="line"></span><br><span class="line">  Team(&#123;<span class="keyword">this</span>.name, <span class="keyword">this</span>.members, <span class="keyword">this</span>.ranking, <span class="keyword">this</span>.description&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> team = Team(</span><br><span class="line">      name: <span class="string">"Tottenham"</span>,</span><br><span class="line">      members: <span class="number">25</span>,</span><br><span class="line">      ranking: <span class="number">5</span>,</span><br><span class="line">      description: <span class="string">"Tottenham Hotspur Football Club"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 여기에는 큰 문제가 있습니다. 변수가 null 일 수도 있기 때문에 기본 값(default value)을 주거나 required 파라미터 앞에 붙여 사용합니다. 다음의 코드는 <code>required</code> 를 사용하였습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> members;</span><br><span class="line">  <span class="built_in">int</span> ranking;</span><br><span class="line">  <span class="built_in">String</span> description;</span><br><span class="line"></span><br><span class="line">  Team(&#123;</span><br><span class="line">    required <span class="keyword">this</span>.name,</span><br><span class="line">    required <span class="keyword">this</span>.members,</span><br><span class="line">    required <span class="keyword">this</span>.ranking,</span><br><span class="line">    required <span class="keyword">this</span>.description</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> team = Team(</span><br><span class="line">      name: <span class="string">"Tottenham"</span>,</span><br><span class="line">      members: <span class="number">25</span>,</span><br><span class="line">      ranking: <span class="number">5</span>,</span><br><span class="line">      description: <span class="string">"Tottenham Hotspur Football Club"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="named-constructor"><a class="markdownIt-Anchor" href="#named-constructor"></a> Named Constructor</h2><p>콜론(:)을 사용하면 특별한 생성자 함수를 만들 수 있습니다.<br />콜론을 넣음으로써 dart 에게 객체를 초기화하라고 명령할 수 있습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> members;</span><br><span class="line">  <span class="built_in">String</span> description;</span><br><span class="line"></span><br><span class="line">  Team(&#123;required <span class="keyword">this</span>.name, required <span class="keyword">this</span>.members, required <span class="keyword">this</span>.description&#125;);</span><br><span class="line"></span><br><span class="line">  Team.createTeam(&#123;required <span class="built_in">String</span> name, required <span class="built_in">int</span> members&#125;)</span><br><span class="line">      : <span class="keyword">this</span>.name = name,</span><br><span class="line">        <span class="keyword">this</span>.members = members,</span><br><span class="line">        <span class="keyword">this</span>.description = <span class="string">"<span class="subst">$name</span> team is good."</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> team = Team.createTeam(</span><br><span class="line">    name: <span class="string">"Tottenham"</span>,</span><br><span class="line">    members: <span class="number">25</span>,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="enum"><a class="markdownIt-Anchor" href="#enum"></a> Enum</h2><p><strong>Enum</strong> 은 우리가 코드를 작성할 때 실수를 하지 않게 도와줍니다.<br />enum type 의 변수들은 해당 enum type 에 생성된 값들 중에서만 값이 할당될 수 있습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Team &#123; red, blue &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  Team team;</span><br><span class="line"></span><br><span class="line">  Player(&#123;required <span class="keyword">this</span>.name, required <span class="keyword">this</span>.team&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> player = Player(name: <span class="string">'eden'</span>, team: Team.red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="abstract-class"><a class="markdownIt-Anchor" href="#abstract-class"></a> Abstract Class</h2><p><strong>추상 클래스</strong>는 다른 클래스들이 직접 구현해야 하는 필드와 메소드들을 모아놓은 클래스입니다.<br />추상 클래스는 아직 메소드와 내용이 추상적이므로 객체를 생성할 수 없습니다.<br />추상 클래스를 상속받는 클래스들은 추상 클래스의 메소드들을 구현해야 합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> walk();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> team;</span><br><span class="line"></span><br><span class="line">  Player(&#123;required <span class="keyword">this</span>.name, required <span class="keyword">this</span>.team&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> walk() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Player is walking"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> player = Player(name: <span class="string">'eden'</span>, team: <span class="string">'red'</span>);</span><br><span class="line">  player.walk();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mixin"><a class="markdownIt-Anchor" href="#mixin"></a> Mixin</h2><p><strong>Mixin</strong> 은 생성자가 없는 클래스를 의미합니다.<br />Mixin 은 클래스에 코드를 재사용하기 위해 사용되며, 다중 상속의 일부 단점을 보완합니다. Mixin 은 extends 가 아닌 with 키워드를 사용하여 클래스에 적용합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mixin</span> Strong &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> strengthLevel = <span class="number">100.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mixin</span> Tall &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> height = <span class="number">180</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mixin</span> QuickRunner &#123;</span><br><span class="line">  <span class="keyword">void</span> run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"run!!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="title">with</span> <span class="title">Strong</span>, <span class="title">Tall</span>, <span class="title">QuickRunner</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  Player(&#123;required <span class="keyword">this</span>.name&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> player = Player(</span><br><span class="line">    name: <span class="string">"eden"</span>,</span><br><span class="line">  );</span><br><span class="line">  player.run(); <span class="comment">// run!! 출력</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="상속과-mixin-의-차이점"><a class="markdownIt-Anchor" href="#상속과-mixin-의-차이점"></a> 상속과 Mixin 의 차이점</h3><p>extends 를 사용하여 상속받은 클래스는 자식 클래스, 상속한 클래스는 부모클래스가 되는 것이고, 자식 클래스는 부모 클래스를 super 를 통해서 접근할 수 있습니다.</p><p>Mixin 은 with 라는 키워드를 통해서 단순히 Mixin 내부의 프로퍼티와 메소드들을 가져오는 것 뿐입니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/04/18/dart-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Dart] 함수(Function) 사용 방법</title>
      <link>http://hgko1207.github.io/2023/04/17/dart-5/</link>
      <guid>http://hgko1207.github.io/2023/04/17/dart-5/</guid>
      <pubDate>Mon, 17 Apr 2023 05:57:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt; 에서 함수(Function) 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;functions&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#functions&quot;&gt;&lt;/a&gt; Funct
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Dart</strong> 에서 함수(Function) 사용 방법에 대해 알아보겠습니다.</p><h2 id="functions"><a class="markdownIt-Anchor" href="#functions"></a> Functions</h2><p>Dart 는 진정한 객체 지향 언어이므로 함수도 객체이며 타입이 Function 입니다. 이는 함수를 변수에 할당하거나 다른 함수에 인수로 전달할 수 있음을 의미합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 하나의 표현식만 포함하는 함수의 경우 아래와 같이 단축 구문을 사용할 수 있습니다.</span></span><br><span class="line"><span class="built_in">String</span> sayHello(<span class="built_in">String</span> name) =&gt; <span class="string">"Hello <span class="subst">$&#123;name&#125;</span> nice to meet you!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">num</span> plus(<span class="built_in">num</span> a, <span class="built_in">num</span> b) =&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(sayHello(<span class="string">"eden"</span>)); <span class="comment">// Hello eden nice to meet you!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="positional-paramaters"><a class="markdownIt-Anchor" href="#positional-paramaters"></a> Positional Paramaters</h2><p>함수을 호출할 때 필요한 매개변수와 매개변수의 위치를 정확하게 알아야 합니다. 함수의 매개변수가 많아 질수록 함수 호출할 때 다 기억해야 하므로 사용하기 어렵습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> sayHello(<span class="built_in">String</span> name, <span class="built_in">int</span> age, <span class="built_in">String</span> country) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hello <span class="subst">$name</span>, you are <span class="subst">$age</span>, and you come from <span class="subst">$country</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(sayHello(<span class="string">'eden'</span>, <span class="number">30</span>, <span class="string">'Korea'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="named-paramaters"><a class="markdownIt-Anchor" href="#named-paramaters"></a> Named Paramaters</h2><p>위의 <strong>Positional Paramaters</strong> 방식은 함수를 호출할 때 사용자가 요소들의 순서를 잊어버릴 수도 있고, 코드를 봤을 때 인자가 뜻하는 것이 무엇인지 바로 이해를 못할 수도 있습니다.<br />이 문제를 해결하기 위해 Dart 에서는 <strong>Named Paramaters</strong> 를 지원합니다.</p><p>다음과 같이 매개변수 앞뒤로 중괄호를 붙여주면 함수를 호출할 때 매개변수의 이름과 값을 함께 입력할 수 있어 사용자에게 훨씬 편리합니다. 이때 매개변수들의 순서는 지키지 않아도 됩니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> sayHello(&#123;<span class="built_in">String</span> name, <span class="built_in">int</span> age, <span class="built_in">String</span> country&#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"<span class="subst">$&#123;name&#125;</span> / <span class="subst">$&#123;age&#125;</span> / <span class="subst">$&#123;country&#125;</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(sayHello(name: <span class="string">"eden"</span>, age: <span class="number">30</span>, country: <span class="string">"Korea"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 여기서 또 문제가 발생합니다. Dart 는 null safety 가 적용되는데, 매개변수 중 하나가 null 일 수도 있기 때문입니다. 다시 말해, 사용자가 name 과 age, country 3개의 매개변수 중 하나라도 빼고 보낼 수 있습니다.</p><p>이때는 두 가지 옵션이 있습니다.</p><h3 id="default-value"><a class="markdownIt-Anchor" href="#default-value"></a> default value</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> sayHello(&#123;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">'ko'</span>,</span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">99</span>,</span><br><span class="line">  <span class="built_in">String</span> country = <span class="string">'Italy'</span>,</span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hello <span class="subst">$name</span>, you are <span class="subst">$age</span>, and you come from <span class="subst">$country</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(sayHello());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>함수를 호출할 때 아무것도 전달하지 않아도 default value 가 이미 있으므로 null safety 에 걸릴 일이 없습니다.</p><h3 id="required"><a class="markdownIt-Anchor" href="#required"></a> required</h3><p>다음과 같이 매개변수 앞에 <code>required</code> 를 적어주면, 함수가 호출될 때 반드시 <code>required</code> 가 적힌 매개변수가 포함되어야 한다는 것입니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> sayHello(&#123;</span><br><span class="line">  required <span class="built_in">String</span> name,</span><br><span class="line">  required <span class="built_in">int</span> age,</span><br><span class="line">  required <span class="built_in">String</span> country</span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hello <span class="subst">$name</span>, you are <span class="subst">$age</span>, and you come from <span class="subst">$country</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(🚫sayHello());</span><br><span class="line">  <span class="comment">// name, country, age가 모두 포함되어야 하기 때문에 dart에서 컴파일하지 않음</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="optional-positional-paramaters"><a class="markdownIt-Anchor" href="#optional-positional-paramaters"></a> Optional Positional Paramaters</h2><p>Dart 에서 <code>[]</code> 은 optional, positional parameter 를 명시할 때 사용됩니다.<br />name, age 는 필수값이고 []를 통해 country 를 optional 값으로 지정해줄 수 있습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> sayHello(<span class="built_in">String</span> name, <span class="built_in">int</span> age, [<span class="built_in">String</span>? country = <span class="string">"Korea"</span>]) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hello <span class="subst">$&#123;name&#125;</span>, You are <span class="subst">$&#123;age&#125;</span> from the <span class="subst">$&#123;country&#125;</span>'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> result = sayHello(<span class="string">"eden"</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">print</span>(result); <span class="comment">// Hello eden, You are 3 from the Korea</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="qq-operator"><a class="markdownIt-Anchor" href="#qq-operator"></a> QQ Operator</h2><p><code>??</code> 연산자를 이용하면 왼쪽 값이 null 인지 체크해서 null 이 아니면 왼쪽 값을 리턴하고 null 이면 오른쪽 값을 리턴합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> capitalizeName(<span class="built_in">String</span>? name) &#123;</span><br><span class="line">  <span class="keyword">return</span> name?.toUpperCase() ?? <span class="string">"NONE"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(capitalizeName(<span class="string">"eden"</span>)); <span class="comment">// EDEN;</span></span><br><span class="line">  <span class="built_in">print</span>(capitalizeName(<span class="keyword">null</span>)); <span class="comment">// NONE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드를 더욱 간략하게 만들 수 있습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> capitalizeName(<span class="built_in">String</span>? name) =&gt; name?.toUpperCase() ?? <span class="string">"NONE"</span>;</span><br></pre></td></tr></table></figure><p><code>??=</code> 연산자를 이용하면 변수 안에 값이 null 일 때를 체크해서 값을 할당해줄 수 있습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">String</span>? name;</span><br><span class="line">  name ??= <span class="string">"eden"</span>;</span><br><span class="line">  name = <span class="keyword">null</span>;</span><br><span class="line">  name ??= <span class="string">"ko"</span>;</span><br><span class="line">  <span class="built_in">print</span>(name); <span class="comment">// ko</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="typedef"><a class="markdownIt-Anchor" href="#typedef"></a> TypeDef</h2><p>자료형에 사용자가 원하는 alias 를 붙일 수 있게 해줍니다. (자료형 이름의 별명을 만들 때 사용)</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 사용 전</span></span><br><span class="line"><span class="built_in">List</span> reverseListOfNumbers(<span class="built_in">List</span> list) &#123;</span><br><span class="line">  <span class="keyword">var</span> reversed = list.reversed;</span><br><span class="line">  <span class="keyword">return</span> reversed.toList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 사용 후</span></span><br><span class="line"><span class="keyword">typedef</span> ListOfInts = <span class="built_in">List</span>;</span><br><span class="line"></span><br><span class="line">ListOfInts reverseListOfNumbers(ListOfInts list) &#123;</span><br><span class="line">  <span class="keyword">var</span> reversedList = list.reversed.toList();</span><br><span class="line">  <span class="keyword">return</span> reversedList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(reverseListOfNumbers([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])); <span class="comment">// [3, 2, 1]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://dart.dev/guides/language/language-tour#functions" target="_blank" rel="noopener">https://dart.dev/guides/language/language-tour#functions</a></li><li><a href="https://dart.dev/guides/language/language-tour#parameters" target="_blank" rel="noopener">https://dart.dev/guides/language/language-tour#parameters</a></li><li><a href="https://dart.dev/guides/language/language-tour#typedefs" target="_blank" rel="noopener">https://dart.dev/guides/language/language-tour#typedefs</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/04/17/dart-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Dart] Data Types</title>
      <link>http://hgko1207.github.io/2023/04/17/dart-4/</link>
      <guid>http://hgko1207.github.io/2023/04/17/dart-4/</guid>
      <pubDate>Mon, 17 Apr 2023 05:07:53 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt; 에서 데이터 타입 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;기본-데이터-타입&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#기본-데이터-타입&quot;&gt;&lt;/a&gt; 기본 데이터 타입&lt;/
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Dart</strong> 에서 데이터 타입 사용 방법에 대해 알아보겠습니다.</p><h2 id="기본-데이터-타입"><a class="markdownIt-Anchor" href="#기본-데이터-타입"></a> 기본 데이터 타입</h2><p>Dart 에는 대표적으로 <code>String</code>, <code>bool</code>, <code>int</code>, <code>double</code>, <code>num</code> 타입이 있습니다. 중요한 점은 이 모든게 객체(object)라는 것 입니다.</p><p>Dart 가 진정한 객체 지향 언어로 불리는 이유입니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">"eden"</span>;</span><br><span class="line">  <span class="built_in">bool</span> isPlay = <span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">double</span> money = <span class="number">59.99</span>;</span><br><span class="line">  <span class="built_in">num</span> x = <span class="number">12</span>;</span><br><span class="line">  <span class="built_in">num</span> y = <span class="number">1.2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="string-interpoldation"><a class="markdownIt-Anchor" href="#string-interpoldation"></a> String Interpoldation</h2><p><strong>String Interpoldation</strong> 은 텍스트에 변수를 추가하는 방법입니다.</p><p>단순히 변수의 값을 넣고 싶다면 <code>$</code>달러 기호 뒤에 사용할 변수를 적어주면 됩니다. 변수의 값을 계산하고 싶다면 <code>$</code>와 함께 중괄호(`${ })내에 계산할 내용을 적어주면 됩니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">"eden"</span>;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="string">"hello <span class="subst">$name</span>, I'm <span class="subst">$&#123;age + <span class="number">5</span>&#125;</span> years old."</span>;</span><br><span class="line">  <span class="built_in">print</span>(greeting);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lists"><a class="markdownIt-Anchor" href="#lists"></a> Lists</h2><p>Dart 에서 <strong>List</strong> 를 선언하는 것은 두 가지 방법이 있습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  numbers.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> number2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dart 에서 List 의 유용한 점은 <code>collection if</code> 와 <code>collection for</code> 를 지원합니다.</p><h3 id="collection-if"><a class="markdownIt-Anchor" href="#collection-if"></a> collection if</h3><p>collection if 는 List 를 만들 때, if 를 통해 <strong>존재할 수도 안 할 수도 있는 요소</strong>를 가지고 만들 수 있습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> giveMeFive = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">var</span> item = [</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>,</span><br><span class="line">    <span class="keyword">if</span> (giveMeFive) <span class="number">5</span>, <span class="comment">// giveMeFive가 true이면 5가 추가됨</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="built_in">print</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="collection-for"><a class="markdownIt-Anchor" href="#collection-for"></a> Collection For</h3><p>Dart 에서는 반복(for)을 사용하여 컬렉션을 구축하는 데 사용할 수 있는 Collection for 를 제공합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> oldFriends = [<span class="string">"ko"</span>, <span class="string">"lee"</span>];</span><br><span class="line">    <span class="keyword">var</span> newFriends = [</span><br><span class="line">    <span class="string">"eden"</span>,</span><br><span class="line">    <span class="string">"woorim"</span>,</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> friend <span class="keyword">in</span> oldFriends) <span class="string">"🥰 <span class="subst">$friend</span>"</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(newFriends); <span class="comment">// [eden, woorim, 🥰 ko, 🥰 lee]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="maps"><a class="markdownIt-Anchor" href="#maps"></a> Maps</h2><p>일반적으로 Map 은 key 와 value 를 연결하는 객체입니다. 키와 값 모두 모든 유형의 객체가 될 수 있습니다. 각 키는 한 번만 발생하지만 동일한 값을 여러 번 사용할 수 있습니다.</p><p>Map 을 정의하는 방법은 두 가지가 있습니다. 첫 번째는 <code>var</code> 를 이용한 방법입니다. 두 번째는 <code>var</code> 대신 <code>Map</code> 을 사용하고, 자료형을 명시하는 것입니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 첫 번째</span></span><br><span class="line"><span class="keyword">var</span> gifts = &#123;</span><br><span class="line">  <span class="comment">// Key: Value</span></span><br><span class="line">  <span class="string">'first'</span>: <span class="string">'smartphone'</span>,</span><br><span class="line">  <span class="string">'second'</span>: <span class="string">'laptop'</span>,</span><br><span class="line">  <span class="string">'third'</span>: <span class="string">'bicycle'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 두 번째</span></span><br><span class="line"><span class="built_in">Map</span> players = &#123;</span><br><span class="line">  <span class="number">1</span> : <span class="keyword">true</span>,</span><br><span class="line">  <span class="number">2</span> : <span class="keyword">false</span>,</span><br><span class="line">  <span class="number">3</span> : <span class="keyword">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map 생성자를 사용하여 동일한 객체를 만들 수 있습니다.</span></span><br><span class="line"><span class="keyword">var</span> gifts = <span class="built_in">Map</span>();</span><br><span class="line">gifts[<span class="string">'first'</span>] = <span class="string">'smartphone'</span>;</span><br><span class="line">gifts[<span class="string">'second'</span>] = <span class="string">'laptop'</span>;</span><br><span class="line">gifts[<span class="string">'third'</span>] = <span class="string">'bicycle'</span>;</span><br></pre></td></tr></table></figure><h2 id="sets"><a class="markdownIt-Anchor" href="#sets"></a> Sets</h2><p><strong>Set</strong> 에 속한 모든 아이템들이 유니크해야될 때 사용합니다. 유니크할 필요가 없다면 <code>List</code> 를 사용하면 됩니다.</p><p><code>Set</code> 도 두 가지 방법으로 정의할 수 있습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> numbers1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">  <span class="built_in">Set</span> numbers2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Set</span>&lt;<span class="built_in">int</span>&gt; numbers3 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">  numbers3.add(<span class="number">1</span>);</span><br><span class="line">  numbers3.add(<span class="number">2</span>);</span><br><span class="line">  numbers3.add(<span class="number">4</span>);</span><br><span class="line">  <span class="built_in">print</span>(numbers3) <span class="comment">// &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>List</code> 는 대괄호를 쓰며 <code>Set</code> 은 중괄호를 쓴다는 점이 다릅니다. <code>List</code> 는 같은 요소가 여러개 반복될 수 있지만, <code>Set</code> 은 중복이 허용되지 않습니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://dart.dev/guides/language/language-tour#collection-operators" target="_blank" rel="noopener">https://dart.dev/guides/language/language-tour#collection-operators</a></li><li><a href="https://dart.dev/guides/language/language-tour#maps" target="_blank" rel="noopener">https://dart.dev/guides/language/language-tour#maps</a></li><li><a href="https://dart.dev/guides/language/language-tour#sets" target="_blank" rel="noopener">https://dart.dev/guides/language/language-tour#sets</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/04/17/dart-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Dart] Null Safety</title>
      <link>http://hgko1207.github.io/2023/04/14/dart-3/</link>
      <guid>http://hgko1207.github.io/2023/04/14/dart-3/</guid>
      <pubDate>Fri, 14 Apr 2023 05:10:05 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Null Safety&lt;/strong&gt; 는 개발자가 null 값을 참조할 수 없게 하는 것입니다.&lt;/p&gt;
&lt;p&gt;다음 코드를 봅시다.&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Null Safety</strong> 는 개발자가 null 값을 참조할 수 없게 하는 것입니다.</p><p>다음 코드를 봅시다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> isEmpty(<span class="built_in">String</span> string) =&gt; string.length == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">  <span class="comment">// [오류]</span></span><br><span class="line">  isEmpty(🚫<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음과 같은 코드는 어떻게 실행될까요?</p><p>정답은 <code>NoSuchMethodError</code> 를 실행합니다. 왜 이렇게 실행될까요?<br />바로 String 을 보내야 할 곳에 null 을 보냈기 때문입니다.<br />null 에는 length 라는 속성이 없기 때문이기도 합니다.</p><p>이와 같은 에러는 컴파일러에서 잡을 수 있는 에러가 아닙니다.<br />이런 상황이 발생하지 않도록 null 를 삭제하기에는 null 값은 유용합니다.</p><p>그럼 어떻게 null 값을 참조하는 것을 dart 는 어떻게 보호할까요?<br />dart 에서는 변수가 null 이 될 수 있음을 명확히 표시해야합니다.</p><p>다음 코드를 봅시다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">"eden"</span>;</span><br><span class="line">  🚫name = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 코드는 에러가 납니다. name 이 null 값을 참조할 수 있다고 알려주지 않고 null 값을 참조하기 때문입니다.</p><p>그러면 다음 코드를 봅시다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">String</span>? name = <span class="string">"eden"</span>;</span><br><span class="line">  name = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 코드는 에러가 나지 않습니다. 차이점이 뭘까요? 바로 변수 뒤에 <code>?</code>를 사용해 이 변수에는 null 이 참조될 수 있음을 알려주는 것입니다.</p><p>만약 <code>?</code>를 붙인 변수는 이 변수가 null 인지 아닌지 확인해야 합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">String</span>? name = <span class="string">"eden"</span>;</span><br><span class="line">  name = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(name.length);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/04/14/dart-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Dart] 변수(Variable) 사용 방법</title>
      <link>http://hgko1207.github.io/2023/04/13/dart-2/</link>
      <guid>http://hgko1207.github.io/2023/04/13/dart-2/</guid>
      <pubDate>Thu, 13 Apr 2023 02:09:29 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt; 에서 변수 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;변수를-만드는-2가지-방법&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#변수를-만드는-2가지-방법&quot;&gt;&lt;/a&gt; 변수를 만
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Dart</strong> 에서 변수 사용 방법에 대해 알아보겠습니다.</p><h2 id="변수를-만드는-2가지-방법"><a class="markdownIt-Anchor" href="#변수를-만드는-2가지-방법"></a> 변수를 만드는 2가지 방법</h2><p>dart 에서는 변수를 var 키워드 또는 명시적으로 변수의 타입을 지정해서 사용합니다. 다른 타입의 변수는 서로 대입할 수 없습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 방법 1</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">"car"</span>;</span><br><span class="line">  name = <span class="string">"bus"</span>;</span><br><span class="line">  <span class="comment">// [오류]</span></span><br><span class="line">  🚫 name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 방법 2</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">"car"</span>;</span><br><span class="line">  name = <span class="string">"bus"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>var 를 사용하는게 dart 스타일가이드의 권장 방식입니다.</p><p>함수나 메소드 내부에 지역변수를 선언할 때는 var 를 사용하고 class 에서 변수나 property 를 선언할 때는 타입을 지정해줍니다.</p><h2 id="dynamic-타입"><a class="markdownIt-Anchor" href="#dynamic-타입"></a> Dynamic 타입</h2><p>여러가지 타입을 가질 수 있는 변수에 쓰는 키워드입니다. 변수를 선언할 때 dynamic 을 쓰거나 값을 지정하지 않으면 dynamic 타입을 가집니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">dynamic</span> name;</span><br><span class="line">  <span class="keyword">var</span> name2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line">  name = <span class="string">'car'</span>;</span><br><span class="line">  name = <span class="number">1</span>;</span><br><span class="line">  name = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dynamic 타입은 언제 사용될까?</p><ul><li>해당 변수의 타입을 알 수 없을 때 주로 사용합니다. 예를 들어 json 을 작업할 경우입니다.</li><li>하지만 dynamic 타입은 다양한 타입을 가질 수 있기 때문에 <strong>정말 필요할 때만</strong> 사용해야 합니다. (위험 방지)</li></ul><h2 id="null-safety"><a class="markdownIt-Anchor" href="#null-safety"></a> Null Safety</h2><p>null safety 는 개발자가 null 값을 참조할 수 없도록 하는 것입니다.<br />String 뒤에 ?를 붙여줌으로서 name 이 String 또는 null 이 될 수 있다고 명시해준 것입니다. 기본적으로 모든 변수는 non-nullable(null이 될 수 없음)입니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">String</span>? name = <span class="string">"eden"</span>;</span><br><span class="line">  name = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="final-변수"><a class="markdownIt-Anchor" href="#final-변수"></a> final 변수</h2><p>var 대신 final 로 변수를 만들게 되면 이 변수는 수정할 수 없게 됩니다. (딱 한 번만 설절될 수 있음) 자바스크립트의 const 랑 비슷합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">final</span> name = <span class="string">"pizza"</span>;</span><br><span class="line">  🚫name = <span class="string">"ham"</span>; <span class="comment">// 수정 불가</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> username = <span class="string">"eden"</span>;</span><br><span class="line">  🚫name = <span class="string">"eden2"</span>; <span class="comment">// 수정 불가</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="late-변수"><a class="markdownIt-Anchor" href="#late-변수"></a> late 변수</h2><p>초기 데이터 없이 먼저 변수를 생성하고 추후에 데이터를 넣을 때 주로 사용합니다. flutter 로 data fecthing 을 할 때 유용합니다.</p><p>late 변수를 만들고, API 에 요청을 보낸 뒤에 API 에서 값을 보내주면 그 응답 값을 late 변수에 넣어 사용할 수 있습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  late <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  🚫<span class="built_in">print</span>(name); <span class="comment">// 값을 넣기 전에는 name 변수에 접근 불가</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something, go to api</span></span><br><span class="line">  name = <span class="string">'api'</span>;</span><br><span class="line">  <span class="comment">// 한번만 할당해 줄 수 있음</span></span><br><span class="line">  🚫name = <span class="string">'test'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const-변수"><a class="markdownIt-Anchor" href="#const-변수"></a> const 변수</h2><p>dart 에서 const 는 compile-time constant 를 만들어줍니다. const 는 컴파일할 때 알고 있는 값을 사용해야 합니다.</p><p>만약 어떤 값인지 모르고, 그 값이 API 로부터 오거나 사용자가 화면에서 입력해야 하는 값이라면 그건 const 가 아닌 final 이나 var 가 되어야 합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// 컴파일 시점에 바뀌지 않는 값</span></span><br><span class="line">  <span class="keyword">const</span> API_KEY = <span class="string">"********"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 컴파일 시점에 바뀌는 값</span></span><br><span class="line">  <span class="keyword">final</span> API = fetchAPI();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>const</strong>: 컴파일 시점에 바뀌지 않는 값 (상수)</li><li><strong>final</strong>: 컴파일 시점에 바뀌는 값 (API 에서 받아온 값, 사용자 입력값)</li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/04/13/dart-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Dart] 시작하기</title>
      <link>http://hgko1207.github.io/2023/04/12/dart-1/</link>
      <guid>http://hgko1207.github.io/2023/04/12/dart-1/</guid>
      <pubDate>Wed, 12 Apr 2023 01:35:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;dart-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#dart-란&quot;&gt;&lt;/a&gt; Dart 란&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt; 는 모든 플랫폼에서 빠른 앱을 위한 클라이언트 최적화 언어입니다.&lt;/
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="dart-란"><a class="markdownIt-Anchor" href="#dart-란"></a> Dart 란</h2><p><strong>Dart</strong> 는 모든 플랫폼에서 빠른 앱을 위한 클라이언트 최적화 언어입니다.</p><ol><li><strong>UI 최적화용</strong><br />사용자 인터페이스 생성 요구에 특화된 프로그래밍 언어로 개발합니다.<br /><br/></li><li><strong>생산적인 개발</strong><br />핫 리로드를 사용하여 실행 중인 앱에서 즉시 결과 확인 가능합니다.<br /><br/></li><li><strong>모든 플랫폼에서 빠름</strong><br />모바일, 데스크톱 및 백엔드용 ARM 및 x64 머신 코드로 컴파일합니다. 또는 웹용 JavaScript 로 컴파일합니다.</li></ol><h2 id="why-dart"><a class="markdownIt-Anchor" href="#why-dart"></a> Why Dart</h2><p>Dart 의 컴파일러 기술을 사용하면 다양한 방식으로 코드를 실행할 수 있습니다.</p><ul><li><p><strong>기본 플랫폼(Dart Native)</strong>: 모바일 및 데스크톱 장치를 대상으로 하는 앱의 경우 Dart 에는 JIT(Just-In-Time) 컴파일 기능이 있는 Dart VM 과 기계 코드 생성을 위한 AOT(Ahead-of-Time) 컴파일러가 모두 포함되어 있습니다.</p></li><li><p><strong>웹 플랫폼(Dart Web)</strong>: 웹을 대상으로 하는 앱의 경우 Dart 는 개발 또는 프로덕션 목적으로 컴파일할 수 있습니다. 웹 컴파일러는 Dart 를 JavaScript 로 변환합니다.</p></li></ul><h2 id="또-다른-특징"><a class="markdownIt-Anchor" href="#또-다른-특징"></a> 또 다른 특징</h2><ul><li><strong>null safety</strong> 특성을 가집니다. c 또는 java 에서 null 참조하면 오류가 발생합니다.</li><li>flutter, dart 둘 다 구글에서 개발 한 것입니다. 즉 flutter 의 성능 향상을 위해 dart 를 최적화 할 수 있습니다.</li><li>flutter 가 dart 에 대해 뭔가 필요한 게 있으면, flutter 를 위해 dart 를 수정할 수 있습니다. react-native, django, flask 등 다른 프레임워크들은 사용하는 언어를 수정할 수 없다는 점이 다릅니다.</li></ul><h2 id="main-함수"><a class="markdownIt-Anchor" href="#main-함수"></a> main 함수</h2><p>main 함수는 모든 Dart 프로그램의 Entry point 입니다.<br />main 함수에서 쓴 코드가 호출됩니다. (만약 main 함수가 없다면 실행이 되지 않음)<br />dart 는 자동으로 세미콜론을 붙여주지 않기 때문에 직접 붙여야 합니다. (일부러 세미콜론을 안 쓸 때가 있기 때문입니다.)</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="flutter"><a class="markdownIt-Anchor" href="#flutter"></a> Flutter</h2><p><strong>Flutter</strong> 프레임워크는 인기 있는 다중 플랫폼 UI 툴킷으로 Dart 플랫폼으로 구동되며 iOS, Android, macOS, Windows, Linux 및 웹에서 실행되는 UI 경험을 빌드하기 위한 도구 및 UI 라이브러리를 제공합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://dart.dev/" target="_blank" rel="noopener">https://dart.dev/</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/04/12/dart-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[TypeScript] JSDoc Reference 사용 방법</title>
      <link>http://hgko1207.github.io/2023/04/11/typescript-7/</link>
      <guid>http://hgko1207.github.io/2023/04/11/typescript-7/</guid>
      <pubDate>Tue, 11 Apr 2023 05:53:58 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;JavaScript 파일에서 TypeScript 처럼 코드를 보호받을 수 있도록 하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;ts-check&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ts-check&quot;&gt;&lt;/a&gt; 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>JavaScript 파일에서 TypeScript 처럼 코드를 보호받을 수 있도록 하는 방법에 대해 알아보겠습니다.</p><h2 id="ts-check"><a class="markdownIt-Anchor" href="#ts-check"></a> @ts-check</h2><p>JavaScript 파일에서 오류를 활성화하려면 <code>// @ts-check</code>를 .js 파일의 첫 번째 줄에 추가하여 TypeScript 가 오류를 발생시키도록 합니다. TypeScript 는 여러 오류를 제공할 수 있습니다.</p><p>아래 코드는 TypeScript 와 같이 함수 파라미터에 정의가 되어 있지 않아 오류가 발생합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [오류]</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">🚫 config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [오류]</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">exit</span>(<span class="params">🚫 code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> code + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이러한 오류를 무시하고 싶다면 <code>// @ts-ignore</code> 또는 <code>// @ts-expect-error</code>를 추가하여 특정 줄의 오류를 무시할 수 있습니다.</p><h2 id="jsdoc-reference"><a class="markdownIt-Anchor" href="#jsdoc-reference"></a> JSDoc Reference</h2><p>JSDoc 주석을 사용하여 JavaScript 파일에 type 정보를 제공할 수 있습니다. (자바스크립트 파일에서 타입 정보를 제공할 수 있습니다.)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes the project</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> <span class="variable">config</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;boolean&#125;</span> </span>config.debug</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>config.url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exits the program</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">code</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">exit</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> code + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSDoc 주석을 통해 타입을 정의하고 TypeScript 파일에서 다음과 같이 함수를 사용할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">init(&#123;</span><br><span class="line">  debug: <span class="literal">false</span>,</span><br><span class="line">  url: <span class="string">'true'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">exit(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="주의-사항"><a class="markdownIt-Anchor" href="#주의-사항"></a> 주의 사항</h2><ul><li><code>@ts-check</code>를 사용하면 JavaScript 파일 내에서 타입 검사를 허용합니다.</li><li><code>@ts-check</code> 를 사용하지 않고 JSDoc 만 사용하면 TypeScript 파일에서는 JavaScript 의 타입을 검사 하지만, JavaScript 내에서는 단순 주석이나 타입을 명시하는 정도로만 사용할 수 있는 것 같습니다</li></ul><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/intro-to-js-ts.html#ts-check" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/intro-to-js-ts.html#ts-check</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/04/11/typescript-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[TypeScript] 설치 및 설정 방법</title>
      <link>http://hgko1207.github.io/2023/04/11/typescript-6/</link>
      <guid>http://hgko1207.github.io/2023/04/11/typescript-6/</guid>
      <pubDate>Tue, 11 Apr 2023 02:10:23 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;NextJS, Create React App(CRA) 를 사용하지 않고 초기 프로젝트에 &lt;strong&gt;TypeScript&lt;/strong&gt; 를 설치하고 설정하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;프로젝트-시작&quot;&gt;&lt;a class=&quot;m
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>NextJS, Create React App(CRA) 를 사용하지 않고 초기 프로젝트에 <strong>TypeScript</strong> 를 설치하고 설정하는 방법에 대해 알아보겠습니다.</p><h2 id="프로젝트-시작"><a class="markdownIt-Anchor" href="#프로젝트-시작"></a> 프로젝트 시작</h2><p>프로젝트 디렉터리를 생성합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir typescripttest</span><br><span class="line">$ <span class="built_in">cd</span> typescripttest</span><br></pre></td></tr></table></figure><p>다음 명령어를 실행하여 <code>package.json</code> 을 초기화합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br></pre></td></tr></table></figure><h2 id="typescript-설치"><a class="markdownIt-Anchor" href="#typescript-설치"></a> TypeScript 설치</h2><p>다음 명령어를 실행하여 TypeScript 를 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D typescript</span><br></pre></td></tr></table></figure><h2 id="tsconfigjson-설정"><a class="markdownIt-Anchor" href="#tsconfigjson-설정"></a> tsconfig.json 설정</h2><p>TypeScript 설정은 tsconfig.json 파일에서 합니다. 디렉터리에 tsconfig.json 파일이 있으면 해당 디렉터리가 TypeScript 프로젝트의 루트임을 나타냅니다. tsconfig.json 파일은 프로젝트를 컴파일하는 데 필요한 루트 파일과 컴파일러 옵션을 지정합니다.</p><p><code>tsconfig.json</code> 파일을 생성합니다. 다음과 같이 기본적인 설정을 작성합니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"include"</span>: [<span class="string">"src"</span>], <span class="comment">// 자바스크립트로 컴파일 하고 싶은 모든 디렉터리</span></span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"build"</span> <span class="comment">// 자바스크립트 파일로 생성될 디렉터리(빌드 디렉터리)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음 명령어로도 기본적인 <code>tsconfig.json</code> 파일 생성이 가능합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g typescript</span><br><span class="line">$ tsc --init</span><br></pre></td></tr></table></figure><h3 id="target-기본값-es3"><a class="markdownIt-Anchor" href="#target-기본값-es3"></a> Target (기본값: ES3)</h3><p>최신 브라우저는 모든 ES6 기능을 지원하므로 ES6 는 좋은 선택입니다. 코드가 이전 환경에 배포된 경우 더 낮은 target 을 설정하거나 최신 환경에서 코드 실행이 보장되는 경우 더 높은 target 을 설정하도록 선택할 수 있습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"include"</span>: [<span class="string">"src"</span>],</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"build"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"ES6"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lib라이브러리"><a class="markdownIt-Anchor" href="#lib라이브러리"></a> Lib(라이브러리)</h3><p>타입스크립트에게 어떤 API를 사용하고 어떤 환경에서 코드를 실행하는 지를 지정할 수 있습니다. (target 런타임 환경이 무엇인지를 지정합니다.)</p><p>프로그램이 브라우저에서 실행되면 lib에 “DOM” 유형 정의를 할 수 있습니다.</p><ul><li>DOM: window, document 등</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ex)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"lib"</span>: [<span class="string">"ES6"</span>, <span class="string">"DOM"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strict"><a class="markdownIt-Anchor" href="#strict"></a> strict</h3><p>모든 엄격한 타입 검사 옵션을 활성화합니다. <code>strict</code> 플래그는 프로그램 정확성을 더 강력하게 보장하는 광범위한 타입 검사 동작을 가능하게 합니다.</p><p>tsconfig.json 에서 <code>&quot;strict&quot;: true</code> 를 통해 strict mode 로 해주면, Declaration Files 가 없는 경우에 대해서도 에러를 띄워줍니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#handbook-content" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#handbook-content</a></li><li><a href="https://www.typescriptlang.org/tsconfig#target" target="_blank" rel="noopener">https://www.typescriptlang.org/tsconfig#target</a></li><li><a href="https://www.typescriptlang.org/tsconfig#lib" target="_blank" rel="noopener">https://www.typescriptlang.org/tsconfig#lib</a></li><li><a href="https://www.typescriptlang.org/tsconfig#strict" target="_blank" rel="noopener">https://www.typescriptlang.org/tsconfig#strict</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/04/11/typescript-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[TypeScript] 인터페이스(Interface) 사용 방법</title>
      <link>http://hgko1207.github.io/2023/04/06/typescript-5/</link>
      <guid>http://hgko1207.github.io/2023/04/06/typescript-5/</guid>
      <pubDate>Thu, 06 Apr 2023 14:20:26 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; 에서 인터페이스(Interface)를 생성하고 사용하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;interfaces&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#in
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>TypeScript</strong> 에서 인터페이스(Interface)를 생성하고 사용하는 방법에 대해 알아보겠습니다.</p><h2 id="interfaces"><a class="markdownIt-Anchor" href="#interfaces"></a> Interfaces</h2><p>객체의 모양을 특정해주기 위해 사용합니다. 여기서는 <code>firstName</code> 및 <code>lastName</code> 필드가 있는 객체를 설명하는 인터페이스를 사용합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span>;</span><br><span class="line">  lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다른 인터페이스를 상속 받아 사용할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Player <span class="keyword">extends</span> User &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eden: Player = &#123;</span><br><span class="line">  name: <span class="string">'eden'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>인터페이스 이름이 같도록 3번 각각 만들어도 타입스크립트는 알아서 하나로 합쳐줍니다. Type 과 차이점입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  nickname: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eden: User = &#123;</span><br><span class="line">  name: <span class="string">'eden'</span>,</span><br><span class="line">  nickname: <span class="string">'ko'</span>,</span><br><span class="line">  age: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="implements"><a class="markdownIt-Anchor" href="#implements"></a> implements</h2><p>implements 을 사용하여 클래스가 특정 인터페이스를 충족하는지 확인할 수 있습니다.<br />클래스를 올바르게 구현하지 못하면 오류가 발생합니다.</p><p>implements 절은 클래스가 인터페이스 유형으로 처리될 수 있는지 확인하는 것입니다. 클래스의 유형이나 메서드는 전혀 변경하지 않습니다.<br />또한 클래스는 여러 인터페이스를 구현할 수도 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ex) 클래스 C 는 A, B 를 구현합니다.</span></span><br><span class="line"><span class="keyword">class</span> C <span class="keyword">implements</span> A, B &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Pingable &#123;</span><br><span class="line">  ping(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sonar 클래스는 Pingable 인터페이스를 implement 했기 때문에</span></span><br><span class="line"><span class="comment">// Pingable 가 가진 ping 메서드를 구현해줘야 합니다.</span></span><br><span class="line"><span class="keyword">class</span> Sonar <span class="keyword">implements</span> Pingable &#123;</span><br><span class="line">  ping() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ping!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여러 개의 인터페이스를 상속받아 사용할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span>;</span><br><span class="line">  lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">  health: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Player <span class="keyword">implements</span> User, Human &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> firstName: <span class="built_in">string</span>, <span class="keyword">public</span> lastName: <span class="built_in">string</span>, <span class="keyword">public</span> health: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="type-aliases-과-interfaces-의-차이점"><a class="markdownIt-Anchor" href="#type-aliases-과-interfaces-의-차이점"></a> Type Aliases 과 Interfaces 의 차이점</h2><p>Type Aliases 과 인터페이스는 매우 유사하며 많은 경우 자유롭게 선택할 수 있습니다. 인터페이스의 거의 모든 기능은 type 에서 사용할 수 있으며, 주요 차이점은 type 을 다시 열어 새 속성을 추가할 수 없는 것입니다. 반면 인터페이스는 항상 확장 가능합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/typescript-tooling-in-5-minutes.html#interfaces" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/typescript-tooling-in-5-minutes.html#interfaces</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/04/06/typescript-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[TypeScript] 클래스(Class) 사용 방법</title>
      <link>http://hgko1207.github.io/2023/03/29/typescript-4/</link>
      <guid>http://hgko1207.github.io/2023/03/29/typescript-4/</guid>
      <pubDate>Wed, 29 Mar 2023 05:20:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; 에서 클래스(Class)를 생성하고 사용하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;클래스class&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#클래스class&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>TypeScript</strong> 에서 클래스(Class)를 생성하고 사용하는 방법에 대해 알아보겠습니다.</p><h2 id="클래스class"><a class="markdownIt-Anchor" href="#클래스class"></a> 클래스(Class)</h2><p>가장 기본적인 클래스입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Player &#123;&#125;</span><br></pre></td></tr></table></figure><p>필드를 선언해서 사용 가능합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Player &#123;</span><br><span class="line">  firstname: <span class="built_in">string</span>;</span><br><span class="line">  lastname: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eden = <span class="keyword">new</span> Player();</span><br><span class="line">eden.firstname = <span class="string">'ko'</span>;</span><br><span class="line">eden.lastname = <span class="string">'eden'</span>;</span><br></pre></td></tr></table></figure><p>생성자에 매개변수를 추가해서 선언할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Player &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> firstname: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> lastname: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> nickname: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eden = <span class="keyword">new</span> Player(<span class="string">"ko"</span>, <span class="string">"eden"</span>, <span class="string">"고수"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [오류]</span></span><br><span class="line"><span class="comment">// firstname는 private 이기 때문에 접근 불가</span></span><br><span class="line"><span class="comment">// javascript 에서는 아무 문제없이 작동함</span></span><br><span class="line">🚫 eden.firstname;</span><br></pre></td></tr></table></figure><ul><li>public: 모든 클래스에서 접근 가능</li><li>private: 해당 클래스 내에서만 접근 가능 (자식 클래스에서도 접근 불가)</li><li>protected: 해당 클래스와 자식 클래스에서 접근 가능</li></ul><h2 id="추상-클래스abstract-class"><a class="markdownIt-Anchor" href="#추상-클래스abstract-class"></a> 추상 클래스(Abstract Class)</h2><p>TypeScript 와 객체지향 프로그램이 가지고 있는 엄청 훌륭한 것은 추상 클래스(Abstract Class)라고 생각됩니다.</p><p>추상클래스는 다른 클래스가 상속받을 수 있는 클래스입니다. 하지만 이 클래스는 직접 새로운 인스턴스를 만들 수는 없습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> User &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> firstname: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> lastname: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> nickname: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">abstract</span> getNickname(): <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line">    getFullName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstname&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastname&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [오류]</span></span><br><span class="line"><span class="comment">// TypeScript 가 추상 클래스의 인스턴스를 만들 수 없다고 경고함</span></span><br><span class="line">🚫 <span class="keyword">const</span> eden = <span class="keyword">new</span> User(<span class="string">"ko"</span>, <span class="string">"eden"</span>, <span class="string">"고수"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Player <span class="keyword">extends</span> User &#123;</span><br><span class="line">  <span class="comment">// 추상 메서드는 추상 클래스를 상속받는 클래스들이 반드시 구현(implement)해야하는 메서드입니다.</span></span><br><span class="line">  getNickname() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.nickname);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eden = <span class="keyword">new</span> Player(<span class="string">'ko'</span>, <span class="string">'eden'</span>, <span class="string">'고수'</span>);</span><br><span class="line">eden.getNickname();</span><br><span class="line">eden.getFullName();</span><br></pre></td></tr></table></figure><p>추상 클래스를 사용하기 위해서는 상속을 받아 사용합니다.</p><h2 id="static-members"><a class="markdownIt-Anchor" href="#static-members"></a> Static Members</h2><p>클래스에는 static 멤버가 있을 수 있습니다. 이 멤버는 클래스의 특정 인스턴스와 연결되지 않습니다. 클래스 생성자 객체 자체를 통해 액세스할 수 있습니다. static 멤버는 동일한 public, protected 및 private 과 함께 사용할 수도 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyClass &#123;</span><br><span class="line">  <span class="keyword">static</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> printX() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(MyClass.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(MyClass.x);</span><br><span class="line">MyClass.printX();</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/2/classes.html" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/2/classes.html</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/2/classes.html#static-members" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/2/classes.html#static-members</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/03/29/typescript-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[TypeScript] 다형성(Polymorphism)</title>
      <link>http://hgko1207.github.io/2023/03/16/typescript-3/</link>
      <guid>http://hgko1207.github.io/2023/03/16/typescript-3/</guid>
      <pubDate>Thu, 16 Mar 2023 05:59:01 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;다형성polymorphism&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#다형성polymorphism&quot;&gt;&lt;/a&gt; 다형성(Polymorphism)&lt;/h2&gt;
&lt;p&gt;다형성이란, 여러 타입을 받아들임으로써 여러 형태를 가지
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="다형성polymorphism"><a class="markdownIt-Anchor" href="#다형성polymorphism"></a> 다형성(Polymorphism)</h2><p>다형성이란, 여러 타입을 받아들임으로써 여러 형태를 가지는 것을 의미합니다.</p><ul><li><strong>poly:</strong> many, serveral, much, multi 등과 같은 뜻</li><li><strong>morphos:</strong> form, structure 등과 같은 뜻</li><li><strong>polymorphos = poly + morphos:</strong> 여러 다른 구조</li></ul><h2 id="예시"><a class="markdownIt-Anchor" href="#예시"></a> 예시</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SuperPrint = &#123;</span><br><span class="line">  (arr: T[]): T;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> superPrint: SuperPrint = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = superPrint([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> b = superPrint([<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line"><span class="keyword">const</span> c = superPrint([<span class="string">'a'</span>, <span class="string">'b'</span>]);</span><br><span class="line"><span class="keyword">const</span> d = superPrint([<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="literal">true</span>]);</span><br></pre></td></tr></table></figure><h2 id="any-generics-차이점"><a class="markdownIt-Anchor" href="#any-generics-차이점"></a> any, generics 차이점</h2><p><strong>any</strong> 를 사용하는 것은 어떤 타입이든 받을 수 있다는 점에서 <strong>generics</strong> 과 같지만 함수를 반환하는데 있어 <strong>any</strong> 는 받았던 인수들의 타입을 활용하지 못합니다.</p><p>즉, <strong>generics</strong> 은 어떤 타입이든 받을 수 있다는 점에서 <strong>any</strong> 와 같지만 해당 정보를 잃지 않고 타입에 대한 정보를 다른 쪽으로 전달할 수 있다는 점이 다릅니다.</p><h2 id="generics"><a class="markdownIt-Anchor" href="#generics"></a> Generics</h2><p>제네릭은 C# 이나 Java 와 같은 언어에서 재사용 가능한 컴포넌트를 만들기 위해 사용하는 기법입니다. 단일 타입이 아닌 다양한 타입에서 작동할 수 있는 컴포넌트를 생성할 수 있습니다.<br />(구체적인 타입을 지정하지 않고 다양한 인수와 리턴 값에 대한 타입을 처리할 수 있습니다.)<br />타입스크립트에서 제네릭을 통해 인터페이스, 함수 등의 재사용성을 높일 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">Type</span>&gt;(<span class="params">arg: Type</span>): <span class="title">Type</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 제네릭 화살표 함수 (tsx기준)</span></span><br><span class="line"><span class="keyword">const</span> identity = &lt;Type <span class="keyword">extends</span> &#123;&#125;&gt;(arg: Type): <span class="function"><span class="params">Type</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">'myString'</span>); <span class="comment">// 첫 번째 방법</span></span><br><span class="line"><span class="keyword">let</span> output = identity(<span class="string">'myString'</span>); <span class="comment">// 두 번째 방법</span></span><br></pre></td></tr></table></figure><p>위에서 두 번째 방법은 type argument inference(타입 인수 유추)를 사용합니다. 즉, 컴파일러가 전달하는 인수 유형에 따라 자동으로 Type 값을 설정하기를 원합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/2/generics.html#handbook-content" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/2/generics.html#handbook-content</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/2/generics.html#hello-world-of-generics" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/2/generics.html#hello-world-of-generics</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/03/16/typescript-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[TypeScript] Function Overloads</title>
      <link>http://hgko1207.github.io/2023/03/16/typescript-2/</link>
      <guid>http://hgko1207.github.io/2023/03/16/typescript-2/</guid>
      <pubDate>Thu, 16 Mar 2023 05:47:52 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;function-overloads&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#function-overloads&quot;&gt;&lt;/a&gt; Function Overloads&lt;/h2&gt;
&lt;p&gt;동일한 이름에 매개 변수와 매개 변수 타입 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="function-overloads"><a class="markdownIt-Anchor" href="#function-overloads"></a> Function Overloads</h2><p>동일한 이름에 매개 변수와 매개 변수 타입 또는 리턴 타입이 다른 여러 버전의 함수를 만드는 것을 말합니다. TypeScript 에서는 오버로드 signatures 을 작성하여 **“다양한 방식으로 호출할 수 있는 함수”**를 지정할 수 있습니다.</p><h2 id="사용-예제"><a class="markdownIt-Anchor" href="#사용-예제"></a> 사용 예제</h2><h3 id="매개변수의-데이터-타입이-다른-경우"><a class="markdownIt-Anchor" href="#매개변수의-데이터-타입이-다른-경우"></a> 매개변수의 데이터 타입이 다른 경우</h3><p>매개변수의 데이터 타입이 다른 경우 예외 처리를 합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Add = &#123;</span><br><span class="line">  (a: <span class="built_in">number</span>, b: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">  (a: <span class="built_in">number</span>, b: <span class="built_in">string</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add: Add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> b === <span class="string">'string'</span>) <span class="keyword">return</span> a;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="string">'2'</span>);</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="매개변수의-수가-다른-경우"><a class="markdownIt-Anchor" href="#매개변수의-수가-다른-경우"></a> 매개변수의 수가 다른 경우</h3><p>매개변수의 수가 다른 경우 예외 처리를 합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Add = &#123;</span><br><span class="line">  (a: <span class="built_in">number</span>, b: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">  (a: <span class="built_in">number</span>, b: <span class="built_in">number</span>, c: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add2: Add = <span class="function">(<span class="params">a, b, c?: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (c) <span class="keyword">return</span> a + b + c;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/03/16/typescript-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[WPF] 문자열(string)의 가로 세로 길이 계산</title>
      <link>http://hgko1207.github.io/2023/03/16/wpf-10/</link>
      <guid>http://hgko1207.github.io/2023/03/16/wpf-10/</guid>
      <pubDate>Thu, 16 Mar 2023 01:53:23 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;WPF 에서 글꼴 크기(FontSize)와 폰트(FontFamily)를 통해 문자열의 크기를 계산하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FormattedText&lt;/code&gt; 를 사용하여 텍스트의 서식을 지정한 후 크기를 계산할 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>WPF 에서 글꼴 크기(FontSize)와 폰트(FontFamily)를 통해 문자열의 크기를 계산하는 방법에 대해 알아보겠습니다.</p><p><code>FormattedText</code> 를 사용하여 텍스트의 서식을 지정한 후 크기를 계산할 수 있습니다.</p><h2 id="소스코드"><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><p><code>TextBlock</code> 컨트롤을 사용할 경우 다음과 같이 작성하여 문자열의 크기를 구합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 글자 가로 세로 길이 계산</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="textBlock"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Size <span class="title">MeasureString</span>(<span class="params">TextBlock textBlock</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FormattedText formattedText = <span class="keyword">new</span> FormattedText</span><br><span class="line">    (</span><br><span class="line">        textBlock.Text,</span><br><span class="line">        CultureInfo.CurrentUICulture,</span><br><span class="line">        FlowDirection.LeftToRight,</span><br><span class="line">        <span class="keyword">new</span> Typeface</span><br><span class="line">        (</span><br><span class="line">          textBlock.FontFamily,</span><br><span class="line">          textBlock.FontStyle,</span><br><span class="line">          textBlock.FontWeight,</span><br><span class="line">          textBlock.FontStretch</span><br><span class="line">        ),</span><br><span class="line">        textBlock.FontSize,</span><br><span class="line">        textBlock.Foreground,</span><br><span class="line">        VisualTreeHelper.GetDpi(textBlock).PixelsPerDip</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Size(formattedText.Width, formattedText.Height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TextBlock</code> 컨트롤을 사용하지 않고 string 문자열과 글꼴 크기, 폰트를 입력하여 길이를 구할 수 있습니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 글자 가로 세로 길이 계산</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="text"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="fontSize"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="fontFamily"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Size <span class="title">MeasureString</span>(<span class="params"><span class="keyword">string</span> text, <span class="keyword">int</span> fontSize, FontFamily fontFamily</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FormattedText formattedText = <span class="keyword">new</span> FormattedText</span><br><span class="line">    (</span><br><span class="line">        text,</span><br><span class="line">        CultureInfo.CurrentUICulture,</span><br><span class="line">        FlowDirection.LeftToRight,</span><br><span class="line">        <span class="keyword">new</span> Typeface</span><br><span class="line">        (</span><br><span class="line">            fontFamily,</span><br><span class="line">            FontStyles.Normal,</span><br><span class="line">            FontWeights.Bold,</span><br><span class="line">            FontStretches.Normal</span><br><span class="line">        ),</span><br><span class="line">        fontSize,</span><br><span class="line">        Brushes.Black,</span><br><span class="line">        VisualTreeHelper.GetDpi(<span class="keyword">this</span>).PixelsPerDip</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Size(formattedText.Width, formattedText.Height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="사용-방법"><a class="markdownIt-Anchor" href="#사용-방법"></a> 사용 방법</h2><ol><li><code>TextBlock</code> 컨트롤을 사용 할 경우 사용 방법입니다.</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TextBlock textBlock = <span class="keyword">new</span> TextBlock</span><br><span class="line">&#123;</span><br><span class="line">  Text = <span class="string">"test"</span>,</span><br><span class="line">  FontFamily = <span class="keyword">new</span> FontFamily(<span class="string">"Arial"</span>),</span><br><span class="line">  FontSize = <span class="number">16</span>,</span><br><span class="line">  Foreground = Brushes.Red</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Size textSize = MeasureString(textBlock);</span><br><span class="line"></span><br><span class="line">Console.Write(<span class="string">"Width =&gt; "</span> + textSize.Width);</span><br><span class="line">Console.Write(<span class="string">"Height =&gt; "</span> + textSize.Height);</span><br></pre></td></tr></table></figure><ol start="2"><li><code>TextBlock</code> 컨트롤을 사용하지 않을 경우 사용 방법입니다.</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> text = <span class="string">"hello eden"</span>;</span><br><span class="line"><span class="keyword">int</span> fontSize = <span class="number">32</span>;</span><br><span class="line">FontFamily fontFamily = <span class="keyword">new</span> FontFamily(<span class="string">"Arial"</span>);</span><br><span class="line"></span><br><span class="line">Size textSize = MeasureString(text, fontSize, fontFamily);</span><br><span class="line"></span><br><span class="line">Console.Write(<span class="string">"Width =&gt; "</span> + textSize.Width);</span><br><span class="line">Console.Write(<span class="string">"Height =&gt; "</span> + textSize.Height);</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://learn.microsoft.com/ko-kr/dotnet/api/system.windows.media.formattedtext?view=netframework-4.7.2" target="_blank" rel="noopener">https://learn.microsoft.com/ko-kr/dotnet/api/system.windows.media.formattedtext?view=netframework-4.7.2</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/03/16/wpf-10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[TypeScript] Types</title>
      <link>http://hgko1207.github.io/2023/03/13/typescript-1/</link>
      <guid>http://hgko1207.github.io/2023/03/13/typescript-1/</guid>
      <pubDate>Mon, 13 Mar 2023 04:56:29 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;타입스크립트란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#타입스크립트란&quot;&gt;&lt;/a&gt; 타입스크립트란?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; 는 JavaScript 에 추가적인 구문을 추가하여
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="타입스크립트란"><a class="markdownIt-Anchor" href="#타입스크립트란"></a> 타입스크립트란?</h2><p><strong>TypeScript</strong> 는 JavaScript 에 추가적인 구문을 추가하여 editor 와의 단단한 통합을 지원합니다. editor 에서 초기에 오류를 잡을 수 있습니다.</p><p><strong>TypeScript</strong> 코드는 JavaScript 가 실행되는 모든 곳(브라우저, Node.js 또는 Deno 및 앱 등)에서 JavaScript 로 변환될 수 있습니다.</p><p><strong>TypeScript</strong> 는 JavaScript 를 이해하고 타입 추론(type inference)을 사용하여 추가 코드 없이도 훌륭한 도구를 제공합니다.</p><h2 id="types기본"><a class="markdownIt-Anchor" href="#types기본"></a> Types(기본)</h2><ul><li>✅ 배열: 자료형[]</li><li>✅ 숫자: number</li><li>✅ 문자열: string</li><li>✅ 논리: boolean</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Player = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  weapons: <span class="built_in">string</span>[];</span><br><span class="line">  attack: bool;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="optional-사용"><a class="markdownIt-Anchor" href="#optional-사용"></a> optional 사용</h2><p>?를 :앞에 붙이면 optional 사용 가능합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> player: &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125; = &#123;</span><br><span class="line">  name: <span class="string">'eden'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위와 같이 <code>player.age</code> 를 optional 로 설정할 경우 Typescript 는 <code>player.age</code> 가 undefined 일수도 있다고 오류를 알려줍니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ player.age 가 undefined 일 가능성 알림</span></span><br><span class="line"><span class="keyword">if</span> (player.age &lt; <span class="number">10</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>player.age</code> 가 존재하는지 확인을 거쳐야 오류 알림이 사라집니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⭕ player.age 가 undefined 일 가능성 체크</span></span><br><span class="line"><span class="keyword">if</span> (player.age &amp;&amp; player.age &lt; <span class="number">10</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="alias별칭-타입"><a class="markdownIt-Anchor" href="#alias별칭-타입"></a> Alias(별칭) 타입</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Player = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> player: Player = &#123;</span><br><span class="line">  name: <span class="string">'eden'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="readonly-사용"><a class="markdownIt-Anchor" href="#readonly-사용"></a> readonly 사용</h2><p>변수 또는 별칭 앞에 <code>readonly</code> 를 붙이면 readonly 사용 가능합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Player = &#123;</span><br><span class="line">  readonly name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>readonly</code> 가 있으면 최초 선언 후 수정 불가합니다. 불변성(immutability)이 부여됩니다. 하지만 javascript 에서는 그냥 배열로 인식하여 수정이 됩니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> playerMaker = (name: <span class="built_in">string</span>): <span class="function"><span class="params">Player</span> =&gt;</span> (&#123; name &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> player = playerMaker(<span class="string">'eden'</span>);</span><br><span class="line"><span class="comment">// [오류]</span></span><br><span class="line">🚫 player.name = <span class="string">"khk"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers: readonly <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// [오류]</span></span><br><span class="line">🚫 numbers.push(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="tuple-타입"><a class="markdownIt-Anchor" href="#tuple-타입"></a> Tuple 타입</h2><p>정해진 개수와 순서에 따라 배열 선언이 가능합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> player: [<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>] = [<span class="string">'eden'</span>, <span class="number">1</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="comment">// [오류]</span></span><br><span class="line">🚫 player[<span class="number">0</span>] = <span class="number">1</span> <span class="comment">// 바꿀 수 없습니다. string으로 지정됨</span></span><br></pre></td></tr></table></figure><p>readonly 도 사용 가능 합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> player: readonly [<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>] = [<span class="string">'eden'</span>, <span class="number">1</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure><h2 id="any-undefined-null-타입"><a class="markdownIt-Anchor" href="#any-undefined-null-타입"></a> any / undefined / null 타입</h2><ul><li>✅ any: 어떠한 타입도 허용</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> b: <span class="built_in">any</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><ul><li>✅ undefined: undefined 값만 가질 수 있음</li><li>✅ null: null 값만 가질 수 있음</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nullable: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> undefinedable: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [오류]</span></span><br><span class="line"><span class="comment">// 'undefined' 형식은 'null' 형식에 할당할 수 없습니다.</span></span><br><span class="line">🚫 nullable = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h2 id="void-타입"><a class="markdownIt-Anchor" href="#void-타입"></a> void 타입</h2><p><strong>void</strong> 는 값을 반환하지 않는 함수의 반환 값을 나타냅니다. 함수에 return 문이 없거나 해당 return 문에서 명시적 값을 반환하지 않을 때 항상 유추되는 타입입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The inferred return type is void</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'x'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = test()</span><br><span class="line"><span class="comment">// [오류]</span></span><br><span class="line">🚫 a.toUpperCase()</span><br></pre></td></tr></table></figure><h2 id="unknown-타입"><a class="markdownIt-Anchor" href="#unknown-타입"></a> unknown 타입</h2><p><strong>unknown</strong> 타입은 모든 값을 나타냅니다. 이것은 any 타입과 비슷하지만 any 보다 unknown 이 더 안전합니다. 이유는 unknown 값으로 작업을 수행하는 것은 합법적이지 않기 때문입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  a.b(); <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">a: unknown</span>) </span>&#123;</span><br><span class="line">  🚫 a.b(); <span class="comment">// 에러: Object is of type 'unknown'.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="never-타입"><a class="markdownIt-Anchor" href="#never-타입"></a> never 타입</h2><p><strong>never</strong> 타입은 모든 타입에 할당 가능한 하위 타입이나, never 타입에는 본인 외에 다른 타입이 할당될 수는 없습니다. never 타입은 절대 발생할 수 없는 타입을 나타냅니다.</p><p>가장 흔한 예제로는 에러를 발생시킬 때 사용됩니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params">msg: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용법에 대해 좀 더 찾아봐야겠지만 그 외에도 특정 타입 값을 할당받지 않도록 하거나, 매개변수의 제한을 건다거나 뭐 그런 곳들에 사용된다는데, 사실 많이 사용하는 타입은 아니라고 봐도 무방합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.typescriptlang.org/play" target="_blank" rel="noopener">타입스크립트 코드 테스트</a></li><li><a href="https://typescript-kr.github.io/pages/basic-types.html" target="_blank" rel="noopener">타입스크립트 핸드북</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/03/13/typescript-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[WPF] Grid를 Bitmap 이미지로 변환 후 저장하기</title>
      <link>http://hgko1207.github.io/2023/03/13/wpf-9/</link>
      <guid>http://hgko1207.github.io/2023/03/13/wpf-9/</guid>
      <pubDate>Mon, 13 Mar 2023 01:49:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;WPF&lt;/strong&gt; 의 Grid 를 사용하여 사용자의 입력을 받는 문서를 작성하거나 여러 이미지를 가시화 할 시, 이를 이미지로 저장하는 기능이 필요할 경우가 있습니다.&lt;/p&gt;
&lt;p&gt;따라서 Grid 컨트롤을 하위 요소들과 함께 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>WPF</strong> 의 Grid 를 사용하여 사용자의 입력을 받는 문서를 작성하거나 여러 이미지를 가시화 할 시, 이를 이미지로 저장하는 기능이 필요할 경우가 있습니다.</p><p>따라서 Grid 컨트롤을 하위 요소들과 함께 Bitmap 으로 변환하고 이미지를 저장하는 방법에 대해 알아보겠습니다.</p><h2 id="소스코드"><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><p>먼저 Grid 컨트롤 내용들을 Bitmap 으로 변환합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Grid를 Bitmap이미지로 변환</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="element"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RenderTargetBitmap <span class="title">GetBitmapFromControl</span>(<span class="params">FrameworkElement element</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Size size = <span class="keyword">new</span> Size(element.ActualWidth, element.ActualHeight);</span><br><span class="line">    <span class="keyword">if</span> (size.IsEmpty)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    DrawingVisual drawingVisual = <span class="keyword">new</span> DrawingVisual();</span><br><span class="line">    <span class="keyword">using</span> (DrawingContext context = drawingVisual.RenderOpen())</span><br><span class="line">    &#123;</span><br><span class="line">        context.DrawRectangle(<span class="keyword">new</span> VisualBrush(element), <span class="literal">null</span>, <span class="keyword">new</span> Rect(<span class="keyword">new</span> Point(), size));</span><br><span class="line">        context.Close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RenderTargetBitmap result = <span class="keyword">new</span> RenderTargetBitmap((<span class="keyword">int</span>)size.Width, (<span class="keyword">int</span>)size.Height, <span class="number">96</span>, <span class="number">96</span>, PixelFormats.Pbgra32);</span><br><span class="line">    result.Render(drawingVisual);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>변환된 Bitmap 을 PNG 또는 TIF 이미지 파일로 저장하는 코드입니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Bitmap을 이미지로 저장</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="bitmap"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="filePath"&gt;</span>파일 경로<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SaveImage</span>(<span class="params">RenderTargetBitmap bitmap, <span class="keyword">string</span> filePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> ext = System.IO.Path.GetExtension(filePath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (FileStream stream = <span class="keyword">new</span> FileStream(filePath, FileMode.Create))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ext == <span class="string">".png"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PngBitmapEncoder encoder = <span class="keyword">new</span> PngBitmapEncoder();</span><br><span class="line">            encoder.Frames.Add(BitmapFrame.Create(bitmap));</span><br><span class="line">            encoder.Save(stream);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ext == <span class="string">".tif"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            TiffBitmapEncoder encoder = <span class="keyword">new</span> TiffBitmapEncoder();</span><br><span class="line">            encoder.Frames.Add(BitmapFrame.Create(bitmap));</span><br><span class="line">            encoder.Save(stream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stream.Close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="사용-방법"><a class="markdownIt-Anchor" href="#사용-방법"></a> 사용 방법</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">"TestProject.MainWindow"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">"800"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Title</span>=<span class="string">"이미지 저장하기"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Name</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Canvas</span>&gt;</span></span><br><span class="line">          ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">          ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>GetBitmapFromControl</code> 함수를 사용하여 이미지로 저장하려는 Grid 를 Bitmap 으로 변환합니다. 그리고 <code>SaveImage</code> 함수의 파라미터에 bitmap, 파일경로를 넣어 이미지를 저장합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 이미지 저장</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Capture</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RenderTargetBitmap bitmap = GetBitmapFromControl(<span class="keyword">this</span>.grid);</span><br><span class="line">    <span class="keyword">string</span> filePath = <span class="string">"d:\\test.png"</span>;</span><br><span class="line">    SaveImage(bitmap, filePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Grid 컨트롤 뿐만 아니라 FrameworkElement 을 상속받는 모든 컨트롤들을 위의 함수를 사용하여 이미지를 저장할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/03/13/wpf-9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] FormGroup 관련 에러</title>
      <link>http://hgko1207.github.io/2023/03/08/angular-9/</link>
      <guid>http://hgko1207.github.io/2023/03/08/angular-9/</guid>
      <pubDate>Wed, 08 Mar 2023 14:12:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt; 에서 FormGroup 사용 시 다음과 같이 에러가 발생할 경우 해결 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;error&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#er
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong> 에서 FormGroup 사용 시 다음과 같이 에러가 발생할 경우 해결 방법에 대해 알아보겠습니다.</p><h2 id="error"><a class="markdownIt-Anchor" href="#error"></a> Error</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ERROR Error: NG01350: ngModel cannot be used to register form controls with a parent formGroup directive.  Try using</span><br><span class="line">    formGroup's partner directive "formControlName" instead.  Example:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;div [formGroup]="myGroup"&gt;</span><br><span class="line">    &lt;input formControlName="firstName"&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  In your class:</span><br><span class="line"></span><br><span class="line">  this.myGroup = new FormGroup(&#123;</span><br><span class="line">      firstName: new FormControl()</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">    Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:</span><br><span class="line"></span><br><span class="line">    Example:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;div [formGroup]="myGroup"&gt;</span><br><span class="line">      &lt;input formControlName="firstName"&gt;</span><br><span class="line">      &lt;input [(ngModel)]="showMoreControls" [ngModelOptions]="&#123;standalone: true&#125;"&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="해결-방법"><a class="markdownIt-Anchor" href="#해결-방법"></a> 해결 방법</h2><p>에러 메시지 내용은 <code>formGroup</code> 을 사용하려면 <code>formControlName</code> 을 사용하거나 <code>[(ngModel)]</code> 사용 시 <code>[ngModelOptions]=&quot;{standalone: true}</code> 를 추가하라고 합니다.</p><p>다음과 같이 formGroup 속성이 있는 태그의 자식 중에 ngModel 속성을 사용하는 모든 태그에 <code>formControlName</code> 또는 <code>[ngModelOptions]=&quot;{standalone: true}</code> 이 있어야 에러를 해결할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.myForm = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">  id: <span class="keyword">new</span> FormControl(<span class="string">''</span>),</span><br><span class="line">  name: <span class="keyword">new</span> FormControl(<span class="string">''</span>),</span><br><span class="line">  title: <span class="keyword">new</span> FormControl(<span class="string">''</span>),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">"myForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">formControlName</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">formControlName</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"myForm.value.title"</span> [<span class="attr">ngModelOptions</span>]=<span class="string">"&#123;standalone: true&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fom</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그리고 추가적으로 Typescript 에서 <code>FormBuilder</code> 를 통해 Group 을 생성할 때 formControlName 에 있는 값들을 전부 넣어줘야 됩니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/03/08/angular-9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Next.js] Dynamic Routes 사용 방법</title>
      <link>http://hgko1207.github.io/2023/02/23/nextjs-6/</link>
      <guid>http://hgko1207.github.io/2023/02/23/nextjs-6/</guid>
      <pubDate>Thu, 23 Feb 2023 07:28:30 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt; 에서 &lt;strong&gt;Dynamic Routes&lt;/strong&gt; 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;dynamic-routes&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Next.js</strong> 에서 <strong>Dynamic Routes</strong> 사용 방법에 대해 알아보겠습니다.</p><h2 id="dynamic-routes"><a class="markdownIt-Anchor" href="#dynamic-routes"></a> Dynamic Routes</h2><p>Next.js 에서는 page 에 대괄호([param])를 추가하여 <strong>Dynamic Route</strong> 를 생성할 수 있습니다.</p><p>pages/movies 경로에 [id].js 파일을 생성하면 <code>/movies/1</code>, <code>/movies/abc</code> 등과 같은 경로로 접속할 수 있습니다.</p><p>다음 예제처럼 <code>useRouter()</code>의 <code>query</code> 를 통해 /movies 다음의 하위 경로를 확인할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/movies/[id].js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">'next/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Detail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> router = useRouter();</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = router.query;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'detail'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성한 경로로 이동을 원한다면 다음과 같이 <code>next/link</code>를 사용하여 작성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link href=<span class="string">"/movies/abc"</span>&gt;Go to movies/movies/[id].js&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link href=<span class="string">"/movies/abc?foo=bar"</span>&gt;Also goes to movies/post/[id].js&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Home;</span></span><br></pre></td></tr></table></figure><h2 id="catch-all-routes"><a class="markdownIt-Anchor" href="#catch-all-routes"></a> Catch all routes</h2><p>대괄호 안에 세 개의 점(…)을 추가하여 모든 경로를 포착하도록 Dynamic Routes를 확장할 수 있습니다.</p><p><strong>pages/movies/[…id].js</strong> 는 <code>/movies/1</code> 와 일치하지만 <code>/movies/1/2</code>, <code>/movies/1/ab/cd</code> 등과도 일치합니다.</p><p>일치하는 매개변수는 페이지에 쿼리 매개변수로 전송되며 항상 배열이므로 <code>/movies/a</code> 또는 <code>/movies/a/b</code> 경로일 경우 다음과 같이 조회가 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /movies/a</span></span><br><span class="line">&#123; <span class="string">"id"</span>: [<span class="string">"a"</span>] &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /movies/a/b</span></span><br><span class="line">&#123; <span class="string">"id"</span>: [<span class="string">"a"</span>, <span class="string">"b"</span>] &#125;</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://nextjs.org/docs/routing/dynamic-routes" target="_blank" rel="noopener">https://nextjs.org/docs/routing/dynamic-routes</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/02/23/nextjs-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>엘라스틱 스택 개발부터 운영까지</title>
      <link>http://hgko1207.github.io/2023/02/22/book-3/</link>
      <guid>http://hgko1207.github.io/2023/02/22/book-3/</guid>
      <pubDate>Wed, 22 Feb 2023 01:12:03 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;책-정보&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#책-정보&quot;&gt;&lt;/a&gt; 책 정보&lt;/h3&gt;
&lt;img width=&quot;100%&quot; src=&quot;/images/book/book3.png&quot; alt=&quot;&quot; title=&quot;엘라스틱 스택 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="책-정보"><a class="markdownIt-Anchor" href="#책-정보"></a> 책 정보</h3><img width="100%" src="/images/book/book3.png" alt="" title="엘라스틱 스택 개발부터 운영까지"><h3 id="책-소개"><a class="markdownIt-Anchor" href="#책-소개"></a> 책 소개</h3><p>데이터를 처리하는 데 서로 잘 맞지도 않는 오픈소스 기술들을 굳이 동원해야 할까?<br />제각각인 오픈소스들을 통합하고 운영하느라 지친<br />개발자와 운영자들을 위한 솔루션! 이제 엘라스틱 스택 기술 하나면 OK!</p><p>어느덧 엘라스틱 스택은 검색 엔진을 넘어서 데이터 처리 시스템의 최강자로 자리 잡았다. 이 책에서는 빠르게 변화하는 세상에서 엘라스틱 스택을 지렛대로 삼아 기업의 생존 능력을 극대화하는 방법을 체계적으로 정리한다.</p><p>엔터프라이즈 빅데이터 파이프라인을 만들어 기업의 데이터를 처리하고 싶다면? 기업 내에 검색 엔진을 구축해서 빠르게 자료를 검색하고 싶다면? 방대한 데이터를 잘 가공해서 저장한 후에 멋진 시각화로 인사이트를 얻고 싶다면? 여러 서버에서 데이터들을 가져와 하나로 통합한 다음에 추이를 보거나 통계를 내고 싶다면? 바로 이럴 때 엘라스틱 스택이 정답이다. 실습을 위한 물리적인 컴퓨터나 가상 머신만 준비한다면 나머지는 모두 이 책이 책임져줄 것이다. 이 책에서는 엘라스틱 스택을 사용해 데이터 중심 애플리케이션을 설계하고, 개발하며, 운영하는 과정에서 꼭 알아야 할 필수 지식을 구체적인 사례와 함께 설명한다.</p><h3 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h3><p>데이터 검색과 분석을 위해서 엘라스틱 서치를 공부하려고 찾던 중 엘라스틱 스택을 알게되었고 궁금함을 못 참고 바로 구입하게 되었습니다. 엘라스틱 스택 개념과 구성요소(엘라스틱 서치, 로그스태시, 비트, 키바나 등)들이 잘 정리되어 있어 이해가 쉬웠고 참고가 많이 되었습니다. 엘라스틱 스택의 구성요소를 통해 데이터 수집부터 변환, 분석, 검색, 시각화까지 하는 내용들이 구성되어 있어 응용 학습에 많은 도움이 될 것 같습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/02/22/book-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Next.js] Redirect and Rewrite</title>
      <link>http://hgko1207.github.io/2023/02/21/nextjs-5/</link>
      <guid>http://hgko1207.github.io/2023/02/21/nextjs-5/</guid>
      <pubDate>Tue, 21 Feb 2023 02:25:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt; 에서 &lt;strong&gt;Redirect&lt;/strong&gt; 와 &lt;strong&gt;Rewrite&lt;/strong&gt; 설정 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;Redirect 와 Rewrite 설정은 next.co
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Next.js</strong> 에서 <strong>Redirect</strong> 와 <strong>Rewrite</strong> 설정 방법에 대해 알아보겠습니다.</p><p>Redirect 와 Rewrite 설정은 next.config.js 파일에서 설정하게 됩니다.</p><h2 id="nextconfigjs"><a class="markdownIt-Anchor" href="#nextconfigjs"></a> next.config.js</h2><p>Next.js 에서 커스텀 설정을 하기 위해서는 프로젝트 디렉터리의 루트에 next.config.js 또는 next.config.mjs 파일을 만들 수 있습니다. <strong>next.config.js</strong> 는 JSON 파일이 아닌 일반 Node.js 모듈입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type <span class="type">&#123;import('next').NextConfig&#125;</span> </span>*/</span></span><br><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">  reactStrictMode: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = nextConfig;</span><br></pre></td></tr></table></figure><p>Next.js 서버 및 빌드 단계에서 사용되며 브라우저 빌드에는 포함되지 않습니다.</p><h2 id="redirects-url변경됨"><a class="markdownIt-Anchor" href="#redirects-url변경됨"></a> Redirects (URL변경됨)</h2><p><strong>Redirect</strong> 을 사용하면 들어오는 request 경로를 다른 destination 경로로 Redirect 할 수 있습니다. Redirect 을 사용하려면 next.config.js 에서 <code>redirects</code> 키를 설정합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">  reactStrictMode: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">async</span> redirects() &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        source: <span class="string">'/contact'</span>,</span><br><span class="line">        destination: <span class="string">'/form'</span>,</span><br><span class="line">        permanent: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = nextConfig;</span><br></pre></td></tr></table></figure><p><code>redirects</code> 은 source, destination 및 permanent 속성이 있는 객체를 포함하는 배열을 반환하는 비동기 함수입니다.</p><ul><li><strong>source:</strong> 들어오는 request 경로 (request 경로)</li><li><strong>destination:</strong> 라우팅하려는 경로 (redirect할 경로)</li><li><strong>permanent:</strong> <code>true</code> 인 경우 클라이언트와 search 엔진에 redirect 를 영구적으로 cache 하도록 지시하는 308 status code 를 사용하고, <code>false</code> 인 경우 일시적이고 cache 되지 않은 307 status code 를 사용합니다.</li></ul><p>request 경로에 요청되는 모든 쿼리 값도 destination 으로 전달됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">  reactStrictMode: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">async</span> redirects() &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        source: <span class="string">'/old-blog/:path*'</span>,</span><br><span class="line">        destination: <span class="string">'/blog/:path*'</span>,</span><br><span class="line">        permanent: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = nextConfig;</span><br></pre></td></tr></table></figure><p>예를 들어 <code>/old-blog/post-1?hello=world</code> 요청이 들어오면 <code>/blog/post-1?hello=world</code> 경로로 Redirect 됩니다.</p><h2 id="rewrites-url변경되지-않음"><a class="markdownIt-Anchor" href="#rewrites-url변경되지-않음"></a> Rewrites (URL변경되지 않음)</h2><p><strong>Rewrites</strong> 를 사용하면 들어오는 request 경로를 다른 destination 경로에 매핑할 수 있습니다.</p><p>Rewrites 은 URL 프록시 역할을 하고 destination 경로를 mask 하여 사용자가 사이트에서 위치를 변경하지 않은 것처럼 보이게 합니다. 반대로 redirects 은 새 페이지로 reroute 되고 URL 변경 사항을 표시합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> API_KEY = process.env.API_KEY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">  reactStrictMode: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">async</span> rewrites() &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        source: <span class="string">'/api/movies'</span>,</span><br><span class="line">        destination: <span class="string">`https://api.themoviedb.org/3/movie/popular?api_key=<span class="subst">$&#123;API_KEY&#125;</span>`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = nextConfig;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 사용</span></span><br><span class="line"><span class="keyword">const</span> &#123; results &#125; = <span class="keyword">await</span> (<span class="keyword">await</span> fetch(<span class="string">`/api/movies`</span>)).json();</span><br></pre></td></tr></table></figure><p>API 를 통해 데이터를 조회할 때 API Key 가 필요한 경우가 있습니다. 그럴 경우 API Key 가 노출되어 위험할 수 있습니다. 위의 내용처럼 Rewrites 를 사용하여 API 주소로 매핑을 하여 노출되지 않도록 해결하였습니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://nextjs.org/docs/api-reference/next.config.js/introduction" target="_blank" rel="noopener">https://nextjs.org/docs/api-reference/next.config.js/introduction</a></li><li><a href="https://nextjs.org/docs/api-reference/next.config.js/redirects" target="_blank" rel="noopener">https://nextjs.org/docs/api-reference/next.config.js/redirects</a></li><li><a href="https://nextjs.org/docs/api-reference/next.config.js/rewrites" target="_blank" rel="noopener">https://nextjs.org/docs/api-reference/next.config.js/rewrites</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/02/21/nextjs-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Next.js] Head 사용 방법</title>
      <link>http://hgko1207.github.io/2023/02/07/nextjs-4/</link>
      <guid>http://hgko1207.github.io/2023/02/07/nextjs-4/</guid>
      <pubDate>Tue, 07 Feb 2023 07:19:38 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt; 에서 &lt;strong&gt;Head&lt;/strong&gt; 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;title-설정&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#title-설정&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Next.js</strong> 에서 <strong>Head</strong> 사용 방법에 대해 알아보겠습니다.</p><h2 id="title-설정"><a class="markdownIt-Anchor" href="#title-설정"></a> Title 설정</h2><p>Next.js 에는 페이지 헤더의 제목을 변경하고 meta 를 추가할 수 있는 내장 컴포넌트를 가지고 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">'next/head'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Head&gt;</span><br><span class="line">        &lt;title&gt;Home | Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Head&gt;</span><br><span class="line">      &lt;h1&gt;Hello&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="태그-중복-방지"><a class="markdownIt-Anchor" href="#태그-중복-방지"></a> 태그 중복 방지</h2><p><code>head</code> 에 태그가 중복되는 것을 방지하려면 다음 예제와 같이 태그가 한 번만 렌더링되도록 하는 key 속성을 사용할 수 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">'next/head'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Head&gt;</span><br><span class="line">        &lt;title&gt;Home | Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">        &lt;meta property="og:title" content="My page title" key="title" /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/Head&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Head&gt;</span></span><br><span class="line"><span class="regexp">        &lt;meta property="og:title" content="My new title" key="title" /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/Head&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1&gt;Hello&lt;/</span>h1&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>이 경우 두 번째 <code>meta property=&quot;og:title&quot;</code> 만 렌더링됩니다. 중복 키 속성이 있는 meta 태그는 자동으로 처리됩니다.</p><p>key 를 지정해주지 않으면 <code>meta property=&quot;og:title&quot;</code> 가 중복해서 2번 랜더링됩니다. Title 은 지정하지 않아도 2번 랜더링 되지 않습니다.</p><h2 id="공통-컴포넌트"><a class="markdownIt-Anchor" href="#공통-컴포넌트"></a> 공통 컴포넌트</h2><p>공통으로 사용할 컴포넌트 파일(예: Seo.js)을 생성합니다. title prop 을 받아서 화면마다 제목을 설정할 수 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">'next/head'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Seo</span>(<span class="params">&#123; title &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Head&gt;</span><br><span class="line">      &lt;title&gt;&#123;<span class="string">`<span class="subst">$&#123;title&#125;</span> | Title`</span>&#125;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Head&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Seo <span class="keyword">from</span> <span class="string">'@/components/Seo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Seo title=<span class="string">"Home"</span> /&gt;</span><br><span class="line">      &lt;h1&gt;Hello&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://nextjs.org/docs/api-reference/next/head" target="_blank" rel="noopener">https://nextjs.org/docs/api-reference/next/head</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/02/07/nextjs-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Next.js] Styles 사용 방법</title>
      <link>http://hgko1207.github.io/2023/02/06/nextjs-3/</link>
      <guid>http://hgko1207.github.io/2023/02/06/nextjs-3/</guid>
      <pubDate>Mon, 06 Feb 2023 06:22:16 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt; 에서 스타일 적용하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;1-css-in-js&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-css-in-js&quot;&gt;&lt;/a&gt; 1. CS
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Next.js</strong> 에서 스타일 적용하는 방법에 대해 알아보겠습니다.</p><h2 id="1-css-in-js"><a class="markdownIt-Anchor" href="#1-css-in-js"></a> 1. CSS-in-JS</h2><p>가장 간단한 방법은 인라인 스타일입니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;&#125;&gt;Hello&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-css-modules"><a class="markdownIt-Anchor" href="#2-css-modules"></a> 2. CSS Modules</h2><p>Next.js는 [name].module.css 파일 명명 규칙을 사용하여 CSS Module 을 지원합니다.</p><p><code>Common.module.css</code>파일을 생성하고 스타일을 다음과 같이 작성합니다. 중요한 것은 .module.css 패턴을 사용하는 것입니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성된 module을 import 해서 사용합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Common.module.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;nav className=&#123;styles.nav&#125;&gt;&lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1&gt;Hello&lt;/</span>h1&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>여러 개의 스타일을 적용할 수 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Common.module.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;nav className=&#123;<span class="string">`<span class="subst">$&#123;styles.nav&#125;</span> <span class="subst">$&#123;styles.text&#125;</span>`</span>&#125;&gt;&lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1&gt;Hello&lt;/</span>h1&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>또는 <code>join()</code> 함수를 사용해 적용합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Common.module.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;nav className=&#123;[styles.nav, styles.text].join(<span class="string">' '</span>)&#125;&gt;&lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1&gt;Hello&lt;/</span>h1&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-styled-jsx"><a class="markdownIt-Anchor" href="#3-styled-jsx"></a> 3. Styled JSX</h2><p>격리된 범위 CSS 에 대한 지원을 제공하기 위해 <strong>styled-jsx</strong> 를 번들로 제공합니다.</p><p>styled-jsx 를 사용하는 컴포넌트는 다음과 같습니다. style 에 <code>jsx</code> prop 을 넣고 중괄호({})와 백틱(`)을 사용하여 작성합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style jsx&gt;&#123;<span class="string">`</span></span><br><span class="line"><span class="string">  CSS 스타일..</span></span><br><span class="line"><span class="string">`</span>&#125;&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;nav&gt;&lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1&gt;Hello&lt;/</span>h1&gt;</span><br><span class="line">      &lt;style jsx&gt;&#123;<span class="string">`</span></span><br><span class="line"><span class="string">        nav &#123;</span></span><br><span class="line"><span class="string">          background-color: red;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        h1 &#123;</span></span><br><span class="line"><span class="string">          color: blud;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      `</span>&#125;&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Global Styles 설정하는 방법은 <code>global</code> Prop 을 추가하면 됩니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style jsx global&gt;&#123;<span class="string">`</span></span><br><span class="line"><span class="string">  body &#123;</span></span><br><span class="line"><span class="string">    background: black;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>&#125;&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vscode-익스텐션"><a class="markdownIt-Anchor" href="#vscode-익스텐션"></a> VSCode 익스텐션</h2><p>Styled JSX 사용 시 추천 VSCode 익스텐션입니다.</p><ul><li>styled-jsx : 하이라이팅, 코드 가독성에 도움이 됨</li><li>styled-jsx Language Server : 자동완성</li></ul><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://nextjs.org/docs/basic-features/built-in-css-support#css-in-js" target="_blank" rel="noopener">https://nextjs.org/docs/basic-features/built-in-css-support#css-in-js</a></li><li><a href="https://github.com/vercel/styled-jsx" target="_blank" rel="noopener">https://github.com/vercel/styled-jsx</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/02/06/nextjs-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Next.js] Routing 사용 방법</title>
      <link>http://hgko1207.github.io/2023/02/03/nextjs-2/</link>
      <guid>http://hgko1207.github.io/2023/02/03/nextjs-2/</guid>
      <pubDate>Fri, 03 Feb 2023 07:36:02 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt; 에서 &lt;strong&gt;Rouing&lt;/strong&gt; 하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;a-사용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#a-사용&quot;&gt;&lt;/a&gt; &lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Next.js</strong> 에서 <strong>Rouing</strong> 하는 방법에 대해 알아보겠습니다.</p><h2 id="a-사용"><a class="markdownIt-Anchor" href="#a-사용"></a> <code>&lt;a&gt;</code> 사용</h2><p><code>&lt;a&gt;</code> 태그를 사용해서 페이지 이동을 할 수 있습니다. 하지만 페이지 이동 시 전체 페이지 새고로침이 되는 문제가 발생했습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">NavBar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">      &lt;a href=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;a href="/</span>about<span class="string">"&gt;About Us&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/nav&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="link-사용"><a class="markdownIt-Anchor" href="#link-사용"></a> Link 사용</h2><p>single-page app 환경의 페이지 전환을 하려면 <code>Link</code> 컴포넌트를 사용해야 합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">NavBar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">      &lt;Link href=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Link href="/</span>about<span class="string">"&gt;About Us&lt;/Link&gt;</span></span><br><span class="line"><span class="string">    &lt;/nav&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="userouter"><a class="markdownIt-Anchor" href="#userouter"></a> useRouter()</h2><p>컴포넌트에서 router 객체 내부에 접근하려면 <code>userRouter()</code> hook 을 사용할 수 있습니다.<br />useRouter 는 React Hook 입니다. 즉, 클래스와 함께 사용할 수 없습니다. withRouter 를 사용하거나 클래스를 함수 컴포넌트로 래핑할 수 있습니다.</p><p>다음 내용은 <code>useRouter()</code> hook 을 사용해서 메뉴의 색상을 변경하는 예제입니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">'next/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">NavBar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> router = useRouter();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">      &lt;Link href=<span class="string">"/"</span>&gt;</span><br><span class="line">        &lt;span style=&#123;&#123; <span class="attr">color</span>: router.pathname === <span class="string">'/'</span> ? <span class="string">'red'</span> : <span class="string">'blue'</span> &#125;&#125;&gt;Home&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Link&gt;</span><br><span class="line">      &lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">        &lt;span style=&#123;&#123; <span class="attr">color</span>: router.pathname === <span class="string">'/about'</span> ? <span class="string">'red'</span> : <span class="string">'blue'</span> &#125;&#125;&gt;About Us&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Link&gt;</span><br><span class="line">    &lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://nextjs.org/docs/messages/no-html-link-for-pages" target="_blank" rel="noopener">https://nextjs.org/docs/messages/no-html-link-for-pages</a></li><li><a href="https://nextjs.org/docs/api-reference/next/router#userouter" target="_blank" rel="noopener">https://nextjs.org/docs/api-reference/next/router#userouter</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/02/03/nextjs-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>라이브러리와 프레임워크 차이점</title>
      <link>http://hgko1207.github.io/2023/02/03/info-1/</link>
      <guid>http://hgko1207.github.io/2023/02/03/info-1/</guid>
      <pubDate>Fri, 03 Feb 2023 06:50:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;라이브러리와 프레임워크의 주요 차이점에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;라이브러리&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#라이브러리&quot;&gt;&lt;/a&gt; 라이브러리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 파일 이름이나 구조 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>라이브러리와 프레임워크의 주요 차이점에 대해 알아보겠습니다.</p><h2 id="라이브러리"><a class="markdownIt-Anchor" href="#라이브러리"></a> 라이브러리</h2><ul><li>사용자가 파일 이름이나 구조 등을 정하고, 모든 결정을 내립니다.</li><li>우리 프로젝트에 가져와서 쓰는 방식</li><li>예) React: 렌더링 할 때 ReactDOM.render() 를 불러와서 사용합니다.</li></ul><h2 id="프레임워크"><a class="markdownIt-Anchor" href="#프레임워크"></a> 프레임워크</h2><ul><li>파일 이름이나 구조 등을 정해진 규칙에 따라 만들고 따릅니다.</li><li>정해진 틀 안에서 커스터마이징 방식</li><li>예) NextJS: 정해진 규칙에 따라 코드를 작성하면 렌더링됩니다.</li></ul><h2 id="차이점"><a class="markdownIt-Anchor" href="#차이점"></a> 차이점</h2><p>라이브러리와 프레임워크의 주요 차이점은 “Inversion of Control”(통제의 역전) 입니다.<br />라이브러리에서 메서드를 호출하면 사용자가 제어할 수 있습니다.<br />그러나 프레임워크에서는 제어가 역전되어 프레임워크가 사용자를 호출합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.youtube.com/watch?v=t9ccIykXTCM" target="_blank" rel="noopener">https://www.youtube.com/watch?v=t9ccIykXTCM</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/02/03/info-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Next.js] 프로젝트 생성 및 시작 방법</title>
      <link>http://hgko1207.github.io/2023/02/03/nextjs-1/</link>
      <guid>http://hgko1207.github.io/2023/02/03/nextjs-1/</guid>
      <pubDate>Fri, 03 Feb 2023 00:48:16 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt; 를 사용하는 프로젝트 생성 하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;시스템-요구-사항&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#시스템-요구-사항&quot;&gt;&lt;/a&gt; 시스템
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Next.js</strong> 를 사용하는 프로젝트 생성 하는 방법에 대해 알아보겠습니다.</p><h2 id="시스템-요구-사항"><a class="markdownIt-Anchor" href="#시스템-요구-사항"></a> 시스템 요구 사항</h2><ul><li>Node.js 14.6.0 이상</li><li>MacOS, Windows(WSL 포함) 및 Linux 가 지원됩니다.</li></ul><h2 id="프로젝트-생성"><a class="markdownIt-Anchor" href="#프로젝트-생성"></a> 프로젝트 생성</h2><p>리액트 프로젝트를 생성하는 방법과 비슷하게 <code>create-next-app</code> 명령어를 사용합니다. <code>@latest</code> 를 추가하면 최신 버전으로 프로젝트를 생성합니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npx</span> <span class="string">create-next-app@latest</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="attr">yarn</span> <span class="string">create next-app</span></span><br></pre></td></tr></table></figure><p>TypeScript 프로젝트로 시작하려면 <code>--typescript</code> 옵션을 추가합니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npx</span> <span class="string">create-next-app@latest --typescript</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="attr">yarn</span> <span class="string">create next-app --typescript</span></span><br></pre></td></tr></table></figure><p>위의 방법으로 프로젝트를 생성해보겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">D:\project\Study&gt;npx create-next-app@latest</span><br><span class="line">√ What is your project named? ... nextjs-intro</span><br><span class="line">√ Would you like to use TypeScript with this project? ... No / Yes</span><br><span class="line">√ Would you like to use ESLint with this project? ... No / Yes</span><br><span class="line">√ Would you like to use `src/` directory with this project? ... No / Yes</span><br><span class="line">√ Would you like to use experimental `app/` directory with this project? ... No / Yes</span><br><span class="line">√ What import <span class="built_in">alias</span> would you like configured? ... @/*</span><br><span class="line">Creating a new Next.js app <span class="keyword">in</span> D:\project\Study\nomadcoders\nextjs-intro.</span><br><span class="line"></span><br><span class="line">Using npm.</span><br><span class="line"></span><br><span class="line">Installing dependencies:</span><br><span class="line">- react</span><br><span class="line">- react-dom</span><br><span class="line">- next</span><br><span class="line">- @next/font</span><br><span class="line">- eslint</span><br><span class="line">- eslint-config-next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">added 264 packages, and audited 265 packages <span class="keyword">in</span> 25s</span><br><span class="line"></span><br><span class="line">102 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  run `npm fund` <span class="keyword">for</span> details</span><br><span class="line"></span><br><span class="line">found 0 vulnerabilities</span><br><span class="line"></span><br><span class="line">Initializing project with template: default</span><br><span class="line"></span><br><span class="line">Success! Created nextjs-intro at D:\project\Study\nextjs-intro</span><br></pre></td></tr></table></figure><p>프로젝트 이름을 입력하고 TypeScript 와 ESLint 사용 여부를 선택하면 프로젝트가 성공적으로 생성됩니다.</p><h2 id="시작"><a class="markdownIt-Anchor" href="#시작"></a> 시작</h2><p>프로젝트 기본 구조 입니다.</p><p><img src="/images/nextjs/1.png" alt="" /></p><p>다음 명령어를 실행하여 개발 서버를 시작합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure><p>개발 서버가 구동되면 <code>http://localhost:3000</code>에 접속하여 확인합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://nextjs.org/docs/getting-started" target="_blank" rel="noopener">https://nextjs.org/docs/getting-started</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/02/03/nextjs-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WPF에서 Windows Forms(WinForm) Control 사용하기</title>
      <link>http://hgko1207.github.io/2023/02/01/wpf-8/</link>
      <guid>http://hgko1207.github.io/2023/02/01/wpf-8/</guid>
      <pubDate>Wed, 01 Feb 2023 07:33:44 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;WPF&lt;/strong&gt;에서 Windows Forms(WinForm) Control 사용하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;참조-추가&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#참조-추가&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>WPF</strong>에서 Windows Forms(WinForm) Control 사용하는 방법에 대해 알아보겠습니다.</p><h2 id="참조-추가"><a class="markdownIt-Anchor" href="#참조-추가"></a> 참조 추가</h2><p>프로젝트에 다음 어셈블리에 대한 참조를 추가합니다.</p><ul><li>WindowsFormsIntegration</li><li>System.Windows.Forms</li></ul><h2 id="xaml에-추가"><a class="markdownIt-Anchor" href="#xaml에-추가"></a> XAML에 추가</h2><p>WinForm 컨트롤을 사용하려는 XAML 파일을 열고 아래 네임스페이스 매핑을 추가합니다. <code>wf</code> 네임스페이스 매핑은 Windows Forms 컨트롤이 포함된 어셈블리에 대한 참조를 설정합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:wf="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms"</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">"WPF.Text.MainWindow"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:wf</span>=<span class="string">"clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">"MainWindow"</span> <span class="attr">Height</span>=<span class="string">"350"</span> <span class="attr">Width</span>=<span class="string">"500"</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h2><p><code>WindowsFormsHost</code> 컨트롤을 사용하고 자식으로는 WinForm 컨트롤을 사용합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">WindowsFormsHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">wf:PictureBox</span> <span class="attr">x:Name</span>=<span class="string">"DisplayImage"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">WindowsFormsHost</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="전체-소스"><a class="markdownIt-Anchor" href="#전체-소스"></a> 전체 소스</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">"WPF.Text.MainWindow"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:wf</span>=<span class="string">"clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">"MainWindow"</span> <span class="attr">Height</span>=<span class="string">"350"</span> <span class="attr">Width</span>=<span class="string">"500"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">WindowsFormsHost</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wf:PictureBox</span> <span class="attr">x:Name</span>=<span class="string">"DisplayImage"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">WindowsFormsHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://learn.microsoft.com/ko-kr/dotnet/api/system.windows.forms.integration.windowsformshost?view=windowsdesktop-7.0" target="_blank" rel="noopener">WindowsFormsHost 클래스</a></li><li><a href="https://learn.microsoft.com/ko-kr/dotnet/desktop/wpf/advanced/walkthrough-hosting-a-windows-forms-control-in-wpf-by-using-xaml?view=netframeworkdesktop-4.8" target="_blank" rel="noopener">연습: XAML을 사용하여 WPF에서 Windows Forms 컨트롤 호스팅</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/02/01/wpf-8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Kibana] 사용 방법</title>
      <link>http://hgko1207.github.io/2023/01/06/elasticsearch-4/</link>
      <guid>http://hgko1207.github.io/2023/01/06/elasticsearch-4/</guid>
      <pubDate>Fri, 06 Jan 2023 07:41:51 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;키바나(Kibana)&lt;/strong&gt; 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;운영환경&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#운영환경&quot;&gt;&lt;/a&gt; 운영환경&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windo
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>키바나(Kibana)</strong> 사용 방법에 대해 알아보겠습니다.</p><h2 id="운영환경"><a class="markdownIt-Anchor" href="#운영환경"></a> 운영환경</h2><ul><li>Windows</li><li>Kibana Version: 7.17.8</li></ul><p>키바나를 실행합니다. 키바나는 기본적으로 5601 포트를 사용하는데, 웹 브라우저를 열고 <a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a> 주소를 입력합니다.</p><h2 id="서버-상태-확인"><a class="markdownIt-Anchor" href="#서버-상태-확인"></a> 서버 상태 확인</h2><p>키바나의 서버 상태는 <a href="http://localhost:5601/status" target="_blank" rel="noopener">http://localhost:5601/status</a> 에서 확인 할 수 있습니다.</p><p><img src="/images/elastic/kibana/6.png" alt="" /></p><h2 id="키바나-콘솔-사용법"><a class="markdownIt-Anchor" href="#키바나-콘솔-사용법"></a> 키바나 콘솔 사용법</h2><p>키바나 Dev Tools에 있는 콘솔을 이용해 엘라스틱서치 REST API를 호출합니다. 키바나 왼쪽 상단의 토글 메뉴를 클릭하면 키바나 메뉴를 확인할 수 있는데 <strong>Management -&gt; Dev Tools</strong>를 선택하면 됩니다.</p><p><img src="/images/elastic/kibana/7.png" alt="" /></p><p>왼쪽 입력창에서 엘라스틱서치에서 제공하는 REST API를 입력하고 실행 버튼을 누르면 오른쪽 출력창에서 HTTP의 응답을 확인할 수 있습니다. 또한 키바나 콘솔은 엘라스틱서치 API 자동 완성 기능이 지원됩니다.</p><h2 id="샘플-데이터-불러오기"><a class="markdownIt-Anchor" href="#샘플-데이터-불러오기"></a> 샘플 데이터 불러오기</h2><p>엘라스틱 스택은 세 가지 샘플 데이터를 기본으로 제공합니다. 키바나에서 아주 쉽게 가능합니다. 샘플 데이터를 불러와서 검색 테스트를 할 수 있습니다.</p><p>키바나의 홈 화면에서 <strong>Try sample data</strong> 링크를 클릭합니다.</p><p><img src="/images/elastic/kibana/8.png" alt="" /></p><p>샘플 데이터를 추가할 수 있는 화면입니다. 총 3개의 심플 데이터(Sample eCommerce orders, Sample flight data, Sample web logs)가 있고, 각 샘플 데이터마다 <strong>Add data</strong> 버튼을 클릭해서 샘플을 추가할 수 있습니다.</p><p><img src="/images/elastic/kibana/9.png" alt="" /></p><p>샘플 데이터를 추가하면 키바나의 Visualize(시각화)와 Daashboard(대시보드) 등에도 샘플들이 함께 추가됩니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/01/06/elasticsearch-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Kibana] 윈도우에 설치 및 실행 방법</title>
      <link>http://hgko1207.github.io/2023/01/06/elasticsearch-3/</link>
      <guid>http://hgko1207.github.io/2023/01/06/elasticsearch-3/</guid>
      <pubDate>Fri, 06 Jan 2023 05:18:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;kibana키바나-시각화와-엘라스틱서치-관리-도구&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#kibana키바나-시각화와-엘라스틱서치-관리-도구&quot;&gt;&lt;/a&gt; Kibana(키바나): 시각화와 엘라스틱서치 관리 도구&lt;/h
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="kibana키바나-시각화와-엘라스틱서치-관리-도구"><a class="markdownIt-Anchor" href="#kibana키바나-시각화와-엘라스틱서치-관리-도구"></a> Kibana(키바나): 시각화와 엘라스틱서치 관리 도구</h2><blockquote><p>키바나는 오픈서치의 자유-오픈 소스 후계자가 오픈서치 대시보드인 일래스틱서치용의 소스 이용이 가능한 데이터 시각화 대시보드 소프트웨어이다. 일래스틱서치 클러스터에 색인된 내용 기반의 시각화 기능을 제공한다. 사용자는 막대, 선, 산점도 플롯, 원 그래프, 지도를 다량의 데이터에 맞추어 만들 수 있다. <a href="https://ko.wikipedia.org/wiki/%ED%82%A4%EB%B0%94%EB%82%98" target="_blank" rel="noopener">위키백과</a></p></blockquote><p>엘라스틱서치는 REST API가 잘 설계된 제품이긴 하지만 복잡한 요청을 일일이 작성하기 에는 다소 불편할 수 있습니다. 키바나는 이런 불편함을 해소해줍니다. 엘라스틱서치에 대한 대부분의 관리 기능, API를 실행할 수 있는 콘솔, 솔루션 페이지들, 모니터링 페이지 등이 모두 카바나에 포함되어 있습니다.</p><h2 id="개요"><a class="markdownIt-Anchor" href="#개요"></a> 개요</h2><p>윈도우 환경에서 <strong>Kibana 7.X</strong> 버전을 설치 및 실행하는 방법에 대해 알아보겠습니다.<br />엘라스틱서치와 동일하게 윈도우에서는 파일을 다운로드하고 압축을 푼 다음 실행 파일을 실행하면 설치되는 구조입니다.</p><h2 id="다운로드"><a class="markdownIt-Anchor" href="#다운로드"></a> 다운로드</h2><p>먼저 설치를 위해 공식홈페이지로 이동합니다.</p><p><a href="https://www.elastic.co/kr/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/kr/downloads/kibana</a></p><p>현재 기준으로 8.5.3 버전이 최신입니다. 7.X 버전을 설치할 것이므로 오른쪽의 <strong>View pas releases</strong>를 클릭합니다.</p><p><img src="/images/elastic/kibana/1.png" alt="" /></p><p>7.X 버전 중 원하는 버전을 선택하고 <strong>Download</strong> 버튼을 클릭합니다.</p><p><img src="/images/elastic/kibana/2.png" alt="" /></p><p>버전을 확인하고 <strong>WINDOWS</strong> 링크를 클릭하여 다운로드 받습니다.</p><p><img src="/images/elastic/kibana/3.png" alt="" /></p><h2 id="설치하기"><a class="markdownIt-Anchor" href="#설치하기"></a> 설치하기</h2><p>다운로드가 완료되면 zip 파일이 나오는데 압축을 해제합니다. 이 글에서는 윈도우 C 드라이브 밑에 <strong>kibana-7.17.8-windows-x86_64</strong> 이라는 폴더에 압축을 해제했습니다.</p><p>압축을 해제하면 다음과 같은 폴더 구조가 나옵니다.</p><p><img src="/images/elastic/kibana/4.png" alt="" /></p><p>bin 폴더에는 실행 파일과 플러그인 설치 같은 실행 관련 파일들이 있습니다. config 폴더에는 설정 파일(kibana.yml)과 기타 설정 관련 파일들이 있습니다.</p><h2 id="실행하기"><a class="markdownIt-Anchor" href="#실행하기"></a> 실행하기</h2><p>키바나를 실행해봅니다. 키바나를 실행하기 전에 반드시 엘라스틱서치를 먼저 실행하고 나서 실행해야 합니다.</p><p>bin 폴더에 있는 <strong>kibana.bat</strong> 파일을 실행하면 됩니다. 윈도우에서 기본으로 제공하는 명령 프롬프트(CMD)을 실행하고 다음 명령어를 실행합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\kibana-7.17.8-windows-x86_64&gt; .\bin\kibana.bat</span><br></pre></td></tr></table></figure><p>기본적으로 포그라운드로 실행됩니다.</p><h2 id="확인하기"><a class="markdownIt-Anchor" href="#확인하기"></a> 확인하기</h2><p>키바나가 정상적으로 실행되면 동작 여부를 웹 브라우저에서 확인할 수 있습니다. 키바나는 기본적으로 5601 포트를 사용하는데, 웹 브라우저를 열고 <a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a> 주소를 입력합니다.</p><p>다음과 같이 키바나 웹 페이지가 나왔다면 정상 동작하는 것입니다.</p><p><img src="/images/elastic/kibana/5.png" alt="" /></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/01/06/elasticsearch-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Elasticsearch] 윈도우에 설치 및 실행 방법(8.X 버전)</title>
      <link>http://hgko1207.github.io/2023/01/06/elasticsearch-2/</link>
      <guid>http://hgko1207.github.io/2023/01/06/elasticsearch-2/</guid>
      <pubDate>Fri, 06 Jan 2023 01:08:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;윈도우 환경에서 &lt;strong&gt;Elasticsearch 8.X&lt;/strong&gt; 버전을 설치 및 실행하는 방법에 대해 알아보겠습니다.&lt;br /&gt;
윈도우에서는 파일을 다운로드하고 압축을 푼 다음 실행 파일을 실행하면 엘라스틱서치가 설치되는 구조입니다
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>윈도우 환경에서 <strong>Elasticsearch 8.X</strong> 버전을 설치 및 실행하는 방법에 대해 알아보겠습니다.<br />윈도우에서는 파일을 다운로드하고 압축을 푼 다음 실행 파일을 실행하면 엘라스틱서치가 설치되는 구조입니다.</p><h2 id="다운로드"><a class="markdownIt-Anchor" href="#다운로드"></a> 다운로드</h2><p>먼저 설치를 위해 공식홈페이지로 이동합니다.</p><p><a href="https://www.elastic.co/kr/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/kr/downloads/elasticsearch</a></p><p>현재 기준으로 8.5.3 버전이 최신입니다. 8.X 대 버전을 설치하므로 <strong>Windows</strong> 버튼을 클릭하여 다운로드 받습니다.</p><p><img src="/images/elastic/elasticsearch/1.png" alt="" /></p><h2 id="설치하기"><a class="markdownIt-Anchor" href="#설치하기"></a> 설치하기</h2><p>다운로드가 완료되면 zip 파일이 나오는데 압축을 해제합니다. 이 글에서는 윈도우 C 드라이브 밑에 <strong>elasticsearch-8.5.3</strong> 이라는 폴더에 압축을 해제했습니다.</p><p>압축을 해제하면 다음과 같은 폴더 구조가 나옵니다.</p><p><img src="/images/elastic/elasticsearch/5.png" alt="" /></p><h2 id="실행하기"><a class="markdownIt-Anchor" href="#실행하기"></a> 실행하기</h2><p>엘라스틱서치를 실행해봅니다. bin 폴더에 있는 <strong>elasticsearch.bat</strong> 파일을 실행하면 됩니다. 윈도우에서 기본으로 제공하는 명령 프롬프트(CMD)을 실행하고 다음 명령어를 실행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\elasticsearch-8.5.3&gt; .\bin\elasticsearch.bat</span><br></pre></td></tr></table></figure><h2 id="확인하기"><a class="markdownIt-Anchor" href="#확인하기"></a> 확인하기</h2><p>엘라스틱서치를 실행하고 동작 여부를 확인하기 위해 curl이라는 툴을 이용합니다. 윈도우를 설치하면 기본으로 설치되어 있습니다. 윈도우 bat 파일의 경우 기본적으로 백그라운드 실행이 안 되기 때문에 명령 프롬프트를 하나 더 실행하고 다음 명령을 실행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\elasticsearch-8.5.3&gt; curl -X GET "localhost:9200/?pretty"</span><br><span class="line">curl: (52) Empty reply from server</span><br></pre></td></tr></table></figure><p>명령을 실행했지만 Elasticsearch 7.X 대 버전과는 다르게 연결이 되지 않습니다. Elasticsearch 8.X 대 버전으로 업데이트되면서 https를 사용하는 방식으로 변경되었습니다.</p><h2 id="해결하기"><a class="markdownIt-Anchor" href="#해결하기"></a> 해결하기</h2><p>엘라스틱서치를 실행하면 명령 프롬프트 마지막에 다음과 같이 출력된 것을 확인할 수 있습니다.</p><p><img src="/images/elastic/elasticsearch/8.png" alt="" /></p><p>curl을 사용하여 확인하기 위해서는 user와 password를 추가로 입력하면 됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u [user]:[password] https://localhost:9200 -k</span><br></pre></td></tr></table></figure><p>user는 기본적으로 elastic 이고, password는 위에서 나온 정보를 입력하여 실행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">C:\elasticsearch-8.5.3&gt; curl -u elastic:yJ454NS-=mdaBI9bBVM= https://localhost:9200 -k</span><br><span class="line">&#123;</span><br><span class="line">  "name" : "DESKTOP-08OF09U",</span><br><span class="line">  "cluster_name" : "elasticsearch",</span><br><span class="line">  "cluster_uuid" : "Ne40oBP9Td2u-XLohcOFxQ",</span><br><span class="line">  "version" : &#123;</span><br><span class="line">    "number" : "8.5.3",</span><br><span class="line">    "build_flavor" : "default",</span><br><span class="line">    "build_type" : "zip",</span><br><span class="line">    "build_hash" : "4ed5ee9afac63de92ec98f404ccbed7d3ba9584e",</span><br><span class="line">    "build_date" : "2022-12-05T18:22:22.226119656Z",</span><br><span class="line">    "build_snapshot" : false,</span><br><span class="line">    "lucene_version" : "9.4.2",</span><br><span class="line">    "minimum_wire_compatibility_version" : "7.17.0",</span><br><span class="line">    "minimum_index_compatibility_version" : "7.0.0"</span><br><span class="line">  &#125;,</span><br><span class="line">  "tagline" : "You Know, for Search"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>엘라스틱서치가 잘 실행된 것을 확인할 수 있습니다.</p><p>브라우저에서 http가 아닌 https로 변경된 <a href="https://localhost:9200" target="_blank" rel="noopener">https://localhost:9200</a> 으로 접속해서 확인 할 수 있습니다.</p><ol><li>“고급” 버튼을 눌러 안전하지 않은 사이트로 이동하여 접속합니다.</li></ol><p><img src="/images/elastic/elasticsearch/9.png" alt="" /></p><ol start="2"><li>elatic 계정과 비밀번호를 입력하면 아래 그림과 같이 정보를 확인 할 수 있습니다.</li></ol><p><img src="/images/elastic/elasticsearch/10.png" alt="" /></p><p><img src="/images/elastic/elasticsearch/11.png" alt="" /></p><h2 id="비밀번호-변경"><a class="markdownIt-Anchor" href="#비밀번호-변경"></a> 비밀번호 변경</h2><p>elastic 계정의 비밀번호를 변경하려면 다음의 명령을 실행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\elasticsearch-8.5.3&gt; .\bin\elasticsearch-reset-password -u elastic</span><br><span class="line">This tool will reset the password of the [elastic] user to an autogenerated value.</span><br><span class="line">The password will be printed in the console.</span><br><span class="line">Please confirm that you would like to continue [y/N]y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Password for the [elastic] user successfully reset.</span><br><span class="line">New value: ubj9aU+XNNsqV0VKkWLx</span><br></pre></td></tr></table></figure><p>명령을 실행하고 y를 입력하면 새로운 비밀번호가 생성됩니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/01/06/elasticsearch-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Elasticsearch] 윈도우에 설치 및 실행 방법(7.X 버전)</title>
      <link>http://hgko1207.github.io/2023/01/05/elasticsearch-1/</link>
      <guid>http://hgko1207.github.io/2023/01/05/elasticsearch-1/</guid>
      <pubDate>Thu, 05 Jan 2023 06:50:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;elasticsearch엘라스틱서치-분산-검색-엔진&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#elasticsearch엘라스틱서치-분산-검색-엔진&quot;&gt;&lt;/a&gt; Elasticsearch(엘라스틱서치): 분산 검색 엔진
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="elasticsearch엘라스틱서치-분산-검색-엔진"><a class="markdownIt-Anchor" href="#elasticsearch엘라스틱서치-분산-검색-엔진"></a> Elasticsearch(엘라스틱서치): 분산 검색 엔진</h2><blockquote><p>루씬 기반의 검색 엔진이다. HTTP 웹 인터페이스와 스키마에서 자유로운 JSON 문서와 함께 분산 멀티테넌트 지원 전문 검색 엔진을 제공한다. 일래스틱서치는 자바로 개발되어 있으며 아파치 라이선스 조항에 의거하여 오픈 소스로 출시되어 있다. <a href="https://ko.wikipedia.org/wiki/%EC%9D%BC%EB%9E%98%EC%8A%A4%ED%8B%B1%EC%84%9C%EC%B9%98" target="_blank" rel="noopener">위키백과</a></p></blockquote><p>엘라스틱서치는 모든 레코드를 JSON 도큐먼트 형태로 입력하고 관리하고 있으며, 일반적인 데이터베이스와 마찬가지로, 쿼리한 결과에 대해 일치하는 원본 도큐먼트를 반환합니다. 또한 엘라스틱서치는 텍스트 외에도 숫자, 날짜, IP 주소, 지리 정보 등 다양한 데이터 타입에 대해 최적화되어 있습니다.</p><p>또한 엘라스틱서치는 사용자의 모든 입력을 REST API 형태로 받아들이기 때문에 별도의 드라이버 라이브러리가 없더라도 웹 브라우저나 curl 명령어를 이용해 기능을 활용할 수 있습니다.</p><h2 id="개요"><a class="markdownIt-Anchor" href="#개요"></a> 개요</h2><p>윈도우 환경에서 <strong>Elasticsearch 7.X</strong> 버전을 설치 및 실행하는 방법에 대해 알아보겠습니다.<br />윈도우에서는 파일을 다운로드하고 압축을 푼 다음 실행 파일을 실행하면 엘라스틱서치가 설치되는 구조입니다.</p><h2 id="다운로드"><a class="markdownIt-Anchor" href="#다운로드"></a> 다운로드</h2><p>먼저 설치를 위해 공식홈페이지로 이동합니다.</p><p><a href="https://www.elastic.co/kr/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/kr/downloads/elasticsearch</a></p><p>현재 기준으로 8.5.3 버전이 최신입니다. 7.X 버전을 설치하므로 오른쪽의 <strong>View pas releases</strong>를 클릭합니다.</p><p><img src="/images/elastic/elasticsearch/2.png" alt="" /></p><p>7.X 버전 중 원하는 버전을 선택하고 <strong>Download</strong> 버튼을 클릭합니다.</p><p><img src="/images/elastic/elasticsearch/3.png" alt="" /></p><p>버전을 확인하고 <strong>WINDOWS</strong> 링크를 클릭하여 다운로드 받습니다.</p><p><img src="/images/elastic/elasticsearch/4.png" alt="" /></p><h2 id="설치하기"><a class="markdownIt-Anchor" href="#설치하기"></a> 설치하기</h2><p>다운로드가 완료되면 zip 파일이 나오는데 압축을 해제합니다. 이 글에서는 윈도우 C 드라이브 밑에 <strong>elasticsearch-7.17.8</strong> 이라는 폴더에 압축을 해제했습니다.</p><p>압축을 해제하면 다음과 같은 폴더 구조가 나옵니다.</p><p><img src="/images/elastic/elasticsearch/6.png" alt="" /></p><p>bin 폴더에는 실행 파일과 플러그인 설치나 키 생성 등의 실행 작업을 위한 파일들이 있습니다. config 폴더에는 설정 파일(elasticsearch.yml)을 포함하여 설정에 관한 파일들이 있습니다.</p><h2 id="실행하기"><a class="markdownIt-Anchor" href="#실행하기"></a> 실행하기</h2><p>엘라스틱서치를 실행해봅니다. bin 폴더에 있는 <strong>elasticsearch.bat</strong> 파일을 실행하면 됩니다. 윈도우에서 기본으로 제공하는 명령 프롬프트(CMD)을 실행하고 다음 명령어를 실행합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\elasticsearch-7.17.8&gt; .\bin\elasticsearch.bat</span><br></pre></td></tr></table></figure><p>기본적으로 포그라운드로 실행되고 로그를 출력합니다. 백그라운드로 실행을 원할 경우 실행 명령문 뒤에 <code>-d</code>를 추가하면 됩니다.</p><h2 id="확인하기"><a class="markdownIt-Anchor" href="#확인하기"></a> 확인하기</h2><p>엘라스틱서치를 실행하고 동작 여부를 확인하기 위해 <strong>curl</strong>이라는 툴을 이용합니다. 윈도우를 설치하면 기본으로 설치되어 있습니다. 윈도우 bat 파일의 경우 기본적으로 백그라운드 실행이 안 되기 때문에 명령 프롬프트를 하나 더 실행하고 다음 명령을 실행합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">C:\elasticsearch-7.17.8&gt; curl -X GET <span class="string">"localhost:9200/?pretty"</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"DESKTOP-08OF09U"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"Qd8gx2FzSnyFb4zCvx9C6Q"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.17.8"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"zip"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"120eabe1c8a0cb2ae87cffc109a5b65d213e9df1"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2022-12-02T17:33:09.727072865Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.11.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>엘라스틱서치는 기본적으로 9200 포트를 사용하는데, localhost:9200 주소에 GET 메소드 요청을 해서 응답이 있다면 엘라스틱서치가 정상적으로 실행 된 것입니다. 응답 결과를 JSON 형태로 보여주는데, URL 뒤에 <code>?pretty</code>를 추가하면 가독성 좋은 형태로 결과를 보여줍니다.</p><p>브라우저에서 <a href="http://localhost:9200" target="_blank" rel="noopener">http://localhost:9200</a> 으로 접속해서 확인 할 수 있습니다.</p><p><img src="/images/elastic/elasticsearch/7.png" alt="" /></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/01/05/elasticsearch-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Gatsby] Page Query</title>
      <link>http://hgko1207.github.io/2023/01/04/react-17/</link>
      <guid>http://hgko1207.github.io/2023/01/04/react-17/</guid>
      <pubDate>Wed, 04 Jan 2023 14:45:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;gatsby-source-filesystem&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#gatsby-source-filesystem&quot;&gt;&lt;/a&gt; gatsby-source-filesystem&lt;/h2&gt;
&lt;p&gt;로컬 파일 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="gatsby-source-filesystem"><a class="markdownIt-Anchor" href="#gatsby-source-filesystem"></a> gatsby-source-filesystem</h2><p>로컬 파일 시스템에서 Gatsby 애플리케이션으로 데이터를 sourcing 하기 위한 Gatsby 소스 플러그인입니다.</p><p>플러그인은 파일에서 파일 노드를 생성합니다. 다양한 “transformer” 플러그인은 파일 노드를 다양한 다른 유형의 데이터로 변환할 수 있습니다.</p><p>Markdown, JSON, 이미지, YAML, CSV 및 기타 수집 가지 데이터 유형이 지원됩니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install gatsby-source-filesystem</span></span><br></pre></td></tr></table></figure><h2 id="사용-방법"><a class="markdownIt-Anchor" href="#사용-방법"></a> 사용 방법</h2><ol><li>예시로 <code>blog-posts</code> 디렉토리를 생성하고 디렉토리안에 <code>post1.md</code>, <code>post2.md</code> 파일을 생성합니다.</li><li><code>gatsby-config.ts</code> 파일의 plugin 부분을 다음과 같이 수정합니다. path 속성 값에는 생성한 <code>blog-posts</code> 디렉토리를 입력합니다.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gatsby-config.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; GatsbyConfig &#125; <span class="keyword">from</span> <span class="string">'gatsby'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config: GatsbyConfig = &#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      resolve: <span class="string">`gatsby-source-filesystem`</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        path: <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/blog-posts`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure><ol start="3"><li>GraphQL 쿼리를 해보면 <code>nodes</code> 에 생성한 파일명들이 조회됩니다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">query MyQuery &#123;</span><br><span class="line">  allFile &#123;</span><br><span class="line">    nodes &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 결과</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"allFile"</span>: &#123;</span><br><span class="line">      <span class="attr">"nodes"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"post1"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"post2"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"extensions"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>index.tsx</code> 파일에서 쿼리를 추가하고 별다른 작성없이 props 에 data 를 선언하기만 하면 Gatsby 가 자동으로 쿼리 결과를 가져올 수 있도록 도와줍니다. TypeScript 를 사용한다면 <code>PageProps&lt;Queries.BlogTitlesQuery&gt;</code> 타입을 지정합니다.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; graphql, PageProps &#125; <span class="keyword">from</span> <span class="string">'gatsby'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">IndexPage</span>(<span class="params">&#123; data &#125;: PageProps&lt;Queries.BlogTitlesQuery&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;data.allFile.nodes.map(<span class="function">(<span class="params">file, index</span>) =&gt;</span> (</span><br><span class="line">        &lt;li key=&#123;index&#125;&gt;&#123;file.name&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      ))&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> query = graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query BlogTitles &#123;</span></span><br><span class="line"><span class="string">    allFile &#123;</span></span><br><span class="line"><span class="string">      nodes &#123;</span></span><br><span class="line"><span class="string">        name</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data object</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"allFile"</span>: &#123;</span><br><span class="line">    <span class="attr">"nodes"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"post1"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"post2"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>위와 같이 gatsby-source-filesystem 플러그인을 사용하여 Gatsby 가 생성한 파일들을 관찰 할 수 있게 허용해주고 쿼리를 통해 더 많은 정보를 조회 할 수 있도록 도와줍니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.gatsbyjs.com/plugins/gatsby-source-filesystem" target="_blank" rel="noopener">https://www.gatsbyjs.com/plugins/gatsby-source-filesystem</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/01/04/react-17/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Gatsby] useStaticQuery(정적 쿼리 사용)</title>
      <link>http://hgko1207.github.io/2023/01/04/react-16/</link>
      <guid>http://hgko1207.github.io/2023/01/04/react-16/</guid>
      <pubDate>Wed, 04 Jan 2023 14:09:13 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;usestaticquery&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#usestaticquery&quot;&gt;&lt;/a&gt; useStaticQuery&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;useStaticQuery&lt;/strong&gt;는 빌드 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="usestaticquery"><a class="markdownIt-Anchor" href="#usestaticquery"></a> useStaticQuery</h2><p><strong>useStaticQuery</strong>는 빌드 시 리액트 훅을 사용하여 Gatsby의 GraphQL 데이터 계층을 쿼리하는 기능을 제공합니다. 이를 통해 React 컴포넌트는 구문 분석, 평가 및 컴포넌트에 삽입될 GraphQL 쿼리를 통해 데이터를 검색할 수 있습니다.</p><p>useStaticQuery 훅은 모든 컴포넌트 또는 페이지에서 사용할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = useStaticQuery(graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query HeaderQuery &#123;</span></span><br><span class="line"><span class="string">    site &#123;</span></span><br><span class="line"><span class="string">      siteMetadata &#123;</span></span><br><span class="line"><span class="string">        title</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure><h2 id="사용-방법"><a class="markdownIt-Anchor" href="#사용-방법"></a> 사용 방법</h2><p>TypeScript를 사용하고 <code>gatsby-config.ts</code> 파일에서 GraphQL 타입 생성에 관한 항목인 <code>graphqlTypegen</code> 값이 true로 설정되어 있다면 Gatsby가 쿼리를 읽고서 자동적으로 맞는 타입을 생성합니다.</p><p><code>gatsby-types.d.ts</code> 파일을 열어서 보면 정의한 쿼리를 읽고 자동 타입 생성을 해버렸음을 확인 할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useStaticQuery 정의</span></span><br><span class="line"><span class="keyword">const</span> data = useStaticQuery(graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query SeoData &#123;</span></span><br><span class="line"><span class="string">    site &#123;</span></span><br><span class="line"><span class="string">      siteMetadata &#123;</span></span><br><span class="line"><span class="string">        title</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gatsby-types.d.ts</span></span><br><span class="line"><span class="keyword">type</span> SeoDataQuery = &#123; readonly site: &#123; readonly siteMetadata: &#123; readonly title: <span class="built_in">string</span> | <span class="literal">null</span> &#125; | <span class="literal">null</span> &#125; | <span class="literal">null</span> &#125;;</span><br></pre></td></tr></table></figure><p>이렇게 자동 타입이 생성되었다면 <code>Queries</code>를 사용하여 <code>SeoDataQuery</code>를 찾아 타입을 부여합니다. TypeScript 자동완성이 제공됩니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = useStaticQuery&lt;Queries.SeoDataQuery&gt;(</span><br><span class="line">  graphql<span class="string">`</span></span><br><span class="line"><span class="string">    query SeoData &#123;</span></span><br><span class="line"><span class="string">      site &#123;</span></span><br><span class="line"><span class="string">        siteMetadata &#123;</span></span><br><span class="line"><span class="string">          title</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(data.site?.siteMetadata?.title);</span><br></pre></td></tr></table></figure><h2 id="전체-코드"><a class="markdownIt-Anchor" href="#전체-코드"></a> 전체 코드</h2><p>GraphQL 쿼리를 통해 조회해서 Title를 설정하는 코드입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; graphql, useStaticQuery &#125; <span class="keyword">from</span> <span class="string">'gatsby'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ISeoProps &#123;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Seo</span>(<span class="params">&#123; title &#125;: ISeoProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = useStaticQuery&lt;Queries.SeoDataQuery&gt;(graphql<span class="string">`</span></span><br><span class="line"><span class="string">    query SeoData &#123;</span></span><br><span class="line"><span class="string">      site &#123;</span></span><br><span class="line"><span class="string">        siteMetadata &#123;</span></span><br><span class="line"><span class="string">          title</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;title&gt;</span><br><span class="line">      &#123;title&#125; | &#123;data.site?.siteMetadata?.title&#125;</span><br><span class="line">    &lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/" target="_blank" rel="noopener">https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/</a></li><li><a href="https://www.gatsbyjs.com/docs/reference/graphql-data-layer/graphql-api/#usestaticquery" target="_blank" rel="noopener">https://www.gatsbyjs.com/docs/reference/graphql-data-layer/graphql-api/#usestaticquery</a></li><li><a href="https://www.gatsbyjs.com/docs/how-to/local-development/graphql-typegen/" target="_blank" rel="noopener">GraphQL Typegen</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/01/04/react-16/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SHACL(Shapes Constraint Language) 란</title>
      <link>http://hgko1207.github.io/2023/01/04/shacl/</link>
      <guid>http://hgko1207.github.io/2023/01/04/shacl/</guid>
      <pubDate>Wed, 04 Jan 2023 06:47:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;데이터를 검증하는 데 사용되는 SHACL(Shapes Constraint Language)에 대해 공부하고 정리한 내용입니다.&lt;/p&gt;
&lt;h1 id=&quot;shaclshapes-constraint-language-란&quot;&gt;&lt;a class=&quot;markdownI
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>데이터를 검증하는 데 사용되는 SHACL(Shapes Constraint Language)에 대해 공부하고 정리한 내용입니다.</p><h1 id="shaclshapes-constraint-language-란"><a class="markdownIt-Anchor" href="#shaclshapes-constraint-language-란"></a> SHACL(Shapes Constraint Language) 란</h1><blockquote><p>Shapes Constraint Language(SHACL)는 RDF(Resource Description Framework) 그래프 를 설명하기 위한 W3C(World Wide Web Consortium) 표준 언어입니다 . SHACL은 RDF 그래프로 표현되는 온톨로지의 의미 체계 및 기술 상호 운용성 계층을 향상시키도록 설계되었습니다.<br />SHACL 모델은 그래프의 내용, 구조 및 의미에 대한 제약 조건으로 정의됩니다. SHACL은 표현력이 뛰어난 언어입니다. 무엇보다도 속성이 가질 수 있는 값의 수, 이러한 값의 유형, 숫자 범위, 문자열 일치 패턴 및 이러한 제약 조건의 논리적 조합을 제한하는 조건을 표현하는 기능이 포함되어 있습니다. SHACL에는 SPARQL 및 JavaScript 와 같은 언어로 보다 복잡한 조건을 표현하는 확장 메커니즘도 포함되어 있습니다 . SHACL 규칙은 SHACL에 추론 기능을 추가하여 사용자가 기존(어설션된) 문에서 추론할 수 있는 새 문을 정의할 수 있도록 합니다. <a href="https://en.wikipedia.org/wiki/SHACL" target="_blank" rel="noopener">위키백과</a></p></blockquote><ul><li>2017년 7월 20일 이후 W3C 권장 사항(<a href="https://www.w3.org/TR/shacl/" target="_blank" rel="noopener">https://www.w3.org/TR/shacl/</a>)</li><li>RDF 언어 사용</li><li>RDF의 검증을 허용하도록 생성되었습니다.</li><li>SHACL은 데이터를 검증하는 데 사용되는 &quot;Shapes Graph&quot;를 정의합니다.</li></ul><h2 id="rdfresource-description-framework-란"><a class="markdownIt-Anchor" href="#rdfresource-description-framework-란"></a> RDF(Resource Description Framework) 란</h2><blockquote><p>RDF는 자원의 정보를 표현하고 상호 연결 및 교환하기 위하여 월드 와이드 웹 컨소시움(W3C)에 의해 개발되고 있는 언어 규격이다.<br />여기서 말하는 자원이란 웹상에 존재하는 대부분의 객체를 의미하는 것으로, 사람이나 웹페이지, 저작물과 같은 특정지을 수 있는 개체들이 해당된다. RDF는 이러한 자원들의 메타데이터를 표현하기 위하여 개발된 규격으로, 예를 들어 웹페이지라면 제목, 저자, 수정날짜와 같은 정보가 RDF로 서술하는 대상이 된다.<br /><a href="https://namu.wiki/w/RDF" target="_blank" rel="noopener">나무위키</a></p></blockquote><h2 id="shacl-validation"><a class="markdownIt-Anchor" href="#shacl-validation"></a> SHACL Validation</h2><p><img src="/images/information/shacl/1.png" alt="" /></p><h2 id="shacl-processor"><a class="markdownIt-Anchor" href="#shacl-processor"></a> SHACL Processor</h2><ul><li>두 개의 입력 데이터를 넣고 검증합니다.<ul><li>shapes graph(확인하는 방법), data graph(검증 대상)</li></ul></li><li>SHACL Processor는 graph를 변경해서는 안됩니다. 즉, 유효성 검사 종료 시 data 및 shapes graph는 유효성 검사 시작 시 graph와 동일해야 합니다.</li><li>결과 graph를 생성합니다.</li></ul><h2 id="shape-이란"><a class="markdownIt-Anchor" href="#shape-이란"></a> Shape 이란</h2><p>targets(대상) 및 contraints(제약 조건) 모음입니다.</p><ul><li>Targets: data graph에서 어떤 노드가 shape을 준수해야 하는지 정의합니다.</li><li>Constraint: 노드를 검증하는 방법을 정의합니다.</li></ul><p><img src="/images/information/shacl/2.png" alt="" /></p><h2 id="shapes-and-constraints"><a class="markdownIt-Anchor" href="#shapes-and-constraints"></a> Shapes and Constraints</h2><p><img src="/images/information/shacl/3.png" alt="" /></p><h3 id="targets-of-a-shape"><a class="markdownIt-Anchor" href="#targets-of-a-shape"></a> Targets (of a shape)</h3><ul><li>Data Graph에서 어떤 노드가 형태를 따라야 하는지 정의합니다.</li><li>Target 선언은 어떤 리소스(RDF 그래프 노드)가 Shape의 &quot;Focus Node&quot;가 될 것인지를 정의합니다.</li></ul><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>sh:targetClass</td><td>지정된 클래스의 인스턴스인 모든 리소스를 대상으로 합니다. <br> 예) sh:targetClass schema:Person;</td></tr><tr><td>sh:targetNode</td><td>특정 리소스(예: 주어진 인스턴스)를 대상으로 합니다.<br> 예) sh:targetNode ex:John;</td></tr></tbody></table><h3 id="node-shapes"><a class="markdownIt-Anchor" href="#node-shapes"></a> Node Shapes</h3><ul><li>노드(클래스)에 대한 제약 조건을 지정합니다.</li><li>Property Shapes을 그룹화하는데 사용됩니다.</li><li>sh:NodeShape의 SHACL 인스턴스로 선언하는 것이 권장되지만 필수는 아닙니다.</li><li>sh:NodeShape의 SHACL 인스턴스는 sh:path 속성 값을 가질 수 없습니다.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">schema:ExampleNodeShape e a sh:NodeShape</span><br><span class="line">    sh:targetClass schema:Example ;</span><br><span class="line">    sh:property [</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h3 id="property-shapes"><a class="markdownIt-Anchor" href="#property-shapes"></a> Property Shapes</h3><ul><li>속성 및 해당 값에 대한 제약 조건을 지정합니다.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sh:property [</span><br><span class="line">    sh:path schema:name ;</span><br><span class="line">    sh:minCount 1 ;</span><br><span class="line">    sh:maxCount 1 ;</span><br><span class="line">    sh:datatype xsd:string ;</span><br><span class="line">    sh:maxLength 20 ;</span><br><span class="line">] ;</span><br></pre></td></tr></table></figure><h2 id="core-constraint-components"><a class="markdownIt-Anchor" href="#core-constraint-components"></a> Core Constraint Components</h2><p>SHACL 프로세서에서 지원해야 하는 기본 제공 SHACL Core 제약 조건 구성 요소를 정의합니다.</p><table><thead><tr><th>Type</th><th>Constraints</th></tr></thead><tbody><tr><td>Types of values</td><td>class, datatype, nodeKind</td></tr><tr><td>Cardinality</td><td>minCount, maxCount</td></tr><tr><td>Values</td><td>node, in, hasValue</td></tr><tr><td>Range of values</td><td>minInclusive, maxInclusive, minExclusive, maxExclusive</td></tr><tr><td>String based</td><td>minLength, maxLength, pattern, languageIn, uniqueLang</td></tr><tr><td>Logical constraints</td><td>not, and, or, xone</td></tr><tr><td>Closed shapes</td><td>closed, ignoredProperties</td></tr><tr><td>Property pair constraints</td><td>equals, disjoint, lessThan, lessThanOrEquals</td></tr><tr><td>Non-validating constraints</td><td>name, description, group, order, defaultValue</td></tr><tr><td>Qualified shapes</td><td>qualifiedValueShape, qualifiedMinCount, qualifiedMaxCount</td></tr></tbody></table><h3 id="value-type-constraint-components"><a class="markdownIt-Anchor" href="#value-type-constraint-components"></a> Value Type Constraint Components</h3><p>Value 노드의 유형을 제한하는 데 사용합니다.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>sh:class</td><td>주어진 클래스의 인스턴스인 노드로 제한합니다.</td></tr><tr><td>sh:datatype</td><td>노드의 데이터 유형을 주어진 값으로 제한합니다. (예: xsd:integer)</td></tr><tr><td>sh:nodeKind</td><td>각 값 노드의 RDF 노드 종류가 만족할 조건을 지정합니다. <br>가능한 값: BlankNode, IRI, Literal, BlankNodeOrIRI, BlankNodeOrLiteral, IRIOrLiteral</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sh:class --&gt;</span></span><br><span class="line">schema:Person a sh:NodeShape ;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:knows ;</span><br><span class="line">        sh:class :Person;</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sh:datatype --&gt;</span></span><br><span class="line">schema:Person a sh:NodeShape ;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:birthDate ;</span><br><span class="line">        sh:datatype xsd:date;</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><p><code>sh:datatype</code> 에 대한 데이터 유형은 XMLSchema를 참고하여 지정합니다.</p><ul><li><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-datatype" target="_blank" rel="noopener">The XML Schema Built-in Datatypes</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sh:nodeKind --&gt;</span></span><br><span class="line">schema:Person a sh:NodeShape ;</span><br><span class="line">    sh:nodeKind sh:IRI ;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:knows ;</span><br><span class="line">        sh:nodeKind sh:BlankNodeOrIRI;</span><br><span class="line">    ];</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:name ;</span><br><span class="line">        sh:nodeKind sh:BlankNodeOrLiteral;</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><h3 id="cardinality-constraint-components"><a class="markdownIt-Anchor" href="#cardinality-constraint-components"></a> Cardinality Constraint Components</h3><p>Value 노드 수에 대한 제한을 나타냅니다.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>minCount</td><td>지정된 속성의 최소 발생 횟수를 제한합니다. 기본값: 0</td></tr><tr><td>maxCount</td><td>지정된 속성의 최대 발생 횟수를 제한합니다. 기본값: 0</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">schema:Person a sh:NodeShape ;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:knows ;</span><br><span class="line">        sh:minCount 1;</span><br><span class="line">        sh:maxCount 2;</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><h3 id="value-range-constraint-components"><a class="markdownIt-Anchor" href="#value-range-constraint-components"></a> Value Range Constraint Components</h3><p>&lt;, &lt;=, &gt; 및 &gt;= 와 같은 연산자를 통해 비교할 수 있는 값 노드가 충족할 값 범위 조건을 지정합니다.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>minInclusive</td><td>최소 포함(Inclusive) 값, &lt;=</td></tr><tr><td>maxInclusive</td><td>최대 포함(Inclusive) 값, &gt;=</td></tr><tr><td>minExclusive</td><td>최소 독점(Exclusive) 값, &lt;</td></tr><tr><td>maxExclusive</td><td>최대 독점(Exclusive) 값, &gt;</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">schema:Rating a sh:NodeShape;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:ratingValue ;</span><br><span class="line">        sh:minInclusive 1;</span><br><span class="line">        sh:maxExclusive 6;</span><br><span class="line">        sh:datatype xsd:integer;</span><br><span class="line">    ] ;.</span><br></pre></td></tr></table></figure><h3 id="string-based-constraint-components"><a class="markdownIt-Anchor" href="#string-based-constraint-components"></a> String-based Constraint Components</h3><p>Value 노드의 문자열 표현에 대한 조건을 지정한다는 공통점이 있습니다.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>minLength</td><td>최소 문자열 길이를 제한합니다.</td></tr><tr><td>maxLength</td><td>최대 문자열 길이를 제한합니다.</td></tr><tr><td>pattern</td><td>문자열 값이 정규 표현식과 일치하는지 확인합니다.</td></tr><tr><td>uniqueLang</td><td>동일한 언어 태그를 사용하는 노드 쌍이 없는지 확인합니다.</td></tr><tr><td>languageIn</td><td>속성 값이 주어진 언어 목록으로 표현되는지 확인합니다.</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sh:minLength, sh:maxLength --&gt;</span></span><br><span class="line">schema:Person a sh:NodeShape;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:name ;</span><br><span class="line">        sh:minLength 4;</span><br><span class="line">        sh:maxLength 15;</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sh:pattern --&gt;</span></span><br><span class="line">schema:Product a sh:NodeShape;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:productID ;</span><br><span class="line">        sh:pattern "^P" ; <span class="comment">&lt;!-- P or p로 시작하는지 확인 --&gt;</span></span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sh:uniqueLang, sh:languageIn --&gt;</span></span><br><span class="line">schema:Country a sh:NodeShape;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:name ;</span><br><span class="line">        sh:languageIn ("en" "ex") ;</span><br><span class="line">        sh:uniqueLang true ;</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><h3 id="property-pair-constraint-components"><a class="markdownIt-Anchor" href="#property-pair-constraint-components"></a> Property Pair Constraint Components</h3><p>다른 속성과 관련하여 값 노드 집합에 대한 조건을 지정합니다.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>equals</td><td>지정된 Focus 노드에서 두 속성의 값 집합은 동일해야 합니다.</td></tr><tr><td>disjoint</td><td>지정된 Focus 노드에서 두 속성의 값 집합은 달라야 합니다.</td></tr><tr><td>lessThan</td><td>값은 다른 속성 값보다 작아야 합니다.</td></tr><tr><td>lessThanOrEquals</td><td>값은 다른 속성의 값보다 작거나 같아야 합니다.</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">schema:Person a sh:NodeShape;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:givenName ;</span><br><span class="line">        sh:equals foaf:firstName ;</span><br><span class="line">    ] ;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:givenName ;</span><br><span class="line">        sh:disjoint schema:lastName ;</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><h3 id="logical-constraint-components"><a class="markdownIt-Anchor" href="#logical-constraint-components"></a> Logical Constraint Components</h3><p>공통 논리 연산자 and, or 및 not과 xor(Exclusive-OR)을 구현합니다.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>not</td><td>각 노드가 주어진 Shape을 따를 수 없다는 조건을 준수하는지 확인합니다.</td></tr><tr><td>and</td><td>각 노드가 제공된 모든 Shape을 준수하는 조건을 준수하는지 확인합니다.</td></tr><tr><td>or</td><td>각 노드가 제공된 Shape 중 하나 이상 또는 둘 다를 준수하는지 확인합니다.</td></tr><tr><td>xone</td><td>각 노드가 제공된 Shape 중 정확히 하나를 준수한다는 조건을 준수하는지 확인합니다</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sh:not --&gt;</span></span><br><span class="line">schema:Person a sh:NodeShape;</span><br><span class="line">    sh:not</span><br><span class="line">    [</span><br><span class="line">        sh:path foaf:name ;</span><br><span class="line">        sh:minCount 1;</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sh:and --&gt;</span></span><br><span class="line">schema:Person a sh:NodeShape;</span><br><span class="line">    sh:and (</span><br><span class="line">        [</span><br><span class="line">            sh:property [</span><br><span class="line">                sh:path schema:name ;</span><br><span class="line">                sh:minCount 1;</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">        [</span><br><span class="line">            sh:property [</span><br><span class="line">                sh:path schema:affiliation ;</span><br><span class="line">                sh:MinCount 1;</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ) .</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sh:or --&gt;</span></span><br><span class="line">schema:Person a sh:NodeShape;</span><br><span class="line">    sh:or (</span><br><span class="line">        [</span><br><span class="line">            sh:path foaf:name ;</span><br><span class="line">            sh:minCount 1 ;</span><br><span class="line">        ]</span><br><span class="line">        [</span><br><span class="line">            sh:path schema:name ;</span><br><span class="line">            sh:minCount 1 ;</span><br><span class="line">        ]</span><br><span class="line">    ) .</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sh:xone --&gt;</span></span><br><span class="line">schema:Person a sh:NodeShape;</span><br><span class="line">    sh:xone (</span><br><span class="line">        [</span><br><span class="line">            sh:property [</span><br><span class="line">                sh:path ex:fullName ;</span><br><span class="line">                sh:minCount 1;</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">        [</span><br><span class="line">            sh:property [</span><br><span class="line">                sh:path ex:firstName ;</span><br><span class="line">                sh:minCount 1 ;</span><br><span class="line">            ] ;</span><br><span class="line">            sh:property [</span><br><span class="line">                sh:path ex:lastName ;</span><br><span class="line">                sh:minCount 1 ;</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ).</span><br></pre></td></tr></table></figure><h3 id="shape-based-constraint-components"><a class="markdownIt-Anchor" href="#shape-based-constraint-components"></a> Shape-based Constraint Components</h3><p>특정 Shape에 대해 Value 노드의 유효성을 검사하여 복잡한 조건을 지정하는 데 사용할 수 있습니다.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>node</td><td>주어진 속성의 모든 값은 주어진 Shape을 준수해야 합니다.</td></tr><tr><td>qualifiedValueShape</td><td>지정된 노드 수가 준수해야 하는 Shape을 정의합니다.</td></tr><tr><td>qualifiedMinCount</td><td>Shape에 맞는 최소 노드 수</td></tr><tr><td>qualifiedMaxCount</td><td>Shape에 맞는 최대 노드 수</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sh:node --&gt;</span></span><br><span class="line">schema:Person a sh:NodeShape;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:affiliation ;</span><br><span class="line">        sh:node schema:Company;</span><br><span class="line">    ].</span><br><span class="line"></span><br><span class="line">schema:Company a sh:Shape ;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:name ;</span><br><span class="line">        sh:datatype xsd:string ;</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sh:qualifiedValueShape, sh:qualifiedMinCount --&gt;</span></span><br><span class="line">schema:QualifiedExampleShape a sh:NodeShape;</span><br><span class="line">    sh:targetNode :Offspring ;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path :parent;</span><br><span class="line">        sh:minCount 2;</span><br><span class="line">        sh:maxCount 2;</span><br><span class="line">        sh:qualifiedValueShape [</span><br><span class="line">            sh:path :gender ;</span><br><span class="line">            sh:hasValue :Female ;</span><br><span class="line">        ] ;</span><br><span class="line">        sh:qualifiedMinCount 1 ;</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><h3 id="closed-constraint-components"><a class="markdownIt-Anchor" href="#closed-constraint-components"></a> Closed Constraint Components</h3><p>Shape에 명시적으로 열거된 속성에 대한 값만 갖는 조건을 지정합니다.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>closed</td><td>true로 설정하면 Shape에 명시적으로 설명되지 않은 속성은 허용되지 않습니다.</td></tr><tr><td>ignoredProperties</td><td>Shape에 명시적으로 열거된 속성 외에 허용되는 속성의 Optional 목록입니다.</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">schema:Person a sh:NodeShape;</span><br><span class="line">    sh:closed true ;</span><br><span class="line">    sh:ignoredProperties (rdf:type) ;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path ex:firstName ;</span><br><span class="line">    ] ;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path ex:lastName ;</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><h3 id="non-validating-constraint"><a class="markdownIt-Anchor" href="#non-validating-constraint"></a> Non-Validating Constraint</h3><p>유효성 검사 조건에서 무시되는 속성입니다.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td>속성 라벨명을 정의합니다.</td></tr><tr><td>description</td><td>속성에 대한 설명을 정의합니다.</td></tr><tr><td>order</td><td>속성의 상대적 순서를 정의합니다.</td></tr><tr><td>group</td><td>그룹을 정의합니다.</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">schema:Person a sh:NodeShape;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:url;</span><br><span class="line">        sh:name "URL";</span><br><span class="line">        sh:description "User URL";</span><br><span class="line">        sh:order 1;</span><br><span class="line">    ] ;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:name;</span><br><span class="line">        sh:name "Name";</span><br><span class="line">        sh:description "Person name";</span><br><span class="line">        sh:order 2;</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><h3 id="other-constraint-components"><a class="markdownIt-Anchor" href="#other-constraint-components"></a> Other Constraint Components</h3><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>hasValue</td><td>Focus 노드에 주어진 값이 있는지 확인합니다.</td></tr><tr><td>in</td><td>속성이 가질 수 있는 값 옵션을 열거합니다.</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">schema:Person a sh:NodeShape;</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:affiliation ;</span><br><span class="line">        sh:hasValue :OurCompany;</span><br><span class="line">    ];</span><br><span class="line">    sh:property [</span><br><span class="line">        sh:path schema:gender ;</span><br><span class="line">        sh:in (schema:Male schema:Female);</span><br><span class="line">    ] .</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.w3.org/TR/shacl/" target="_blank" rel="noopener">Shapes Constraint Language (SHACL)</a></li><li><a href="https://www.pldn.nl/file_auth.php/pilod/6/60/20190131_Waternet_W01b_SHACL_Modeleren.pdf" target="_blank" rel="noopener">Informatiemodellering met SHACL</a></li><li><a href="https://www.utwente.nl/en/ces/sal/exams/digital-exams/Linked-Data-and-Semantic-Web/ldsw-lecture7.pdf" target="_blank" rel="noopener">SHAPES CONSTRAINT LANGUAGE – SHACL</a></li><li><a href="https://derwen.ai/docs/kgl/ex5_0/" target="_blank" rel="noopener">SHACL validation with pySHACL</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/01/04/shacl/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Gatsby] Head API</title>
      <link>http://hgko1207.github.io/2023/01/03/react-15/</link>
      <guid>http://hgko1207.github.io/2023/01/03/react-15/</guid>
      <pubDate>Tue, 03 Jan 2023 14:26:44 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;gatsby-head-api&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#gatsby-head-api&quot;&gt;&lt;/a&gt; Gatsby Head API&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Gatsby&lt;/strong&gt; 에는 페이지의 문
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="gatsby-head-api"><a class="markdownIt-Anchor" href="#gatsby-head-api"></a> Gatsby Head API</h2><p><strong>Gatsby</strong> 에는 페이지의 문서 헤드에 요소를 추가할 수 있는 내장 head가 포함되어 있습니다.</p><p><code>react-helmet</code> 또는 기타 유사한 솔루션과 비교할 때 Gatsby Head는 사용하기 쉽고 성능이 우수하며 번들 크기가 더 작고 최신 React 기능을 지원합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ex)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Head = <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Home Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>SEO Component 를 사용하여 <code>Head</code> 함수를 정의할 수 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/Seo.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line">interface ISeoProps &#123;</span><br><span class="line">  title: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Seo</span>(<span class="params">&#123; title &#125;: ISeoProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;title&#125; | Hello!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.tsx</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Seo <span class="keyword">from</span> <span class="string">'../components/Seo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">IndexPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Head = <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Seo</span> <span class="attr">title</span>=<span class="string">"Home Page"</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><h2 id="usage-notes"><a class="markdownIt-Anchor" href="#usage-notes"></a> Usage notes</h2><p>Gatsby Head를 사용할 때 다음 사항에 유의해야 합니다.</p><ul><li>컴포넌트가 아닌 페이지 내부에서만 <code>Head</code> export 를 정의 할 수 있습니다.</li><li>Gatsby Head 의 내용은 페이지 마운트 해제 시 지워지므로 각 페이지가 <code>&lt;head&gt;</code>에 필요한 내용을 정의하는지 확인해야 합니다.</li><li><code>Head</code> 함수는 유효한 JSX를 반환해야 합니다.</li><li><code>Head</code> 함수 내부의 유효한 태그는 <code>link</code>, <code>meta</code>, <code>style</code>, <code>title</code>, <code>base</code>, <code>script</code> 및 <code>noscript</code> 입니다.</li></ul><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/" target="_blank" rel="noopener">https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/</a></li><li><a href="https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component" target="_blank" rel="noopener">https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/01/03/react-15/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Gatsby] Layout Components</title>
      <link>http://hgko1207.github.io/2023/01/03/react-14/</link>
      <guid>http://hgko1207.github.io/2023/01/03/react-14/</guid>
      <pubDate>Tue, 03 Jan 2023 14:08:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;layout-components&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#layout-components&quot;&gt;&lt;/a&gt; Layout Components&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Gatsby&lt;/strong&gt; 는 기
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="layout-components"><a class="markdownIt-Anchor" href="#layout-components"></a> Layout Components</h2><p><strong>Gatsby</strong> 는 기본적으로 레이아웃을 페이지에 자동으로 적용하지 않습니다.</p><p>대신 Layout Component를 사용하면 Header 및 Footer, 그리고 일부 페이지에서 사용하는 사이드바와 같은 여러가지 레이아웃을 만들 수 있습니다. 또한 레이아웃과 페이지 컴포넌트 간에 데이터를 전달할 수 있습니다.</p><p>즉 Layout Component를 사용하여 여러 페이지에서 일반적으로 사용하는 Header 및 Footer의 레이아웃을 공유하도록 구성할 수 있습니다.</p><h3 id="예제"><a class="markdownIt-Anchor" href="#예제"></a> 예제</h3><p><code>src/components/</code> 디렉토리를 생성하고 <code>Layout.tsx</code> 파일을 생성합니다.<br />다음과 같이 Gatsby 의 <code>Link</code>를 사용하여 페이지를 이동하는 Layout Component를 구성합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/Layout.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'gatsby'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line">interface ILayoutProps &#123;</span><br><span class="line">  children: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Layout</span>(<span class="params">&#123; children &#125;: ILayoutProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;nav&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/blog"</span>&gt;Blog&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>nav&gt;</span><br><span class="line">      &lt;main&gt;&#123;children&#125;&lt;<span class="regexp">/main&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>페이지에 레이아웃을 적용하려면 <code>Layout</code> Component 를 포함하고 그 안에 페이지 내용을 넣어야 합니다.<br />레이아웃을 페이지에 적용하는 방법은 다음과 같습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/index.tsx</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'../components/Layout'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> IndexPage = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Layout&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Welcome to Home&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/Layout&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>이 레이아웃이 필요한 모든 페이지와 템플릿에 대해 반복을 합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.gatsbyjs.com/docs/how-to/routing/layout-components/" target="_blank" rel="noopener">https://www.gatsbyjs.com/docs/how-to/routing/layout-components/</a></li><li><a href="https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-link/" target="_blank" rel="noopener">https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-link/</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/01/03/react-14/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Gatsby] Routing</title>
      <link>http://hgko1207.github.io/2023/01/03/react-13/</link>
      <guid>http://hgko1207.github.io/2023/01/03/react-13/</guid>
      <pubDate>Tue, 03 Jan 2023 13:56:08 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;routing&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#routing&quot;&gt;&lt;/a&gt; Routing&lt;/h2&gt;
&lt;p&gt;리액트 라우터를 사용하여 페이지를 생성하는 것과 달리 Gatsby 는 &lt;code&gt;src/pages&lt;/c
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="routing"><a class="markdownIt-Anchor" href="#routing"></a> Routing</h2><p>리액트 라우터를 사용하여 페이지를 생성하는 것과 달리 Gatsby 는 <code>src/pages</code> 안에 각 .tsx 파일에 대한 페이지를 생성합니다.</p><p>예를 들어 <code>src/pages/contact.tsx</code>는 <code>yoursite.com/contact</code> 페이지를 생성하고 <code>src/pages/home.tsx</code>는 <code>yoursite.com/home</code> 페이지를 생성합니다.</p><p>Gatsby 로 Routing 하는 것은 간단하고 리액트 라우터도, 스크린도 만들 필요 없고 그 경로와 요소들을 일일이 설명할 필요도 없다는 장점이 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/index.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.gatsbyjs.com/docs/reference/routing/creating-routes/" target="_blank" rel="noopener">https://www.gatsbyjs.com/docs/reference/routing/creating-routes/</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/01/03/react-13/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MySQL] 5분 단위로 그룹핑하여 평균값 계산</title>
      <link>http://hgko1207.github.io/2023/01/02/mysql-8/</link>
      <guid>http://hgko1207.github.io/2023/01/02/mysql-8/</guid>
      <pubDate>Mon, 02 Jan 2023 01:14:53 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;MYSQL&lt;/strong&gt; 을 사용하여 5분 단위로 그룹핑하여 평균값 계산하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;테이블-생성&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#테이블-생성&quot;&gt;&lt;/a&gt; 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>MYSQL</strong> 을 사용하여 5분 단위로 그룹핑하여 평균값 계산하는 방법에 대해 알아보겠습니다.</p><h2 id="테이블-생성"><a class="markdownIt-Anchor" href="#테이블-생성"></a> 테이블 생성</h2><p>먼저 분 단위로 그룹핑과 평균값 계산을 위해 DATETIME, FLOAT 타입이 포함된 테이블을 생성합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">test</span> (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  sensor_value <span class="built_in">FLOAT</span>,</span><br><span class="line">  log_time DATETIME,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>),</span><br><span class="line">) <span class="keyword">ENGINE</span>=MYISAM <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>테이블이 생성되면 값을 입력합니다.</p><h2 id="첫-번째-방법"><a class="markdownIt-Anchor" href="#첫-번째-방법"></a> 첫 번째 방법</h2><p>시간 단위로 먼저 그룹핑 한 후 분단위를 5로 나누어 그룹핑합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">date_format</span>(log_time, <span class="string">'%Y%m%d%H%i%S'</span>), <span class="keyword">AVG</span>(sensor_value)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">test</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SUBSTR</span>(<span class="keyword">date_format</span>(log_time, <span class="string">'%Y%m%d%H%i%S'</span>), <span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line">        <span class="keyword">FLOOR</span>(<span class="keyword">SUBSTR</span>(<span class="keyword">date_format</span>(log_time, <span class="string">'%Y%m%d%H%i%S'</span>), <span class="number">11</span>, <span class="number">2</span>) / <span class="number">5</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> log_time;</span><br></pre></td></tr></table></figure><p>또는 다음과 같이 SUBSTR 함수를 빼고 format 을 다르게 해서 할 수 있습니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">date_format</span>(log_time, <span class="string">'%Y%m%d%H%i%S'</span>), <span class="keyword">AVG</span>(sensor_value)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">test</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">date_format</span>(log_time, <span class="string">'%Y%m%d%H'</span>),</span><br><span class="line">        <span class="keyword">FLOOR</span>(<span class="keyword">date_format</span>(log_time, <span class="string">'%i'</span>) / <span class="number">5</span>);</span><br><span class="line">ORDER BY log_time;</span><br></pre></td></tr></table></figure><p>FLOOR 함수는 가장 가까운 정수로 버림하여 반환합니다.</p><h2 id="두-번째-방법"><a class="markdownIt-Anchor" href="#두-번째-방법"></a> 두 번째 방법</h2><p>시간 및 분 단위로 분리하는 함수를 사용합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">date_format</span>(log_time, <span class="string">'%Y%m%d%H%i%S'</span>), <span class="keyword">AVG</span>(sensor_value)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">test</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">DATE</span>(log_time), <span class="keyword">HOUR</span>(log_time), <span class="keyword">FLOOR</span>(<span class="keyword">MINUTE</span>(log_time) / <span class="number">5</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> log_time;</span><br></pre></td></tr></table></figure><p>DATE, HOUR, MINUTE 함수는 날짜, 시간, 분의 값을 반환합니다.</p><h2 id="5분-단위-데이터-출력"><a class="markdownIt-Anchor" href="#5분-단위-데이터-출력"></a> 5분 단위 데이터 출력</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">test</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MOD</span>(<span class="keyword">date_format</span>(log_time, <span class="string">'%i'</span>), <span class="number">5</span>) = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">test</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">date_format</span>(log_time, <span class="string">'%i'</span>) % <span class="number">5</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>MOD 함수는 첫 번째 값을 두 번째 값으로 나눈 나머지를 반환합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><p><strong>date_format</strong> 함수의 두 번째 항목인 format 내용은 아래 사이트에서 자세하게 확인해 볼 수 있습니다.</p><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_date-format" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_date-format</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2023/01/02/mysql-8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Gatsby] 설치 및 사용 방법</title>
      <link>http://hgko1207.github.io/2022/12/29/react-12/</link>
      <guid>http://hgko1207.github.io/2022/12/29/react-12/</guid>
      <pubDate>Thu, 29 Dec 2022 07:03:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Gatsby&lt;/strong&gt; 설치 및 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;gatsby개츠비-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#gatsby개츠비-란&quot;&gt;&lt;/a&gt; Gatsby(개츠비
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Gatsby</strong> 설치 및 사용 방법에 대해 알아보겠습니다.</p><h2 id="gatsby개츠비-란"><a class="markdownIt-Anchor" href="#gatsby개츠비-란"></a> Gatsby(개츠비) 란</h2><p>개츠비는 리액트 기반의 프레임워크입니다. 리액트를 이용하면서도 리액트에 새로운 규칙 몇 가지를 추가해주면서 아주 약간의 복잡함을 더해주고 있습니다.</p><p>주로 서버사이드 렌더링을 위해 사용하는 Next.js 와는 달리 개츠비는 서버 없이, 오로지 정적 웹사이트 생성을 위해 사용하는 오픈소스 프레임워크입니다.</p><blockquote><p>정적 웹 페이지, 플랫 페이지는 저장된 그대로 사용자에게 전달되는 웹 페이지로서, 이는 웹 애플리케이션에 의해 생성되는 동적 웹 페이지와 반대되는 용어이다.<br />즉, 정적 웹 페이지는 모든 상황에서 모든 사용자에게 동일한 정보를 표시하며, 콘텐츠 타입이나 문서 언어의 협상(negotiate)을 위해 웹 서버의 현대적 기능에 종속된다. <a href="https://ko.wikipedia.org/wiki/%EC%A0%95%EC%A0%81_%EC%9B%B9_%ED%8E%98%EC%9D%B4%EC%A7%80" target="_blank" rel="noopener">위키백과</a></p></blockquote><p>서비스 및 블로그, 포트폴리오 등에서 많이 사용됩니다.</p><h3 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h3><p>Gatsby를 사용하기 위해 <code>gatsby-cli</code>를 설치합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g gatsby-cli</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Gatsby requires Node.js 18.0.0 or higher (you have v14.17.5).</span><br><span class="line">Upgrade Node to the latest stable release: https:&#x2F;&#x2F;gatsby.dev&#x2F;upgrading-node-js</span><br></pre></td></tr></table></figure><p>개츠비를 사용하려면 Node.js 18 이상 버전이 필요합니다. 버전이 낮다면 위와 같은 에러가 발생합니다.</p><h3 id="프로젝트-생성"><a class="markdownIt-Anchor" href="#프로젝트-생성"></a> 프로젝트 생성</h3><p>Gatsby CLI를 사용하여 프로젝트를 만듭니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init gatsby</span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gatsby new</span><br></pre></td></tr></table></figure><p>위의 명령어를 실행하면 프로젝트 생성을 위한 여러가지 입력하는 부분이 있습니다. 순서대로 입력하면 프로젝트가 생성됩니다.</p><ol><li>프로젝트 명을 입력합니다.</li><li>디렉토리를 확인합니다.</li><li>JavaScript 쓸 건지 TypeScript 쓸 건지 선택합니다.</li><li>사용할 CMS를 선택합니다. 사용하지 않을 경우 No를 선택합니다.</li><li>사용할 styling system(Sass, Emotion, styled-components 등…)을 선택합니다.</li><li>구글 애널리틱스, 반응형 이미지나 사이트맵 등을 추가할 것인지 묻습니다. 없다면 Done을 선택합니다.</li></ol><p>CMS 는 비개발자인 사람들이 콘텐츠를 계속 올리는 웹사이트 혹은 앱입니다.</p><h3 id="실행"><a class="markdownIt-Anchor" href="#실행"></a> 실행</h3><p>다음 명령어를 실행합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> my-gatsby-site/</span><br><span class="line">$ npm run develop</span><br></pre></td></tr></table></figure><p>완료가 되면 사이트를 접속해서 확인합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">You can now view dev-stickers <span class="keyword">in</span> the browser.</span><br><span class="line"></span><br><span class="line">  http://localhost:8000/</span><br></pre></td></tr></table></figure><h3 id="빌드"><a class="markdownIt-Anchor" href="#빌드"></a> 빌드</h3><p>빌드를 진행하면 축소된 파일, 변환된 이미지, 페이지별 정보와 데이터가 있는 JSON 파일, 페이지별 정적 HTML 등이 모두 포함됩니다.</p><p>최적화가 잘되어 있어 빠르게 로드되는 정적 웹사이트를 배포할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>개츠비 설치와 기본적인 사용 방법에 대해서 정리하였습니다. 나만의 블로그를 만들고 싶을 때 사용하면 좋을 것 같습니다.</p><h2 id="gatsby-plugin-library"><a class="markdownIt-Anchor" href="#gatsby-plugin-library"></a> Gatsby Plugin Library</h2><p>Gatsby 사이트나 앱을 커스텀할 수 있는 기능을 제공하는 라이브러리들입니다.</p><ul><li><a href="https://www.gatsbyjs.com/plugins" target="_blank" rel="noopener">https://www.gatsbyjs.com/plugins</a></li></ul><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.gatsbyjs.com/docs/?utm_source=starter&amp;utm_medium=readme&amp;utm_campaign=minimal-starter-ts" target="_blank" rel="noopener">Documentation</a></li><li><a href="https://www.gatsbyjs.com/tutorial/?utm_source=starter&amp;utm_medium=readme&amp;utm_campaign=minimal-starter-ts" target="_blank" rel="noopener">Tutorials</a></li><li><a href="https://www.gatsbyjs.com/tutorial/?utm_source=starter&amp;utm_medium=readme&amp;utm_campaign=minimal-starter-ts" target="_blank" rel="noopener">Guides</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/29/react-12/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Spring Boot] MultipartFile transferTo() 사용 파일 저장시 주의사항</title>
      <link>http://hgko1207.github.io/2022/12/29/spring-4/</link>
      <guid>http://hgko1207.github.io/2022/12/29/spring-4/</guid>
      <pubDate>Thu, 29 Dec 2022 04:50:03 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;multipart-기본-경로&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#multipart-기본-경로&quot;&gt;&lt;/a&gt; multipart 기본 경로&lt;/h2&gt;
&lt;p&gt;Spring Boot 설정에서 &lt;code&gt;spring.ser
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="multipart-기본-경로"><a class="markdownIt-Anchor" href="#multipart-기본-경로"></a> multipart 기본 경로</h2><p>Spring Boot 설정에서 <code>spring.servlet.multipart.location</code>를 특정 경로로 설정하지 않을 경우 기본적으로 tmp 폴더로 지정됩니다.</p><p><strong>각 운영체제 tmp 경로</strong></p><ul><li><strong>Windows</strong>: C:\User\사용자\AppData\Local\Temp</li><li><strong>Linux</strong>: \tmp</li></ul><p><strong>각 운영체제 basedir 경로</strong></p><ul><li><strong>Windows</strong>: C:\User\사용자\AppData\Local\Temp\tomcat.xxxxxx.8080\work\Tomcat\localhost\ROOT</li><li><strong>Linux</strong>: \tmp\tomcat.xxxxxx.8080\work\Tomcat\localhost\ROOT</li></ul><p>위와 같이 눈으로 보기에도 많이 지저분한 경로에 저장이 되므로 작업과 관리가 용이하도록 경로를 직접 설정해주는 것이 좋습니다.</p><h2 id="주의사항"><a class="markdownIt-Anchor" href="#주의사항"></a> 주의사항</h2><p>경로 설정시 주의사항은 파일 저장 경로를 /upload 로 할 경우 리눅스는 절대경로로 인식하여 /upload 로 인식하지만 윈도우는 상대경로로 인식하여 basedir 을 포함한 경로를 만듭니다.</p><p>결과는 C:\User\사용자\AppData\Local\Temp\tomcat.xxxxxx.8080\work\Tomcat\localhost\ROOT\upload 입니다.</p><p>만약 C:/upload 에 저장하고 싶다면 /upload 가 아닌 C:/upload 로 상세하게 입력해야 합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.servlet.multipart.location=C:/upload</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/29/spring-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Spring Boot] MultipartFile + Modal 사용 파일 업로드</title>
      <link>http://hgko1207.github.io/2022/12/26/spring-3/</link>
      <guid>http://hgko1207.github.io/2022/12/26/spring-3/</guid>
      <pubDate>Mon, 26 Dec 2022 14:01:16 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Spring Boot에서 &lt;strong&gt;MultipartFile&lt;/strong&gt;와 Bootstrap의 &lt;strong&gt;Modal&lt;/strong&gt;을 사용하여 이미지 파일을 업로드하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;Spring Boot 2.
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Spring Boot에서 <strong>MultipartFile</strong>와 Bootstrap의 <strong>Modal</strong>을 사용하여 이미지 파일을 업로드하는 방법에 대해 알아보겠습니다.</p><p>Spring Boot 2.6.11 버전과 Bootstrap 5를 사용하였습니다.</p><h2 id="multipartfile"><a class="markdownIt-Anchor" href="#multipartfile"></a> MultipartFile</h2><p><strong>MultipartFile</strong>이란 스프링에서 업로드한 파일을 표현할 때 사용되는 인터페이스입니다. 파일 내용은 메모리에 저장되거나 임시로 디스크에 저장됩니다. 요청 처리가 끝나면 임시 저장소는 지워집니다.</p><h2 id="설정"><a class="markdownIt-Anchor" href="#설정"></a> 설정</h2><p>Spring Boot <code>application.properties</code> 설정 파일에 파일 업로드 경로와 파일 사이즈를 설정합니다. 윈도우 기준으로 <strong>d:/upload/</strong> 경로로 파일을 업로드합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 지도 파일 업로드 경로</span></span><br><span class="line">spring.servlet.multipart.location=d:/upload/</span><br><span class="line"></span><br><span class="line">spring.servlet.multipart.max-file-size=512MB</span><br><span class="line">spring.servlet.multipart.max-request-size=512MB</span><br></pre></td></tr></table></figure><ul><li>spring.servlet.multipart.location: 업로드된 파일의 임시 저장 공간</li><li>spring.servlet.multipart.max-file-size: 파일의 최대 사이즈 (default: 1MB)</li><li>spring.servlet.multipart.max-request-size: 요청의 최대 사이즈 (default: 10MB)</li></ul><h2 id="html"><a class="markdownIt-Anchor" href="#html"></a> html</h2><p>CDN을 통해 Bootstrap CSS와 JS를 포함합니다. 파일 업로드하는 모달 팝업 코드를 작성합니다.</p><p>파일 업로드 시 form 태그에 <code>enctype=&quot;multipart/form-data&quot;</code>를 추가하고 input 태그 타입을 <code>file</code>로 작성해야 합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>파일 업로드 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">"sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">"sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-bs-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-bs-target</span>=<span class="string">"#uploadModal"</span>&gt;</span></span><br><span class="line">      파일 업로드</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Modal --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"uploadModal"</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header bg-primary text-white border-0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"modal-title"</span>&gt;</span>지도 등록<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn-close"</span> <span class="attr">data-bs-dismiss</span>=<span class="string">"modal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">form</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">"uploadForm"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">method</span>=<span class="string">"POST"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">action</span>=<span class="string">"/file/upload"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"form-horizontal"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group row mb-2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-form-label col-md-3"</span>&gt;</span>파일 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-muted"</span>&gt;</span> ※ 이미지 파일만 업로드 가능합니다. <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary me-2"</span>&gt;</span>등록<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-light"</span> <span class="attr">data-bs-dismiss</span>=<span class="string">"modal"</span>&gt;</span>닫기<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /Modal --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h2><p>Modal와 Form을 제어하는 JavaScript 코드를 추가합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modal 닫기</span></span><br><span class="line"><span class="keyword">const</span> modalHide = <span class="function">(<span class="params">modalId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> modalEl = <span class="built_in">document</span>.getElementById(modalId);</span><br><span class="line">  <span class="keyword">const</span> modal = bootstrap.Modal.getInstance(modalEl);</span><br><span class="line">  modal.hide();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#uploadForm'</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">const</span> form = $(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">const</span> url = form.attr(<span class="string">'action'</span>);</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData($(<span class="string">'#uploadForm'</span>)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    type: <span class="string">'POST'</span>,</span><br><span class="line">    data: formData,</span><br><span class="line">    processData: <span class="literal">false</span>,</span><br><span class="line">    contentType: <span class="literal">false</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">      modalHide(<span class="string">'uploadModal'</span>);</span><br><span class="line">      alert(<span class="string">'파일 업로드 성공'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">'파일 업로드 실패'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><p>Controller 파일을 생성합니다. 파일을 입력받고 저장하는 코드를 작성합니다.<br />MultipartFile의 <code>transferTo()</code> 함수를 사용하여 파일을 저장합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"file/upload"</span>)</span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> ResponseEntity&lt;?&gt; upload(MultipartFile file) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">      writeFile(file);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.BAD_REQUEST);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 파일 저장</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(MultipartFile multipartFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">    multipartFile.transferTo(file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>파일을 업로드하는 코드를 작성해봤습니다. 파일 업로드에 대한 간략한 코드이므로 응용해서 사용할 수 있을 것 같습니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://getbootstrap.com/docs/5.0/components/modal/" target="_blank" rel="noopener">https://getbootstrap.com/docs/5.0/components/modal/</a></li><li><a href="https://www.baeldung.com/spring-multipartfile-to-file" target="_blank" rel="noopener">https://www.baeldung.com/spring-multipartfile-to-file</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/26/spring-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[리눅스] mount --bind 사용 방법</title>
      <link>http://hgko1207.github.io/2022/12/16/linux-28/</link>
      <guid>http://hgko1207.github.io/2022/12/16/linux-28/</guid>
      <pubDate>Fri, 16 Dec 2022 01:00:04 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;mount&lt;/strong&gt; 명령어는 디스크 드라이브와 같은 블록 디바이스(Block Device)만 마운트가 가능합니다. &lt;code&gt;--bind&lt;/code&gt; 옵션을 추가하면 특정 디렉토리를 다른 디렉토리에 마운트(mount)해서 양
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>mount</strong> 명령어는 디스크 드라이브와 같은 블록 디바이스(Block Device)만 마운트가 가능합니다. <code>--bind</code> 옵션을 추가하면 특정 디렉토리를 다른 디렉토리에 마운트(mount)해서 양쪽 디렉토리가 같은 곳으로 연결되도록 할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mount --<span class="built_in">bind</span> [원본 디렉토리] [붙일 디렉토리]</span></span><br></pre></td></tr></table></figure><h2 id="사용-예시"><a class="markdownIt-Anchor" href="#사용-예시"></a> 사용 예시</h2><p>먼저 두 개의 디렉토리를 생성합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir src</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir dest</span></span><br></pre></td></tr></table></figure><p><code>--bind</code> 또는 <code>-B</code> 옵션을 사용해서 <strong>src</strong> 디렉토리를 <strong>dest</strong> 디렉토리에 연결합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mount --<span class="built_in">bind</span> src dest</span></span><br></pre></td></tr></table></figure><p><strong>dest</strong> 디렉토리 하위에 파일을 생성을 하면 <strong>src</strong> 디렉토리에도 반영이 됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch dest/<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p>변경된 내용을 양쪽 모두 확인이 가능합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls dest</span></span><br><span class="line">test</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls src</span></span><br><span class="line">test</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/16/linux-28/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[리눅스] 네트워크 설정</title>
      <link>http://hgko1207.github.io/2022/12/14/linux-27/</link>
      <guid>http://hgko1207.github.io/2022/12/14/linux-27/</guid>
      <pubDate>Wed, 14 Dec 2022 02:41:21 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 &lt;strong&gt;ifconfig&lt;/strong&gt; 를 이용하여 네트워크 설정하는 방법을 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;ifconfig-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ifconfig-란&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 <strong>ifconfig</strong> 를 이용하여 네트워크 설정하는 방법을 알아보겠습니다.</p><h2 id="ifconfig-란"><a class="markdownIt-Anchor" href="#ifconfig-란"></a> ifconfig 란</h2><p>TCP/IP를 사용하여 네트워크의 네트워크 인터페이스 매개변수를 구성 또는 표시합니다.</p><p><strong>ifconfig</strong> 명령을 사용하여 네트워크 인터페이스에 주소를 지정하고 현재 네트워크 인터페이스 구성 정보를 구성 또는 표시할 수 있습니다.</p><h2 id="ip-주소-확인"><a class="markdownIt-Anchor" href="#ip-주소-확인"></a> IP 주소 확인</h2><p>옵션없이 ifconfig 명령어만 실행하면 서버에 할당된 IP 주소를 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ifconfig</span></span><br><span class="line">enp5s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.0.19  netmask 255.255.255.0  broadcast 192.168.0.255</span><br><span class="line">        inet6 fe80::d487:3f17:d845:654b  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 1c:1b:0d:7d:36:6f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 11943615  bytes 5682003196 (5.2 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 8140188  bytes 2132065829 (1.9 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>IPv4주소(inet), 서브넷마스트(netmask), 브로드캐스트주소(broadcast)가 표기되고 있고, MAC주소(ether)도 표시됩니다.</p><h2 id="네트워크-설정"><a class="markdownIt-Anchor" href="#네트워크-설정"></a> 네트워크 설정</h2><p>IP 주소, 서브넷마스크 주소, 브로드캐스트 주소를 모두 할당하려면 다음과 같이 모든 인수와 함께 ifconfig 명령을 사용하면 됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ifconfig [이더넷명] [주소] netmask [주소] broadcast [주소]</span></span><br></pre></td></tr></table></figure><p>추가로 <code>up</code> 옵션을 추가하여 이더넷을 활성화합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ifconfig [이더넷명] up</span></span><br></pre></td></tr></table></figure><p>다음 예제는 eth0 에 IP 주소를 192.168.0.250, 서브넷마스크 주소를 255.255.255.0, 브로드캐스트 주소를 192.168.0.255 설정하고 활성화하는 명령어입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ifconfig eth0 192.168.0.250 netmask 255.255.255.0 broadcast 192.168.0.255 up</span></span><br></pre></td></tr></table></figure><p>위의 방법으로 설정을 하면 물리적으로 변경된 것이 아니라 시스템 메모리상에서 로딩된 리눅스 커널이 사용하고 있는 랜카드 드라이브의 네트워크 설정이 바뀌는 것입니다.<br />따라서 시스템을 재부팅하고 나면 설정이 사라집니다.</p><h2 id="고정-네트워크-설정"><a class="markdownIt-Anchor" href="#고정-네트워크-설정"></a> 고정 네트워크 설정</h2><p>IP 주소를 고정하기 위해 설정을 해야 합니다.</p><h3 id="etcsysconfignetwork"><a class="markdownIt-Anchor" href="#etcsysconfignetwork"></a> /etc/sysconfig/network</h3><p>시스템 전체에 대한 Global 한 기본 게이트웨이 주소 설정과 호스트네임, 네트워킹 연결 허용 여부를 설정합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/sysconfig/network</span></span><br><span class="line"></span><br><span class="line">NETWORKING=yes</span><br><span class="line">NETWORKING_IPV6=no</span><br><span class="line">HOSTNAME=hgko.com</span><br><span class="line">GATEWAY=192.168.0.1</span><br></pre></td></tr></table></figure><h3 id="etcresolvconf"><a class="markdownIt-Anchor" href="#etcresolvconf"></a> /etc/resolv.conf</h3><p>네임서버 설정과 기본적으로 사용할 도메인명을 설정합니다. 호스트명만 지정하였을 경우에 호스트명을 search 항목에 지정하여 도메인명으로 사용합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/resolv.conf</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">search hgko.com</span><br><span class="line">nameserver 168.126.63.1</span><br><span class="line">nameserver 168.126.63.2</span><br></pre></td></tr></table></figure><h3 id="etcsysconfignetwork-script"><a class="markdownIt-Anchor" href="#etcsysconfignetwork-script"></a> /etc/sysconfig/network-script/</h3><p>시스템에서 사용하는 모든 이더넷 설정파일은 <code>/etc/sysconfig/network-script/</code> 디렉토리에 존재합니다. 시스템에 설치되어 있는 기본 이더넷카드의 파일을 열고 고정 IP 부여를 위해 수정합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/sysconfig/network-script/ifcfg-eth0</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 장치명, 첫번째 이더넷카드</span></span><br><span class="line">DEVICE=eth0</span><br><span class="line"><span class="comment"># IP 부여 방식 결정, static 은 고정IP</span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line"><span class="comment"># 이더넷카드의 MAC 주소</span></span><br><span class="line">HWADDR=XX:XX:XX:XX:XX:XX</span><br><span class="line"><span class="comment"># 고유ID를 부여하는 것으로 자동으로 부여됨</span></span><br><span class="line">UUID=XXXXXXX-XXX-XXX-XXX-XXXXXXX</span><br><span class="line"><span class="comment"># Ethernet 에 대한 설정</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line"><span class="comment"># IP 주소 지정</span></span><br><span class="line">IPADDR=192.168.0.250</span><br><span class="line"><span class="comment"># 서브넷마스크 지정</span></span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"><span class="comment"># 브로드캐스트 지정</span></span><br><span class="line">BROADCAST=192.168.0.255</span><br><span class="line"><span class="comment"># 네트워크  지정</span></span><br><span class="line">NETWORK=192.168.0.0</span><br><span class="line"><span class="comment"># 일반사용자의 eth0 제어 가능여부</span></span><br><span class="line">USERCTL=no</span><br><span class="line"><span class="comment"># IPV6 사용여부</span></span><br><span class="line">IPV6INIT=no</span><br><span class="line"><span class="comment"># 시스템 시작시 자동으로 활성화</span></span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure><h3 id="설정-적용"><a class="markdownIt-Anchor" href="#설정-적용"></a> 설정 적용</h3><p>시스템을 재부팅하거나 재부팅 하지 않고 변경사항을 적용하는 명령어를 실행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /etc/rc.d/init.d/network restart</span></span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> service network restart</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.ibm.com/docs/ko/aix/7.2?topic=i-ifconfig-command" target="_blank" rel="noopener">https://www.ibm.com/docs/ko/aix/7.2?topic=i-ifconfig-command</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/14/linux-27/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] netstat 사용 포트 확인</title>
      <link>http://hgko1207.github.io/2022/12/14/linux-26/</link>
      <guid>http://hgko1207.github.io/2022/12/14/linux-26/</guid>
      <pubDate>Wed, 14 Dec 2022 01:35:12 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 &lt;strong&gt;netstat&lt;/strong&gt; 명령어를 사용하여 네트워크 정보를 확인하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;netstat-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nets
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 <strong>netstat</strong> 명령어를 사용하여 네트워크 정보를 확인하는 방법에 대해 알아보겠습니다.</p><h2 id="netstat-란"><a class="markdownIt-Anchor" href="#netstat-란"></a> netstat 란</h2><blockquote><p>netstat는 전송 제어 프로토콜, 라우팅 테이블, 수많은 네트워크 인터페이스, 네트워크 프로토콜 통계를 위한 네트워크 연결을 보여주는 명령 줄 도구이다. <a href="https://ko.wikipedia.org/wiki/Netstat" target="_blank" rel="noopener">위키백과</a></p></blockquote><p><strong>netstat</strong> 는 네트워크 관련한 정보를 보는 유틸리티로 오래전부터 Unix 계열의 운영체제에서 사용되어 왔으며 현재 LISTEN 중인 포트, 모든 내외부/연결 정보등을 확인할 수 있습니다.</p><h2 id="자주-사용하는-netstat-옵션"><a class="markdownIt-Anchor" href="#자주-사용하는-netstat-옵션"></a> 자주 사용하는 netstat 옵션</h2><ul><li><strong>-a</strong> : 모든 소켓보기, 이 옵션이 없으면 상태가 ESTABLISHED 인 것만 나옵니다. --all 옵션과 동일합니다.</li><li><strong>-n</strong> : 도메인 주소를 읽어들이지 않고 숫자로 출력합니다.</li><li><strong>-p</strong> : PID(프로세스 ID) 와 사용 중인 프로그램명이 출력됩니다.</li></ul><h2 id="netstat-옵션"><a class="markdownIt-Anchor" href="#netstat-옵션"></a> netstat 옵션</h2><ul><li><strong>-c</strong> : 현재 실행 명령을 매 초마다 실행</li><li><strong>-l</strong> : listen 하고 있는 포트만 보여줌</li><li><strong>-i</strong> : 내트워크 트래픽정보 모니터링</li><li><strong>-t</strong> : tcp 로 연결된 내용 출력</li><li><strong>-u</strong> : udp 로 연결된 내용 출력</li><li><strong>-r</strong> : 라우팅 테이블을 출력</li><li><strong>-s</strong> : 프로토콜별 통계 정보</li></ul><h2 id="netstat-state"><a class="markdownIt-Anchor" href="#netstat-state"></a> netstat State</h2><ul><li><strong>LISTEN</strong> : 서버에 프로세스가 실행되어있으며 클라이언트의 접속 요청을 기다리는 상태</li><li><strong>ESTABLISED</strong> : 서버와 클라이언트간에 세션 연결이 성립되어 통신이 이루어지는 상태</li><li><strong>CLOSE_WAIT</strong> : TCP 연결이 상위 레벨로부터 연결 종료를 기다리는 상태</li><li><strong>TIME_WAIT</strong> : 연결은 종료 되었지만 특정시간동안 소켓을 열어놓은 상태</li><li><strong>CLOSE</strong> : 연결이 종료된 상태</li></ul><h2 id="모든-소켓-확인"><a class="markdownIt-Anchor" href="#모든-소켓-확인"></a> 모든 소켓 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -a</span></span><br><span class="line"></span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State</span><br><span class="line">tcp        0      0 0.0.0.0:sunrpc          0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 0.0.0.0:wap-wsp         0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 0.0.0.0:vrace           0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 localhost.locald:domain 0.0.0.0:*               LISTEN</span><br><span class="line">...</span><br><span class="line">Active UNIX domain sockets (servers and established)</span><br><span class="line">Proto RefCnt Flags       Type       State         I-Node   Path</span><br><span class="line">unix  2      [ ]         DGRAM                    41808    @000f7</span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     46336    @/tmp/.ICE-unix/2446</span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     40451    /var/run/docker/metrics.sock</span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     42868    @/tmp/dbus-i51dyYJlx0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="tcp-포트-목록"><a class="markdownIt-Anchor" href="#tcp-포트-목록"></a> TCP 포트 목록</h2><p>특정 문자열이 포함된 포트를 확인할 수 있습니다. 다음의 예시는 <code>0 0.0.0.0</code> 또는 <code>0 :::</code> 문자열이 포함된 TCP 포트 목록을 출력하는 명령어입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -nlpt | egrep <span class="string">"0 (0.0.0.0|:::)"</span></span></span><br><span class="line">or</span><br><span class="line"><span class="meta">$</span><span class="bash"> netstat -anp | grep ^tcp | egrep <span class="string">"0 (0.0.0.0|:::)"</span></span></span><br><span class="line"></span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      951/sshd</span><br><span class="line">tcp        0      0 :::22                   :::*                    LISTEN      951/sshd</span><br><span class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      6959/java</span><br><span class="line">tcp6       0      0 :::8009                 :::*                    LISTEN      6959/java</span><br><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      2025/mariadbd</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="포트-프로세스-목록"><a class="markdownIt-Anchor" href="#포트-프로세스-목록"></a> 포트 &amp; 프로세스 목록</h2><p>LISTEN 중인 포트 및 프로세스명만 확인하려면 다음과 같은 명령을 사용합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -anp | grep <span class="string">"LISTEN "</span> | grep -v 127.0.0.1 | sed <span class="string">'s/:::/0 /g'</span> | sed <span class="string">'s/[:\/]/ /g'</span> | awk <span class="string">'&#123;print $5"\t"$10&#125;'</span> | sort -ug</span></span><br><span class="line"></span><br><span class="line">22      sshd</span><br><span class="line">8009    java</span><br><span class="line">8080    java</span><br><span class="line">3306    mysqld</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/14/linux-26/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] PM2 서비스 등록</title>
      <link>http://hgko1207.github.io/2022/12/09/linux-25/</link>
      <guid>http://hgko1207.github.io/2022/12/09/linux-25/</guid>
      <pubDate>Fri, 09 Dec 2022 08:23:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 PM2 서비스 등록하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PM2&lt;/strong&gt; 에서는 시스템이 부팅되고 나서 자동으로 실행되도록 하는 서비스를 등록해주는 &lt;code&gt;startup&lt;/code&gt; 명령어가 있습니
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 PM2 서비스 등록하는 방법에 대해 알아보겠습니다.</p><p><strong>PM2</strong> 에서는 시스템이 부팅되고 나서 자동으로 실행되도록 하는 서비스를 등록해주는 <code>startup</code> 명령어가 있습니다.</p><h2 id="pm2-등록"><a class="markdownIt-Anchor" href="#pm2-등록"></a> pm2 등록</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pm2 start [파일명] --name <span class="built_in">test</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 list</span></span><br></pre></td></tr></table></figure><h2 id="서비스-등록"><a class="markdownIt-Anchor" href="#서비스-등록"></a> 서비스 등록</h2><p><code>pm2 startup</code> 명령어를 사용하여 PM2 서비스를 등록합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pm2 startup</span></span><br><span class="line">[PM2] Init System found: systemd</span><br><span class="line">Platform systemd</span><br><span class="line">Template</span><br><span class="line">[Unit]</span><br><span class="line">Description=PM2 process manager</span><br><span class="line">Documentation=https://pm2.keymetrics.io/</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">User=root</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">Environment=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin</span><br><span class="line">Environment=PM2_HOME=/root/.pm2</span><br><span class="line">PIDFile=/root/.pm2/pm2.pid</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/lib/node_modules/pm2/bin/pm2 resurrect</span><br><span class="line">ExecReload=/usr/lib/node_modules/pm2/bin/pm2 reload all</span><br><span class="line">ExecStop=/usr/lib/node_modules/pm2/bin/pm2 kill</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">Target path</span><br><span class="line">/etc/systemd/system/pm2-root.service</span><br><span class="line">Command list</span><br><span class="line">[ 'systemctl enable pm2-root' ]</span><br><span class="line">[PM2] Writing init configuration in /etc/systemd/system/pm2-root.service</span><br><span class="line">[PM2] Making script booting at startup...</span><br><span class="line">[PM2] [-] Executing: systemctl enable pm2-root...</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/pm2-root.service to /etc/systemd/system/pm2-root.service.</span><br><span class="line">[PM2] [v] Command successfully executed.</span><br><span class="line">+---------------------------------------+</span><br><span class="line">[PM2] Freeze a process list on reboot via:</span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 save</span></span><br><span class="line"></span><br><span class="line">[PM2] Remove init script via:</span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 unstartup systemd</span></span><br></pre></td></tr></table></figure><p><code>pm2 save</code> 명령어를 통해 재부팅 시 프로세스 목록을 고정시킵니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pm2 save</span></span><br><span class="line">[PM2] Saving current process list...</span><br><span class="line">[PM2] Successfully saved in /root/.pm2/dump.pm2</span><br></pre></td></tr></table></figure><p>PM2 서비스를 시작합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start pm2-root.service</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status pm2-root.service</span></span><br><span class="line">● pm2-root.service - PM2 process manager</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/pm2-root.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 금 2022-12-09 17:14:27 KST; 5min ago</span><br><span class="line">     Docs: https://pm2.keymetrics.io/</span><br><span class="line">  Process: 18456 ExecStart=/usr/lib/node_modules/pm2/bin/pm2 resurrect (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 13515 (PM2 v5.2.0: God)</span><br><span class="line">    Tasks: 0</span><br><span class="line">   Memory: 0B</span><br><span class="line">   CGroup: /system.slice/pm2-root.service</span><br><span class="line">           ‣ 13515 PM2 v5.2.0: God Daemon (/root/.pm2)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>시스템 재부팅 후 서비스를 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo reboot</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pm2 list</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/09/linux-25/#disqus_thread</comments>
    </item>
    
    <item>
      <title>메타마스크(MetaMask) 설치 및 사용 방법</title>
      <link>http://hgko1207.github.io/2022/12/09/blockchain-2/</link>
      <guid>http://hgko1207.github.io/2022/12/09/blockchain-2/</guid>
      <pubDate>Fri, 09 Dec 2022 03:59:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;메타마스크&lt;/strong&gt; 설치 및 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h1 id=&quot;메타마스크metamask-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#메타마스크metamask-란&quot;&gt;&lt;/a&gt; 메타마
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>메타마스크</strong> 설치 및 사용 방법에 대해 알아보겠습니다.</p><h1 id="메타마스크metamask-란"><a class="markdownIt-Anchor" href="#메타마스크metamask-란"></a> 메타마스크(MetaMask) 란</h1><blockquote><p>Ethereum 블록 체인과 상호 작용하는 데 사용되는 소프트웨어 암호 화폐 지갑입니다. 이를 통해 사용자는 브라우저 확장 프로그램이나 모바일 앱을 통해 이더리움 지갑에 액세스할 수 있으며, 이를 통해 분산 애플리케이션과 상호 작용할 수 있습니다. <a href="https://en.wikipedia.org/wiki/MetaMask" target="_blank" rel="noopener">위키백과</a></p></blockquote><p>이더리움 지갑 중 메타마스크는 커뮤니티에서 사용죄는 가장 인기 있는 지갑 중 하나입니다.</p><h1 id="설치-및-사용-방법"><a class="markdownIt-Anchor" href="#설치-및-사용-방법"></a> 설치 및 사용 방법</h1><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p><a href="https://metamask.io/" target="_blank" rel="noopener">메타마스크 웹사이트</a>에서 크롬 플러그인으로 설치 할 수 있습니다. 사이트로 접속하여 Download 버튼을 클릭합니다.</p><p><img src="/images/blockchain/metamask/1.png" alt="" /></p><p>크롬 웹 스토어 창이 열리게 되고 “Chrome에 추가” 버튼을 클릭합니다. 크롬 확장프로그램에 MetaMask가 추가됩니다.</p><p><img src="/images/blockchain/metamask/2.png" alt="" /></p><h2 id="mnemonic-복구"><a class="markdownIt-Anchor" href="#mnemonic-복구"></a> Mnemonic 복구</h2><p>크롬 확장프로그램에서 MetaMask를 선택하고 “시작하기” 버튼을 클릭합니다.</p><p><img src="/images/blockchain/metamask/3.png" alt="" /></p><p>처음 사용하는 사용자라면 비밀 복구 구문을 사용하여 기존 지갑 가져오기와 새 지갑과 비밀 복구 구문 생성을 선택하는 화면이 보입니다.</p><p>지갑 생성을 해서 MetaMask를 사용할 수 있지만 이전 글 <a href="https://hgko1207.github.io/2022/12/07/blockchain-1/">[Ethereum] ganache-cli 설치 및 실행</a>에서 생성된 Mnemonic을 사용하여 지갑을 가져오도록 하겠습니다.</p><p><img src="/images/blockchain/metamask/4.png" alt="" /></p><p>&quot;지갑 가져오기&quot;를 클릭하면 비밀 복구 구문으로 계정 가져오기 화면이 보입니다. 생성된 Mnemonic과 비밀번호를 입력하고 “가져오기” 버튼을 클릭합니다.</p><p><img src="/images/blockchain/metamask/5.png" alt="" /></p><p><img src="/images/blockchain/metamask/6.png" alt="" /></p><p>메타마스크 접속 시 화면입니다.</p><p><img src="/images/blockchain/metamask/7.png" alt="" /></p><h2 id="네트워크-추가"><a class="markdownIt-Anchor" href="#네트워크-추가"></a> 네트워크 추가</h2><p>ganache로 실행한 네트워크를 연결하기 위해 메타마스크에서 네트워크 추가를 합니다.</p><p>메타마스크 화면에서 우측 네트워크를 클릭하고 “네트워크 추가” 버튼을 클릭합니다.</p><p><img src="/images/blockchain/metamask/8.png" alt="" /></p><p>설정화면에서 &quot;네트워크 수동 추가&quot;를 클릭합니다.</p><p><img src="/images/blockchain/metamask/9.png" alt="" /></p><p>네트워크 이름, 새 RPC URL(ip 주소와 포트), 체인 ID(url을 입력하면 자동으로 찾아줌), 통화 기호를 입력하고 “저장” 버튼을 클릭합니다.</p><p><img src="/images/blockchain/metamask/10.png" alt="" /></p><p>추가된 네트워크가 보이며 선택 시 계정 정보가 보입니다.</p><p><img src="/images/blockchain/metamask/11.png" alt="" /></p><h1 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h1><p>메타마스크 설치와 사용 방법에 대해 알아보았습니다. 이더리움 지갑에 쉽게 액세스할 수 있어 블록체인 기반 웹이나 앱개발 시 도움이 많이 됩니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/09/blockchain-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Spring Boot] WebSocket &amp; STOMP 사용 방법</title>
      <link>http://hgko1207.github.io/2022/12/09/spring-2/</link>
      <guid>http://hgko1207.github.io/2022/12/09/spring-2/</guid>
      <pubDate>Fri, 09 Dec 2022 00:58:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;websocket-이란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#websocket-이란&quot;&gt;&lt;/a&gt; WebSocket 이란&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;웹소켓(WebSocket)은 하나의 TCP 접속에 전
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="websocket-이란"><a class="markdownIt-Anchor" href="#websocket-이란"></a> WebSocket 이란</h2><blockquote><p>웹소켓(WebSocket)은 하나의 TCP 접속에 전이중 통신 채널을 제공하는 컴퓨터 통신 프로토콜이다. 웹소켓 프로토콜은 2011년 IETF에 의해 RFC 6455로 표준화되었으며 웹 IDL의 웹소켓 API는 W3C에 의해 표준화되고 있다. <a href="https://ko.wikipedia.org/wiki/%EC%9B%B9%EC%86%8C%EC%BC%93" target="_blank" rel="noopener">위키백과</a></p></blockquote><p>HTTP 프로토콜과 호환되며, 실시간 양방향 통신을 제공하기 위한 프로토콜이며 Spring 4.0에서 등장한 네트워크 서비스입니다. (접속까지는 HTTP 프로토콜을 사용하지만 이후 WebSocket 프로토콜로 변경)</p><h2 id="spring-boot-로-구현하기"><a class="markdownIt-Anchor" href="#spring-boot-로-구현하기"></a> Spring Boot 로 구현하기</h2><p><strong>Spring Boot</strong>에서 WebSocket과 자바스크립트에서 STOMP을 사용하여 메세지를 주고 받는 예제를 구현해 보려고 합니다.</p><h3 id="의존성-추가"><a class="markdownIt-Anchor" href="#의존성-추가"></a> 의존성 추가</h3><p>pom.xml에 <code>spring-boot-starter-websocket</code>를 추가합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 웹소켓 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="websocketconfig-설정"><a class="markdownIt-Anchor" href="#websocketconfig-설정"></a> WebSocketConfig 설정</h3><p>웹 소켓을 사용하기 위한 설정 파일이 필요합니다.</p><ul><li><code>@Configuration</code>을 통해 해당 파일이 Bean 설정을 할 것을 나타냅니다.</li><li><code>@EnableWebSocketMessageBroker</code> 을 통해 WebSocket 사용을 나타냅니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 클라이언트가 웹 소켓 서버에 연결하는데 사용할 웹 소켓 엔드포인트 등록</span></span><br><span class="line"><span class="comment"> * withSockJS 를 통해 웹 소켓을 지원하지 않는 브라우저에 대해 웹 소켓을 대체한다.</span></span><br><span class="line"><span class="comment"> * +)메소드명에 STOMP가 들어가는 경우 통신 프로토콜인 STOMP구현에서 작동된다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</span><br><span class="line">registry.addEndpoint(<span class="string">"/websocket"</span>).setAllowedOriginPatterns(<span class="string">"*"</span>).withSockJS();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 한 클라이언트에서 다른 클라이언트로 메시지를 라우팅하는데 사용될 메시지 브로커</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">// topic으로 시작되는 요청을 구독한 모든 사용자들에게 메시지를 전달한다.</span></span><br><span class="line">registry.enableSimpleBroker(<span class="string">"/topic"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클라이언트에서 보낸 메세지를 받을 prefix</span></span><br><span class="line">registry.setApplicationDestinationPrefixes(<span class="string">"/app"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="messagedto-생성"><a class="markdownIt-Anchor" href="#messagedto-생성"></a> MessageDTO 생성</h3><p>메세지 내용을 담아줄 MessageDTO를 생성합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String sender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="messagecontroller-생성"><a class="markdownIt-Anchor" href="#messagecontroller-생성"></a> MessageController 생성</h3><p><strong>/app/sendMessage</strong> 경로를 통해 전송되면 <code>@MessageMapping</code> 과 매핑되어 메서드를 호출합니다. 그리고 <code>@SendTo</code> 를 통해 <strong>/topic/message</strong> 를 구독하고 있는 사용자에게 MessageDTO 를 JSON 형식으로 전달합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /message/sendMessage로 요청이 들어오면 해당 메소드로 처리된다.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MessageMapping</span>(<span class="string">"/sendMessage"</span>)</span><br><span class="line"><span class="meta">@SendTo</span>(<span class="string">"/topic/message"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageDTO <span class="title">message</span><span class="params">(MessageDTO message)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"메세지 도착 :"</span> + message);</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@SendTo</code> Annotation이 아닌 <code>SimpMessagingTemplate</code>을 사용해서 메세지를 전달할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SimpMessagingTemplate simpMessagingTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /message/sendMessage로 요청이 들어오면 해당 메소드로 처리된다.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MessageMapping</span>(<span class="string">"/sendMessage"</span>)</span><br><span class="line"><span class="meta">@SendTo</span>(<span class="string">"/topic/message"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">(MessageDTO message)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"메세지 도착 :"</span> + message);</span><br><span class="line">simpMessagingTemplate.convertAndSend(<span class="string">"/topic/message"</span>, message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="stomp-사용"><a class="markdownIt-Anchor" href="#stomp-사용"></a> STOMP 사용</h2><p><strong>STOMP</strong>는 Simple Text Oriented Messaging Protocol의 약자입니다. 클라이언트와 서버가 서로 통신하는 데 있어 메시지의 형식, 유형, 내용 등을 정의해주는 프로토콜이라고 할 수 있습니다. STOMP를 사용하게 되면 단순한 Binary, Text가 아닌 규격을 갖춘 메시지를 보낼 수 있습니다.</p><h3 id="라이브러리-추가"><a class="markdownIt-Anchor" href="#라이브러리-추가"></a> 라이브러리 추가</h3><p>sockjs와 stomp 라이브러리를 추가합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sock js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.2/sockjs.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- STOMP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="메세지-받기"><a class="markdownIt-Anchor" href="#메세지-받기"></a> 메세지 받기</h3><p>클라이언트에서는 다음과 같이 연결하고 구독을 합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subscribeMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> socket = <span class="keyword">new</span> SockJS(<span class="string">'/websocket'</span>);</span><br><span class="line">  <span class="keyword">let</span> stompClient = Stomp.over(socket);</span><br><span class="line"></span><br><span class="line">  stompClient.connect(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    stompClient.subscribe(<span class="string">'/topic/message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(message.body);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="메세지-전송"><a class="markdownIt-Anchor" href="#메세지-전송"></a> 메세지 전송</h3><p>메세지 전송 시 실행되는 함수입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> socket = <span class="keyword">new</span> SockJS(<span class="string">'/websocket'</span>);</span><br><span class="line">  <span class="keyword">const</span> stompClient = Stomp.over(socket);</span><br><span class="line"></span><br><span class="line">  stompClient.connect(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> message = &#123;</span><br><span class="line">      content: <span class="string">'test'</span>,</span><br><span class="line">      sender: <span class="string">'hgko'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    stompClient.send(<span class="string">'/app/sendMessage'</span>, &#123;&#125;, <span class="built_in">JSON</span>.stringify(message));</span><br><span class="line">    stompClient.disconnect();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h2><p>Spring Boot 환경에서 WebSocket과 STOMP를 활용한 메시지 전송 기능 구현에 대해 알아보았습니다.</p><p>쉽게 구현할 수 있어 적용이 빠를 것 같습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/09/spring-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[OpenLayers] Feature Drag and Drop</title>
      <link>http://hgko1207.github.io/2022/12/08/js-dev-8/</link>
      <guid>http://hgko1207.github.io/2022/12/08/js-dev-8/</guid>
      <pubDate>Wed, 07 Dec 2022 15:29:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;이전 글 &lt;a href=&quot;https://hgko1207.github.io/2022/12/08/js-dev-7/&quot;&gt;[OpenLayers] Custom Icon Feature 추가&lt;/a&gt; 에서 추가된 Icon Feature 를 Drag and Dro
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>이전 글 <a href="https://hgko1207.github.io/2022/12/08/js-dev-7/">[OpenLayers] Custom Icon Feature 추가</a> 에서 추가된 Icon Feature 를 Drag and Drop 하는 예제입니다.</p><h2 id="script"><a class="markdownIt-Anchor" href="#script"></a> Script</h2><p><code>ol.interaction.Modify</code> 을 이용해서 Drag and Drop 기능을 구현합니다.</p><p><code>modifystart</code>, <code>modifyend</code> 이벤트를 등록하여 Icon 을 선택하거나 이동 시 커서가 변경되도록 하였습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">  icon: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    image: <span class="keyword">new</span> ol.style.Icon(&#123;</span><br><span class="line">      opacity: <span class="number">1</span>,</span><br><span class="line">      src: <span class="string">'images/icon.png'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 지도 정보</span></span><br><span class="line"><span class="keyword">const</span> mapInfo = &#123;</span><br><span class="line">  map: <span class="literal">null</span>,</span><br><span class="line">  extent: <span class="literal">null</span>,</span><br><span class="line">  projection: <span class="literal">null</span>,</span><br><span class="line">  setProjection: <span class="function"><span class="keyword">function</span> (<span class="params">w, h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.extent = [<span class="number">0</span>, <span class="number">0</span>, w, h];</span><br><span class="line">    <span class="keyword">this</span>.projection = <span class="keyword">new</span> ol.proj.Projection(&#123;</span><br><span class="line">      code: <span class="string">'pixel'</span>,</span><br><span class="line">      units: <span class="string">'pixels'</span>,</span><br><span class="line">      extent: <span class="keyword">this</span>.extent,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span> (<span class="params">imageName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> view = <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">      projection: <span class="keyword">this</span>.projection,</span><br><span class="line">      center: ol.extent.getCenter(<span class="keyword">this</span>.extent),</span><br><span class="line">      zoom: <span class="number">2</span>,</span><br><span class="line">      maxZoom: <span class="number">8</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> imageLayer = <span class="keyword">new</span> ol.layer.Image(&#123;</span><br><span class="line">      source: <span class="keyword">new</span> ol.source.ImageStatic(&#123;</span><br><span class="line">        url: <span class="string">'images/'</span> + imageName,</span><br><span class="line">        imageSize: [<span class="keyword">this</span>.extent[<span class="number">2</span>], <span class="keyword">this</span>.extent[<span class="number">3</span>]],</span><br><span class="line">        projection: <span class="keyword">this</span>.projection,</span><br><span class="line">        imageExtent: <span class="keyword">this</span>.extent,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">      target: <span class="string">'map'</span>,</span><br><span class="line">      layers: [imageLayer],</span><br><span class="line">      view: view,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.zoomFit();</span><br><span class="line">  &#125;,</span><br><span class="line">  zoomFit: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.map.getView().fit(<span class="keyword">this</span>.extent, &#123; <span class="attr">duration</span>: <span class="number">200</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  addVectorLayer: <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> iconFeature = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> ol.geom.Point([x, y]),</span><br><span class="line">      type: <span class="string">'icon'</span>,</span><br><span class="line">      name: <span class="string">'icon'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span><br><span class="line">      source: <span class="keyword">new</span> ol.source.Vector(&#123;</span><br><span class="line">        features: [iconFeature],</span><br><span class="line">        wrapX: <span class="literal">false</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      style: <span class="function"><span class="keyword">function</span> (<span class="params">feature</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> styles[feature.get(<span class="string">'type'</span>)];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.map.addLayer(vectorLayer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">///////////////////////////////////////////////////////</span></span><br><span class="line">    <span class="comment">// 추가된 부분</span></span><br><span class="line">    <span class="comment">///////////////////////////////////////////////////////</span></span><br><span class="line">    <span class="keyword">var</span> dragInteraction = <span class="keyword">new</span> ol.interaction.Modify(&#123;</span><br><span class="line">      features: <span class="keyword">new</span> ol.Collection([iconFeature]),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> target = <span class="built_in">document</span>.getElementById(<span class="string">'map'</span>);</span><br><span class="line"></span><br><span class="line">    dragInteraction.on(<span class="string">'modifystart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      target.style.cursor = <span class="string">'grabbing'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    dragInteraction.on(<span class="string">'modifyend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      target.style.cursor = <span class="string">'pointer'</span>;</span><br><span class="line">      event.features.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">feature</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> name = feature.get(<span class="string">'name'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">        <span class="comment">// Drop 완료 시 프로세스 진행</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, iconFeature);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> overlaySource = dragInteraction.getOverlay().getSource();</span><br><span class="line">    overlaySource.on([<span class="string">'addfeature'</span>, <span class="string">'removefeature'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">      target.style.cursor = evt.type === <span class="string">'addfeature'</span> ? <span class="string">'pointer'</span> : <span class="string">''</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.addInteraction(dragInteraction);</span><br><span class="line">    <span class="comment">///////////////////////////////////////////////////////</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize module</span></span><br><span class="line"><span class="comment">// ------------------------------</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> width = <span class="number">500</span>;</span><br><span class="line">  <span class="keyword">const</span> height = <span class="number">500</span>;</span><br><span class="line">  <span class="keyword">const</span> imageName = <span class="string">'image.png'</span>;</span><br><span class="line"></span><br><span class="line">  mapInfo.setProjection(width, height);</span><br><span class="line">  mapInfo.init(imageName);</span><br><span class="line"></span><br><span class="line">  mapInfo.addVectorLayer(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Drop 이 되었을 때 <code>feature.get()</code> 함수를 이용해서 설정한 값을 가져와 다음 프로세스를 처리합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://openlayers.org/en/latest/examples/" target="_blank" rel="noopener">https://openlayers.org/en/latest/examples/</a></li><li><a href="https://hgko1207.github.io/2022/12/08/js-dev-7/">[OpenLayers] Custom Icon Feature 추가</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/08/js-dev-8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[OpenLayers] Custom Icon Feature 추가</title>
      <link>http://hgko1207.github.io/2022/12/08/js-dev-7/</link>
      <guid>http://hgko1207.github.io/2022/12/08/js-dev-7/</guid>
      <pubDate>Wed, 07 Dec 2022 15:19:40 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;이전 글 &lt;a href=&quot;https://hgko1207.github.io/2022/12/07/js-dev-6/&quot;&gt;[OpenLayers] Static Image&lt;/a&gt; 에서 설정한 Static Image 위에 주어진 위치의 아이콘을 표시하는 예제입
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>이전 글 <a href="https://hgko1207.github.io/2022/12/07/js-dev-6/">[OpenLayers] Static Image</a> 에서 설정한 Static Image 위에 주어진 위치의 아이콘을 표시하는 예제입니다.</p><p><strong>OpenLayers 3</strong> 버전을 사용하였습니다.</p><h2 id="script"><a class="markdownIt-Anchor" href="#script"></a> Script</h2><p>기존 코드에서 <code>addVectorLayer</code> 함수와 <code>styles</code> 객체가 추가되었습니다.</p><p>먼저 <code>ol.style.Icon</code> 을 이용해서 아이콘 경로를 설정합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">  icon: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    image: <span class="keyword">new</span> ol.style.Icon(&#123;</span><br><span class="line">      opacity: <span class="number">1</span>,</span><br><span class="line">      src: <span class="string">'images/icon.png'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>ol.Feature</code>, <code>ol.layer.Vector</code> 이용해서 Vector Layer를 생성하고 지도에 레이어를 추가합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 지도 정보</span></span><br><span class="line"><span class="keyword">const</span> mapInfo = &#123;</span><br><span class="line">  map: <span class="literal">null</span>,</span><br><span class="line">  extent: <span class="literal">null</span>,</span><br><span class="line">  projection: <span class="literal">null</span>,</span><br><span class="line">  setProjection: <span class="function"><span class="keyword">function</span> (<span class="params">w, h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.extent = [<span class="number">0</span>, <span class="number">0</span>, w, h];</span><br><span class="line">    <span class="keyword">this</span>.projection = <span class="keyword">new</span> ol.proj.Projection(&#123;</span><br><span class="line">      code: <span class="string">'pixel'</span>,</span><br><span class="line">      units: <span class="string">'pixels'</span>,</span><br><span class="line">      extent: <span class="keyword">this</span>.extent,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span> (<span class="params">imageName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> view = <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">      projection: <span class="keyword">this</span>.projection,</span><br><span class="line">      center: ol.extent.getCenter(<span class="keyword">this</span>.extent),</span><br><span class="line">      zoom: <span class="number">2</span>,</span><br><span class="line">      maxZoom: <span class="number">8</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> imageLayer = <span class="keyword">new</span> ol.layer.Image(&#123;</span><br><span class="line">      source: <span class="keyword">new</span> ol.source.ImageStatic(&#123;</span><br><span class="line">        url: <span class="string">'images/'</span> + imageName,</span><br><span class="line">        imageSize: [<span class="keyword">this</span>.extent[<span class="number">2</span>], <span class="keyword">this</span>.extent[<span class="number">3</span>]],</span><br><span class="line">        projection: <span class="keyword">this</span>.projection,</span><br><span class="line">        imageExtent: <span class="keyword">this</span>.extent,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">      target: <span class="string">'map'</span>,</span><br><span class="line">      layers: [imageLayer],</span><br><span class="line">      view: view,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.zoomFit();</span><br><span class="line">  &#125;,</span><br><span class="line">  zoomFit: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.map.getView().fit(<span class="keyword">this</span>.extent, &#123; <span class="attr">duration</span>: <span class="number">200</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">///////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">// 추가된 부분</span></span><br><span class="line">  <span class="comment">///////////////////////////////////////////////////////</span></span><br><span class="line">  addVectorLayer: <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> iconFeature = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> ol.geom.Point([x, y]),</span><br><span class="line">      type: <span class="string">'icon'</span>,</span><br><span class="line">      name: <span class="string">'icon'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span><br><span class="line">      source: <span class="keyword">new</span> ol.source.Vector(&#123;</span><br><span class="line">        features: [iconFeature],</span><br><span class="line">        wrapX: <span class="literal">false</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      style: <span class="function"><span class="keyword">function</span> (<span class="params">feature</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> styles[feature.get(<span class="string">'type'</span>)];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.map.addLayer(vectorLayer);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">///////////////////////////////////////////////////////</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize module</span></span><br><span class="line"><span class="comment">// ------------------------------</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> width = <span class="number">500</span>;</span><br><span class="line">  <span class="keyword">const</span> height = <span class="number">500</span>;</span><br><span class="line">  <span class="keyword">const</span> imageName = <span class="string">'image.png'</span>;</span><br><span class="line"></span><br><span class="line">  mapInfo.setProjection(width, height);</span><br><span class="line">  mapInfo.init(imageName);</span><br><span class="line"></span><br><span class="line">  mapInfo.addVectorLayer(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h2><p>[100, 100] 위치에 아이콘이 표시됩니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://openlayers.org/en/latest/examples/" target="_blank" rel="noopener">https://openlayers.org/en/latest/examples/</a></li><li><a href="https://hgko1207.github.io/2022/12/07/js-dev-6/">[OpenLayers] Static Image</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/08/js-dev-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[OpenLayers] Static Image</title>
      <link>http://hgko1207.github.io/2022/12/07/js-dev-6/</link>
      <guid>http://hgko1207.github.io/2022/12/07/js-dev-6/</guid>
      <pubDate>Wed, 07 Dec 2022 12:10:10 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;OpenLayers&lt;/strong&gt; 사용하여 OSM(OpenStreetMap)으로 지도를 가시화하는 것이 아닌 Static Image를 Layer Source로 사용하여 이미지를 가시화하는 예제입니다.&lt;/p&gt;
&lt;p&gt;OpenLayer
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>OpenLayers</strong> 사용하여 OSM(OpenStreetMap)으로 지도를 가시화하는 것이 아닌 Static Image를 Layer Source로 사용하여 이미지를 가시화하는 예제입니다.</p><p>OpenLayers 3 버전을 사용하였습니다.</p><h2 id="html"><a class="markdownIt-Anchor" href="#html"></a> HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Static Map Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/ol3/4.6.5/ol.css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 600px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/ol3/4.6.5/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="script"><a class="markdownIt-Anchor" href="#script"></a> Script</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 지도 정보</span></span><br><span class="line"><span class="keyword">const</span> mapInfo = &#123;</span><br><span class="line">  map: <span class="literal">null</span>,</span><br><span class="line">  extent: <span class="literal">null</span>,</span><br><span class="line">  projection: <span class="literal">null</span>,</span><br><span class="line">  setProjection: <span class="function"><span class="keyword">function</span> (<span class="params">w, h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.extent = [<span class="number">0</span>, <span class="number">0</span>, w, h];</span><br><span class="line">    <span class="keyword">this</span>.projection = <span class="keyword">new</span> ol.proj.Projection(&#123;</span><br><span class="line">      code: <span class="string">'pixel'</span>,</span><br><span class="line">      units: <span class="string">'pixels'</span>,</span><br><span class="line">      extent: <span class="keyword">this</span>.extent,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span> (<span class="params">imageName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> view = <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">      projection: <span class="keyword">this</span>.projection,</span><br><span class="line">      center: ol.extent.getCenter(<span class="keyword">this</span>.extent),</span><br><span class="line">      zoom: <span class="number">2</span>,</span><br><span class="line">      maxZoom: <span class="number">8</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> imageLayer = <span class="keyword">new</span> ol.layer.Image(&#123;</span><br><span class="line">      source: <span class="keyword">new</span> ol.source.ImageStatic(&#123;</span><br><span class="line">        url: <span class="string">'images/'</span> + imageName,</span><br><span class="line">        imageSize: [<span class="keyword">this</span>.extent[<span class="number">2</span>], <span class="keyword">this</span>.extent[<span class="number">3</span>]],</span><br><span class="line">        projection: <span class="keyword">this</span>.projection,</span><br><span class="line">        imageExtent: <span class="keyword">this</span>.extent,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">      target: <span class="string">'map'</span>,</span><br><span class="line">      layers: [imageLayer],</span><br><span class="line">      view: view,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.zoomFit();</span><br><span class="line">  &#125;,</span><br><span class="line">  zoomFit: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.map.getView().fit(<span class="keyword">this</span>.extent, &#123; <span class="attr">duration</span>: <span class="number">200</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize module</span></span><br><span class="line"><span class="comment">// ------------------------------</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> width = <span class="number">500</span>;</span><br><span class="line">  <span class="keyword">const</span> height = <span class="number">500</span>;</span><br><span class="line">  <span class="keyword">const</span> imageName = <span class="string">'image.png'</span>;</span><br><span class="line"></span><br><span class="line">  mapInfo.setProjection(width, height);</span><br><span class="line">  mapInfo.init(imageName);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>OpenLayers 활용 라이브러리입니다.</p><ul><li>ol.proj.Projection</li><li>ol.View</li><li>ol.layer.Image</li><li>ol.source.ImageStatic</li><li>ol.Map</li></ul><h2 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h2><p>Static Image 가 지정한 크기의 지도 중앙에 가시화됩니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://openlayers.org/en/latest/examples/static-image.html" target="_blank" rel="noopener">https://openlayers.org/en/latest/examples/static-image.html</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/07/js-dev-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] Node.js 및 NPM 설치</title>
      <link>http://hgko1207.github.io/2022/12/07/linux-24/</link>
      <guid>http://hgko1207.github.io/2022/12/07/linux-24/</guid>
      <pubDate>Wed, 07 Dec 2022 03:47:28 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 &lt;strong&gt;Node.js&lt;/strong&gt; 와 &lt;strong&gt;NPM&lt;/strong&gt; 설치하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;운영환경&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#운영환경&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 <strong>Node.js</strong> 와 <strong>NPM</strong> 설치하는 방법에 대해 알아보겠습니다.</p><h2 id="운영환경"><a class="markdownIt-Anchor" href="#운영환경"></a> 운영환경</h2><ul><li>Centor 7.6</li></ul><h2 id="저장소-추가"><a class="markdownIt-Anchor" href="#저장소-추가"></a> 저장소 추가</h2><p>설치하려는 Node.js 버전을 확인하여 NodeSource yum 저장소를 추가합니다.</p><p><a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">NodeSource Node.js Binary Distributions</a> 사이트에 다음과 같은 내용이 정리되어있습니다.</p><p><strong>Node.js v19.x</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># As root</span></span><br><span class="line">$ curl -fsSL https://rpm.nodesource.com/setup_19.x | bash -</span><br><span class="line"></span><br><span class="line"><span class="comment"># No root privileges</span></span><br><span class="line">$ curl -fsSL https://rpm.nodesource.com/setup_19.x | sudo bash -</span><br></pre></td></tr></table></figure><p><strong>Node.js v18.x</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># As root</span></span><br><span class="line">$ curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -</span><br><span class="line"></span><br><span class="line"><span class="comment"># No root privileges</span></span><br><span class="line">$ curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -</span><br></pre></td></tr></table></figure><p><strong>Node.js v16.x</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># As root</span></span><br><span class="line">$ curl -fsSL https://rpm.nodesource.com/setup_16.x | bash -</span><br><span class="line"></span><br><span class="line"><span class="comment"># No root privileges</span></span><br><span class="line">$ curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash -</span><br></pre></td></tr></table></figure><p><strong>Node.js v14.x</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># As root</span></span><br><span class="line">$ curl -fsSL https://rpm.nodesource.com/setup_14.x | bash -</span><br><span class="line"></span><br><span class="line"><span class="comment"># No root privileges</span></span><br><span class="line">$ curl -fsSL https://rpm.nodesource.com/setup_14.x | sudo bash -</span><br></pre></td></tr></table></figure><p><strong>Node.js LTS (18.x)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># As root</span></span><br><span class="line">$ curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash -</span><br><span class="line"></span><br><span class="line"><span class="comment"># No root privileges</span></span><br><span class="line">$ curl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -</span><br></pre></td></tr></table></figure><p><strong>Node.js Current (19.x)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># As root</span></span><br><span class="line">$ curl -fsSL https://rpm.nodesource.com/setup_current.x | bash -</span><br><span class="line"></span><br><span class="line"><span class="comment"># No root privileges</span></span><br><span class="line">$ curl -fsSL https://rpm.nodesource.com/setup_current.x | sudo bash -</span><br></pre></td></tr></table></figure><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p>yum 을 사용하여 Node.js 및 npm 을 설치합니다. Node.js 14 버전을 설치해보도록 하겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL https://rpm.nodesource.com/setup_14.x | bash -</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y nodejs</span></span><br></pre></td></tr></table></figure><h2 id="설치-확인"><a class="markdownIt-Anchor" href="#설치-확인"></a> 설치 확인</h2><p>다음 명령어를 통해 설치된 버전을 확인할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node --version</span></span><br><span class="line">v14.20.0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm --version</span></span><br><span class="line">6.14.17</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">https://github.com/nodesource/distributions</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/07/linux-24/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Ethereum] ganache-cli 설치 및 실행</title>
      <link>http://hgko1207.github.io/2022/12/07/blockchain-1/</link>
      <guid>http://hgko1207.github.io/2022/12/07/blockchain-1/</guid>
      <pubDate>Wed, 07 Dec 2022 01:20:28 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;ganache-cli&lt;/strong&gt; 를 설치하고 실행하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;Ganache&quot;&gt;Ganache&lt;/h2&gt;
&lt;p&gt;&amp;quot;가나슈&amp;quot;라고 읽으면 되고, 가상의 이더리움 네트워크를 생성
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>ganache-cli</strong> 를 설치하고 실행하는 방법에 대해 알아보겠습니다.</p><h2 id="Ganache">Ganache</h2><p>&quot;가나슈&quot;라고 읽으면 되고, 가상의 이더리움 네트워크를 생성해서 Smart Contract 를 실행할 수 있도록 해주는 프로그램입니다. 이런 가상 환경을 TestRPC 라고 합니다.</p><h2 id="Ganache-CLI">Ganache CLI</h2><p>Ganache CLI 는 빠르고 커스터마이징 가능한 블록체인 에뮬레이터인 TestRPC 의 최신 버전입니다. 실제 이더리움 노드를 실행하는 오버헤드 없이 블록체인을 호출할 수 있습니다.</p><ul><li>Transactions are “mined” instantly.</li><li>No transaction cost.</li><li>Accounts can be re-cycled, reset and instantiated with a fixed amount of Ether (no need for faucets or mining).</li><li>Gas price and mining speed can be modified.</li><li>A convenient GUI gives you an overview of your testchain events.</li></ul><h2 id="NPM-설치">NPM 설치</h2><p>Ganache 는 NPM 을 통해 설치할 수 있습니다.</p><p>먼저 NPM 이 설치되어 있어야 합니다. 이전 글 <a href="https://hgko1207.github.io/2022/12/07/linux-24/">Node.js 및 NPM 설치</a> 을 참고해서 설치를 합니다.</p><h2 id="Ganache-설치">Ganache 설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g ganache-cli</span></span><br></pre></td></tr></table></figure><h2 id="실행">실행</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ganache-cli &lt;options&gt;</span></span><br></pre></td></tr></table></figure><p><code>ganache-cli</code> 명령어를 통해 실행합니다. 옵션 없이 실행 시 다음과 같은 결과를 볼 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ganache-cli</span></span><br><span class="line">Ganache CLI v6.12.2 (ganache-core: 2.13.2)</span><br><span class="line"></span><br><span class="line">Available Accounts</span><br><span class="line">==================</span><br><span class="line">(0) 0x3F82D42b4b946aA53fF069cF931d940872C3f675 (100 ETH)</span><br><span class="line">(1) 0x0912b4EdD5279FEE8362257adD75715424C51a39 (100 ETH)</span><br><span class="line">(2) 0x668fF7BD1fe9ffe6758B9d1f71fcdA22c56f68ce (100 ETH)</span><br><span class="line">(3) 0xD74Dd2D769763B78009a67b6b87c7810a7eb7E6d (100 ETH)</span><br><span class="line">(4) 0x6Ec7b0A1f88f482711f4C8b378c8B4c6dCB863EB (100 ETH)</span><br><span class="line">(5) 0xa7eed29620A49ca13F780b740d597Cc79092E2D9 (100 ETH)</span><br><span class="line">(6) 0xfE7f9A8E6c147A07bd1b0601431dc74468456174 (100 ETH)</span><br><span class="line">(7) 0x0b3a29F6174631a97fe9B9289c66456ddD27D069 (100 ETH)</span><br><span class="line">(8) 0x89b626bAF633fAb58986499195b4F98d15D09252 (100 ETH)</span><br><span class="line">(9) 0xA42521a288fD576f59E1F7A7461Dfe88A52cAF99 (100 ETH)</span><br><span class="line"></span><br><span class="line">Private Keys</span><br><span class="line">==================</span><br><span class="line">(0) 0xe7c964a0050a9c8c79008eab74502ea7c105a425b5e6b8ffe57d72eef4165c20</span><br><span class="line">(1) 0x098196b42d262985b0f0b43edc4a51919d8dd9925e0feee485859c5987b4af9c</span><br><span class="line">(2) 0x23738d8fc442fd26c7a802423868bbfc0c0d930f15baef50531483a1e9f7cecd</span><br><span class="line">(3) 0xa67eaa626df00109e219b5f94d33535d536b19d362fbf0eff08e7143383fd95e</span><br><span class="line">(4) 0xede8027c26a03ec63d6b9c404216fe6328936cc6584f93b3389901bfe34efef0</span><br><span class="line">(5) 0x30541fc3cac5dbe9e96a482dcd4100930270f9759d1e15494bbf26932fd6e873</span><br><span class="line">(6) 0xa8ed660d43f2c775efff16732088e34ab23775fa56375f491c8bec3123bde75c</span><br><span class="line">(7) 0x5cf88b19ce7be57320c2a89bf03a9ea5a512a5dc07f9e14f4a752fb1a021deac</span><br><span class="line">(8) 0x557ae7917ca63f17fbb947933c3ad13cc699f42293aafbebe24729f91708eabe</span><br><span class="line">(9) 0xbe44643a2507aa8fc13893f4052edd154e6753d74bec3f8a8ec6a88fda645c19</span><br><span class="line"></span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      convince have junior clean bomb fluid gossip surprise build twenty urban sword</span><br><span class="line">Base HD Path:  m/44'/60'/0'/0/&#123;account_index&#125;</span><br><span class="line"></span><br><span class="line">Gas Price</span><br><span class="line">==================</span><br><span class="line">20000000000</span><br><span class="line"></span><br><span class="line">Gas Limit</span><br><span class="line">==================</span><br><span class="line">6721975</span><br><span class="line"></span><br><span class="line">Call Gas Limit</span><br><span class="line">==================</span><br><span class="line">9007199254740991</span><br><span class="line"></span><br><span class="line">Listening on 127.0.0.1:8545</span><br></pre></td></tr></table></figure><p>기존 Mnemonic 을 가지고 있다면 -m 옵션을 추가하여 설정할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ganache-cli -d -m <span class="string">"taxi"</span></span></span><br><span class="line">Ganache CLI v6.12.2 (ganache-core: 2.13.2)</span><br><span class="line"></span><br><span class="line">Available Accounts</span><br><span class="line">==================</span><br><span class="line">(0) 0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1 (100 ETH)</span><br><span class="line">(1) 0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0 (100 ETH)</span><br><span class="line">(2) 0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b (100 ETH)</span><br><span class="line">(3) 0xE11BA2b4D45Eaed5996Cd0823791E0C93114882d (100 ETH)</span><br><span class="line">(4) 0xd03ea8624C8C5987235048901fB614fDcA89b117 (100 ETH)</span><br><span class="line">(5) 0x95cED938F7991cd0dFcb48F0a06a40FA1aF46EBC (100 ETH)</span><br><span class="line">(6) 0x3E5e9111Ae8eB78Fe1CC3bb8915d5D461F3Ef9A9 (100 ETH)</span><br><span class="line">(7) 0x28a8746e75304c0780E011BEd21C72cD78cd535E (100 ETH)</span><br><span class="line">(8) 0xACa94ef8bD5ffEE41947b4585a84BdA5a3d3DA6E (100 ETH)</span><br><span class="line">(9) 0x1dF62f291b2E969fB0849d99D9Ce41e2F137006e (100 ETH)</span><br><span class="line"></span><br><span class="line">Private Keys</span><br><span class="line">==================</span><br><span class="line">(0) 0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d</span><br><span class="line">(1) 0x6cbed15c793ce57650b9877cf6fa156fbef513c4e6134f022a85b1ffdd59b2a1</span><br><span class="line">(2) 0x6370fd033278c143179d81c5526140625662b8daa446c22ee2d73db3707e620c</span><br><span class="line">(3) 0x646f1ce2fdad0e6deeeb5c7e8e5543bdde65e86029e2fd9fc169899c440a7913</span><br><span class="line">(4) 0xadd53f9a7e588d003326d1cbf9e4a43c061aadd9bc938c843a79e7b4fd2ad743</span><br><span class="line">(5) 0x395df67f0c2d2d9fe1ad08d1bc8b6627011959b79c53d7dd6a3536a33ab8a4fd</span><br><span class="line">(6) 0xe485d098507f54e7733a205420dfddbe58db035fa577fc294ebd14db90767a52</span><br><span class="line">(7) 0xa453611d9419d0e56f499079478fd72c37b251a94bfde4d19872c44cf65386e3</span><br><span class="line">(8) 0x829e924fdf021ba3dbbc4225edfece9aca04b929d6e75613329ca6f1d31c0bb4</span><br><span class="line">(9) 0xb0057716d5917badaf911b193b12b910811c1497b5bada8d7711f758981c3773</span><br><span class="line"></span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      taxi</span><br><span class="line">Base HD Path:  m/44'/60'/0'/0/&#123;account_index&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="실행-옵션">실행 옵션</h2><p>옵션들을 확인하여 환경에 맞게 실행합니다.</p><ul><li><code>-a</code> or <code>--accounts</code>: 시작 시 생성할 계정 수를 지정합니다.</li><li><code>-b</code> or <code>--blocktime</code>: 자동 마이닝을 위한 블록 타임을 초 단위로 지정합니다. 기본값은 0이며 자동 마이닝이 없습니다.</li><li><code>-d</code> or <code>--deterministic</code>: 미리 정의된 니모닉을 기반으로 결정적 주소를 생성합니다.</li><li><code>-n</code> or <code>--secure</code>: 기본적으로 사용 가능한 계정 잠금(제3자 트랜잭션 서명에 적합)</li><li><code>-m</code> or <code>--mnemonic</code>: 특정 HD 지갑 니모닉을 사용하여 초기 주소를 생성합니다.</li><li><code>-p</code> or <code>--port</code>: 포트 번호 설정. 기본값은 8545 입니다.</li><li><code>-h</code> or <code>--hostname</code>: 호스트 이름. 기본값은 노드의 server.listen() 입니다.</li><li><code>-s</code> or <code>--seed</code>: 임의의 데이터를 사용하여 사용할 HD 지갑 니모닉을 생성합니다.</li><li><code>-g</code> or <code>--gasPrice</code>: 사용자 지정 가스 가격 설정(기본값은 20000000000)</li><li><code>-l</code> or <code>--gasLimit</code>: 사용자 지정 가스 한도 설정(기본값은 90000)</li><li><code>-f</code> or <code>--fork</code>: 주어진 블록에서 현재 실행 중인 다른 이더리움 클라이언트에서 분기합니다. 입력은 다른 클라이언트의 HTTP 주소 및 포트여야 합니다.(예: <a href="http://localhost:8545" target="_blank" rel="noopener">http://localhost:8545</a>)</li><li><code>-i</code> or <code>--networkId</code>: ganache-cli가 자신을 식별하는 데 사용할 네트워크 ID를 지정합니다.</li><li><code>--db</code>: 체인 데이터베이스를 저장할 디렉토리 경로를 지정합니다. 데이터베이스가 이미 존재하는 경우 ganache-cli는 새 체인을 생성하는 대신 해당 체인을 초기화합니다.</li><li><code>--debug</code>: Output VM opcodes for debugging</li><li><code>--mem</code>: ganache-cli 메모리 사용량 통계를 출력합니다.</li><li><code>--e</code>: 사용자 계정별 가스를 설정합니다.(기본값은 100)</li></ul><h2 id="참고">참고</h2><ul><li><a href="https://www.npmjs.com/package/ganache-cli" target="_blank" rel="noopener">https://www.npmjs.com/package/ganache-cli</a></li><li><a href="https://docs.nethereum.com/en/latest/ethereum-and-clients/ganache-cli/" target="_blank" rel="noopener">https://docs.nethereum.com/en/latest/ethereum-and-clients/ganache-cli/</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/07/blockchain-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] 사용자 계정 관리</title>
      <link>http://hgko1207.github.io/2022/12/05/linux-23/</link>
      <guid>http://hgko1207.github.io/2022/12/05/linux-23/</guid>
      <pubDate>Mon, 05 Dec 2022 01:15:46 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 사용자 계정 조회, 추가, 수정, 삭제하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;사용자-조회&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#사용자-조회&quot;&gt;&lt;/a&gt; 사용자 조회&lt;/h2&gt;
&lt;p&gt;모든 사
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 사용자 계정 조회, 추가, 수정, 삭제하는 방법에 대해 알아보겠습니다.</p><h2 id="사용자-조회"><a class="markdownIt-Anchor" href="#사용자-조회"></a> 사용자 조회</h2><p>모든 사용자를 출력합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="사용자-계정-확인"><a class="markdownIt-Anchor" href="#사용자-계정-확인"></a> 사용자 계정 확인</h2><p>root 와 useradd 또는 adduser 명령어를 통해 생성한 사용자 계정을 출력합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep /bin/bash /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">hgko:x:1000:1000:hgko:/home/hgko:/bin/bash</span><br></pre></td></tr></table></figure><h2 id="특정-사용자-계정-확인"><a class="markdownIt-Anchor" href="#특정-사용자-계정-확인"></a> 특정 사용자 계정 확인</h2><p>입력한 특정 사용자 계정을 출력합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd | grep [사용자계정]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd | grep hgko</span></span><br><span class="line">hgko:x:1000:1000:hgko:/home/hgko:/bin/bash</span><br></pre></td></tr></table></figure><p>특정 조건(ID 500 이상)을 통해 사용자 목록을 조회합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk -F<span class="string">':'</span> <span class="string">'&#123;if($3 &gt;= 500)print $1&#125;'</span> /etc/passwd</span></span><br><span class="line">polkitd</span><br><span class="line">unbound</span><br><span class="line">libstoragemgmt</span><br><span class="line">colord</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="사용자-추가"><a class="markdownIt-Anchor" href="#사용자-추가"></a> 사용자 추가</h2><h3 id="useradd"><a class="markdownIt-Anchor" href="#useradd"></a> useradd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> useradd [사용자계정]</span></span><br></pre></td></tr></table></figure><p>test 사용자를 생성합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> useradd <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p>사용자 홈 디렉토리도 같이 만들고 싶다면 <code>-m</code> 또느 <code>-d</code> 옵션을 사용합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 홈 디렉토리를 지정할 때 사용하고 디렉토리가 없으면 생성</span></span><br><span class="line">$ useradd <span class="built_in">test</span> -m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 홈 디렉토리 지정</span></span><br><span class="line">$ useradd <span class="built_in">test</span> -d /home/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>test 사용자의 비밀번호를 생성합니다. <strong>passwd</strong> 는 리눅스 사용자 계정의 비밀번호를 변경하는 명령어입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> passwd <span class="built_in">test</span></span></span><br><span class="line">Changing password for user test.</span><br><span class="line">New password: ****</span><br><span class="line">Retype new password: ****</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure><h3 id="adduser"><a class="markdownIt-Anchor" href="#adduser"></a> adduser</h3><p><strong>adduser</strong> 명령어는 <strong>useradd</strong> 명령어와 달리 사용자 홈 디렉토리를 자동으로 만들고, 비밀번호 설정 등로 한 번에 할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adduser <span class="built_in">test</span></span></span><br><span class="line">Adding user `test' ...</span><br><span class="line">Adding new group `test' (1000) ...</span><br><span class="line">Adding new user `test' (1000) with group `test' ...</span><br><span class="line">Creating home directory `/home/test' ...</span><br><span class="line">Copying files from `/etc/skel' ...</span><br><span class="line">New password: ****</span><br><span class="line">Retype new password: ****</span><br><span class="line">passwd: password updated successfully</span><br><span class="line">Changing the user information for test</span><br><span class="line">Enter the new value, or press ENTER for the default</span><br><span class="line">        Full Name []: test</span><br><span class="line">        Room Number []:</span><br><span class="line">        Work Phone []:</span><br><span class="line">        Home Phone []:</span><br><span class="line">        Other []:</span><br><span class="line">Is the information correct? [Y/n]</span><br></pre></td></tr></table></figure><h2 id="사용자-수정"><a class="markdownIt-Anchor" href="#사용자-수정"></a> 사용자 수정</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> usermod [option] [사용자계정]</span></span><br></pre></td></tr></table></figure><p>test 사용자의 홈 디렉토리를 변경합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> usermod -d /home/test1 <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><h2 id="사용자-삭제"><a class="markdownIt-Anchor" href="#사용자-삭제"></a> 사용자 삭제</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> userdel [사용자계정]</span></span><br></pre></td></tr></table></figure><p>test 사용자를 삭제합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> userdel <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p>test 사용자를 강제로 삭제합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> userdel -f <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p>test 사용자와 함께 사용자 디렉토리도 같이 삭제합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> userdel -r <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/12/05/linux-23/#disqus_thread</comments>
    </item>
    
    <item>
      <title>리눅스 명령어</title>
      <link>http://hgko1207.github.io/2022/11/30/linux-22/</link>
      <guid>http://hgko1207.github.io/2022/11/30/linux-22/</guid>
      <pubDate>Wed, 30 Nov 2022 02:05:43 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;자주 사용하는 리눅스 명령어에 대해 알아보겠습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cd&lt;/br&gt;cd …&lt;/br&gt;cd -&lt;/br&gt;c
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>자주 사용하는 리눅스 명령어에 대해 알아보겠습니다.</p><table><thead><tr><th>명령어</th><th>설명</th></tr></thead><tbody><tr><td>cd</br>cd …</br>cd -</br>cd ~</br>cd /</br>cd [path]</td><td>디렉토리 이동</td></tr><tr><td>cp [path] [target] -R</td><td>파일 복사</td></tr><tr><td>tar cvfz backup.tar.gz [target]</td><td>tar 로 압축</td></tr><tr><td>tar cvfz backup.tar.gz /test --exclude “/test/backup”</td><td>특정 디렉토리 제외하고 tar 로 압축</td></tr><tr><td>tar xvfz backup.tar.gz</td><td>압축 풀기</td></tr><tr><td>which [command]</br>예) which find</td><td>특정 명령어의 위치</td></tr><tr><td>source /etc/profile</td><td>환경 설정 적용</td></tr><tr><td>find / -name [파일명]</br>예) find / -name ‘test’</td><td>파일 찾기</td></tr><tr><td>ls -al</td><td>디렉토리 조회</td></tr><tr><td>du -skh</td><td>디렉토리 용량 확인</td></tr><tr><td>df -h</td><td>디스크 용량 확인</td></tr><tr><td>ps -ef | grep [실행프로세스]</br>예) ps -ef | grep tomcat</td><td>실행 프로세스 확인</td></tr><tr><td>kill -9 [pid]</td><td>프로세스 강제 종료</td></tr><tr><td>grep -nR [단어] * </br>예) grep -nR ‘/test/’ *</td><td>특정 단어 존재 여부 검사</td></tr><tr><td>mkdir [디렉토리명]</td><td>디렉토리 생성</td></tr><tr><td>rmdir [디렉토리명]</td><td>디렉토리 삭제</td></tr><tr><td>rm [파일명]</td><td>파일 삭제</td></tr><tr><td>pwd</td><td>현재 디렉토리 위치</td></tr><tr><td>cat<br>cat [파일명]</td><td>파일 내용 출력</td></tr><tr><td>id</td><td>사용자 로그인명</td></tr><tr><td>useradd [id]</td><td>계정 추가</td></tr><tr><td>userdel [id]</td><td>계정 삭제</td></tr><tr><td>usermod [id]</td><td>계정 수정</td></tr><tr><td>passwod [id]</td><td>비밀번호 변경</td></tr><tr><td>chmod</td><td>실행 권한</td></tr><tr><td>clear</td><td>화면 내용 지우기</td></tr><tr><td>free</td><td>메모리 확인</td></tr><tr><td>w</td><td>사용자 로그인 정보</td></tr><tr><td>top</td><td>시스템 운용상황 점검</td></tr></tbody></table>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/30/linux-22/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JPA] CascadeType 정리</title>
      <link>http://hgko1207.github.io/2022/11/29/spring-jpa-6/</link>
      <guid>http://hgko1207.github.io/2022/11/29/spring-jpa-6/</guid>
      <pubDate>Tue, 29 Nov 2022 04:51:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;동일-트랜잭션-내부&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#동일-트랜잭션-내부&quot;&gt;&lt;/a&gt; 동일 트랜잭션 내부&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;연관 엔티티가 수정되었을 경우 CascadeType 과 상관 없이 자동으로 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="동일-트랜잭션-내부"><a class="markdownIt-Anchor" href="#동일-트랜잭션-내부"></a> 동일 트랜잭션 내부</h2><ol><li>연관 엔티티가 수정되었을 경우 CascadeType 과 상관 없이 자동으로 수정됩니다.</li><li>같은 트랜젝션이라 하더라도 해당 엔티티가 <code>CasecadeType.PERSIST</code> 로 설정 되어 있지 않으면 연관 엔티티를 추가 하더라도 반영되지 않습니다. (<code>CascadeType.MERGE</code> 로 설정 되어도 추가는 되지 않음)</li></ol><h2 id="cascadetype-별-동작"><a class="markdownIt-Anchor" href="#cascadetype-별-동작"></a> CascadeType 별 동작</h2><h3 id="cascadetypeall"><a class="markdownIt-Anchor" href="#cascadetypeall"></a> CascadeType.ALL</h3><ul><li>상위 엔티티에서 하위 엔티티로 모든 작업을 전파합니다.</li><li>모든 Cascade 설정을 적용합니다.</li></ul><h3 id="cascadetypepersist"><a class="markdownIt-Anchor" href="#cascadetypepersist"></a> CascadeType.PERSIST</h3><ul><li>상위 엔티티를 생성하고, 하위 엔티티를 추가 하였을때 <code>persist()</code> 를 수행하면 하위 엔티티도 같이 <code>persist()</code> 가 수행됩니다.</li><li>만약, 하위 엔티티가 DB에 등록된 키값을 가졌다면 detached entity passed to persist 예외가 발생합니다.</li></ul><h3 id="cascadetypemerge"><a class="markdownIt-Anchor" href="#cascadetypemerge"></a> CascadeType.MERGE</h3><ul><li>트랜젝션이 종료 되고 detach 상태에서 하위 엔티티를 추가하거나 변경된 이후에 상위 엔티티가 <code>merge()</code> 를 수행하게 되면 변경 사항이 적용됩니다.</li><li>하위 엔티티의 추가 및 수정 모두 반영됩니다.</li></ul><h3 id="cascadetyperemove"><a class="markdownIt-Anchor" href="#cascadetyperemove"></a> CascadeType.REMOVE</h3><ul><li>삭제 시 연관된 하위 엔티티들도 같이 삭제됩니다.</li></ul><h3 id="cascadetypedetach"><a class="markdownIt-Anchor" href="#cascadetypedetach"></a> CascadeType.DETACH</h3><ul><li>상위 엔티티가 detech() 를 수행 하게 되면 연관된 하위 엔티티도 detach() 상태가 되어 변경 사항이 반영되지 않습니다.</li></ul><h2 id="고려사항"><a class="markdownIt-Anchor" href="#고려사항"></a> 고려사항</h2><ul><li>부모/자식 간의 관계를 설정하는 과정에서 부모가 데이터베이스에 존재하지 않는 경우 데이터 무결성의 문제가 발생합니다.</li><li>자식 레코드를 삭제하지 않은 상태에서 부모 레코드를 먼저 삭제하려 시도하는 경우 참조 무결성 위반이 발생합니다.</li></ul><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.baeldung.com/jpa-cascade-types" target="_blank" rel="noopener">https://www.baeldung.com/jpa-cascade-types</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/29/spring-jpa-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Spring] QuerydslRepositorySupport 사용</title>
      <link>http://hgko1207.github.io/2022/11/28/spring-querydsl-2/</link>
      <guid>http://hgko1207.github.io/2022/11/28/spring-querydsl-2/</guid>
      <pubDate>Mon, 28 Nov 2022 02:45:08 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;code&gt;QueryDslPredicateExecutor&lt;/code&gt; 를 이용하는 findAll, findOne 등은 where, Sort, Limit 등의 조건만 넣을 수 있습니다. 하지만 Join 이나 Group by 등의 기능을 사용하려면 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><code>QueryDslPredicateExecutor</code> 를 이용하는 findAll, findOne 등은 where, Sort, Limit 등의 조건만 넣을 수 있습니다. 하지만 Join 이나 Group by 등의 기능을 사용하려면 인터페이스 선언만으로는 기능을 구현하기 힘듭니다.</p><p>이를 해결하기 위해서 <strong>Spring Data JPA</strong> 에서 제공하는 <code>QuerydslRepositorySupport</code> 추상 클래스가 있습니다. <code>QuerydslRepositorySupport</code> 는 개발자에게 querydsl 객체를 직접 제공합니다.</p><p>예를 들어 권한별 사용자 수에 대한 데이터가 필요하다면, 다음과 같이 할 수 있습니다.</p><p>사용자 클래스와 DTO 클래스를 생성합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, length = <span class="number">50</span>)</span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, length = <span class="number">50</span>)</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRoleCountDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> role;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserRoleCountDTO</span><span class="params">(<span class="keyword">int</span> role, <span class="keyword">long</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.role = role;</span><br><span class="line">    <span class="keyword">this</span>.count = count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>권한별 사용자 수를 얻어오는 인터페이스를 생성하고 메소드를 선언합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line">  <span class="function">List&lt;UserRoleCountDTO&gt; <span class="title">getUserRoleCount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserRepository</code> 에 상속 시킵니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt;, <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>QuerydslRepositorySupport</code> 를 이용해서 <code>UserRepositoryCustom</code> 를 구현하는 클래스를 작성합니다.<br /><code>UserRepository</code> 이름 뒤에 Impl 이라는 Postfix 가 붙으면 자동으로 Spring Data JPA 의 AOP 주입 대상이 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryImpl</span> <span class="keyword">extends</span> <span class="title">QuerydslRepositorySupport</span> <span class="keyword">implements</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserRepositoryImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;UserRoleCountDTO&gt; <span class="title">getUserRoleCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QUser user = QUser.user;</span><br><span class="line">    <span class="keyword">return</span> from(user).groupBy(user.role)</span><br><span class="line">                  .list(Projections.constructor(UserRoleCountDTO<span class="class">.<span class="keyword">class</span>, <span class="title">user</span>.<span class="title">role</span>, <span class="title">user</span>.<span class="title">role</span>.<span class="title">sum</span>))</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 예제를 통해 JpaRepository 의 기능과 추가로 구현한 UserRepositoryCustom 의 추가 기능까지 사용할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;UserRoleCountDTO&gt; userRoleCountDTOs = userRepository.getUserRoleCount();</span><br><span class="line">    System.out.println(<span class="string">"result =&gt;"</span> + userRoleCountDTOs);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/28/spring-querydsl-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Spring] JPA with Querydsl</title>
      <link>http://hgko1207.github.io/2022/11/28/spring-querydsl-1/</link>
      <guid>http://hgko1207.github.io/2022/11/28/spring-querydsl-1/</guid>
      <pubDate>Mon, 28 Nov 2022 01:57:14 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;query-dsl&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#query-dsl&quot;&gt;&lt;/a&gt; Query DSL&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;JPA, JDO, SQL 같은 백엔드를 위해 type-safe SQL을 만드는 프
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="query-dsl"><a class="markdownIt-Anchor" href="#query-dsl"></a> Query DSL</h1><ul><li>JPA, JDO, SQL 같은 백엔드를 위해 type-safe SQL을 만드는 프레임워크</li><li>Domain Specific Language</li><li>특정한 도메인에 초점을 맞춘 제한적인 표현력을 가진 컴퓨터 프로그래밍 언어</li></ul><h2 id="특징"><a class="markdownIt-Anchor" href="#특징"></a> 특징</h2><ul><li>type-safe</li><li>조회에 특화된 프로그래밍 언어</li><li>단순, 간결</li><li>다양한 저장소 조회 기능 통합 (데이터 조회 기능 추상화)</li></ul><h2 id="동작-방식"><a class="markdownIt-Anchor" href="#동작-방식"></a> 동작 방식</h2><ul><li>Member java or Member table 의 메타 데이터를 참조하여 코드 생성기를 통해 QMember.java 를 생성합니다.</li><li>APT: Annotation Processing Tool</li><li>Table Meta: Querydsl-maven-plugin</li></ul><h2 id="기능"><a class="markdownIt-Anchor" href="#기능"></a> 기능</h2><ul><li>Query: from, where, join</li><li>Path: QMember, <a href="http://Qmember.name" target="_blank" rel="noopener">Qmember.name</a></li><li>Expression: name.eq, name.qt</li></ul><h2 id="세부기능"><a class="markdownIt-Anchor" href="#세부기능"></a> 세부기능</h2><ul><li>from</li><li>innerJoin, join, leftJoin, fetchJoin, fullJoin, on</li><li>where (and, or, allOf, anyOf)</li><li>groupBy</li><li>having</li><li>order By (desc, asc)</li><li>limit, offset, restrict(limit + offset) (Paging)</li><li>list</li><li>listResults (list + Paging Info(totalCount))</li><li>iterate</li><li>count</li><li>singleResult, uniqueResult</li></ul><h2 id="사용-방법"><a class="markdownIt-Anchor" href="#사용-방법"></a> 사용 방법</h2><h3 id="설정"><a class="markdownIt-Anchor" href="#설정"></a> 설정</h3><p>Spring Boot 프로젝트의 pom.xml 에 의존성과 플러그인을 추가합니다.</p><p>QueryDSL 을 사용하기 위해서는 com.querydsl 에서 제공하는 <code>querydsl-jpa</code> 와 <code>querydsl-apt</code> 에 대한 의존성이 필요합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- dependencies 에 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-apt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-jdo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>com.mysema.maven 에서 제공하는 apt-maven-plugin 을 설치합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- build - plugins 에 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysema.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apt-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>process<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/generated-sources/java<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">processor</span>&gt;</span>com.querydsl.apt.jpa.JPAAnnotationProcessor<span class="tag">&lt;/<span class="name">processor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">sourceEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이제 프로젝트 우클릭 후 maven -&gt; Update Project… 수행하면 Entity 에 대한 Q 클래스들이 <code>target/generated-sources/java</code> 경로에 생성된 것을 확인할 수 있습니다.</p><h3 id="도메인-클래스-생성"><a class="markdownIt-Anchor" href="#도메인-클래스-생성"></a> 도메인 클래스 생성</h3><p>테이블 도메인 클래스를 생성합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_team"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(name = <span class="string">"name"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> rating;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Repository 인터페이스를 작성합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeamRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Team</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="querydsl-사용-예"><a class="markdownIt-Anchor" href="#querydsl-사용-예"></a> Querydsl 사용 예</h3><p>Repository 인터페이스에 <code>QuerydslPredicateExecutor</code> 를 확장합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeamRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Team</span>, <span class="title">Integer</span>&gt;, <span class="title">QuerydslPredicateExecutor</span>&lt;<span class="title">Team</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> TeamRepository teamRepository;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> testQuerydsel &#123;</span><br><span class="line">    teamRepository.findAll(QTeam.team.name.eq(<span class="string">"test"</span><span class="number">1</span>));</span><br><span class="line">    teamRepository.findOne(QTeam.team.rating.loe(<span class="number">100</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jpaquery-사용-예"><a class="markdownIt-Anchor" href="#jpaquery-사용-예"></a> JPAQuery 사용 예</h3><p><code>JPAQuery</code> 을 Bean 등록 후 사용 가능합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWebApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(TestWebApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JPAQueryFactory <span class="title">jpaQueryFactory</span><span class="params">(EntityManager em)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JPAQueryFactory(em);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> JPAQueryFactory factory;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuerydsl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QTeam team = QTeam.team;</span><br><span class="line"></span><br><span class="line">    List&lt;Team&gt; teams = query.from(team)</span><br><span class="line">                            .where(team.name.eq(<span class="string">"test1"</span>).or(team.name.like(<span class="string">"hgko%"</span>)))</span><br><span class="line">                            .list(team);</span><br><span class="line">    System.out.println(<span class="string">"querydsl =&gt;"</span> + teams);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="booleanbuilder-사용-예"><a class="markdownIt-Anchor" href="#booleanbuilder-사용-예"></a> BooleanBuilder 사용 예</h3><p>상황에 따라 동적으로 변경되는 쿼리를 작성할 경우 BooleanBuilder 를 사용하면 간편하게 쿼리를 작성할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JPAQueryFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuerydsl</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        QTeam team = QTeam.team;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 검색 조건에 따른 동적 쿼리 작성</span></span><br><span class="line">        BooleanBuilder builder = <span class="keyword">new</span> BooleanBuilder();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(name)) &#123;</span><br><span class="line">            builder.and(team.name.contains(name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Team&gt; teams = factory.selectFrom(team).where(builder).fetch();</span><br><span class="line">        System.out.println(<span class="string">"querydsl =&gt;"</span> + teams);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/28/spring-querydsl-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JPA] NamedQuery</title>
      <link>http://hgko1207.github.io/2022/11/25/spring-jpa-5/</link>
      <guid>http://hgko1207.github.io/2022/11/25/spring-jpa-5/</guid>
      <pubDate>Fri, 25 Nov 2022 01:10:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;namedquery-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#namedquery-란&quot;&gt;&lt;/a&gt; NamedQuery 란&lt;/h2&gt;
&lt;p&gt;Entity 에 &lt;code&gt;@NamedQuery&lt;/code&gt; 어노테이션을 통
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="namedquery-란"><a class="markdownIt-Anchor" href="#namedquery-란"></a> NamedQuery 란</h2><p>Entity 에 <code>@NamedQuery</code> 어노테이션을 통해 쿼리를 지정해줍니다. 쉽게 말하면 미리 이름을 부여해서 재활용 할 수 있는 JPQL 입니다.</p><h2 id="사용-방법"><a class="markdownIt-Anchor" href="#사용-방법"></a> 사용 방법</h2><ul><li>도메인 클래스에 <code>@NamedQuery</code> 또는 <code>@NamedNativeQuery</code> 를 정의합니다.</li><li>2개 이상의 Query 를 정의하려면 <code>@NamedQueries</code> 또는 <code>@NamedNativeQueries</code> 를 사용하면 됩니다.</li><li>Primary Key 가 되는 컬름은 <code>@Id</code> 를 사용하여 지정합니다.</li><li>테이블의 컬럼명과 도메인 클래스의 필드명이 다를경우 <code>@Column</code> 을 이용하여 지정할 수 있습니다.</li></ul><h3 id="클래스-생성"><a class="markdownIt-Anchor" href="#클래스-생성"></a> 클래스 생성</h3><p>위의 설명의 어노테이션을 사용하여 도메인 클래스를 생성합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@NamedQueries</span>(&#123;</span><br><span class="line">  <span class="meta">@NamedQuery</span>(name = <span class="string">"Team.query1"</span>, query = <span class="string">"select t.id from Team t where t.name = 'test1'"</span>),</span><br><span class="line">  <span class="meta">@NamedQuery</span>(name = <span class="string">"Team.query2"</span>, query = <span class="string">"select t.name from Team t where t.name = ?1"</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@NamedNativeQueries</span>(&#123;</span><br><span class="line">  <span class="meta">@NamedNativeQuery</span>(name = <span class="string">"Team.nativeQuery1"</span>, query = <span class="string">"select t.id from tb_team t where t.name = 'test1'"</span>),</span><br><span class="line">  <span class="meta">@NamedNativeQuery</span>(name = <span class="string">"Team.nativeQuery2"</span>, resultClass = Team<span class="class">.<span class="keyword">class</span>, <span class="title">query</span> </span>= <span class="string">"select * from tb_team t where t.name = '?1"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_team"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(name = <span class="string">"name"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> rating;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="repository-생성"><a class="markdownIt-Anchor" href="#repository-생성"></a> Repository 생성</h3><ul><li>Repository 인터페이스에 직접 <code>@Query</code> 를 이용하여 SQL문을 사용할 수 있습니다.</li><li><code>nativeQuery</code> 를 사용하려면 해당 필드를 true 로 설정하면 됩니다.</li><li><code>@Param</code> 을 사용하여 Query문의 파라메타와 연결할 수 있습니다.</li><li><code>entityName</code> 을 사용하면 도메인 타입이 자동으로 설정됩니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeamRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Team</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Query</span>(value = <span class="string">"select * from tb_team t where t.name = 'test1'"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">  <span class="function">List&lt;Team&gt; <span class="title">testNativeQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Query</span>(value = <span class="string">"select t.id from #&#123;#entityName&#125; t where t.name like :name%"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">  <span class="function">List&lt;String&gt; <span class="title">testNativeQuery</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">List&lt;Integer&gt; <span class="title">query1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">List&lt;String&gt; <span class="title">query2</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">List&lt;Integer&gt; <span class="title">nativeQuery1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">List&lt;Team&gt; <span class="title">nativeQuery2</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 클래스에 Native 쿼리문을 작성하고 사용할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/25/spring-jpa-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JPA] 쿼리 메서드</title>
      <link>http://hgko1207.github.io/2022/11/24/spring-jpa-4/</link>
      <guid>http://hgko1207.github.io/2022/11/24/spring-jpa-4/</guid>
      <pubDate>Thu, 24 Nov 2022 06:24:06 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Spring Data JPA&lt;/strong&gt; 쿼리 메서드는 가장 강력한 메서드이며, SQL 쿼리를 작성하지 않고도 데이터베이스에서 레코드를 선택하는 쿼리 메서드를 만들 수 있습니다. 백그라운드에서 &lt;strong&gt;Spring Data
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Spring Data JPA</strong> 쿼리 메서드는 가장 강력한 메서드이며, SQL 쿼리를 작성하지 않고도 데이터베이스에서 레코드를 선택하는 쿼리 메서드를 만들 수 있습니다. 백그라운드에서 <strong>Spring Data JPA</strong> 는 쿼리 메서드를 기반으로 SQL 쿼리를 생성하고 쿼리를 실행합니다.</p><p>Entity 필드를 사용하여 Repository 에 대한 쿼리 메서드를 생성할 수 있으며 쿼리 메서드 생성을 finder methods(findBy, findAll …)라고도 합니다.</p><h2 id="예"><a class="markdownIt-Anchor" href="#예"></a> 예</h2><p><code>findByEmailAddressAndName()</code> 이 쿼리 메서드인 UserRepository 가 있다고 가정합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">List&lt;User&gt; <span class="title">findByEmailAddressAndName</span><span class="params">(String emailAddress, String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>백그라운드에서 Spring Data JPA 는 위의 메서드(findByEmailAddressAndName)에서 JPA 기준 API를 사용하여 쿼리를 생성하지만 기본적으로 다음과 같은 JPQL 쿼리로 변환됩니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> u <span class="keyword">from</span> <span class="keyword">User</span> u <span class="keyword">where</span> u.emailAddress = ?<span class="number">1</span> <span class="keyword">and</span> u.name = ?<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="키워드들"><a class="markdownIt-Anchor" href="#키워드들"></a> 키워드들</h2><p><strong>JPA</strong>에 대해 지원되는 키워드와 해당 키워드를 포함하는 메서드가 무엇을 의미하는지 설명합니다.</p><table><thead><tr><th>Keyword</th><th>Sample</th><th>JPQL snippet</th></tr></thead><tbody><tr><td>And</td><td>findByLastnameAndFirstname</td><td>… where x.lastname = ?1 and x.firstname = ?2</td></tr><tr><td>Or</td><td>findByLastnameOrFirstname</td><td>… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td>Is, Equals</td><td>findByFirstname, findByFirstnameIs, findByFirstnameEquals</td><td>… where x.firstname = ?1</td></tr><tr><td>Between</td><td>findByStartDateBetween</td><td>… where x.startDate between ?1 and ?2</td></tr><tr><td>LessThan</td><td>findByAgeLessThan</td><td>… where x.age &lt; ?1</td></tr><tr><td>LessThanEqual</td><td>findByAgeLessThanEqual</td><td>… where x.age &lt;= ?1</td></tr><tr><td>GreaterThan</td><td>findByAgeGreaterThan</td><td>… where x.age &gt; ?1</td></tr><tr><td>GreaterThanEqual</td><td>findByAgeGreaterThanEqual</td><td>… where x.age &gt;= ?1</td></tr><tr><td>After</td><td>findByStartDateAfter</td><td>… where x.startDate &gt; ?1</td></tr><tr><td>Before</td><td>findByStartDateBefore</td><td>… where x.startDate &lt; ?1</td></tr><tr><td>IsNull, Null</td><td>findByAge(Is)Null</td><td>… where x.age is null</td></tr><tr><td>IsNotNull, NotNull</td><td>findByAge(Is)NotNull</td><td>… where x.age not null</td></tr><tr><td>Like</td><td>findByFirstnameLike</td><td>… where x.firstname like ?1</td></tr><tr><td>NotLike</td><td>findByFirstnameNotLike</td><td>… where x.firstname not like ?1</td></tr><tr><td>StartingWith</td><td>findByFirstnameStartingWith</td><td>… where x.firstname like ?1 (parameter bound with appended %)</td></tr><tr><td>EndingWith</td><td>findByFirstnameEndingWith</td><td>… where x.firstname like ?1 (parameter bound with prepended %)</td></tr><tr><td>Containing</td><td>findByFirstnameContaining</td><td>… where x.firstname like ?1 (parameter bound wrapped in %)</td></tr><tr><td>OrderBy</td><td>findByAgeOrderByLastnameDesc</td><td>… where x.age = ?1 order by x.lastname desc</td></tr><tr><td>Not</td><td>findByLastnameNot</td><td>… where x.lastname &lt;&gt; ?1</td></tr><tr><td>In</td><td>findByAgeIn(Collection<Age> ages)</td><td>… where x.age in ?1</td></tr><tr><td>NotIn</td><td>findByAgeNotIn(Collection<Age> ages)</td><td>… where x.age not in ?1</td></tr><tr><td>True</td><td>findByActiveTrue()</td><td>… where x.active = true</td></tr><tr><td>False</td><td>findByActiveFalse()</td><td>… where x.active = false</td></tr><tr><td>IgnoreCase</td><td>findByFirstnameIgnoreCase</td><td>… where UPPER(x.firstname) = UPPER(?1)</td></tr></tbody></table><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.javaguides.net/2018/11/spring-data-jpa-query-creation-from-method-names.html" target="_blank" rel="noopener">https://www.javaguides.net/2018/11/spring-data-jpa-query-creation-from-method-names.html</a></li><li><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation" target="_blank" rel="noopener">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/24/spring-jpa-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JPA] @ElementCollection 사용 예</title>
      <link>http://hgko1207.github.io/2022/11/24/spring-jpa-3/</link>
      <guid>http://hgko1207.github.io/2022/11/24/spring-jpa-3/</guid>
      <pubDate>Thu, 24 Nov 2022 06:05:52 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;RDB(Relational DataBase) 에는 Collection 형태의 데이터를 컬럼에 저장할 수 있는 방법이 없습니다. 그래서 별도의 테이블을 생성하고 Collection 을 관리해야 합니다.&lt;/p&gt;
&lt;p&gt;JPA 의 &lt;strong&gt;@Ele
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>RDB(Relational DataBase) 에는 Collection 형태의 데이터를 컬럼에 저장할 수 있는 방법이 없습니다. 그래서 별도의 테이블을 생성하고 Collection 을 관리해야 합니다.</p><p>JPA 의 <strong>@ElementCollection</strong> 사용하여 별도의 테이블을 생성하고 Collection 을 관리할 수 있습니다.</p><p><strong>ElementCollection</strong> 특징은 부모 Entity 에 의해 관리되고, 항상 부모와 함께 저장되고 삭제됩니다. casecade 옵션이 default 입니다.</p><h2 id="예"><a class="markdownIt-Anchor" href="#예"></a> 예</h2><p>Collection 대상이 되는 객체는 <code>@Entity</code> 가 아닌 Embeddable Class 로 생성하여 One-To-Many 관계를 맺습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(length = <span class="number">50</span>)</span><br><span class="line">  <span class="keyword">public</span> String address;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(length = <span class="number">50</span>)</span><br><span class="line">  <span class="keyword">public</span> String detailAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ElementCollection</code> 생성하여 Collection 테이블을 생성합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ElementCollection</span>(fetch = FetchType.LAZY)</span><br><span class="line">  <span class="meta">@CollectionTable</span>(</span><br><span class="line">    name = <span class="string">"user_address"</span>,</span><br><span class="line">    joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"userId"</span>)</span><br><span class="line">  )</span><br><span class="line">  <span class="meta">@ForeignKey</span>(name = <span class="string">"fk_user_address"</span>)</span><br><span class="line">  <span class="keyword">private</span> List&lt;Address&gt; addresses;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h2><p>다음과 같은 DDL 스크립트가 만들어집니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_address`</span> (</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`detail_address`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fk_user_address`</span> (<span class="string">`user_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_user_address`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`user_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://prohannah.tistory.com/133" target="_blank" rel="noopener">https://prohannah.tistory.com/133</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/24/spring-jpa-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MySQL] 스토리지 엔진(Storage Engine)</title>
      <link>http://hgko1207.github.io/2022/11/23/mysql-7/</link>
      <guid>http://hgko1207.github.io/2022/11/23/mysql-7/</guid>
      <pubDate>Wed, 23 Nov 2022 04:49:27 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt; 스토리지 엔진 종류 및 간단 비교 내용입니다.&lt;/p&gt;
&lt;h2 id=&quot;myisam&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#myisam&quot;&gt;&lt;/a&gt; MyISAM&lt;/h2&gt;
&lt;ul&gt;
&lt;l
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>MySQL</strong> 스토리지 엔진 종류 및 간단 비교 내용입니다.</p><h2 id="myisam"><a class="markdownIt-Anchor" href="#myisam"></a> MyISAM</h2><ul><li>정적인 테이블, 로그 테이블</li><li>쓰기 작업이 별로 없는 select 위주의 테이블</li><li>다수의 세션이 동시 작업을 하는 경우 성능이 저하 됨</li></ul><h2 id="innodb"><a class="markdownIt-Anchor" href="#innodb"></a> InnoDB</h2><ul><li>민감한 정보를 갖는 테이블 (회원 등)</li><li>갱신 (읽기 / 쓰기) 위주의 트랜잭션이 요구되는 테이블</li><li>인덱스가 많이 걸린 대량의 테이블</li></ul><h2 id="archive"><a class="markdownIt-Anchor" href="#archive"></a> Archive</h2><ul><li>로그 수집에 적합</li><li>데이터가 메모리상에서 압축된 후 압축된 상태로 디스크에 저장</li></ul><h2 id="memory"><a class="markdownIt-Anchor" href="#memory"></a> Memory</h2><ul><li>일시적으로만 사용되는 임시 테이블</li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/23/mysql-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MySQL] 유용 명령어</title>
      <link>http://hgko1207.github.io/2022/11/23/mysql-6/</link>
      <guid>http://hgko1207.github.io/2022/11/23/mysql-6/</guid>
      <pubDate>Wed, 23 Nov 2022 04:32:58 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;help&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#help&quot;&gt;&lt;/a&gt; Help&lt;/h2&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="help"><a class="markdownIt-Anchor" href="#help"></a> Help</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HELP</span> <span class="keyword">SHOW</span>;</span><br><span class="line"><span class="keyword">HELP</span> &#123;<span class="keyword">SELECT</span> | <span class="keyword">DELETE</span> | <span class="keyword">UPDATE</span>&#125;;</span><br><span class="line"><span class="keyword">HELP</span> <span class="keyword">ALTER</span>;</span><br><span class="line"><span class="keyword">HELP</span> <span class="keyword">ALTER</span> &#123;<span class="keyword">DATABASE</span> | <span class="keyword">TABLE</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="show"><a class="markdownIt-Anchor" href="#show"></a> Show</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PRIVILEGES</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">OPEN</span> <span class="keyword">TABLES</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> <span class="keyword">STATUS</span>;</span><br></pre></td></tr></table></figure><p>테이블 컬럼 조회 명령어입니다. (코멘트 포함)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> 테이블명;</span><br></pre></td></tr></table></figure><h2 id="select"><a class="markdownIt-Anchor" href="#select"></a> Select</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 왜래키 규약</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.REFERENTIAL_CONSTRAINTS;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- PRIMARY KEY, UNIQUE 규악 등</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.TABLE_CONSTRAINTS <span class="keyword">WHERE</span> table_schema = 데이터베이스명;</span><br></pre></td></tr></table></figure><h2 id="백업"><a class="markdownIt-Anchor" href="#백업"></a> 백업</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysqldump &#123; -h 호스트 &#125; -u 사용자 -p 데이터베이스명 &gt; 백업파일명.sql</span></span><br></pre></td></tr></table></figure><h2 id="복구"><a class="markdownIt-Anchor" href="#복구"></a> 복구</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql &#123; -h 호스트 &#125; -u 사용자 -p 데이터베이스명 &lt; 백업파일명.sql</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/23/mysql-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MySQL] ALTER TABLE 구문 정리</title>
      <link>http://hgko1207.github.io/2022/11/23/mysql-5/</link>
      <guid>http://hgko1207.github.io/2022/11/23/mysql-5/</guid>
      <pubDate>Wed, 23 Nov 2022 02:06:21 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt; 에서 사용하는 &lt;code&gt;ALTER TABLE&lt;/code&gt; 구문에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h1 id=&quot;테이블-관련&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#테이블-관련&quot;&gt;&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>MySQL</strong> 에서 사용하는 <code>ALTER TABLE</code> 구문에 대해 알아보겠습니다.</p><h1 id="테이블-관련"><a class="markdownIt-Anchor" href="#테이블-관련"></a> 테이블 관련</h1><h2 id="테이블-생성"><a class="markdownIt-Anchor" href="#테이블-생성"></a> 테이블 생성</h2><p>테이블 2개를 생성합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">test</span> (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  age <span class="built_in">INT</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  jumin VARCAHR(<span class="number">15</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span>(age),</span><br><span class="line">  <span class="keyword">INDEX</span>(<span class="keyword">name</span>),</span><br><span class="line">  <span class="keyword">KEY</span>(jumin),</span><br><span class="line">  <span class="keyword">INDEX</span>(<span class="keyword">name</span>, jumin)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test2 (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">  parent_id <span class="built_in">INT</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (parent_id) <span class="keyword">REFERENCES</span> <span class="keyword">test</span>(<span class="keyword">id</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> UIPDATE <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>INDEX 를 KEY 로 바꿔도 됩니다.</li><li>INDEX(name, jumin) 과 INDEX(name), INDEX(jumin) 은 다릅니다.</li></ul><h2 id="테이블-속성-변경"><a class="markdownIt-Anchor" href="#테이블-속성-변경"></a> 테이블 속성 변경</h2><p><strong>[]</strong> 에 들어가 있는 내용은 생략 가능합니다.</p><h3 id="1-필드-추가"><a class="markdownIt-Anchor" href="#1-필드-추가"></a> 1. 필드 추가</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] 추가할필드명 필드타입 [<span class="keyword">FIRST</span> | <span class="keyword">AFTER</span> 필드명];</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] (추가할필드명 필드타입, ...);</span><br></pre></td></tr></table></figure><h3 id="2-필드명-및-타입-변경"><a class="markdownIt-Anchor" href="#2-필드명-및-타입-변경"></a> 2. 필드명 및 타입 변경</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">CHANGE</span> [<span class="keyword">COLUMN</span>] 기존필드명 변경할필드명 변경할필드타입 [<span class="keyword">FIRST</span> | <span class="keyword">AFTER</span> 필드명];</span><br></pre></td></tr></table></figure><h3 id="3-필드-타입-변경"><a class="markdownIt-Anchor" href="#3-필드-타입-변경"></a> 3. 필드 타입 변경</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">MODIFY</span> [<span class="keyword">COLUMN</span>] 기존필드명 변경할필드명 [<span class="keyword">FIRST</span> | <span class="keyword">AFTER</span> 필드명];</span><br></pre></td></tr></table></figure><h3 id="4-필드-삭제"><a class="markdownIt-Anchor" href="#4-필드-삭제"></a> 4. 필드 삭제</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] 제거할필드명;</span><br></pre></td></tr></table></figure><h3 id="5-필드-디폴트-정의"><a class="markdownIt-Anchor" href="#5-필드-디폴트-정의"></a> 5. 필드 디폴트 정의</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ALTER</span> [<span class="keyword">COLUMN</span>] 필드명 &#123;<span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="string">'XXX'</span> | <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="6-테이블명-변경"><a class="markdownIt-Anchor" href="#6-테이블명-변경"></a> 6. 테이블명 변경</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">RENAME</span> 변경할테이블명;</span><br></pre></td></tr></table></figure><h3 id="7-comment-추가"><a class="markdownIt-Anchor" href="#7-comment-추가"></a> 7. COMMENT 추가</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">COMMENT</span> <span class="string">'내용'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">MODIFY</span> 필드명 필드타입 [<span class="keyword">DEFAULT</span> <span class="string">'XXX'</span>] <span class="keyword">COMMENT</span> <span class="string">'내용'</span>;</span><br></pre></td></tr></table></figure><h1 id="인덱스-관련"><a class="markdownIt-Anchor" href="#인덱스-관련"></a> 인덱스 관련</h1><h2 id="인덱스-생성"><a class="markdownIt-Anchor" href="#인덱스-생성"></a> 인덱스 생성</h2><h3 id="index"><a class="markdownIt-Anchor" href="#index"></a> INDEX</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> 인덱스명 <span class="keyword">ON</span> 테이블명 (필드<span class="number">1</span>, 필드<span class="number">2</span>, ...);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ADD</span> <span class="keyword">INDEX</span> [인덱스명] [인덱스타입] (필드<span class="number">1</span>, 필드<span class="number">2</span>, ...);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ADD</span> <span class="keyword">KEY</span> [인덱스명 ] [인덱스타입] (필드<span class="number">1</span>, 필드<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><h3 id="unique"><a class="markdownIt-Anchor" href="#unique"></a> UNIQUE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> 인덱스명 <span class="keyword">ON</span> 테이블명 (필드<span class="number">1</span>, 필드<span class="number">2</span>, ...);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [심볼]] <span class="keyword">UNIQUE</span> [인덱스명] [인덱스타입] (필드<span class="number">1</span>, 필드<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><h3 id="primary-key"><a class="markdownIt-Anchor" href="#primary-key"></a> PRIMARY KEY</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [심볼]] PRIMARY <span class="keyword">KEY</span> [인덱스타입] (필드<span class="number">1</span>, 필드<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><h3 id="foreign-key"><a class="markdownIt-Anchor" href="#foreign-key"></a> FOREIGN KEY</h3><p>외래키 생성 시 제약 조건과 INDEX 가 같이 생성되며, 외래키를 삭제 하더라도 INDEX 는 남게됩니다. 만약 인덱스도 삭제가 필요하다면 같이 삭제해야합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [심볼]] <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> [인덱스명] (필드<span class="number">1</span>, 필드<span class="number">2</span>, ...) [레퍼런스조건]</span><br><span class="line"> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> [RESTRICT | <span class="keyword">CASCADE</span> | <span class="keyword">SET</span> <span class="literal">NULL</span> | <span class="keyword">NO</span> <span class="keyword">ACTION</span> | <span class="keyword">SET</span> <span class="keyword">DEFAULT</span>]</span><br><span class="line"> <span class="keyword">ON</span> <span class="keyword">DELETE</span> [RESTRICT | <span class="keyword">CASCADE</span> | <span class="keyword">SET</span> <span class="literal">NULL</span> | <span class="keyword">NO</span> <span class="keyword">ACTION</span> | <span class="keyword">SET</span> <span class="keyword">DEFAULT</span>];</span><br></pre></td></tr></table></figure><h3 id="fulltext"><a class="markdownIt-Anchor" href="#fulltext"></a> FULLTEXT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> FULLTEXT <span class="keyword">INDEX</span> 인덱스명 <span class="keyword">ON</span> 테이블명 (필드<span class="number">1</span>, 필드<span class="number">2</span>, ...);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ADD</span> FULLTEXT [인덱스명 ] (필드<span class="number">1</span>, 필드<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><h2 id="인덱스-보기"><a class="markdownIt-Anchor" href="#인덱스-보기"></a> 인덱스 보기</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> 테이블명</span><br></pre></td></tr></table></figure><h2 id="인덱스-삭제"><a class="markdownIt-Anchor" href="#인덱스-삭제"></a> 인덱스 삭제</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> 인덱스명 <span class="keyword">ON</span> 테이블명;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> 인덱스명;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> [fk_symbol];</span><br></pre></td></tr></table></figure><h1 id="기타"><a class="markdownIt-Anchor" href="#기타"></a> 기타</h1><h2 id="키-활성화"><a class="markdownIt-Anchor" href="#키-활성화"></a> 키 활성화</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ENABLE</span> <span class="keyword">KEYS</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">DISABLE</span> <span class="keyword">KEYS</span>;</span><br></pre></td></tr></table></figure><h2 id="정렬"><a class="markdownIt-Anchor" href="#정렬"></a> 정렬</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 필드명;</span><br></pre></td></tr></table></figure><h2 id="캐릭터-셋"><a class="markdownIt-Anchor" href="#캐릭터-셋"></a> 캐릭터 셋</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 CONVER <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> 캐릭터셋</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> 캐릭터셋</span><br></pre></td></tr></table></figure><h2 id="데이터베이스-엔진-변경"><a class="markdownIt-Anchor" href="#데이터베이스-엔진-변경"></a> 데이터베이스 엔진 변경</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ENGINE</span>=&#123;<span class="keyword">InnoDB</span> | MyISAM&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/23/mysql-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MySQL] 인덱스(INDEX) 정리</title>
      <link>http://hgko1207.github.io/2022/11/17/mysql-4/</link>
      <guid>http://hgko1207.github.io/2022/11/17/mysql-4/</guid>
      <pubDate>Thu, 17 Nov 2022 06:57:35 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;인덱스index란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#인덱스index란&quot;&gt;&lt;/a&gt; 인덱스(index)란?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;인덱스(index)는 테이블에서 원하는 데이터를 쉽고 빠르게 찾
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="인덱스index란"><a class="markdownIt-Anchor" href="#인덱스index란"></a> 인덱스(index)란?</h2><blockquote><p>인덱스(index)는 테이블에서 원하는 데이터를 쉽고 빠르게 찾기 위해 사용합니다.<br />이러한 인덱스는 자주 사용되는 필드 값으로 만들어진 원본 테이블의 사본이라고 생각할 수 있습니다.<br />MySQL은 데이터를 검색할 때 첫 번째 필드부터 차례대로 테이블 전체를 검색합니다.<br />따라서 테이블이 크면 클수록 데이터를 탐색하는 시간도 많이 늘어나게 됩니다.</p></blockquote><h2 id="장점"><a class="markdownIt-Anchor" href="#장점"></a> 장점</h2><ul><li>MIN(), MAX() 등의 함수를 사용하는 쿼리에 대해 해당 필드에 인덱스가 있는 경우 빠르게 찾을 수 있습니다.</li><li>ORDER BY 와 GROUP BY 를 빠르게 수행할 수 있습니다.</li></ul><h2 id="단점"><a class="markdownIt-Anchor" href="#단점"></a> 단점</h2><ul><li>ISAM, MyISAM 테이블 인덱스를 무겁게 만들면 인덱스 파일이 데이터 파일보다 더 빠르게 최대 크기에 도달됩니다.</li><li>BDB(Berkeley DB) 테이블은 동일한 파일 내에 데이터와 인덱스 값을 함께 저장하며, 인덱스를 추가 하게 되면 해당 테이블의 최대 파일 크기에 빠르게 도달하게 됩니다.</li><li>InnoDB 테이블은 테이블 스페이스 안에 모든 공간을 공유하는 구조이며, 인덱스를 추가하면 테이블 스페이스 내의 공산을 빠르게 소모합니다.</li><li>검색속도는 향상되지만 삽입, 삭제, 갱신 속도는 느려집니다.</li></ul><h2 id="고려사항"><a class="markdownIt-Anchor" href="#고려사항"></a> 고려사항</h2><ul><li>인덱스를 위한 컬럼을 선택하는 가장 좋은 기준은 WHERE 절 안에 나오는 컬럼, 조인 절에 명명된 컬럼, ORDER BY, GROUP BY 절에 나오는 컬럼 등이 된다는 것 입니다.</li><li>SELECT 키워드 뒤에 나오는 출력 컬럼, 목록에만 나오는 컬럼은 좋은 선택이 아닙니다.</li><li>유일한 인덱스 사용: 유일한 값을 가지고 있는 컬럼들에 대해 효과가 좋고, 중복된 값들이 많은 컬럼들에 대해 효과가 나쁩니다.</li><li>짧은 값으로 인덱스를 만듭니다.</li><li>가장 왼쪽의 접두어를 활용합니다.</li></ul><h2 id="인덱스-생성"><a class="markdownIt-Anchor" href="#인덱스-생성"></a> 인덱스 생성</h2><p>CREATE 문을 사용하여 인덱스를 생성할 수 있습니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> 인덱스명 <span class="keyword">ON</span> 테이블명 (필드명<span class="number">1</span>, 필드명<span class="number">2</span>, ...)</span><br></pre></td></tr></table></figure><p>이때 쉼표(,)를 사용하여 여러 필드를 가지는 인덱스를 생성할 수도 있습니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 예</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> NameIdx <span class="keyword">On</span> <span class="keyword">Test</span> (<span class="keyword">Name</span>);</span><br></pre></td></tr></table></figure><h2 id="인덱스-추가"><a class="markdownIt-Anchor" href="#인덱스-추가"></a> 인덱스 추가</h2><p>기본 인덱스에서 필드의 값은 같은 값이 여러 번 저장될 수 있으며, NULL 값을 가질 수도 있습니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">ADD</span> <span class="keyword">INDEX</span> 인덱스명 (필드명)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 예</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">Test</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> NameIdx (<span class="keyword">Name</span>);</span><br></pre></td></tr></table></figure><h2 id="인덱스-삭제"><a class="markdownIt-Anchor" href="#인덱스-삭제"></a> 인덱스 삭제</h2><h3 id="alter-문으로-삭제"><a class="markdownIt-Anchor" href="#alter-문으로-삭제"></a> ALTER 문으로 삭제</h3><p>ALTER 문을 사용하면 해당 테이블에서 명시된 인덱스를 삭제할 수 있습니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> 인덱스명</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 예</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">Test</span> <span class="keyword">DROP</span> <span class="keyword">INDEX</span> NameIdx;</span><br></pre></td></tr></table></figure><h3 id="drop-문으로-삭제"><a class="markdownIt-Anchor" href="#drop-문으로-삭제"></a> DROP 문으로 삭제</h3><p>DROP 문을 사용하면 해당 테이블에서 명시된 인덱스를 삭제할 수 있습니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> 인덱스명 <span class="keyword">ON</span> 테이블명</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 예</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> NameIdx <span class="keyword">ON</span> <span class="keyword">Test</span>;</span><br></pre></td></tr></table></figure><h2 id="인덱스-정보-보기"><a class="markdownIt-Anchor" href="#인덱스-정보-보기"></a> 인덱스 정보 보기</h2><p>생성한 인덱스를 확인할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM 테이블명</span><br></pre></td></tr></table></figure><p>이때 반환되는 인덱스 정보의 필드 값은 다음과 같습니다.</p><ol><li>Table : 테이블의 이름을 표시함.</li><li>Non_unique : 인덱스가 중복된 값을 저장할 수 있으면 1, 저장할 수 없으면 0을 표시함.</li><li>Key_name : 인덱스의 이름을 표시하며, 인덱스가 해당 테이블의 기본 키라면 PRIMARY로 표시함.</li><li>Seq_in_index : 인덱스에서의 해당 필드의 순서를 표시함.</li><li>Column_name : 해당 필드의 이름을 표시함.</li><li>Collation : 인덱스에서 해당 필드가 정렬되는 방법을 표시함.</li><li>Cardinality : 인덱스에 저장된 유일한 값들의 수를 표시함.</li><li>Sub_part : 인덱스 접두어를 표시함.</li><li>Packed : 키가 압축되는(packed) 방법을 표시함.</li><li>Null : 해당 필드가 NULL을 저장할 수 있으면 YES를 표시하고, 저장할 수 없으면 ''를 표시함.</li><li>Index_type : 인덱스에 사용되는 메소드(method)를 표시함.</li><li>Comment : 해당 필드를 설명하는 것이 아닌 인덱스에 관한 기타 정보를 표시함.</li><li>Index_comment : 인덱스에 관한 모든 기타 정보를 표시함.</li></ol><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="http://www.tcpschool.com/mysql/mysql_index_create" target="_blank" rel="noopener">http://www.tcpschool.com/mysql/mysql_index_create</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/17/mysql-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MySQL] 계정 관리</title>
      <link>http://hgko1207.github.io/2022/11/17/mysql-3/</link>
      <guid>http://hgko1207.github.io/2022/11/17/mysql-3/</guid>
      <pubDate>Thu, 17 Nov 2022 04:34:33 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt; 에서 계정 생성 및 권한 부여와 계정 정보 수정하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;로그인&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#로그인&quot;&gt;&lt;/a&gt; 로그인&lt;/h
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>MySQL</strong> 에서 계정 생성 및 권한 부여와 계정 정보 수정하는 방법에 대해 알아보겠습니다.</p><h2 id="로그인"><a class="markdownIt-Anchor" href="#로그인"></a> 로그인</h2><p>root 의 패스워드를 입력하여 로그인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mysql -u root -p</span></span><br></pre></td></tr></table></figure><h2 id="계정-확인"><a class="markdownIt-Anchor" href="#계정-확인"></a> 계정 확인</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; show databases;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">| triplet_db         |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.435</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [(<span class="keyword">none</span>)]&gt; <span class="keyword">use</span> mysql;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><p>다음 명령어를 실행하여 사용자 계정들을 확인합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MySQL [mysql]&gt; SELECT user, host FROM user;</span><br><span class="line">+<span class="comment">-------------+-----------+</span></span><br><span class="line">| User        | Host      |</span><br><span class="line">+<span class="comment">-------------+-----------+</span></span><br><span class="line">|             | localhost |</span><br><span class="line">| mariadb.sys | localhost |</span><br><span class="line">| mysql       | localhost |</span><br><span class="line">| root        | localhost |</span><br><span class="line">+<span class="comment">-------------+-----------+</span></span><br></pre></td></tr></table></figure><h2 id="계정-생성"><a class="markdownIt-Anchor" href="#계정-생성"></a> 계정 생성</h2><p>사용자 계정을 생성하는 방법입니다.</p><h3 id="create-문으로-생성"><a class="markdownIt-Anchor" href="#create-문으로-생성"></a> CREATE 문으로 생성</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'계정명'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'비밀번호'</span>;</span><br></pre></td></tr></table></figure><h3 id="insert-문으로-생성"><a class="markdownIt-Anchor" href="#insert-문으로-생성"></a> INSERT 문으로 생성</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (host, <span class="keyword">user</span>, <span class="keyword">password</span>) <span class="keyword">VALUES</span> (<span class="string">'localhost'</span>, <span class="string">'계정명'</span>, <span class="keyword">password</span>(<span class="string">'비밀번호'</span>));</span><br></pre></td></tr></table></figure><p><strong>’localhost’</strong> 를 <strong>‘%’</strong> 로 변경하면 원격에서 접속 가능합니다.</p><h2 id="권한-부여"><a class="markdownIt-Anchor" href="#권한-부여"></a> 권한 부여</h2><p>생성된 계정에 대해 모든 권한을 부여하도록 설정합니다.</p><h3 id="grant-문으로-권한-부여"><a class="markdownIt-Anchor" href="#grant-문으로-권한-부여"></a> GRANT 문으로 권한 부여</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'USERNAME'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'PASSWORD'</span>;</span><br></pre></td></tr></table></figure><p>해당 데이터베이스에 대해서만 권한을 부여하도록 설정합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> DB명.* <span class="keyword">to</span> <span class="string">'계정명'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'비밀번호'</span>;</span><br></pre></td></tr></table></figure><h3 id="insert-문으로-권한-부여"><a class="markdownIt-Anchor" href="#insert-문으로-권한-부여"></a> INSERT 문으로 권한 부여</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> db (Host, Db, <span class="keyword">USer</span>, select_priv, Insert_priv, Update_priv, Delete_priv, Create_priv, Drop_priv)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'localhost'</span>, <span class="string">'DB명'</span>, <span class="string">'계정명'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>);</span><br></pre></td></tr></table></figure><p>DB명에 ‘%’ 를 넣으면 모든 DB를 나타냅니다.</p><h2 id="계정-정보-변경"><a class="markdownIt-Anchor" href="#계정-정보-변경"></a> 계정 정보 변경</h2><p>계정의 비밀번호 변경 하는 방법입니다.</p><h3 id="update-문으로-변경"><a class="markdownIt-Anchor" href="#update-문으로-변경"></a> UPDATE 문으로 변경</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="keyword">password</span>(<span class="string">'비밀번호'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'계정명'</span>;</span><br></pre></td></tr></table></figure><h3 id="set-문으로-변경"><a class="markdownIt-Anchor" href="#set-문으로-변경"></a> SET 문으로 변경</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'계정명'</span>@<span class="string">'localhost'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'비밀번호'</span>);</span><br></pre></td></tr></table></figure><h2 id="계정-삭제"><a class="markdownIt-Anchor" href="#계정-삭제"></a> 계정 삭제</h2><h3 id="delete-문으로-삭제"><a class="markdownIt-Anchor" href="#delete-문으로-삭제"></a> DELETE 문으로 삭제</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">user</span> = <span class="string">'계정명'</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> db <span class="keyword">WHERE</span> <span class="keyword">user</span> = <span class="string">'계정명'</span>;</span><br></pre></td></tr></table></figure><h3 id="drop-문으로-삭제"><a class="markdownIt-Anchor" href="#drop-문으로-삭제"></a> DROP 문으로 삭제</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'계정명'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><h2 id="권한-삭제"><a class="markdownIt-Anchor" href="#권한-삭제"></a> 권한 삭제</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">FROM</span> <span class="string">'계정명'</span>;</span><br></pre></td></tr></table></figure><h2 id="권한-확인"><a class="markdownIt-Anchor" href="#권한-확인"></a> 권한 확인</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MySQL [mysql]&gt; SHOW GRANTS FOR root;</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Grants for root@%                                                                                            |</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">`root`</span>@<span class="string">`%`</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="keyword">PASSWORD</span> <span class="string">'*D08D94B3E46A8CCDA5F1682F57F8BE24F5FD1C79'</span> |</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.002</span> sec)</span><br></pre></td></tr></table></figure><h2 id="설정-적용"><a class="markdownIt-Anchor" href="#설정-적용"></a> 설정 적용</h2><p>위의 설정 명령어들을 실행 후 다음 명령어를 실행해야 적용이 됩니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/17/mysql-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MySQL] 접속 에러 해결 방법</title>
      <link>http://hgko1207.github.io/2022/11/15/mysql-2/</link>
      <guid>http://hgko1207.github.io/2022/11/15/mysql-2/</guid>
      <pubDate>Tue, 15 Nov 2022 06:35:01 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt; 서버에 접속 시도시 다음과 같은 에러가 발생할 경우 해결 방법입니다.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>MySQL</strong> 서버에 접속 시도시 다음과 같은 에러가 발생할 경우 해결 방법입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mysql -u root</span></span><br><span class="line"></span><br><span class="line">ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (111)</span><br></pre></td></tr></table></figure><p>MySQL 사용자로 접속 시도시 <strong>/var/lib/mysql/</strong> 경로에서 mysql.sock 파일을 찾을 수 없어서 나오는 오류입니다.<br />먼저 mysql.sock 파일을 찾습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> find / -name <span class="string">"mysql.sock"</span></span></span><br><span class="line">/db/mysql_data/mysql.sock</span><br></pre></td></tr></table></figure><h2 id="해결-1"><a class="markdownIt-Anchor" href="#해결-1"></a> 해결 1</h2><p><code>my.cnf</code> 파일을 열고 다음 항목을 추가합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/my.cnf</span></span><br><span class="line">[client]</span><br><span class="line">socket=/db/mysql_data/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line">socket=/db/mysql_data/mysql.sock</span><br></pre></td></tr></table></figure><h2 id="해결-2"><a class="markdownIt-Anchor" href="#해결-2"></a> 해결 2</h2><p>심볼릭 링크를 사용합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ln -s /db/mysql_data/mysql.sock /var/lib/mysql/mysql.sock</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/15/mysql-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Java] Iteration 예</title>
      <link>http://hgko1207.github.io/2022/11/15/java-dev-11/</link>
      <guid>http://hgko1207.github.io/2022/11/15/java-dev-11/</guid>
      <pubDate>Tue, 15 Nov 2022 06:20:43 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;iteration&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#iteration&quot;&gt;&lt;/a&gt; Iteration&lt;/h2&gt;
&lt;p&gt;람다(Lambda)의 &lt;code&gt;forEach&lt;/code&gt; 함수를 사용하는 예제입니다.&lt;/p
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="iteration"><a class="markdownIt-Anchor" href="#iteration"></a> Iteration</h2><p>람다(Lambda)의 <code>forEach</code> 함수를 사용하는 예제입니다.</p><h2 id="사용-예"><a class="markdownIt-Anchor" href="#사용-예"></a> 사용 예</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; friends = Arrays.asList(<span class="string">"Brian"</span>, <span class="string">"Nate"</span>, <span class="string">"Neal"</span>, <span class="string">"Raju"</span>, <span class="string">"Sara"</span>, <span class="string">"Scott"</span>);</span><br></pre></td></tr></table></figure><h3 id="기존-for-문"><a class="markdownIt-Anchor" href="#기존-for-문"></a> 기존 for 문</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; friends.size(); i++) &#123;</span><br><span class="line">  System.out.println(friends.get(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String name : friends) &#123;</span><br><span class="line">  System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 결과</span></span><br><span class="line">Brian</span><br><span class="line">Nate</span><br><span class="line">Neal</span><br><span class="line">Raju</span><br><span class="line">Sara</span><br><span class="line">Scott</span><br></pre></td></tr></table></figure><h2 id="foreach-사용"><a class="markdownIt-Anchor" href="#foreach-사용"></a> forEach 사용</h2><p>forEach 함수를 사용한 예제입니다. 첫 번째부터 마지막까지 점점 코드가 간략해지는 것을 볼 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1)</span></span><br><span class="line">friends.forEach(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2)</span></span><br><span class="line">friends.forEach((<span class="keyword">final</span> String name) -&gt; System.out.println(name));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3)</span></span><br><span class="line">friends.forEach(name -&gt; System.out.println(name));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4)</span></span><br><span class="line">friends.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>결과는 모두 같습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 결과</span></span><br><span class="line">Brian</span><br><span class="line">Nate</span><br><span class="line">Neal</span><br><span class="line">Raju</span><br><span class="line">Sara</span><br><span class="line">Scott</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/15/java-dev-11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Java] 스트림(Stream) 사용</title>
      <link>http://hgko1207.github.io/2022/11/15/java-dev-10/</link>
      <guid>http://hgko1207.github.io/2022/11/15/java-dev-10/</guid>
      <pubDate>Tue, 15 Nov 2022 05:08:03 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;스트림stream&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#스트림stream&quot;&gt;&lt;/a&gt; 스트림(stream)&lt;/h2&gt;
&lt;p&gt;Java 8 버전부터 추가되었고 특정 요소 형식으로 이루어진 연속된 값에 대한 집합 인터
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="스트림stream"><a class="markdownIt-Anchor" href="#스트림stream"></a> 스트림(stream)</h2><p>Java 8 버전부터 추가되었고 특정 요소 형식으로 이루어진 연속된 값에 대한 집합 인터페이스를 제공합니다.<br /><code>filter</code>, <code>map</code>, <code>reduce</code>, <code>sort</code>, <code>find</code> 등의 함수들을 제공합니다.</p><h2 id="사용-예"><a class="markdownIt-Anchor" href="#사용-예"></a> 사용 예</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; people = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> Person(<span class="string">"Eden"</span>, <span class="number">20</span>),</span><br><span class="line">    <span class="keyword">new</span> Person(<span class="string">"Ko"</span>, <span class="number">21</span>),</span><br><span class="line">    <span class="keyword">new</span> Person(<span class="string">"Lee"</span>, <span class="number">21</span>),</span><br><span class="line">    <span class="keyword">new</span> Person(<span class="string">"Kang"</span>, <span class="number">25</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="mutable"><a class="markdownIt-Anchor" href="#mutable"></a> Mutable</h3><p>21살 이상의 사람을 찾는 코드입니다. <code>filter</code> 를 사용하여 20살 초과인 사람만 찾고 List 에 값을 넣는 예제입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; olderThan20 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">people.stream()</span><br><span class="line">  .filter(person -&gt; person.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">  .forEach(person -&gt; olderThan20.add(person));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"People older than 20: "</span> + olderThan20);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 결과</span></span><br><span class="line">People older than 20: [Person(name=Ko, age=21), Person(name=Lee, age=21), Person(name=Kang, age=25)]</span><br></pre></td></tr></table></figure><h3 id="collect"><a class="markdownIt-Anchor" href="#collect"></a> Collect</h3><p><code>collect</code> 를 사용하여 ArrayList 형식의 List 를 반환합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; olderThan20 = people.stream()</span><br><span class="line">      .filter(person -&gt; person.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">      .collect(ArrayList::<span class="keyword">new</span>, ArrayList::add, ArrayList::addAll);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"People older than 20: "</span> + olderThan20);</span><br></pre></td></tr></table></figure><h3 id="collect-to-list"><a class="markdownIt-Anchor" href="#collect-to-list"></a> Collect To List</h3><p><code>Collectors.toList()</code> 를 사용하여 Collect 형식을 List 로 변환합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; olderThan20 = people.stream()</span><br><span class="line">      .filter(person -&gt; person.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">      .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"People older than 20: "</span> + olderThan20);</span><br></pre></td></tr></table></figure><h3 id="group-by1"><a class="markdownIt-Anchor" href="#group-by1"></a> Group By(1)</h3><p>나이를 Key 로 해서 Map 을 생성하는 예제입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;Person&gt;&gt; peopleByAge = people.stream()</span><br><span class="line">        .collect(Collectors.groupingBy(Person::getAge));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Grouped by age: "</span> + peopleByAge);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 결과</span></span><br><span class="line">Grouped by age: &#123;20=[Person(name=Eden, age=20)], 21=[Person(name=Ko, age=21), Person(name=Lee, age=21)], 25=[Person(name=Kang, age=25)]&#125;</span><br></pre></td></tr></table></figure><h3 id="group-by2"><a class="markdownIt-Anchor" href="#group-by2"></a> Group By(2)</h3><p>값을 Person 객체가 아닌 이름으로 구성하는 예제입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;String&gt;&gt; nameOfPeopleByAge = people.stream()</span><br><span class="line">        .collect(Collectors.groupingBy(Person::getAge,</span><br><span class="line">          Collectors.mapping(Person::getName, Collectors.toList())));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"People grouped by age: "</span> + nameOfPeopleByAge);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 결과</span></span><br><span class="line">People grouped by age: &#123;20=[Eden], 21=[Ko, Lee], 25=[Kang]&#125;</span><br></pre></td></tr></table></figure><h3 id="reducing"><a class="markdownIt-Anchor" href="#reducing"></a> reducing</h3><p>이름의 첫글자가 같은 사람 중 나이가 많은 사람만 찾는 예제입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 나이 비교</span></span><br><span class="line">Comparator&lt;Person&gt; byAge = Comparator.comparing(Person::getAge);</span><br><span class="line"></span><br><span class="line">Map&lt;Character, Optional&lt;Person&gt;&gt; oldestPersonOfEachLetter = people.stream()</span><br><span class="line">        .collect(Collectors.groupingBy(person -&gt; person.getName().charAt(<span class="number">0</span>),</span><br><span class="line">                  Collectors.reducing(BinaryOperator.maxBy(byAge))));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Oldest person of each letter: "</span> + oldestPersonOfEachLetter);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 결과</span></span><br><span class="line">Oldest person of each letter: &#123;E=Optional[Person(name=Eden, age=20)], K=Optional[Person(name=Kang, age=25)], L=Optional[Person(name=Lee, age=21)]&#125;</span><br></pre></td></tr></table></figure><p>예제들을 통해 스트림(Stream) 사용하는 방법을 알아봤습니다. 제공하는 함수들을 잘 사용하면 좋은 결과 값을 얻을 수 있습니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/15/java-dev-10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java 8 람다(Lambda) 적용 예</title>
      <link>http://hgko1207.github.io/2022/11/09/java-dev-9/</link>
      <guid>http://hgko1207.github.io/2022/11/09/java-dev-9/</guid>
      <pubDate>Wed, 09 Nov 2022 01:17:47 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;람다lamdba-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#람다lamdba-란&quot;&gt;&lt;/a&gt; 람다(Lamdba) 란&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;람다식, 또는 람다 함수라 부른다.&lt;br /&gt;
프로그래밍 언
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="람다lamdba-란"><a class="markdownIt-Anchor" href="#람다lamdba-란"></a> 람다(Lamdba) 란</h2><blockquote><p>람다식, 또는 람다 함수라 부른다.<br />프로그래밍 언어에서 사용되는 개념으로, 익명 함수(Anonymous functions)를 지칭하는 용어이다.<br /><a href="https://namu.wiki/w/%EB%9E%8C%EB%8B%A4%EC%8B%9D" target="_blank" rel="noopener">나무위키</a></p></blockquote><h2 id="예제"><a class="markdownIt-Anchor" href="#예제"></a> 예제</h2><p>Map 에서 특정한 값을 가지는 entry 에 대해서 삭제하는 코드입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"XXX"</span>, <span class="string">"111"</span>);</span><br><span class="line">map.put(<span class="string">"YYY"</span>, <span class="string">"222"</span>);</span><br><span class="line">map.put(<span class="string">"ZZZ"</span>, <span class="string">"333"</span>);</span><br><span class="line">map.put(<span class="string">"AAA"</span>, <span class="string">"444"</span>);</span><br><span class="line">map.put(<span class="string">"BBB"</span>, <span class="string">"555"</span>);</span><br><span class="line"></span><br><span class="line">map.entrySet().stream()</span><br><span class="line">    .filter(entry -&gt; entry.getValue().equals(<span class="string">"111"</span>))</span><br><span class="line">    .map(entry -&gt; entry.getKey())</span><br><span class="line">    .collect(Collectors.toList())</span><br><span class="line">    .forEach(map::remove);</span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure><p>실행 결과입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;YYY=222, ZZZ=333, AAA=444, BBB=555&#125;</span><br></pre></td></tr></table></figure><p>만약, <code>collect</code> 함수를 삭제할 경우 컴파일 에러는 없지만 다음과 같은 예외를 발생합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.util.ConcurrentModificationException</span><br><span class="line">    at java.util.HashMap<span class="variable">$EntrySpliterator</span>.forEachRemaining(HashMap.java:20)</span><br></pre></td></tr></table></figure><p>삭제하는 코드를 간략하게 구현할 수 있지만 위의 예제는 람다식의 다양한 함수를 보여주기 위해 사용하였습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/09/java-dev-9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java 8 스트림 적용시 성능 변화</title>
      <link>http://hgko1207.github.io/2022/11/09/java-dev-8/</link>
      <guid>http://hgko1207.github.io/2022/11/09/java-dev-8/</guid>
      <pubDate>Wed, 09 Nov 2022 01:02:33 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;for-문&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#for-문&quot;&gt;&lt;/a&gt; for 문&lt;/h2&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="for-문"><a class="markdownIt-Anchor" href="#for-문"></a> for 문</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> startIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> endIndex = <span class="number">2000000000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = startIndex; i &lt; endIndex; i++) &#123;</span><br><span class="line">  sum += i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> processTime = System.currentTimeMillis() - startTime;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"sum : "</span> + sum);</span><br><span class="line">System.out.println(<span class="string">"process time : "</span> + processTime + <span class="string">"ms"</span>);</span><br></pre></td></tr></table></figure><p>실행 결과입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum : 1999999999000000000</span><br><span class="line">process time : 11919ms</span><br></pre></td></tr></table></figure><h2 id="stream-사용"><a class="markdownIt-Anchor" href="#stream-사용"></a> Stream 사용</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> startIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> endIndex = <span class="number">2000000000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> sum = LongStream.range(startIndex, endIndex).sum();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> processTime = System.currentTimeMillis() - startTime;</span><br><span class="line">System.out.println(<span class="string">"sum : "</span> + sum);</span><br><span class="line">System.out.println(<span class="string">"process time : "</span> + processTime + <span class="string">"ms"</span>);</span><br></pre></td></tr></table></figure><p>실행 결과입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum : 1999999999000000000</span><br><span class="line">process time : 33446ms</span><br></pre></td></tr></table></figure><h2 id="parallel-사용"><a class="markdownIt-Anchor" href="#parallel-사용"></a> parallel 사용</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> startIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> endIndex = <span class="number">2000000000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> sum = LongStream.range(startIndex, endIndex).parallel().sum();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> processTime = System.currentTimeMillis() - startTime;</span><br><span class="line">System.out.println(<span class="string">"sum : "</span> + sum);</span><br><span class="line">System.out.println(<span class="string">"process time : "</span> + processTime + <span class="string">"ms"</span>);</span><br></pre></td></tr></table></figure><p>실행 결과입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum : 1999999999000000000</span><br><span class="line">process time : 9407ms</span><br></pre></td></tr></table></figure><h2 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h2><p>기존 for 문으로 구현한 방식을 자바의 stream 형태로 변경했을 때 성능은 저하되나 병렬 처리를 사용하면 성능 향상을 할 수 있습니다.</p><p>for 문은 병렬 처리를 하려면 여러 쓰레드에 공유 자원에 대한 접근을 고려하여 구현해야 하기 때문에 쉽지 않은데 자바의 stream 을 사용할 경우 병럴 처리로 변경하는 과장이 <code>parallel()</code> 메소드만 호출하면 가능합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/09/java-dev-8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[PostgreSQL] 사용자, 그룹 관리</title>
      <link>http://hgko1207.github.io/2022/11/08/postgresql-6/</link>
      <guid>http://hgko1207.github.io/2022/11/08/postgresql-6/</guid>
      <pubDate>Tue, 08 Nov 2022 05:03:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;실행-파일을-통합-방법&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#실행-파일을-통합-방법&quot;&gt;&lt;/a&gt; 실행 파일을 통합 방법&lt;/h2&gt;
&lt;h3 id=&quot;사용자-생성&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="실행-파일을-통합-방법"><a class="markdownIt-Anchor" href="#실행-파일을-통합-방법"></a> 실행 파일을 통합 방법</h2><h3 id="사용자-생성"><a class="markdownIt-Anchor" href="#사용자-생성"></a> 사용자 생성</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> createuser hgko --createdb --no-superuser --no-createrole</span></span><br></pre></td></tr></table></figure><h3 id="사용자-삭제"><a class="markdownIt-Anchor" href="#사용자-삭제"></a> 사용자 삭제</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dropuser hgko</span></span><br></pre></td></tr></table></figure><h2 id="db-접속을-통한-방법"><a class="markdownIt-Anchor" href="#db-접속을-통한-방법"></a> DB 접속을 통한 방법</h2><h3 id="group-생성-수정-삭제"><a class="markdownIt-Anchor" href="#group-생성-수정-삭제"></a> GROUP 생성, 수정, 삭제</h3><ul><li><strong>SYSID</strong>: 내부의 GROUP ID 구분용 숫자 코드이며, 설정하지 않으면 자동으로 100부터 1씩 증가합니다. (1~99는 핵심적인 그룹을 위함) 자동으로 설정되게 하면됩니다.</li></ul><h4 id="group-생성"><a class="markdownIt-Anchor" href="#group-생성"></a> GROUP 생성</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">GROUP</span> [그룹명];</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">GROUP</span> [그룹명] <span class="keyword">WITH</span> <span class="keyword">USER</span> user1, user2, user3;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">GROUP</span> [그룹명] <span class="keyword">WITH</span> SYSID <span class="number">100</span> <span class="keyword">USER</span> user1;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">GROUP</span> [그룹명] <span class="keyword">WITH</span> SYSID <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h4 id="group-수정"><a class="markdownIt-Anchor" href="#group-수정"></a> GROUP 수정</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">GROUP</span> [그룹명] <span class="keyword">ADD</span> <span class="keyword">USER</span> user4, user5;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">GROUP</span> [그룹명] <span class="keyword">DROP</span> <span class="keyword">USER</span> user3;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">GROUP</span> [그룹명] <span class="keyword">RENAME</span> <span class="keyword">TO</span> [새로운 그룹명];</span><br></pre></td></tr></table></figure><h4 id="group-삭제"><a class="markdownIt-Anchor" href="#group-삭제"></a> GROUP 삭제</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">GROUP</span> [그룹명];</span><br></pre></td></tr></table></figure><ul><li>GROUP 조회</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1)</span></span><br><span class="line">postgres=<span class="comment"># \dg</span></span><br><span class="line">postgres=<span class="comment"># \du</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2)</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_group;</span><br></pre></td></tr></table></figure><h3 id="사용자-생성-수정-삭제"><a class="markdownIt-Anchor" href="#사용자-생성-수정-삭제"></a> 사용자 생성, 수정, 삭제</h3><h4 id="사용자-생성-2"><a class="markdownIt-Anchor" href="#사용자-생성-2"></a> 사용자 생성</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> test_user CREATEDB CREATEUSER <span class="keyword">IN</span> <span class="keyword">GROUP</span> test_group UNENCRYPTED <span class="keyword">PASSWORD</span> <span class="string">'1234'</span>;</span><br></pre></td></tr></table></figure><p>사용자 생성에 사용되는 옵션들입니다.</p><ul><li>[ SUPERUSER | NOSUPERUSER ]</li><li>[ CREATEDB | NOCREATEDB ]</li><li>[ CREATEROLE | NOCREATEROLE ]</li><li>[ CREATEUSER | NOCREATEUSER ]</li><li>[ LOGIN | NOLOGIN ]</li><li>[ ENCRYPTED | UNENCRYPTED ] PASSOWRD ‘password’</li><li>VALID UNTIL ‘timestamp’</li><li>IN ROLE role_name [, …]</li><li>IN GROUP group_name [, …]</li><li>ROLE role_name [, …]</li><li>ADMIN role_name [, …]</li><li>USER role_name [, …]</li><li>SYSID uid</li></ul><h4 id="사용자-수정"><a class="markdownIt-Anchor" href="#사용자-수정"></a> 사용자 수정</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> [사용자명] <span class="keyword">RENAME</span> <span class="keyword">TO</span> [새로운 사용자명];</span><br></pre></td></tr></table></figure><h4 id="사용자-삭제-2"><a class="markdownIt-Anchor" href="#사용자-삭제-2"></a> 사용자 삭제</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> [사용자명]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/08/postgresql-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[PostgreSQL] 사용자 인증</title>
      <link>http://hgko1207.github.io/2022/11/08/postgresql-5/</link>
      <guid>http://hgko1207.github.io/2022/11/08/postgresql-5/</guid>
      <pubDate>Tue, 08 Nov 2022 04:39:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;사용자-인증&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#사용자-인증&quot;&gt;&lt;/a&gt; 사용자 인증&lt;/h2&gt;
&lt;p&gt;Postgresql 을 처음 설치하게 되면 비밀번호를 묻지 않고 로그인을 할 수 있습니다.&lt;br /&gt;
인증과
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="사용자-인증"><a class="markdownIt-Anchor" href="#사용자-인증"></a> 사용자 인증</h2><p>Postgresql 을 처음 설치하게 되면 비밀번호를 묻지 않고 로그인을 할 수 있습니다.<br />인증과정을 포함하려면 <strong>pg_hba.conf</strong> 에서 설정해야 합니다.</p><p><strong>pg_hba.conf</strong> 파일은 initdb 에서 생성된 클러스터 폴더에 위치합니다.</p><p>Authentication Method 필드의 값에 따라서 인증처리가 됩니다.</p><ul><li>trust: 패스워드 없이 접근 가능 (local 이외에는 비추천)</li><li>reject: 거부</li><li>md5: 패스워드를 md5 로 암호화해서 전송</li><li>password: text 로 패스워드를 사용 (스니핑에 바로 보임)</li></ul><h2 id="사용-예제"><a class="markdownIt-Anchor" href="#사용-예제"></a> 사용 예제</h2><p>TCP/IP 로 127.0.0.1 에 접근시 모든 DB, 사용자로의 접근에 패스워드가 필요없는 예제입니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host  all  all  127.0.0.1/32  trust</span><br></pre></td></tr></table></figure><p>TCP/IP 로 192.168.0.1 에 접근시 hgko 계정으로 모든 DB 에 대한 접근이 허용되며, md5 로 패스워드를 암호화 해야 하는 예제입니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host  all  hgko  192.168.0.1/32  md5</span><br></pre></td></tr></table></figure><p>TCP/IP 로 192.168.0.1 에 접근시 hgko 계정으로 mydb,test DB 에 대한 접근이 허용되며, md5 로 패스워드를 암호화 해야 하는 예제입니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host  mydb,<span class="built_in">test</span>  hgko  192.168.0.1/32  md5</span><br></pre></td></tr></table></figure><p>원격 어디서든지 remotegroup 의 SYSID 로 설정된 계정들로 remotedb 의 접근이 허용되며, md5 로 패스워드를 암호화 해야 하는 예제입니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host  remotedb  +remotegroup  0.0.0.0/0  md5</span><br></pre></td></tr></table></figure><h2 id="모든-호스트로-부터-접속-허용"><a class="markdownIt-Anchor" href="#모든-호스트로-부터-접속-허용"></a> 모든 호스트로 부터 접속 허용</h2><p><strong>postgresql.conf</strong> 파일을 수정합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen_addresses = <span class="string">'*'</span></span><br></pre></td></tr></table></figure><p><strong>pg_hba.conf</strong> 파일을 수정합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TYPE DATABASE USER CIDR-ADDRESS METHOD</span></span><br><span class="line">host  all  all  0.0.0.0/0  md5</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.postgresql.kr/docs/9.5/auth-methods.html" target="_blank" rel="noopener">https://www.postgresql.kr/docs/9.5/auth-methods.html</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/08/postgresql-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Oracle] 사용자 및 테이블 조회</title>
      <link>http://hgko1207.github.io/2022/11/04/oracle-5/</link>
      <guid>http://hgko1207.github.io/2022/11/04/oracle-5/</guid>
      <pubDate>Fri, 04 Nov 2022 07:57:39 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;테이블-스페이스-남은-공간-조회&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#테이블-스페이스-남은-공간-조회&quot;&gt;&lt;/a&gt; 테이블 스페이스 남은 공간 조회&lt;/h2&gt;
&lt;p&gt;현재 접속한 사용자의 &lt;strong&gt;DEFAULT
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="테이블-스페이스-남은-공간-조회"><a class="markdownIt-Anchor" href="#테이블-스페이스-남은-공간-조회"></a> 테이블 스페이스 남은 공간 조회</h2><p>현재 접속한 사용자의 <strong>DEFAULT_TABLESPACE</strong> 남은 공간을 조회합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  ts.tablespace_name,</span><br><span class="line">  TO_CHAR(<span class="keyword">SUM</span>(NVL(fs.bytes, <span class="number">0</span>)) / <span class="number">1024</span> / <span class="number">1024</span>, <span class="string">'99,999,990.99'</span>) <span class="keyword">AS</span> MB_FREE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  user_free_space fs,</span><br><span class="line">  user_tablespace ts,</span><br><span class="line">  user_users us</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  fs.tablespace_name(+) = ts.tablespace_name <span class="keyword">AND</span></span><br><span class="line">  ts.tablespace_name(+) = us.default_tablespace</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  ts.tablespace_name;</span><br></pre></td></tr></table></figure><p>‘user_’ prefix 가 붙게 되면 로그인한 계정에 관련된 내용이 출력됩니다.</p><h2 id="사용자-조회"><a class="markdownIt-Anchor" href="#사용자-조회"></a> 사용자 조회</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; SELECT * FROM user_users;</span><br><span class="line">SQL&gt; SELECT username, user_id, default_tablespace FROM dba_users;</span><br><span class="line">SQL&gt; SELECT * FROM all_users;</span><br></pre></td></tr></table></figure><h2 id="테이블-조회"><a class="markdownIt-Anchor" href="#테이블-조회"></a> 테이블 조회</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; SELECT * FROM tab;</span><br><span class="line">SQL&gt; SELECT table_name, tablespace_name FROM user_tables;</span><br><span class="line">SQL&gt; SELECT owner, table_name, tablespace_nsme, cluster_name FROM dba_tables;</span><br><span class="line">SQL&gt; SELECT * FROM all_tables;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/04/oracle-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Oracle] 계정 관리</title>
      <link>http://hgko1207.github.io/2022/11/04/oracle-4/</link>
      <guid>http://hgko1207.github.io/2022/11/04/oracle-4/</guid>
      <pubDate>Fri, 04 Nov 2022 06:44:12 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Oracle&lt;/strong&gt; 에서 계정 생성, 삭제 및 권한을 부여하는 방법입니다.&lt;/p&gt;
&lt;h2 id=&quot;계정-생성-및-권한-부여&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#계정-생성-및-권한-부여&quot;&gt;&lt;/a&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Oracle</strong> 에서 계정 생성, 삭제 및 권한을 부여하는 방법입니다.</p><h2 id="계정-생성-및-권한-부여"><a class="markdownIt-Anchor" href="#계정-생성-및-권한-부여"></a> 계정 생성 및 권한 부여</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; CREATE USER [계정]</span><br><span class="line">     IDENTIFIED BY [비밀번호]</span><br><span class="line">     DEFAULT TABLESPACE [테이블스페이스명]</span><br><span class="line">     QUOTA unlimited ON [테이블스페이스명]  <span class="comment">-- 테이블 스페이스의 내용을 모두 쓸 수 있다.</span></span><br><span class="line">     TEMPORARY TABLESPACE [임시테이블스페이스명];</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 예</span></span><br><span class="line">SQL&gt; CREATE USER test</span><br><span class="line">     IDENTIFIED BY 123!@<span class="comment">#QWE</span></span><br><span class="line">     DEFAULT TABLESPACE users</span><br><span class="line">     QUOTA unlimited ON users</span><br><span class="line">     TEMPORARY TABLESPACE temp;</span><br></pre></td></tr></table></figure><h2 id="계정-기본-테이블-스페이스-변경"><a class="markdownIt-Anchor" href="#계정-기본-테이블-스페이스-변경"></a> 계정 기본 테이블 스페이스 변경</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; ALTER USER [계정] DEFAULT TABLESPACE [테이블스페이스명];</span><br><span class="line">SQL&gt; ALTER USER [계정] TEMPORARY TABLESPACE [임시테이블스페이스명];</span><br></pre></td></tr></table></figure><h2 id="계정-삭제"><a class="markdownIt-Anchor" href="#계정-삭제"></a> 계정 삭제</h2><p><code>CASCADE</code> 를 명시하면 계정과 관련된 모든 데이터베이스 스키마가 삭제되고 모든 스키마 객체도 물리적으로 삭제됩니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; DROP USER [계정] CASCADE;</span><br></pre></td></tr></table></figure><h2 id="계정별-lock-상태-조회"><a class="markdownIt-Anchor" href="#계정별-lock-상태-조회"></a> 계정별 Lock 상태 조회</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; SELECT username, account_status, to_char(lock_date, 'YYYY-MM-DD HH24:MI') lock_date</span><br><span class="line">     FROM dba_users;</span><br></pre></td></tr></table></figure><h2 id="lock-해제"><a class="markdownIt-Anchor" href="#lock-해제"></a> Lock 해제</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; ALTER USER [계정] IDENTIFIED BY [비밀번호] ACCOUNT UNLOCK;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/04/oracle-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Oracle] 테이블 스페이스 사용 방법</title>
      <link>http://hgko1207.github.io/2022/11/04/oracle-3/</link>
      <guid>http://hgko1207.github.io/2022/11/04/oracle-3/</guid>
      <pubDate>Fri, 04 Nov 2022 06:44:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;테이블-스페이스table-space란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#테이블-스페이스table-space란&quot;&gt;&lt;/a&gt; 테이블 스페이스(Table Space)란&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;st
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="테이블-스페이스table-space란"><a class="markdownIt-Anchor" href="#테이블-스페이스table-space란"></a> 테이블 스페이스(Table Space)란</h2><blockquote><p><strong>테이블스페이스</strong>(Tablespace)는 데이터베이스 오브젝트 내 실제 데이터를 저장하는 공간이다. 이것은 데이터베이스의 물리적인 부분이며, 세그먼트로 관리되는 모든 DBMS에 대해 저장소(세그먼트)를 할당한다.<br />테이블스페이스는 단지 데이터베이스 저장소 위치를 지정할 뿐이며, 논리적 데이터베이스 구조나 스키마를 지정하지 않는다. 예를 들면, 동일한 스키마내의 다른 오브젝트는 서로 다른 테이블스페이스에 놓일 수 있다. 마찬가지로, 하나의 테이블스페이스는 여러 세그먼트들을 서비스 할 수 있다. <a href="https://ko.wikipedia.org/wiki/%ED%85%8C%EC%9D%B4%EB%B8%94%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4" target="_blank" rel="noopener">위키백과</a></p></blockquote><h2 id="테이블-스페이스-조회"><a class="markdownIt-Anchor" href="#테이블-스페이스-조회"></a> 테이블 스페이스 조회</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; SELECT * FROM dba_tablespaces;</span><br><span class="line">SQL&gt; SELECT * FROM dba_data_files;</span><br></pre></td></tr></table></figure><h2 id="테이블-스페이스-생성"><a class="markdownIt-Anchor" href="#테이블-스페이스-생성"></a> 테이블 스페이스 생성</h2><p>오라클 DBMS는 테이블스페이스 생성을 위해 <strong>CREATE TABLESPACE</strong> 명령어를 사용합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; CREATE TABLESPACE [테이블스페이스명]</span><br><span class="line">     DATAFILE '/db/oracle_data/ts.dbf'</span><br><span class="line">     SIZE 200M autoextent on next 100M;</span><br></pre></td></tr></table></figure><ul><li>DATAFILE: 파일 경로</li><li>SIZE: 초기 데이터 파일 크기 설정</li><li>autoextent on next: 초기 크기 공간을 모두 사용하는 경우 자동으로 파일의 크기가 커지는 기능</li></ul><h2 id="테이블-스페이스-삭제"><a class="markdownIt-Anchor" href="#테이블-스페이스-삭제"></a> 테이블 스페이스 삭제</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; DROP TABLESPACE [테이블스페이스명]</span><br><span class="line">     INCLUDING CONTENTS AND DATAFILES</span><br><span class="line">     CASCADE CONSTRAINTS;</span><br></pre></td></tr></table></figure><ul><li>INCLUDING CONTENTS: 테이블 스페이스의 모든 세그먼트 삭제</li><li>INCLUDING CONTENTS AND DATAFILES: 테이블 스페이스의 물리적파일까지 삭제</li><li>CASCADE CONSTRAINTS: 제약 조건 삭제</li></ul><h2 id="테이블-스페이스-이동"><a class="markdownIt-Anchor" href="#테이블-스페이스-이동"></a> 테이블 스페이스 이동</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; ALTER TABLE [테이블명] MOVE TABLESPACE [테이블스페이스명];</span><br><span class="line">SQL&gt; ALTER INDEX [인덱스명] REBUILD TABLESPACE [테이블스페이스명];</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/04/oracle-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] Service 등록 및 실행 방법</title>
      <link>http://hgko1207.github.io/2022/11/03/linux-21/</link>
      <guid>http://hgko1207.github.io/2022/11/03/linux-21/</guid>
      <pubDate>Thu, 03 Nov 2022 08:07:08 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 Tomcat 을 구동하는 서비스를 등록하고 실행하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;service-파일-생성&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#service-파일-생성&quot;&gt;&lt;/a&gt; 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 Tomcat 을 구동하는 서비스를 등록하고 실행하는 방법에 대해 알아보겠습니다.</p><h2 id="service-파일-생성"><a class="markdownIt-Anchor" href="#service-파일-생성"></a> Service 파일 생성</h2><p><strong>/etc/systemd/system/</strong> 위치에 service 파일을 생성합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/systemd/system/tomcat-server.service</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=TOMCAT SERVER Service</span><br><span class="line">After=network.target syslog.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/tomcat-server/bin/startup.sh</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/tomcat-server/bin/shutdown.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>Description: 서비스 설명</li><li>ExecStart: 실행할 서버 및 프로그램이 위치한 전체 경로</li><li>ExecStop: 종료할 서버 및 프로그램이 위치한 전체 경로</li><li>WantedBy: systemctl enable 명령어로 유닛을 등록할때 등록에 필요한 유닛 지정</li></ul><h2 id="service-등록"><a class="markdownIt-Anchor" href="#service-등록"></a> Service 등록</h2><p>생성한 서비스를 등록합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> tomcat-server.service</span></span><br></pre></td></tr></table></figure><h2 id="service-비활성화"><a class="markdownIt-Anchor" href="#service-비활성화"></a> Service 비활성화</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">disable</span> tomcat-server.service</span></span><br></pre></td></tr></table></figure><h2 id="service-시작"><a class="markdownIt-Anchor" href="#service-시작"></a> Service 시작</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start tomcat-server.service</span></span><br></pre></td></tr></table></figure><h2 id="service-재시작"><a class="markdownIt-Anchor" href="#service-재시작"></a> Service 재시작</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart tomcat-server.service</span></span><br></pre></td></tr></table></figure><h2 id="service-종료"><a class="markdownIt-Anchor" href="#service-종료"></a> Service 종료</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop tomcat-server.service</span></span><br></pre></td></tr></table></figure><h2 id="service-실행-확인"><a class="markdownIt-Anchor" href="#service-실행-확인"></a> Service 실행 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl status tomcat-server.service</span></span><br></pre></td></tr></table></figure><h2 id="service-목록-확인"><a class="markdownIt-Anchor" href="#service-목록-확인"></a> Service 목록 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl list-unit-files</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/03/linux-21/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WGS84 - 도분초 변환</title>
      <link>http://hgko1207.github.io/2022/11/03/satellite-wgs84/</link>
      <guid>http://hgko1207.github.io/2022/11/03/satellite-wgs84/</guid>
      <pubDate>Thu, 03 Nov 2022 07:58:10 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;세계 지구 좌표 시스템(World Geodetic System, WGS) 1984년에 제정된 범 지구적 측위 시스템으로 지도학, 측지학, 항법에 많이 사용된다. GPS측량 시 WGS84 타원체를 사용한다.&lt;br /&gt;
통칭 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote><p>세계 지구 좌표 시스템(World Geodetic System, WGS) 1984년에 제정된 범 지구적 측위 시스템으로 지도학, 측지학, 항법에 많이 사용된다. GPS측량 시 WGS84 타원체를 사용한다.<br />통칭 및 약칭은 WGS 84 (aka WGS 1984, EPSG:4326, WGS84)라고 부르며, 2004년에 마지막으로 개정되었다. 이전에 쓰던 초안으로 WGS 72, WGS 66, 그리고 WGS 60이 있다. <a href="https://ko.wikipedia.org/wiki/%EC%84%B8%EA%B3%84_%EC%A7%80%EA%B5%AC_%EC%A2%8C%ED%91%9C_%EC%8B%9C%EC%8A%A4%ED%85%9C" target="_blank" rel="noopener">위키백과</a></p></blockquote><ul><li>3735.0079 는 위도로서 37도 35.0079분을 뜻합니다. 도(degree) 단위로 환산시, 대략 37.5도가 됩니다.</li><li>12701.6446 은 경도로서 127도 1.6446분을 뜻합니다. 도(degree) 단위로 환산시, 대략 127.0도가 됩니다.</li><li>DDMM.MMMM , DDDMM.MMMM 형식입니다.</li></ul><p>일반적으로 WGS84 좌표라고 하면서 37.494961 , 127.030380 이런식으로 이용하면<br />그냥 37점494961도 라고 읽으면 됩니다.</p><h2 id="도분초-변환"><a class="markdownIt-Anchor" href="#도분초-변환"></a> 도분초 변환</h2><p>도를 도 분 초로 변환하는 자바 소스 코드입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> lat = <span class="number">37.494961</span>;</span><br><span class="line"><span class="keyword">float</span> lon = <span class="number">127.030380</span>;</span><br><span class="line"></span><br><span class="line">lat_do = (<span class="keyword">int</span>)lat;</span><br><span class="line">lat_min = (lat - (<span class="keyword">int</span>)lat) * <span class="number">60</span>;</span><br><span class="line">lat_sec = ((lat - (<span class="keyword">int</span>)lat) * <span class="number">60</span> - lat_min) * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">lon_do = (<span class="keyword">int</span>)lon;</span><br><span class="line">lon_min = (lon - (<span class="keyword">int</span>)lon) * <span class="number">60</span>;</span><br><span class="line">lon_sec = ((lon - (<span class="keyword">int</span>)lon) * <span class="number">60</span> - lon_min) * <span class="number">60</span>;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/03/satellite-wgs84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular Development with TypeScript</title>
      <link>http://hgko1207.github.io/2022/11/02/book-2/</link>
      <guid>http://hgko1207.github.io/2022/11/02/book-2/</guid>
      <pubDate>Wed, 02 Nov 2022 03:40:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;책-정보&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#책-정보&quot;&gt;&lt;/a&gt; 책 정보&lt;/h3&gt;
&lt;img width=&quot;100%&quot; src=&quot;/images/book/book2.png&quot; alt=&quot;&quot; title=&quot;Angular 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="책-정보"><a class="markdownIt-Anchor" href="#책-정보"></a> 책 정보</h3><img width="100%" src="/images/book/book2.png" alt="" title="Angular Development with TypeScript"><h3 id="책-소개"><a class="markdownIt-Anchor" href="#책-소개"></a> 책 소개</h3><p>Angular는 Google이 주관하는 웹 애플리케이션 프레임워크다. 개발자들에게 큰 인기를 끌었던 이전 버전의 AngularJS는 이제 새로운 구조와 철학을 도입해서 완전히 새로운 프레임워크가 되어 돌아왔다. 새로운 버전의 Angular에서 제공하는 훌륭한 기능과 웹 컴포넌트 기반 철학을 깊이 있게 알아보고, 데이터를 뷰에 표시하는 방법, 사용자가 입력한 폼 데이터 처리, 서버와 통신, 테스트와 배포까지 애플리케이션의 모든 개발 단계를 다룬다. 더불어 현업에 바로 적용할 수 있도록 다양한 예제와 함께 설명하며, 중대형 규모의 애플리케이션 개발에 적합한 TypeScript와 ES6에 대해서도 알아본다. 이 책을 마지막까지 읽고 나면, 실무에 바로 도입할 수준이 될 것이다.</p><h3 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h3><p>최근 Angular로 프로젝트를 진행할 일이 생겨서 읽게 되었습니다. 예전에 나온 책이라 최근 Angular 버전과는 차이가 있지만 각 핵심 내용이 잘 정리가 되어 있고 번역서임에도 불구하고 번역이 굉장히 깔끔하였습니다. 분량이 많아 필요한 부분을 정독했는데 좋은 예제들로 쉽게 이해시켜줘서 프로젝트를 진행하는데 도움이 많이 된 것 같습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/11/02/book-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MariaDB] 계정 생성 및 권한 부여</title>
      <link>http://hgko1207.github.io/2022/10/28/mariadb-1/</link>
      <guid>http://hgko1207.github.io/2022/10/28/mariadb-1/</guid>
      <pubDate>Fri, 28 Oct 2022 08:19:20 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;MariaDB&lt;/strong&gt; 에서 계정을 생성하고 권한을 부여하는 방법입니다.&lt;/p&gt;
&lt;h2 id=&quot;로그인&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#로그인&quot;&gt;&lt;/a&gt; 로그인&lt;/h2&gt;
&lt;p&gt;root 의 패스
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>MariaDB</strong> 에서 계정을 생성하고 권한을 부여하는 방법입니다.</p><h2 id="로그인"><a class="markdownIt-Anchor" href="#로그인"></a> 로그인</h2><p>root 의 패스워드를 입력하여 로그인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mysql -u root -p</span></span><br></pre></td></tr></table></figure><h2 id="계정-확인"><a class="markdownIt-Anchor" href="#계정-확인"></a> 계정 확인</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">| triplet_db         |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.435</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="keyword">none</span>)]&gt; <span class="keyword">use</span> mysql;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><p>다음 명령어를 실행하여 사용자 계정들을 확인합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [mysql]&gt; SELECT user, host FROM user;</span><br><span class="line">+<span class="comment">-------------+-----------+</span></span><br><span class="line">| User        | Host      |</span><br><span class="line">+<span class="comment">-------------+-----------+</span></span><br><span class="line">|             | localhost |</span><br><span class="line">| mariadb.sys | localhost |</span><br><span class="line">| mysql       | localhost |</span><br><span class="line">| root        | localhost |</span><br><span class="line">+<span class="comment">-------------+-----------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.002</span> sec)</span><br></pre></td></tr></table></figure><h2 id="계정-생성"><a class="markdownIt-Anchor" href="#계정-생성"></a> 계정 생성</h2><p>로컬에서만 접속이 가능하도록 계정을 생성하는 방법입니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'계정명'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'비밀번호'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 예)</span></span><br><span class="line">MariaDB [mysql]&gt; CREATE USER 'test'@'localhost' IDENTIFIED BY 'test!@';</span><br></pre></td></tr></table></figure><p>로컬 및 원격에서 접속이 가능하도록 계정을 생성하는 방법입니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'계정명'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'비밀번호'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 예)</span></span><br><span class="line">MariaDB [mysql]&gt; CREATE USER 'test'@'%' IDENTIFIED BY 'test!@';</span><br></pre></td></tr></table></figure><h2 id="권한-부여"><a class="markdownIt-Anchor" href="#권한-부여"></a> 권한 부여</h2><p>생성된 계정에 대해 모든 권한을 부여하도록 설정합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'계정명'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'비밀번호'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 예</span></span><br><span class="line">MariaDB [mysql]&gt; grant all privileges on *.* to 'test'@'%' identified by 'test!@';</span><br><span class="line"><span class="comment">-- 변경된 권한 적용</span></span><br><span class="line">MariaDB [mysql]&gt; flush privileges;</span><br></pre></td></tr></table></figure><p>해당 데이터베이스에 대해서만 권한을 부여하도록 설정합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> DB명.* <span class="keyword">to</span> <span class="string">'계정명'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'비밀번호'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 예)</span></span><br><span class="line">MariaDB [mysql]&gt; grant all privileges on test_db.* to 'test'@'%' identified by 'test!@';</span><br><span class="line">MariaDB [mysql]&gt; flush privileges;</span><br></pre></td></tr></table></figure><h2 id="확인"><a class="markdownIt-Anchor" href="#확인"></a> 확인</h2><p>계정 생성이 완료되면 생성된 계정으로 로그인 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mysql -u <span class="built_in">test</span> -p</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/10/28/mariadb-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] MariaDB 설치</title>
      <link>http://hgko1207.github.io/2022/10/26/linux-20/</link>
      <guid>http://hgko1207.github.io/2022/10/26/linux-20/</guid>
      <pubDate>Wed, 26 Oct 2022 04:32:16 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 &lt;strong&gt;MariaDB&lt;/strong&gt; 설치 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;mariadb-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mariadb-란&quot;&gt;&lt;/a&gt; MariaDB 란
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 <strong>MariaDB</strong> 설치 방법에 대해 알아보겠습니다.</p><h2 id="mariadb-란"><a class="markdownIt-Anchor" href="#mariadb-란"></a> MariaDB 란</h2><blockquote><p>MariaDB는 오픈 소스의 관계형 데이터베이스 관리 시스템이다. MySQL과 동일한 소스 코드를 기반으로 하며, GPL v2 라이선스를 따른다. 오라클 소유의 현재 불확실한 MySQL의 라이선스 상태에 반발하여 만들어졌으며, 배포자는 몬티 프로그램 AB와 저작권을 공유해야 한다. <a href="https://ko.wikipedia.org/wiki/MariaDB" target="_blank" rel="noopener">위키백과</a></p></blockquote><h2 id="mariadb-저장소-추가"><a class="markdownIt-Anchor" href="#mariadb-저장소-추가"></a> MariaDB 저장소 추가</h2><p>yum 저장소에는 MariaDB 라이브러리가 없기 때문에 저장소를 추가합니다.</p><p><a href="https://mariadb.org/download/?t=mariadb&amp;p=mariadb&amp;r=11.1.0" target="_blank" rel="noopener">MariaDB Server 다운로드 사이트</a>에 연결한 후에 MariaDB Repositories 탭을 클릭합니다.</p><img width="100%" src="/images/linux/mariadb.png" alt="" title="mariadb"><ol><li>사용하는 배포판을 선택합니다.</li><li>설치할 버전을 선택합니다.</li><li>미러 사이트를 선택합니다.</li><li>4번에 있는 내용을 아래 명령어를 실행한 후에 복사합니다.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ vi /etc/yum.repos.d/MariaDB.repo</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> MariaDB 10.4 CentOS repository list - created 2023-06-02 08:54 UTC</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://mariadb.org/download/</span></span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm.mariadb.org is a dynamic mirror <span class="keyword">if</span> your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ <span class="keyword">for</span> details.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> baseurl = https://rpm.mariadb.org/10.4/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span></span></span><br><span class="line">baseurl = https://tw1.mirror.blendbyte.net/mariadb/yum/10.4/centos/$releasever/$basearch</span><br><span class="line">module_hotfixes = 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB</span></span><br><span class="line">gpgkey = https://tw1.mirror.blendbyte.net/mariadb/yum/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck = 1</span><br></pre></td></tr></table></figure><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p>저장소를 추가하였다면 설치를 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ sudo yum install MariaDB-server MariaDB-client</span><br></pre></td></tr></table></figure><h2 id="설치-확인"><a class="markdownIt-Anchor" href="#설치-확인"></a> 설치 확인</h2><p>잘 설치가 되었는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ rpm -qa | grep MariaDB</span><br><span class="line">MariaDB-common-10.4.26-1.el7.centos.x86_64</span><br><span class="line">MariaDB-client-10.4.26-1.el7.centos.x86_64</span><br><span class="line">MariaDB-server-10.4.26-1.el7.centos.x86_64</span><br><span class="line">MariaDB-compat-10.4.26-1.el7.centos.x86_64</span><br></pre></td></tr></table></figure><h2 id="서비스-시작"><a class="markdownIt-Anchor" href="#서비스-시작"></a> 서비스 시작</h2><p>부팅시 자동시작되도록 서비스를 등록하고 시작합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ systemctl enable mariadb</span><br><span class="line">[root@localhost ~]$ systemctl start mariadb</span><br></pre></td></tr></table></figure><h2 id="패스워드-변경"><a class="markdownIt-Anchor" href="#패스워드-변경"></a> 패스워드 변경</h2><p>패스워드를 변경합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ /usr/bin/mysqladmin -u root password '패스워드'</span><br></pre></td></tr></table></figure><h2 id="접속-확인"><a class="markdownIt-Anchor" href="#접속-확인"></a> 접속 확인</h2><p>다음 명령어를 실행한 후 패스워드를 입력하면 접속이 됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ mysql -u root -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 8</span><br><span class="line">Server version: 10.4.26-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure><h2 id="모든-ip-허용"><a class="markdownIt-Anchor" href="#모든-ip-허용"></a> 모든 IP 허용</h2><p>외부에서 접속을 하기 위해 모든 IP가 허용가능하도록 설정합니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '패스워드';</span><br><span class="line">MariaDB [(none)]&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h2 id="방화벽-포트-개방"><a class="markdownIt-Anchor" href="#방화벽-포트-개방"></a> 방화벽 포트 개방</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ netstat -anp | grep 3306</span><br><span class="line">tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      12596/mysqld</span><br></pre></td></tr></table></figure><p>Mariadb 포트는 3306 입니다. 외부에서 접속하기 위해 3306 포트를 개방합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 포트 개방</span></span><br><span class="line">[root@localhost ~]$ firewall-cmd --permanent --zone=public --add-port=3306/tcp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 방화벽 재시작</span></span><br><span class="line">[root@localhost ~]$ firewall-cmd --reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> 개방된 포트 목록 확인</span></span><br><span class="line">[root@localhost ~]$ firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://zetawiki.com/wiki/CentOS7_MariaDB_%EC%84%A4%EC%B9%98" target="_blank" rel="noopener">https://zetawiki.com/wiki/CentOS7_MariaDB_%EC%84%A4%EC%B9%98</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/10/26/linux-20/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NVM 설치 및 사용 방법</title>
      <link>http://hgko1207.github.io/2022/10/26/nodejs-4/</link>
      <guid>http://hgko1207.github.io/2022/10/26/nodejs-4/</guid>
      <pubDate>Wed, 26 Oct 2022 01:44:59 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Windows 환경에서 &lt;strong&gt;NVM&lt;/strong&gt; 을 설치하고 Node 버전을 관리하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;nvmnode-version-manager&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Windows 환경에서 <strong>NVM</strong> 을 설치하고 Node 버전을 관리하는 방법에 대해 알아보겠습니다.</p><h2 id="nvmnode-version-manager"><a class="markdownIt-Anchor" href="#nvmnode-version-manager"></a> NVM(Node Version Manager)</h2><p><strong>NVM</strong> 은 Node.js 의 버전을 관리하는 도구입니다. 여러 개의 Node.js 버전을 설치할 수 있고 설치된 모든 버전을 확인 할 수 있습니다. 그리고 필요에 따라 버전 변경도 할 수 있습니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p><a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">NVM Github Repository</a> 사이트에 접속합니다. <strong>nvm-setup.zip</strong> 또는 <strong>nvm-setup.exe</strong> 을 선택하여 다운로드 하고 설치를 합니다.</p><h2 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h2><h3 id="npm-버전-조회"><a class="markdownIt-Anchor" href="#npm-버전-조회"></a> NPM 버전 조회</h3><p>현재 최신의 사용가능한 Node.js 버전이 조회됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvm list available</span></span><br></pre></td></tr></table></figure><h3 id="npm-설치"><a class="markdownIt-Anchor" href="#npm-설치"></a> NPM 설치</h3><p>원하는 버전을 입력하여 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvm install [node version]</span></span><br></pre></td></tr></table></figure><p>예시입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvm install 19.0.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nvm install 18.11.0</span></span><br></pre></td></tr></table></figure><h3 id="설치-확인"><a class="markdownIt-Anchor" href="#설치-확인"></a> 설치 확인</h3><p>설치되어 있는 Node.js 버전들이 조회됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvm list</span></span><br></pre></td></tr></table></figure><h3 id="버전-변경"><a class="markdownIt-Anchor" href="#버전-변경"></a> 버전 변경</h3><p>설치된 Node.js 버전들 중에서 사용하려는 버전으로 변경할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvm use [node version]</span></span><br></pre></td></tr></table></figure><p>예시입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvm use 18.11.0</span></span><br></pre></td></tr></table></figure><h2 id="nodejs-버전-확인"><a class="markdownIt-Anchor" href="#nodejs-버전-확인"></a> Node.js 버전 확인</h2><p>Node.js 버전이 설치 또는 변경되었는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br></pre></td></tr></table></figure><p>여기까지 <strong>NVM 설치 및 사용</strong> 포스팅을 마치겠습니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">https://github.com/nvm-sh/nvm</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/10/26/nodejs-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JavaScript] 주민등록번호 유효성 검사</title>
      <link>http://hgko1207.github.io/2022/10/23/js-dev-5/</link>
      <guid>http://hgko1207.github.io/2022/10/23/js-dev-5/</guid>
      <pubDate>Sun, 23 Oct 2022 08:26:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;JavaScript 에서 주민등록번호 유효성 검사 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;주민등록번호란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#주민등록번호란&quot;&gt;&lt;/a&gt; 주민등록번호란&lt;/h2&gt;
&lt;blockquo
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>JavaScript 에서 주민등록번호 유효성 검사 방법에 대해 알아보겠습니다.</p><h2 id="주민등록번호란"><a class="markdownIt-Anchor" href="#주민등록번호란"></a> 주민등록번호란</h2><blockquote><p>주민등록번호는 “주민의 거주관계를 파악하고 상시로 인구의 동태를 명확히 하여 행정사무의 적정하고 간이한 처리를 도모함”(1962년 주민등록법) 등을 목적으로 만든 일련번호로서, 개개인의 신원을 명확하게 구분하는 역할을 한다.<br /><a href="https://namu.wiki/w/%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EB%B2%88%ED%98%B8" target="_blank" rel="noopener">나무위키</a></p></blockquote><p>내국인과 외국인 주민등록번호 유효성을 검사하는 소스코드입니다.</p><ul><li>내국인 주민등록번호와 달리 외국인 등록번호는 뒤 7자리 숫자의 첫 숫자가 2000년 이전 출생 외국인에게는 남자는 5, 여자는 6, 2000년 이후 출생 외국인에게는 남자는 7, 여자는 8로 부여하고 있습니다.</li><li>내국인 주민등록번호 숫자는 1, 2, 3, 4 로 시작됩니다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"font-weight-bold"</span>&gt;</span>주민등록번호 입력 :<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-flex align-items-center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"jumin1"</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"font-weight-bold mx-2"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"jumin2"</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"validate()"</span>&gt;</span>검증<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CommonUtil = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 내국인/외국인 주민등록번호 유효성 검사</span></span><br><span class="line">  <span class="keyword">const</span> validRegistrationNumber = <span class="function"><span class="keyword">function</span> (<span class="params">rn, type</span>) </span>&#123;</span><br><span class="line">    rn = rn.split(<span class="string">'-'</span>).join(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">if</span> (rn.length !== <span class="number">13</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> checkSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">      checkSum += (rn.substr(i, <span class="number">1</span>) &gt;&gt; <span class="number">0</span>) * ((i % <span class="number">8</span>) + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> korMatch = (<span class="number">11</span> - (checkSum % <span class="number">11</span>)) % <span class="number">10</span> == rn.substr(<span class="number">12</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> frnMatch = (<span class="number">13</span> - (checkSum % <span class="number">11</span>)) % <span class="number">10</span> == rn.substr(<span class="number">12</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'local'</span>) <span class="keyword">return</span> korMatch;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'foreigner'</span>) <span class="keyword">return</span> frnMatch;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> korMatch || frnMatch;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 주민등록번호가 내국민인지 외국인인지 분류</span></span><br><span class="line">    <span class="comment">// 뒤 7자리의 첫번째 숫자가 1,2,3,4 일경우 내국인 / 5,6,7,8 일경우 외국인</span></span><br><span class="line">    validateJumin: <span class="function"><span class="keyword">function</span> (<span class="params">ssn1, ssn2</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> ssnType = ssn2.substr(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">const</span> rn = ssn1 + ssn2;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (ssnType == <span class="string">'5'</span> || ssnType == <span class="string">'6'</span> || ssnType == <span class="string">'7'</span> || ssnType == <span class="string">'8'</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> type = <span class="string">'foreigner'</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> type = <span class="string">'local'</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> validRegistrationNumber(rn, type);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 주민등록번호 검증 확인</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> jumin1 = <span class="built_in">document</span>.getElementById(<span class="string">'jumin1'</span>);</span><br><span class="line">    <span class="keyword">const</span> jumin2 = <span class="built_in">document</span>.getElementById(<span class="string">'jumin2'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ssn1 = jumin1.value;</span><br><span class="line">    <span class="keyword">const</span> ssn2 = jumin2.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CommonUtil.validateJumin(ssn1, ssn2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/10/23/js-dev-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Python] OpenCV Sharpening</title>
      <link>http://hgko1207.github.io/2022/10/22/python-3/</link>
      <guid>http://hgko1207.github.io/2022/10/22/python-3/</guid>
      <pubDate>Sat, 22 Oct 2022 14:41:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Python 에서 OpenCV 를 사용하여 &lt;strong&gt;Sharpening&lt;/strong&gt; 하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;sharpening&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sharpe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Python 에서 OpenCV 를 사용하여 <strong>Sharpening</strong> 하는 방법에 대해 알아보겠습니다.</p><h2 id="sharpening"><a class="markdownIt-Anchor" href="#sharpening"></a> Sharpening</h2><p>Sharpening 기법은 Bluring 과 반대되는 개념으로, 초점이 잘 맞은 사진처럼 사물의 윤곽이 뚜렷하고 선명한 느낌이 나도록 하는 것이다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p>Python 에서 OpenCV 를 사용하기 위해 패키지를 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install opencv-python</span></span><br></pre></td></tr></table></figure><h2 id="예제"><a class="markdownIt-Anchor" href="#예제"></a> 예제</h2><p>원본 이미지에 여러가지의 커널을 적용하여 선명하게 표현하였습니다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">image = cv2.imread(<span class="string">'images/lenna.png'</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 커널 생성(대상이 있는 픽셀을 강조)</span></span><br><span class="line">kernel_sharpen_1 = np.array([[<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>],</span><br><span class="line">                             [<span class="number">-1</span>, <span class="number">5</span>, <span class="number">-1</span>],</span><br><span class="line">                             [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">kernel_sharpen_2 = np.array([[<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>],</span><br><span class="line">                             [<span class="number">-1</span>, <span class="number">9</span>, <span class="number">-1</span>],</span><br><span class="line">                             [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>]])</span><br><span class="line"></span><br><span class="line">kernel_sharpen_3 = np.array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                             [<span class="number">1</span>, <span class="number">-7</span>, <span class="number">1</span>],</span><br><span class="line">                             [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">kernel_sharpen_4 = np.array([[<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>],</span><br><span class="line">                             [<span class="number">-1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-1</span>],</span><br><span class="line">                             [<span class="number">-1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">-1</span>],</span><br><span class="line">                             [<span class="number">-1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-1</span>],</span><br><span class="line">                             [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>]]) / <span class="number">8.0</span></span><br><span class="line"></span><br><span class="line">smoothed = cv2.GaussianBlur(image, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">1</span>)</span><br><span class="line">unsharped = cv2.addWeighted(image, <span class="number">1.5</span>, smoothed, <span class="number">-0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 커널 적용</span></span><br><span class="line">image_sharp1 = cv2.filter2D(image, <span class="number">0</span>, kernel_sharpen_1)</span><br><span class="line">image_sharp2 = cv2.filter2D(image, <span class="number">0</span>, kernel_sharpen_2)</span><br><span class="line">image_sharp3 = cv2.filter2D(image, <span class="number">0</span>, kernel_sharpen_3)</span><br><span class="line">image_sharp4 = cv2.filter2D(image, <span class="number">0</span>, kernel_sharpen_4)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(<span class="number">2</span>, <span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">0</span>].imshow(image, cmap=<span class="string">'gray'</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">0</span>].set_title(<span class="string">'Original Image'</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">1</span>].imshow(unsharped, cmap=<span class="string">'gray'</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">1</span>].set_title(<span class="string">'addWeighted'</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">2</span>].imshow(image_sharp1, cmap=<span class="string">'gray'</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">2</span>].set_title(<span class="string">'image_sharp1'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">0</span>].imshow(image_sharp2, cmap=<span class="string">'gray'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">0</span>].set_title(<span class="string">'image_sharp2'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">1</span>].imshow(image_sharp3, cmap=<span class="string">'gray'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">1</span>].set_title(<span class="string">'image_sharp3'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">2</span>].imshow(image_sharp4, cmap=<span class="string">'gray'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">2</span>].set_title(<span class="string">'image_sharp4'</span>)</span><br><span class="line"></span><br><span class="line">plt.show();</span><br></pre></td></tr></table></figure><h2 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h2><p><img src="/images/python/sharpening.png" alt="" /></p><p>필터에 따라 Sharpening 적용된 이미지를 확인합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/10/22/python-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] Cytoscape 사용 방법</title>
      <link>http://hgko1207.github.io/2022/10/12/angular-8/</link>
      <guid>http://hgko1207.github.io/2022/10/12/angular-8/</guid>
      <pubDate>Wed, 12 Oct 2022 06:53:50 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;cytoscape-소개&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cytoscape-소개&quot;&gt;&lt;/a&gt; Cytoscape 소개&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Cytoscape&lt;/strong&gt; 은 점 (node) 과 선 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="cytoscape-소개"><a class="markdownIt-Anchor" href="#cytoscape-소개"></a> Cytoscape 소개</h2><p><strong>Cytoscape</strong> 은 점 (node) 과 선 (edge)으로 이루어진 네크워크의 가시화, 통합, 분석을 가능하게하는 프리 오픈소스 소프트웨어입니다. 자바로 구현되어 있어 윈도우, 맥, 리눅스등에서 자유롭게 구동합니다.<br></p><p>Cytoscape 라이브러리를 사용하여 노드 간의 절차를 시각화하는 그래프를 구현하는 방법에 대해 알아보겠습니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p><code>cytoscape</code> 패키지를 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save cytoscape cytoscape-klay</span></span><br></pre></td></tr></table></figure><p>TypeScript 사용 시 추가로 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev @types/cytoscape</span></span><br></pre></td></tr></table></figure><h2 id="설정"><a class="markdownIt-Anchor" href="#설정"></a> 설정</h2><p><strong>angular.json</strong> 파일에서 다음의 내용을 추가합니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"scripts": ["./node_modules/cytoscape/dist/cytoscape.min.js"],</span><br></pre></td></tr></table></figure><h2 id="예제"><a class="markdownIt-Anchor" href="#예제"></a> 예제</h2><p><code>app.component.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"cy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그래프의 스타일을 정의합니다.<br><br /><code>app.component.scss</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#cy</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cytoscape</code> 패키지를 import 합니다. 기본적으로 <code>container</code>, <code>elements</code>, <code>style</code> 및 <code>layout</code> 옵션을 설정합니다. 노드 간의 연결을 시각화 하기 위해 layout 에 klay 를 정의합니다.<br><br /><code>app.component.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cytoscape <span class="keyword">from</span> <span class="string">'cytoscape'</span>;</span><br><span class="line"><span class="keyword">import</span> klay <span class="keyword">from</span> <span class="string">'cytoscape-klay'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.scss'</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * constructor</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * ngOnInit</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    cytoscape.use(klay);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> cy = cytoscape(&#123;</span><br><span class="line">      container: <span class="built_in">document</span>.getElementById(<span class="string">'cy'</span>), <span class="comment">// container to render in</span></span><br><span class="line"></span><br><span class="line">      elements: [</span><br><span class="line">        <span class="comment">// node</span></span><br><span class="line">        &#123; data: &#123; id: <span class="string">'step1'</span>, name: <span class="string">'step1'</span> &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: <span class="string">'step2'</span>, name: <span class="string">'step2'</span> &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: <span class="string">'step3'</span>, name: <span class="string">'step3'</span> &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: <span class="string">'step4'</span>, name: <span class="string">'step4'</span> &#125; &#125;,</span><br><span class="line">        <span class="comment">// edge</span></span><br><span class="line">        &#123; data: &#123; id: <span class="string">'1'</span>, source: <span class="string">'step1'</span>, target: <span class="string">'step2'</span> &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: <span class="string">'2'</span>, source: <span class="string">'step1'</span>, target: <span class="string">'step3'</span> &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: <span class="string">'3'</span>, source: <span class="string">'step2'</span>, target: <span class="string">'step4'</span> &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: <span class="string">'4'</span>, source: <span class="string">'step3'</span>, target: <span class="string">'step4'</span> &#125; &#125;,</span><br><span class="line">      ],</span><br><span class="line"></span><br><span class="line">      style: [</span><br><span class="line">        <span class="comment">// the stylesheet for the graph</span></span><br><span class="line">        &#123;</span><br><span class="line">          selector: <span class="string">'node'</span>,</span><br><span class="line">          style: &#123;</span><br><span class="line">            content: <span class="string">'data(name)'</span>,</span><br><span class="line">            shape: <span class="string">'rectangle'</span>,</span><br><span class="line">            <span class="string">'text-wrap'</span>: <span class="string">'wrap'</span>,</span><br><span class="line">            <span class="string">'text-halign'</span>: <span class="string">'center'</span>,</span><br><span class="line">            <span class="string">'text-valign'</span>: <span class="string">'center'</span>,</span><br><span class="line">            <span class="string">'background-color'</span>: <span class="string">'#6FB1FC'</span>,</span><br><span class="line">            width: <span class="string">'40px'</span>,</span><br><span class="line">            height: <span class="string">'40px'</span>,</span><br><span class="line">            color: <span class="string">'black'</span>,</span><br><span class="line">            <span class="string">'font-size'</span>: <span class="string">'10px'</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          selector: <span class="string">'edge'</span>,</span><br><span class="line">          style: &#123;</span><br><span class="line">            <span class="string">'curve-style'</span>: <span class="string">'bezier'</span>,</span><br><span class="line">            <span class="string">'line-color'</span>: <span class="string">'#000000'</span>,</span><br><span class="line">            <span class="string">'target-arrow-shape'</span>: <span class="string">'triangle'</span>,</span><br><span class="line">            <span class="string">'target-arrow-fill'</span>: <span class="string">'filled'</span>,</span><br><span class="line">            <span class="string">'target-arrow-color'</span>: <span class="string">'#000000'</span>,</span><br><span class="line">            width: <span class="string">'1px'</span>,</span><br><span class="line">            <span class="string">'line-style'</span>: <span class="string">'solid'</span>,</span><br><span class="line">            opacity: <span class="number">0.666</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      layout: &#123;</span><br><span class="line">        name: <span class="string">'klay'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">      name: <span class="string">'klay'</span>,</span><br><span class="line">      nodeDimensionsIncludeLabels: <span class="literal">true</span>,</span><br><span class="line">      klay: &#123;</span><br><span class="line">        borderSpacing: <span class="number">100</span>,</span><br><span class="line">        fixedAlignment: <span class="string">'BALANCED'</span>,</span><br><span class="line">        edgeRouting: <span class="string">'POLYLINE'</span>,</span><br><span class="line">        edgeSpacingFactor: <span class="number">10</span>,</span><br><span class="line">        inLayerSpacingFactor: <span class="number">2.0</span>,</span><br><span class="line">        layoutHierarchy: <span class="literal">true</span>,</span><br><span class="line">        linearSegmentsDeflectionDampening: <span class="number">3.0</span>,</span><br><span class="line">        spacing: <span class="number">30</span>,</span><br><span class="line">        mergeEdges: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    cy.layout(options).run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래 참고 사이트에서 예제 및 옵션 설정에 대해 자세하게 설명이 되어있습니다. 참고하여 구현하시면 됩니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://js.cytoscape.org/" target="_blank" rel="noopener">https://js.cytoscape.org/</a></li><li><a href="https://github.com/cytoscape/cytoscape.js" target="_blank" rel="noopener">https://github.com/cytoscape/cytoscape.js</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/10/12/angular-8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] Markdown 사용 방법</title>
      <link>http://hgko1207.github.io/2022/09/29/angular-7/</link>
      <guid>http://hgko1207.github.io/2022/09/29/angular-7/</guid>
      <pubDate>Thu, 29 Sep 2022 04:30:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;markdown-이란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#markdown-이란&quot;&gt;&lt;/a&gt; Markdown 이란&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;마크다운은 일반 텍스트 기반의 경량 마크업 언어다. 일반 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="markdown-이란"><a class="markdownIt-Anchor" href="#markdown-이란"></a> Markdown 이란</h2><blockquote><p>마크다운은 일반 텍스트 기반의 경량 마크업 언어다. 일반 텍스트로 서식이 있는 문서를 작성하는 데 사용되며, 일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다. HTML과 리치 텍스트(RTF) 등 서식 문서로 쉽게 변환되기 때문에 응용 소프트웨어와 함께 배포되는 README 파일이나 온라인 게시물 등에 많이 사용된다. <a href="https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4" target="_blank" rel="noopener">위키백과</a></p></blockquote><p>Angular 에서 <code>ngx-markdown</code> 패키지를 사용하여 <strong>Markdown</strong> 기능을 구현하는 방법에 대해 알아보겠습니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p><code>ngx-markdown</code> 패키지를 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install ngx-markdown --save</span></span><br></pre></td></tr></table></figure><h2 id="설정"><a class="markdownIt-Anchor" href="#설정"></a> 설정</h2><p><strong>angular.json</strong> 파일에서 다음의 내용을 추가합니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "architect": &#123;</span><br><span class="line">    "build": &#123;</span><br><span class="line">      "options": &#123;</span><br><span class="line">        ...</span><br><span class="line">        "scripts": [</span><br><span class="line">          <span class="string">"node_modules/marked/marked.min.js"</span></span><br><span class="line">        ]</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="예제"><a class="markdownIt-Anchor" href="#예제"></a> 예제</h2><p><code>MarkdownModule</code> 을 import 합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRoutingModule &#125; <span class="keyword">from</span> <span class="string">'app/app-routing.module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; MarkdownModule &#125; <span class="keyword">from</span> <span class="string">'ngx-markdown-editor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [AppComponent],</span><br><span class="line">  imports: [BrowserModule, AppRoutingModule, MarkdownModule.forRoot()],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>markdown</code> 태그를 사용하여 작성합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-12"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">markdown</span> [<span class="attr">data</span>]=<span class="string">"markdownText"</span>&gt;</span><span class="tag">&lt;/<span class="name">markdown</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>markdownText</code> 에 임시로 데이터를 입력합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.scss'</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="keyword">public</span> markdownText: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.markdownText = <span class="string">`# Test`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래 참고 사이트에서 자세하게 설명이 되어있습니다. 참고하여 구현하시면 됩니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.npmjs.com/package/ngx-markdown" target="_blank" rel="noopener">https://www.npmjs.com/package/ngx-markdown</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/09/29/angular-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] Markdown Editor 사용 방법</title>
      <link>http://hgko1207.github.io/2022/09/28/angular-6/</link>
      <guid>http://hgko1207.github.io/2022/09/28/angular-6/</guid>
      <pubDate>Wed, 28 Sep 2022 01:07:39 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;markdown-이란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#markdown-이란&quot;&gt;&lt;/a&gt; Markdown 이란&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;마크다운은 일반 텍스트 기반의 경량 마크업 언어다. 일반 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="markdown-이란"><a class="markdownIt-Anchor" href="#markdown-이란"></a> Markdown 이란</h2><blockquote><p>마크다운은 일반 텍스트 기반의 경량 마크업 언어다. 일반 텍스트로 서식이 있는 문서를 작성하는 데 사용되며, 일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다. HTML과 리치 텍스트(RTF) 등 서식 문서로 쉽게 변환되기 때문에 응용 소프트웨어와 함께 배포되는 README 파일이나 온라인 게시물 등에 많이 사용된다. <a href="https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4" target="_blank" rel="noopener">위키백과</a></p></blockquote><p>Angular 에서 <code>ngx-markdown-editor</code> 패키지를 사용하여 <strong>Markdown Editor</strong> 기능을 구현하는 방법에 대해 알아보겠습니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p><code>ngx-markdown-editor</code> 와 <code>ace-builds</code>, <code>bootstrap</code>, <code>font-awesome</code> 패키지도 필수로 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install ngx-markdown-editor --save</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install ace-builds bootstrap font-awesome --save</span></span><br></pre></td></tr></table></figure><h2 id="설정"><a class="markdownIt-Anchor" href="#설정"></a> 설정</h2><p><strong>angular.json</strong> 파일에서 다음 내용을 추가합니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "architect": &#123;</span><br><span class="line">    "build": &#123;</span><br><span class="line">      "options": &#123;</span><br><span class="line">        ...</span><br><span class="line">        "assets": [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"glob"</span>: <span class="string">"**/*"</span>,</span><br><span class="line">            <span class="attr">"input"</span>: <span class="string">"node_modules/ace-builds/src-min"</span>,</span><br><span class="line">            <span class="attr">"output"</span>: <span class="string">"./assets/ace-builds/"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        "styles": [</span><br><span class="line">          "node_modules/bootstrap/dist/css/bootstrap.min.css",</span><br><span class="line">          "node_modules/font-awesome/css/font-awesome.min.css",</span><br><span class="line">          <span class="string">"node_modules/ngx-markdown-editor/assets/highlight.js/agate.min.css"</span></span><br><span class="line">        ],</span><br><span class="line">        "scripts": [</span><br><span class="line">          "node_modules/ngx-markdown-editor/assets/highlight.js/highlight.min.js",</span><br><span class="line">          <span class="string">"node_modules/ngx-markdown-editor/assets/marked.min.js"</span></span><br><span class="line">        ]</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>index.html</strong> 파일에서 아래 내용을 추가합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/assets/ace-builds/ace.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="예제"><a class="markdownIt-Anchor" href="#예제"></a> 예제</h2><p><code>LMarkdownEditorModule</code> 을 import 합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRoutingModule &#125; <span class="keyword">from</span> <span class="string">'app/app-routing.module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; LMarkdownEditorModule &#125; <span class="keyword">from</span> <span class="string">'ngx-markdown-editor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [AppComponent],</span><br><span class="line">  imports: [BrowserModule, FormsModule, AppRoutingModule, LMarkdownEditorModule],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>md-editor</code> 태그를 사용하여 작성합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-12"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">md-editor</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"description"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"description"</span></span></span><br><span class="line"><span class="tag">        [<span class="attr">upload</span>]=<span class="string">"doUpload"</span></span></span><br><span class="line"><span class="tag">        [(<span class="attr">ngModel</span>)]=<span class="string">"markdownText"</span></span></span><br><span class="line"><span class="tag">        [<span class="attr">mode</span>]=<span class="string">"mode"</span></span></span><br><span class="line"><span class="tag">        [<span class="attr">options</span>]=<span class="string">"options"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">required</span></span></span><br><span class="line"><span class="tag">        <span class="attr">height</span>=<span class="string">"400px"</span></span></span><br><span class="line"><span class="tag">      &gt;</span><span class="tag">&lt;/<span class="name">md-editor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Option, Text, Mode, Upload 설정을 합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; UploadResult, MdEditorOption &#125; <span class="keyword">from</span> <span class="string">'ngx-markdown-editor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.scss'</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="keyword">public</span> markdownText: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> mode: <span class="built_in">string</span> = <span class="string">'editor'</span>;</span><br><span class="line">  <span class="keyword">public</span> options: MdEditorOption;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 이미지 파일 Upload</span></span><br><span class="line"><span class="comment">   * @param files</span></span><br><span class="line"><span class="comment">   * @returns</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  doUpload(files: <span class="built_in">Array</span>&lt;File&gt;): <span class="built_in">Promise</span>&lt;<span class="built_in">Array</span>&lt;UploadResult&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result: <span class="built_in">Array</span>&lt;UploadResult&gt; = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> file of files) &#123;</span><br><span class="line">          result.push(&#123;</span><br><span class="line">            name: file.name,</span><br><span class="line">            url: <span class="string">`https://avatars3.githubusercontent.com/<span class="subst">$&#123;file.name&#125;</span>`</span>,</span><br><span class="line">            isImg: file.type.indexOf(<span class="string">'image'</span>) !== <span class="number">-1</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve(result);</span><br><span class="line">      &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// markdown editor option 설정</span></span><br><span class="line">    <span class="keyword">this</span>.options = &#123;</span><br><span class="line">      showPreviewPanel: <span class="literal">false</span>,</span><br><span class="line">      enablePreviewContentClick: <span class="literal">false</span>,</span><br><span class="line">      resizable: <span class="literal">true</span>,</span><br><span class="line">      customRender: &#123;</span><br><span class="line">        image: <span class="function"><span class="keyword">function</span> (<span class="params">href: <span class="built_in">string</span>, title: <span class="built_in">string</span>, text: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> out = <span class="string">`&lt;img style="max-width: 100%; border: 20px solid red;" src="<span class="subst">$&#123;href&#125;</span>" alt="<span class="subst">$&#123;text&#125;</span>"`</span>;</span><br><span class="line">          <span class="keyword">if</span> (title) &#123;</span><br><span class="line">            out += <span class="string">` title="<span class="subst">$&#123;title&#125;</span>"`</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          out += (&lt;<span class="built_in">any</span>&gt;<span class="keyword">this</span>.options).xhtml ? <span class="string">'/&gt;'</span> : <span class="string">'&gt;'</span>;</span><br><span class="line">          <span class="keyword">return</span> out;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Markdown Editor 구현된 이미지입니다.</p><p><img src="/images/angular/markdown_editor.png" alt="" /></p><p>아래 참고 사이트에서 자세하게 설명이 되어있습니다. 참고하여 구현하시면 됩니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://openbase.com/js/ngx-markdown-editor" target="_blank" rel="noopener">https://openbase.com/js/ngx-markdown-editor</a></li><li><a href="https://openbase.com/js/ngx-markdown" target="_blank" rel="noopener">https://openbase.com/js/ngx-markdown</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/09/28/angular-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] Can&#39;t resolve crypto 오류 해결 방법</title>
      <link>http://hgko1207.github.io/2022/09/21/angular-5/</link>
      <guid>http://hgko1207.github.io/2022/09/21/angular-5/</guid>
      <pubDate>Wed, 21 Sep 2022 06:42:48 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt; 에서 Web3 를 사용할 경우 다음과 같은 오류가 발생할 경우가 있습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong> 에서 Web3 를 사용할 경우 다음과 같은 오류가 발생할 경우가 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Module not found: Error: Can't resolve 'crypto' in ...</span><br><span class="line">Module not found: Error: Can't resolve 'stream' in ...</span><br><span class="line">Module not found: Error: Can't resolve 'fs' in ...</span><br><span class="line">Module not found: Error: Can't resolve 'os' in ...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[NG_SERVE] BREAKING CHANGE: webpack &lt; 5 used to include polyfills for node.js core modules by default.</span><br><span class="line">[NG_SERVE] This is no longer the case. Verify if you need this module and configure a polyfill for it.</span><br><span class="line">[NG_SERVE]</span><br><span class="line">[NG_SERVE] If you want to include a polyfill, you need to:</span><br><span class="line">[NG_SERVE]      - add a fallback 'resolve.fallback: &#123; "stream": require.resolve("stream-browserify") &#125;'</span><br><span class="line">[NG_SERVE]      - install 'stream-browserify'</span><br><span class="line">[NG_SERVE] If you don't want to include a polyfill, you can use an empty module like this:</span><br><span class="line">[NG_SERVE]      resolve.fallback: &#123; "stream": false &#125;</span><br></pre></td></tr></table></figure><p><code>polyfill.ts</code> 파일에 내용을 추가하는 방법도 있지만 Webpack 을 구성하여 해결하였습니다.</p><h2 id="해결-방법"><a class="markdownIt-Anchor" href="#해결-방법"></a> 해결 방법</h2><h3 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h3><p>사용자 지정 웹팩 구성을 하여 빌드 및 실행할 수 있도록 <strong>custom-webpack</strong> 패키지를 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev @angular-builders/custom-webpack</span></span><br></pre></td></tr></table></figure><p>오류가 발생하는 모듈의 패키지를 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev stream-http https-browserify</span></span><br></pre></td></tr></table></figure><h3 id="생성"><a class="markdownIt-Anchor" href="#생성"></a> 생성</h3><p><code>custom-webpack.config.js</code> 파일을 생성하고 다음 내용을 추가합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    fallback: &#123;</span><br><span class="line">      http: <span class="built_in">require</span>.resolve(<span class="string">'stream-http'</span>),</span><br><span class="line">      https: <span class="built_in">require</span>.resolve(<span class="string">'https-browserify'</span>),</span><br><span class="line">      fs: <span class="literal">false</span>,</span><br><span class="line">      crypto: <span class="literal">false</span>,</span><br><span class="line">      os: <span class="literal">false</span>,</span><br><span class="line">      stream: <span class="literal">false</span>,</span><br><span class="line">      assert: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="적용"><a class="markdownIt-Anchor" href="#적용"></a> 적용</h3><p><code>angular.json</code> 파일의 내용을 수정합니다. builder 와 options 부분을 <strong>custom-webpack</strong> 으로 수정합니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">"architect": &#123;</span><br><span class="line">  ...</span><br><span class="line">  "build": &#123;</span><br><span class="line">    "builder": "@angular-builders/custom-webpack:browser", // @angular-builders/custom-webpack 으로 변경</span><br><span class="line">    "options": &#123;</span><br><span class="line">      "customWebpackConfig": &#123;</span><br><span class="line">        "path": "./custom-webpack.config.js", // 생성한 파일 적용</span><br><span class="line">        "replaceDuplicatePlugins": true</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  "serve": &#123;</span><br><span class="line">    "builder": "@angular-builders/custom-webpack:dev-server", // @angular-builders/custom-webpack 으로 변경</span><br><span class="line">    "options": &#123;</span><br><span class="line">      "browserTarget": "test-project:build"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Angular 를 재실행하면 오류들이 없어 진 것을 확인할 수 있습니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.npmjs.com/package/@angular-builders/custom-webpack" target="_blank" rel="noopener">https://www.npmjs.com/package/@angular-builders/custom-webpack</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/09/21/angular-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] process is not defined 해결 방법</title>
      <link>http://hgko1207.github.io/2022/09/21/angular-4/</link>
      <guid>http://hgko1207.github.io/2022/09/21/angular-4/</guid>
      <pubDate>Wed, 21 Sep 2022 00:34:20 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Angular 14 버전을 사용하면서 &lt;strong&gt;ERROR ReferenceError: process is not defined&lt;/strong&gt; 오류가 발생할 경우 해결 방법입니다.&lt;/p&gt;
&lt;h2 id=&quot;설치&quot;&gt;&lt;a class=&quot;markdow
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Angular 14 버전을 사용하면서 <strong>ERROR ReferenceError: process is not defined</strong> 오류가 발생할 경우 해결 방법입니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p><code>process</code> 패키지를 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev process</span></span><br></pre></td></tr></table></figure><h2 id="내용-추가"><a class="markdownIt-Anchor" href="#내용-추가"></a> 내용 추가</h2><p><code>src/polyfill.ts</code> 파일을 열고 다음 내용을 추가합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).global = <span class="built_in">window</span>;</span><br><span class="line">global.Buffer = global.Buffer || <span class="built_in">require</span>(<span class="string">'buffer'</span>).Buffer;</span><br><span class="line">global.process = <span class="built_in">require</span>(<span class="string">'process'</span>);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/09/21/angular-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>node-gyp 설치 오류 해결 방법</title>
      <link>http://hgko1207.github.io/2022/09/16/nodejs-3/</link>
      <guid>http://hgko1207.github.io/2022/09/16/nodejs-3/</guid>
      <pubDate>Fri, 16 Sep 2022 00:30:27 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;node-gyp 설치 과정 중 오류가 발생하였을 때 해결 방법입니다.&lt;/p&gt;
&lt;h2 id=&quot;npm-버전-확인&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#npm-버전-확인&quot;&gt;&lt;/a&gt; npm 버전 확인&lt;/h2&gt;
&lt;p&gt;npm 버
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>node-gyp 설치 과정 중 오류가 발생하였을 때 해결 방법입니다.</p><h2 id="npm-버전-확인"><a class="markdownIt-Anchor" href="#npm-버전-확인"></a> npm 버전 확인</h2><p>npm 버전을 확인하고 버전에 맞게 수행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm --version</span></span><br></pre></td></tr></table></figure><h2 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> Windows</h2><p>PowerShell 또는 명령 프롬프트(cmd.exe)를 “관리자 권한으로 실행” 으로 실행합니다.<br />먼저 node 가 설치된 디렉토리로 이동합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="string">"C:\Program Files\nodejs"</span></span></span><br></pre></td></tr></table></figure><p>npm 버전이 7 미만인 경우</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> node_modules\npm\node_modules\npm-lifecycle</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install node-gyp@latest</span></span><br></pre></td></tr></table></figure><p>npm 버전이 7 또는 8 일 경우 다음을 수행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> node_modules\npm\node_modules\@npmcli\run-script</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install node-gyp@latest</span></span><br></pre></td></tr></table></figure><h2 id="linux-macos"><a class="markdownIt-Anchor" href="#linux-macos"></a> Linux, MacOS</h2><p>다음 명령어를 실행하면 됩니다. 권한 오류가 나서 실패하면 앞에 <code>sudo</code> 명령어를 추가합니다.</p><p>npm 버전이 7 미만인 경우 다음을 수행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm explore npm/node_modules/npm-lifecycle -g -- npm install node-gyp@latest</span></span><br></pre></td></tr></table></figure><p>npm 버전이 7 또는 8 일 경우 다음을 수행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm explore npm/node_modules/@npmcli/run-script -g -- npm_config_global=<span class="literal">false</span> npm install node-gyp@latest</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://github.com/nodejs/node-gyp/blob/main/docs/Updating-npm-bundled-node-gyp.md" target="_blank" rel="noopener">https://github.com/nodejs/node-gyp/blob/main/docs/Updating-npm-bundled-node-gyp.md</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/09/16/nodejs-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>npm install 시 gyp ERR! 해결 방법</title>
      <link>http://hgko1207.github.io/2022/09/05/nodejs-2/</link>
      <guid>http://hgko1207.github.io/2022/09/05/nodejs-2/</guid>
      <pubDate>Mon, 05 Sep 2022 04:39:40 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;npm install&lt;/strong&gt; 시 &lt;strong&gt;gyp ERR!&lt;/strong&gt; 로 시작하는 설치 에러가 발생할 경우 해결 방법을 정리하였습니다.&lt;/p&gt;
&lt;h2 id=&quot;첫-번째-방법&quot;&gt;&lt;a class=&quot;markdownIt-A
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>npm install</strong> 시 <strong>gyp ERR!</strong> 로 시작하는 설치 에러가 발생할 경우 해결 방법을 정리하였습니다.</p><h2 id="첫-번째-방법"><a class="markdownIt-Anchor" href="#첫-번째-방법"></a> 첫 번째 방법</h2><p>Microsoft 의 windows-build-tools 설치합니다. 관리자 권한으로 PowerShell 또는 터미널을 열고 다음 명령어를 실행하여 설치합니다.<br />npm 버전이 8 이상 설치가 되어 있어야 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --global windows-build-tools</span></span><br></pre></td></tr></table></figure><h2 id="두-번째-방법"><a class="markdownIt-Anchor" href="#두-번째-방법"></a> 두 번째 방법</h2><h3 id="1-visual-studio-download"><a class="markdownIt-Anchor" href="#1-visual-studio-download"></a> 1) Visual Studio Download</h3><p><a href="https://visualstudio.microsoft.com/ko/downloads/" target="_blank" rel="noopener">https://visualstudio.microsoft.com/ko/downloads/</a> 사이트를 접속해서 Visual Studio 를 다운받습니다.</p><h3 id="2-c-설치"><a class="markdownIt-Anchor" href="#2-c-설치"></a> 2) C++ 설치</h3><ul><li>Visual Studio Installer 에서 Desktop development with C++ 선택 후 설치</li></ul><h3 id="3-msvs_version-msbuild_path-설정"><a class="markdownIt-Anchor" href="#3-msvs_version-msbuild_path-설정"></a> 3) msvs_version, msbuild_path 설정</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm config <span class="built_in">set</span> msvs_version 2022</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm config <span class="built_in">set</span> msbuild_path <span class="string">"C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\MSBuild.exe"</span></span></span><br></pre></td></tr></table></figure><p>msvs_version, msbuild_path 를 설정할 때 다른 버전이 설치되어 있으면 변경합니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g node-gyp</span></span><br></pre></td></tr></table></figure><p>프로젝트에서 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://exerror.com/errerr-find-vsfind-vs-msvs_version-not-set-from-command-line-or-npm-config-vcinstalldir-not-set/" target="_blank" rel="noopener">https://exerror.com/errerr-find-vsfind-vs-msvs_version-not-set-from-command-line-or-npm-config-vcinstalldir-not-set/</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/09/05/nodejs-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] Animations</title>
      <link>http://hgko1207.github.io/2022/08/28/react-11/</link>
      <guid>http://hgko1207.github.io/2022/08/28/react-11/</guid>
      <pubDate>Sun, 28 Aug 2022 13:50:48 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Framer Motion&lt;/strong&gt; 을 사용하여 애니메이션을 간편하고 쉽게 만드는 방법을 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;framer-motion&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#fram
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Framer Motion</strong> 을 사용하여 애니메이션을 간편하고 쉽게 만드는 방법을 알아보겠습니다.</p><h2 id="framer-motion"><a class="markdownIt-Anchor" href="#framer-motion"></a> Framer Motion</h2><p><strong>Framer</strong> 는 디자이너들을 위해 프로토타입 등을 만들어 주는 회사입니다. <strong>Framer Motion</strong> 은 React 용 production-ready 모션 라이브러리입니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install framer-motion</span></span><br></pre></td></tr></table></figure><h2 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h2><h3 id="animation"><a class="markdownIt-Anchor" href="#animation"></a> Animation</h3><p>Framer Motion 의 애니메이션은 모션 컴포넌트의 유연한 animate 속성을 통해 제어됩니다. 간단한 애니메이션의 경우 animate props 에서 직접 값을 설정할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">motion.div animate=&#123;&#123; <span class="attr">rotate</span>: <span class="number">360</span> &#125;&#125; transition=&#123;&#123; <span class="attr">duration</span>: <span class="number">2</span> &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="initial"><a class="markdownIt-Anchor" href="#initial"></a> initial</h3><blockquote><p>initial: boolean | Target | VariantLabels (애니메이션의 초기값 지정)<br><br />속성, 변형 레이블 또는 시작할 변형 레이블의 배열입니다.<br><br />animate의 값으로 초기화하려면 false로 설정합니다(마운트 애니메이션 비활성화).<br><a href="https://www.framer.com/docs/component/###initial" target="_blank" rel="noopener">https://www.framer.com/docs/component/###initial</a></p></blockquote><h3 id="transition"><a class="markdownIt-Anchor" href="#transition"></a> Transition</h3><p>Transition 은 값이 한 상태에서 다른 상태로 움직이는 방식을 정의합니다.<br />또한 Tween, Spring 또는 Inertia 를 사용할 애니메이션 유형을 정의하는 소품을 허용할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">motion.div animate=&#123;&#123; <span class="attr">rotate</span>: <span class="number">180</span> &#125;&#125; transition=&#123;&#123; <span class="attr">type</span>: <span class="string">'spring'</span> &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="예제"><a class="markdownIt-Anchor" href="#예제"></a> 예제</h3><p>initial, animate, transition 을 사용하여 사각형이 회전하고 튕기는 애니메이션을 구현하였습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; motion &#125; <span class="keyword">from</span> <span class="string">'framer-motion'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Wrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  max-width: 680px;</span></span><br><span class="line"><span class="string">  width: 100vw;</span></span><br><span class="line"><span class="string">  margin: 0 auto;</span></span><br><span class="line"><span class="string">  justify-content: center;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Box = styled(motion.div)<span class="string">`</span></span><br><span class="line"><span class="string">  width: 200px;</span></span><br><span class="line"><span class="string">  height: 200px;</span></span><br><span class="line"><span class="string">  background-color: white;</span></span><br><span class="line"><span class="string">  border-radius: 15px;</span></span><br><span class="line"><span class="string">  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Wrapper&gt;</span><br><span class="line">      &lt;Box transition=&#123;&#123; <span class="attr">type</span>: <span class="string">'spring'</span>, <span class="attr">delay</span>: <span class="number">0.5</span> &#125;&#125; initial=&#123;&#123; <span class="attr">scale</span>: <span class="number">0</span> &#125;&#125; animate=&#123;&#123; <span class="attr">scale</span>: <span class="number">1</span>, <span class="attr">rotate</span>: <span class="number">360</span> &#125;&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Wrapper&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.framer.com/motion" target="_blank" rel="noopener">https://www.framer.com/motion</a></li><li><a href="https://www.framer.com/docs/animation" target="_blank" rel="noopener">https://www.framer.com/docs/animation</a></li><li><a href="https://www.framer.com/docs/transition" target="_blank" rel="noopener">https://www.framer.com/docs/transition</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/08/28/react-11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] alias 등록</title>
      <link>http://hgko1207.github.io/2022/08/23/linux-19/</link>
      <guid>http://hgko1207.github.io/2022/08/23/linux-19/</guid>
      <pubDate>Tue, 23 Aug 2022 04:40:33 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;alias-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#alias-란&quot;&gt;&lt;/a&gt; alias 란&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;alias는 별칭이라는 뜻으로 리눅스에서 alias는 사용자가 명령어를 다른 이
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="alias-란"><a class="markdownIt-Anchor" href="#alias-란"></a> alias 란</h2><blockquote><p>alias는 별칭이라는 뜻으로 리눅스에서 alias는 사용자가 명령어를 다른 이름으로 바꿔서 사용할 수 있는 쉘 내부 명령어를 말합니다. 이 alias 를 통해서 일일이 입력하기 번거로운. 길이가 긴 명령어를 간단한 이름으로 바꿔서 등록하여 업무 효율을 높일 수 있습니다.</p></blockquote><h2 id="alias-확인"><a class="markdownIt-Anchor" href="#alias-확인"></a> alias 확인</h2><p>현재 등록된 alias 리스트를 확인할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">alias</span></span></span><br><span class="line">alias cp='cp -i'</span><br><span class="line">alias egrep='egrep --color=auto'</span><br><span class="line">alias fgrep='fgrep --color=auto'</span><br><span class="line">alias grep='grep --color=auto'</span><br><span class="line">alias l.='ls -d .* --color=auto'</span><br><span class="line">alias ll='ls -l --color=auto'</span><br><span class="line">alias ls='ls --color=auto'</span><br><span class="line">alias mv='mv -i'</span><br><span class="line">alias rm='rm -i'</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="alias-등록"><a class="markdownIt-Anchor" href="#alias-등록"></a> alias 등록</h2><p>명령어 별칭은 <code>alias 명령어별칭='명령어'</code>의 형식으로 등록합니다. 다음의 예제처럼 등록하면 <code>run_tomcat</code> 라는 명령어를 실행할 경우 tomcat 이 실행됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alias 명령어별칭 = '명령어'</span></span><br><span class="line">$ <span class="built_in">alias</span> run_tomcat=<span class="string">'/usr/local/tomcat8/bin/catalina.sh start'</span></span><br></pre></td></tr></table></figure><h2 id="alias-해제"><a class="markdownIt-Anchor" href="#alias-해제"></a> alias 해제</h2><p>unalias 명령어를 사용하여 등록된 alias 를 삭제할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unalias</span> run_tomcat</span></span><br></pre></td></tr></table></figure><h2 id="alias-영구-등록"><a class="markdownIt-Anchor" href="#alias-영구-등록"></a> alias 영구 등록</h2><p>위에서 등록된 alias 들은 시스템을 재부팅하고 나면 다시 초기화가 되어 매번 재 설정해줘야 한다는 불편함이 있습니다. 이러한 문제를 방지하려면 alias 를 <code>./bashrc</code> 이나 <code>.bash_aliases</code> 파일에 등록해서 사용해야 합니다. 재부팅이 되더라도 등록해둔 alias 가 영구 지속됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bashrc</span></span><br></pre></td></tr></table></figure><p>./bashrc 파일을 열고 alias 를 추가합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> run_tomcat=<span class="string">'/usr/local/tomcat8/bin/catalina.sh start'</span></span><br><span class="line"><span class="built_in">alias</span> stop_tomcat=<span class="string">'/usr/local/tomcat8/bin/catalina.sh stop'</span></span><br><span class="line"><span class="built_in">alias</span> tomcat_logs=<span class="string">'tail -n 150 -f /usr/local/tomcat8/logs/catalina.out'</span></span><br></pre></td></tr></table></figure><p>bashrc 파일을 수정하면 바로 적용되지 않고 <code>source</code> 명령어를 사용하여 동기화를 해야합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure><p>위의 방법으로 alias 별칭을 편리하게 사용할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/08/23/linux-19/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] Tomcat 다중 설치 및 운영 방법</title>
      <link>http://hgko1207.github.io/2022/08/23/linux-18/</link>
      <guid>http://hgko1207.github.io/2022/08/23/linux-18/</guid>
      <pubDate>Tue, 23 Aug 2022 04:13:31 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 &lt;strong&gt;Tomcat&lt;/strong&gt; 을 다중 설치하고 운영하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;1-tomcat-설치&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-tomcat-설치&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 <strong>Tomcat</strong> 을 다중 설치하고 운영하는 방법에 대해 알아보겠습니다.</p><h2 id="1-tomcat-설치"><a class="markdownIt-Anchor" href="#1-tomcat-설치"></a> 1. Tomcat 설치</h2><p>이전 글 <a href="https://hgko1207.github.io/2020/10/12/linux-7/">[CentOS] 아파치 톰캣(Tomcat) 설치 및 사용 방법</a> 을 보면서 Tomcat 을 설치합니다.</p><p>설치된 Tomcat 폴더를 서로 다른 이름의 폴더로 복사합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- tomcat1 : /usr/<span class="built_in">local</span>/tomcat_1</span><br><span class="line">- tomcat2 : /usr/<span class="built_in">local</span>/tomcat_2</span><br></pre></td></tr></table></figure><h2 id="2-catalinash-파일-수정"><a class="markdownIt-Anchor" href="#2-catalinash-파일-수정"></a> 2. <a href="http://catalina.sh" target="_blank" rel="noopener">catalina.sh</a> 파일 수정</h2><p><code>/bin/catalina.sh</code> 파일을 열고 다음 내용을 추가합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_HOME=[Tomcat Path]</span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=[Tomcat Path]</span><br><span class="line"><span class="built_in">export</span> CATALINA_BASE=[Tomcat Path]</span><br><span class="line">CATALINA_PID=[Tomcat Path]/bin/tomcat.pid</span><br></pre></td></tr></table></figure><ul><li><strong>tomcat1</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_HOME=/usr/<span class="built_in">local</span>/tomcat_1</span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/usr/<span class="built_in">local</span>/tomcat_1</span><br><span class="line"><span class="built_in">export</span> CATALINA_BASE=/usr/<span class="built_in">local</span>/tomcat_1</span><br><span class="line">CATALINA_PID=/usr/<span class="built_in">local</span>/tomcat_1/bin/tomcat.pid</span><br></pre></td></tr></table></figure><ul><li><strong>tomcat2</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_HOME=/usr/<span class="built_in">local</span>/tomcat_2</span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/usr/<span class="built_in">local</span>/tomcat_2</span><br><span class="line"><span class="built_in">export</span> CATALINA_BASE=/usr/<span class="built_in">local</span>/tomcat_2</span><br><span class="line">CATALINA_PID=/usr/<span class="built_in">local</span>/tomcat_2/bin/tomcat.pid</span><br></pre></td></tr></table></figure><h2 id="3-포트-변경"><a class="markdownIt-Anchor" href="#3-포트-변경"></a> 3. 포트 변경</h2><p><code>/conf/server.xml</code> 파일에서 포트를 수정합니다. Tomcat 마다 포트 3개를 다르게 입력 해야 합니다.</p><p>다음과 같이 <strong>tomcat1</strong> 은 80XX, <strong>tomcat2</strong> 은 81XX 포트로 변경합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Server Port 는 8005, 8105</span><br><span class="line">Connector Port 는 8080, 8180</span><br><span class="line">AJP/1.3 Port 는 8009, 8109</span><br></pre></td></tr></table></figure><ul><li><strong>tomcat1</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></span><br><span class="line">...</span><br><span class="line">      <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><strong>tomcat2</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8105"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></span><br><span class="line">...</span><br><span class="line">      <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8180"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8109"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="4-방화벽-해제"><a class="markdownIt-Anchor" href="#4-방화벽-해제"></a> 4. 방화벽 해제</h2><p>설정된 HTTP 포트의 방화벽을 해제합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo firewall-cmd --zone=public --add-port=8080/tcp --permanent</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo firewall-cmd --zone=public --add-port=8180/tcp --permanent</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo firewall-cmd --reload</span></span><br></pre></td></tr></table></figure><p>서비스를 시작 시킨 후 각각의 서비스 포트로 접속해서 제대로 동작하는지 확인합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/08/23/linux-18/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] reference 사용</title>
      <link>http://hgko1207.github.io/2022/08/21/react-10/</link>
      <guid>http://hgko1207.github.io/2022/08/21/react-10/</guid>
      <pubDate>Sun, 21 Aug 2022 13:58:27 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;reference&lt;/strong&gt; 는 react 코드를 이용해 HTML 요소를 지정하고 가져올 수 있는 방법입니다. 다시 말해서 자바스크립트로부터 HTML 요소를 가져오고 수정 할 수 있도록 해줍니다.&lt;/p&gt;
&lt;h2 id=&quot;사용&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>reference</strong> 는 react 코드를 이용해 HTML 요소를 지정하고 가져올 수 있는 방법입니다. 다시 말해서 자바스크립트로부터 HTML 요소를 가져오고 수정 할 수 있도록 해줍니다.</p><h2 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h2><p><code>useRef</code> 를 사용하여 HTML 요소를 가져옵니다. 다음 코드는 <code>button</code> 클릭 시 <code>input</code> 을 포커싱하고 해제하는 예제입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RefEx</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef&lt;HTMLInputElement&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    inputRef.current?.focus();</span><br><span class="line">    <span class="comment">// 5초 뒤에 focus 사라짐</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      inputRef.current?.blur;</span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input ref=&#123;inputRef&#125; <span class="keyword">type</span>=<span class="string">"text"</span> placeholder=<span class="string">"input"</span> /&gt;</span><br><span class="line">      &lt;button onClick=&#123;onClick&#125;&gt;click&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RefEx;</span><br></pre></td></tr></table></figure><p>typescript 사용하므로 <code>HTMLInputElement</code> 를 지정하였습니다. <code>useRef</code> 를 사용하여 HTML 요소를 가져왔지만 수정 할 경우에는 <code>HTMLInputElement</code> 지정한 것 처럼 일반 자바스크립트를 이용합니다.</p><h2 id="useref"><a class="markdownIt-Anchor" href="#useref"></a> useRef()</h2><blockquote><p>useRef는 .current 프로퍼티로 전달된 인자(initialValue)로 초기화된 변경 가능한 ref 객체를 반환합니다. 반환된 객체는 컴포넌트의 전 life cycle을 통해 유지될 것입니다.<br />일반적인 사용 사례는 자식에게 접근하는 경우입니다.<br />본질적으로 useRef는 .current 프로퍼티에 변경 가능한 값을 담고 있는 &quot;상자&quot;와 같습니다.</p></blockquote><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://ko.reactjs.org/docs/hooks-reference.html#useref" target="_blank" rel="noopener">https://ko.reactjs.org/docs/hooks-reference.html#useref</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#methods" target="_blank" rel="noopener">HTMLInputElement methods</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/08/21/react-10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Spring] Swagger Header 설정 방법</title>
      <link>http://hgko1207.github.io/2022/08/19/spring-1/</link>
      <guid>http://hgko1207.github.io/2022/08/19/spring-1/</guid>
      <pubDate>Fri, 19 Aug 2022 07:48:58 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Spring 에서 Swagger Header 설정 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;api-마다-설정&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#api-마다-설정&quot;&gt;&lt;/a&gt; API 마다 설정&lt;/h2&gt;
&lt;p&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Spring 에서 Swagger Header 설정 방법에 대해 알아보겠습니다.</p><h2 id="api-마다-설정"><a class="markdownIt-Anchor" href="#api-마다-설정"></a> API 마다 설정</h2><p>각 API 마다 <code>@ApiImplicitParam</code> 을 통해 인증 정보(토큰)을 입력하도록 설정합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiImplicitParams</span>(&#123;<span class="meta">@ApiImplicitParam</span>(name = <span class="string">"Authorization"</span>, value = <span class="string">"JWT Token"</span>,</span><br><span class="line">      required = <span class="keyword">true</span>, dataType = <span class="string">"string"</span>, paramType = <span class="string">"header"</span>) &#125;)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/auth/test"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; authTest() &#123;</span><br><span class="line">  System.err.println(<span class="string">"authTest"</span>);</span><br><span class="line">  <span class="keyword">return</span> ResponseEntity.ok(<span class="string">"test ok"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 방법은 API 개수가 많아질 경우 코드 양이 늘어나고 가독성이 나빠집니다. 그리고 <strong>Swagger</strong> 를 통해 테스트 진행 시 각 API 마다 인증 정보를 입력해야 한다는 번거로움이 생기게 됩니다.</p><h2 id="authroize-버튼-활성화"><a class="markdownIt-Anchor" href="#authroize-버튼-활성화"></a> Authroize 버튼 활성화</h2><p><strong>SWagger Version 2.9.2</strong> 부터는 번거로움을 없애주는 기능이 생겼습니다. <strong>Swagger</strong> 화면 상단 부분에 <code>Autorize</code> 버튼이 생겼습니다. <code>Autorize</code> 버튼을 클릭하면 모든 API 에 일괄 인증 할 수 있도록 해주는 인증 정보를 입력받는 창이 뜹니다.</p><h3 id="설정"><a class="markdownIt-Anchor" href="#설정"></a> 설정</h3><p>먼저 maven 또는 gradle 설정을 합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  <span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'io.springfox'</span>, name: <span class="string">'springfox-swagger2'</span>, version: <span class="string">'2.9.2'</span></span><br><span class="line">  implementation <span class="keyword">group</span>: <span class="string">'io.springfox'</span>, name: <span class="string">'springfox-swagger-ui'</span>, version: <span class="string">'2.9.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SwaggerConfig</code> 클래스를 생성하고 코드들을 추가합니다. 중요한 것은 <code>ApiKey</code> 를 유의해야합니다. 프로젝트마다 사용하는 인증 key 가 다르므로 확인해서 입력합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiKey;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.AuthorizationScope;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.SecurityReference;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.DocExpansion;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.ModelRendering;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.OperationsSorter;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.TagsSorter;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.UiConfiguration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.UiConfigurationBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger 자동 문서화 웹 생성을 위한 Spring MVC 설정</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hgko</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">              .useDefaultResponseMessages(<span class="keyword">false</span>) <span class="comment">// 웹 페이지에서 디폴트 설정되는 ResponseMessages 부분 표시하지 않음</span></span><br><span class="line">              .select()</span><br><span class="line">              .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.hgko.controller"</span>)) <span class="comment">// Controller에서 api 추출</span></span><br><span class="line">              .paths(PathSelectors.any())</span><br><span class="line">              .build()</span><br><span class="line">              .apiInfo(swaggerInfo())</span><br><span class="line">              .securityContexts(Arrays.asList(securityContext()))</span><br><span class="line">              .securitySchemes(Arrays.asList(apiKey()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">swaggerInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Server API Documentation"</span>)</span><br><span class="line">                .description(<span class="string">"서버 API에 대한 연동 문서입니다"</span>)</span><br><span class="line">                .version(<span class="string">"0.0.1"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiKey <span class="title">apiKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiKey(<span class="string">"Authorization"</span>, <span class="string">"Authorization"</span>, <span class="string">"header"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SecurityContext <span class="title">securityContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContext.builder()</span><br><span class="line">            .securityReferences(defaultAuth())</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title">defaultAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationScope authorizationScope = <span class="keyword">new</span> AuthorizationScope(<span class="string">"global"</span>, <span class="string">"accessEverything"</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> AuthorizationScope[<span class="number">1</span>];</span><br><span class="line">        authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> SecurityReference(<span class="string">"Authorization"</span>, authorizationScopes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기존 API 코드에서 <code>@ApiImplicitParams</code> 부분을 제거합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/auth/test"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; authTest() &#123;</span><br><span class="line">  System.err.println(<span class="string">"authTest"</span>);</span><br><span class="line">  <span class="keyword">return</span> ResponseEntity.ok(<span class="string">"test ok"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>설정은 다 끝났습니다. <strong>Swagger</strong> 화면에서 정상적으로 동작하는지 확인 할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/08/19/spring-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] 기능 구현 방식</title>
      <link>http://hgko1207.github.io/2022/08/19/angular-3/</link>
      <guid>http://hgko1207.github.io/2022/08/19/angular-3/</guid>
      <pubDate>Fri, 19 Aug 2022 00:59:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt; 프레임워크로 특정 기능을 구현할 때 어떤 방식으로 사용하는지에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;ui-component-구현&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong> 프레임워크로 특정 기능을 구현할 때 어떤 방식으로 사용하는지에 대해 알아보겠습니다.</p><h2 id="ui-component-구현"><a class="markdownIt-Anchor" href="#ui-component-구현"></a> UI Component 구현</h2><p>클래스에 <code>@Component</code> Annotation 을 붙여서 생성합니다.</p><h2 id="html-템플릿-정의"><a class="markdownIt-Anchor" href="#html-템플릿-정의"></a> HTML 템플릿 정의</h2><p>인라인 HTML 코드를 사용할 때는 <code>@Component</code> 어노테이션 <code>template</code> 항목을 사용하고, 외부 파일에서 불러올 떄는 <code>templateUrl</code> 항목을 사용합니다.</p><h2 id="컴포넌트-property-를-ui에-표시"><a class="markdownIt-Anchor" href="#컴포넌트-property-를-ui에-표시"></a> 컴포넌트 Property 를 UI에 표시</h2><p>템플릿의 이중 중괄호 안에 Property 를 사용합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; customValue &#125;&#125;)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="컴포넌트-property-바인딩"><a class="markdownIt-Anchor" href="#컴포넌트-property-바인딩"></a> 컴포넌트 Property 바인딩</h2><p>대괄호를 사용해서 Property 를 바인딩합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> [<span class="attr">value</span>]=<span class="string">"inputValue"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="이벤트-처리"><a class="markdownIt-Anchor" href="#이벤트-처리"></a> 이벤트 처리</h2><p>이벤트 이름을 괄호로 감싸고 핸들러를 지정합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"onClickEvent"</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="양방향-바인딩"><a class="markdownIt-Anchor" href="#양방향-바인딩"></a> 양방향 바인딩</h2><p><strong>[()]</strong> 표기를 사용합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"componentProperty"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="html-일부를-자식-컴포넌트에-전달하기"><a class="markdownIt-Anchor" href="#html-일부를-자식-컴포넌트에-전달하기"></a> HTML 일부를 자식 컴포넌트에 전달하기</h2><p>자식 컴포넌트의 템플릿에 <code>&lt;ng-content&gt;</code> 태그를 사용합니다.</p><h2 id="내비게이션-구현"><a class="markdownIt-Anchor" href="#내비게이션-구현"></a> 내비게이션 구현</h2><p>라우터를 사용해서 컴포넌트와 URL을 연결하고 컴포넌트의 템플릿이 렌더링될 위치를 <code>&lt;router-outlet&gt;</code> 태그로 지정합니다.</p><h2 id="컴포넌트에서-데이터-받기"><a class="markdownIt-Anchor" href="#컴포넌트에서-데이터-받기"></a> 컴포넌트에서 데이터 받기</h2><p>컴포넌트 프로퍼티를 선언할 때 <code>@Input</code> 어노테이션을 사용해서 외부 값과 연결합니다.</p><h2 id="컴포넌트에-데이터-전달하기"><a class="markdownIt-Anchor" href="#컴포넌트에-데이터-전달하기"></a> 컴포넌트에 데이터 전달하기</h2><p>컴포넌트 프로퍼티를 선언할 때 <code>@Output</code> 어노테이션을 사용하고 <code>EventEmitter</code> 를 이용해서 이벤트를 발생시킵니다.</p><h2 id="http-요청"><a class="markdownIt-Anchor" href="#http-요청"></a> HTTP 요청</h2><p>컴포넌트에 Http 객체를 주입하고 HTTP 함수를 사용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.http.get(<span class="string">'/users'</span>);</span><br></pre></td></tr></table></figure><h2 id="http-응답-처리"><a class="markdownIt-Anchor" href="#http-응답-처리"></a> HTTP 응답 처리</h2><p><code>subscribe()</code> 함수를 사용해서 옵저버블 스트림을 처리합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.http.get(<span class="string">'/users'</span>).subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="컴포넌트-상태가-변경되는-것을-가로채기"><a class="markdownIt-Anchor" href="#컴포넌트-상태가-변경되는-것을-가로채기"></a> 컴포넌트 상태가 변경되는 것을 가로채기</h2><p>컴포넌트 생성주기 함수를 사용합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/08/19/angular-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] memo 사용 방법</title>
      <link>http://hgko1207.github.io/2022/08/12/react-9/</link>
      <guid>http://hgko1207.github.io/2022/08/12/react-9/</guid>
      <pubDate>Fri, 12 Aug 2022 13:50:38 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;React에서 &lt;strong&gt;memo&lt;/strong&gt; 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;컴포넌트가 동일한 props로 동일한 결과를 렌더링해낸다면, React.memo를 호출하고 결과를 메모이징(Memoizin
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>React에서 <strong>memo</strong> 사용 방법에 대해 알아보겠습니다.</p><blockquote><p>컴포넌트가 동일한 props로 동일한 결과를 렌더링해낸다면, React.memo를 호출하고 결과를 메모이징(Memoizing)하도록 래핑하여 경우에 따라 성능 향상을 누릴 수 있습니다. 즉, React는 컴포넌트를 렌더링하지 않고 마지막으로 렌더링된 결과를 재사용합니다.</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* props를 사용하여 렌더링 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(MyComponent, areEqual);</span><br></pre></td></tr></table></figure><h2 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h2><p>이전 포스트 <a href="https://hgko1207.github.io/2022/08/12/react-8/">[React] Drag and Drop</a> 에서 드래그, 드롭 시 바뀐 부분이 아닌 전체가 리랜더링이 되어 텍스트의 흔들림이 가끔씩 발생하는 문제가 있었습니다.</p><p><code>Card</code> 부분을 <strong>DraggableCard Component</strong> 로 새로 만들었습니다. <code>DraggableCard</code> 에게 동일한 index와 todo prop을 주고 불필요한 리랜더링을 하지 않도록 하기 위해 <code>memo</code> 를 사용하였습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DraggableCard.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Draggable &#125; <span class="keyword">from</span> <span class="string">'react-beautiful-dnd'</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Card = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  border-radius: 5px;</span></span><br><span class="line"><span class="string">  margin-bottom: 5px;</span></span><br><span class="line"><span class="string">  padding: 10px 10px;</span></span><br><span class="line"><span class="string">  background-color: white;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IDraggableCardProps &#123;</span><br><span class="line">  toDo: <span class="built_in">string</span>;</span><br><span class="line">  index: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DraggableCard</span>(<span class="params">&#123; toDo, index &#125;: IDraggableCardProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Draggable key=&#123;toDo&#125; draggableId=&#123;toDo&#125; index=&#123;index&#125;&gt;</span><br><span class="line">      &#123;<span class="function">(<span class="params">provided</span>) =&gt;</span> (</span><br><span class="line">        &lt;Card ref=&#123;provided.innerRef&#125; &#123;...provided.dragHandleProps&#125; &#123;...provided.draggableProps&#125;&gt;</span><br><span class="line">          &#123;toDo&#125;</span><br><span class="line">        &lt;<span class="regexp">/Card&gt;</span></span><br><span class="line"><span class="regexp">      )&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Draggable&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(DraggableCard);</span><br></pre></td></tr></table></figure><p>실제로 바뀐 것들만 리렌더링 되어 텍스트가 흔들리는 문제를 해결함으로써 최적화 할 수 있었습니다.</p><h2 id="주의"><a class="markdownIt-Anchor" href="#주의"></a> 주의</h2><blockquote><p>React.memo는 props 변화에만 영향을 줍니다. React.memo로 감싸진 함수 컴포넌트 구현에 useState, useReducer 또는 useContext 훅을 사용한다면, 여전히 state나 context가 변할 때 다시 렌더링됩니다.</p></blockquote><p>이 메서드는 오직 성능 최적화를 위하여 사용됩니다. 렌더링을 <strong>방지</strong>하기 위하여 사용하지 마세요. 버그를 만들 수 있습니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://ko.reactjs.org/docs/react-api.html#reactmemo" target="_blank" rel="noopener">https://ko.reactjs.org/docs/react-api.html#reactmemo</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/08/12/react-9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] Drag and Drop</title>
      <link>http://hgko1207.github.io/2022/08/12/react-8/</link>
      <guid>http://hgko1207.github.io/2022/08/12/react-8/</guid>
      <pubDate>Fri, 12 Aug 2022 13:21:15 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://npmjs.com/package/react-beautiful-dnd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-beautiful-dnd&lt;/a&gt; 을 사용하여 React 에서 깔끔하고 사용하기 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><a href="https://npmjs.com/package/react-beautiful-dnd" target="_blank" rel="noopener">react-beautiful-dnd</a> 을 사용하여 React 에서 깔끔하고 사용하기 쉬운 드래그, 드롭, 애니메이션을 적용하는 방법에 대해 알아보겠습니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i react-beautiful-dnd</span></span><br></pre></td></tr></table></figure><p>TypeScript 사용 시 추가로 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i --save-dev @types/react-beautiful-dnd</span></span><br></pre></td></tr></table></figure><h2 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h2><p>임시 데이터 <strong>[‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’]</strong> 를 사용하여 카드 형태의 드래그, 드롭을 구현해봤습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// atoms.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; atom &#125; <span class="keyword">from</span> <span class="string">'recoil'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toDoState = atom(&#123;</span><br><span class="line">  key: <span class="string">'toDo'</span>,</span><br><span class="line">  <span class="keyword">default</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>DragDropContext</code>, <code>Draggable</code>, <code>Droppable</code> 를 사용하여 구성합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; DragDropContext, Draggable, Droppable, DropResult &#125; <span class="keyword">from</span> <span class="string">'react-beautiful-dnd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRecoilState &#125; <span class="keyword">from</span> <span class="string">'recoil'</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; toDoState &#125; <span class="keyword">from</span> <span class="string">'./atoms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Wrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  max-width: 480px;</span></span><br><span class="line"><span class="string">  width: 100%;</span></span><br><span class="line"><span class="string">  margin: 0 auto;</span></span><br><span class="line"><span class="string">  justify-content: center;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Boards = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  width: 100%;</span></span><br><span class="line"><span class="string">  grid-template-columns: repeat(3, 1fr);</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Board = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  padding: 20px 10px;</span></span><br><span class="line"><span class="string">  padding-top: 30px;</span></span><br><span class="line"><span class="string">  background-color: gray;</span></span><br><span class="line"><span class="string">  border-radius: 5px;</span></span><br><span class="line"><span class="string">  min-height: 200px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Card = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  border-radius: 5px;</span></span><br><span class="line"><span class="string">  margin-bottom: 5px;</span></span><br><span class="line"><span class="string">  padding: 10px 10px;</span></span><br><span class="line"><span class="string">  background-color: white;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [toDos, setToDos] = useRecoilState(toDoState);</span><br><span class="line">  <span class="keyword">const</span> onDragEnd = <span class="function">(<span class="params">&#123; draggableId, destination, source &#125;: DropResult</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!destination) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    setToDos(<span class="function">(<span class="params">oldToDos</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> copyToDos = [...oldToDos];</span><br><span class="line">      <span class="comment">// 1) Delete item on source.index</span></span><br><span class="line">      copyToDos.splice(source.index, <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 2) Put back the item on the destination.index</span></span><br><span class="line">      copyToDos.splice(destination?.index, <span class="number">0</span>, draggableId);</span><br><span class="line">      <span class="keyword">return</span> copyToDos;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;DragDropContext onDragEnd=&#123;onDragEnd&#125;&gt;</span><br><span class="line">      &lt;Wrapper&gt;</span><br><span class="line">        &lt;Boards&gt;</span><br><span class="line">          &lt;Droppable droppableId=<span class="string">"one"</span>&gt;</span><br><span class="line">            &#123;<span class="function">(<span class="params">provided</span>) =&gt;</span> (</span><br><span class="line">              &lt;Board ref=&#123;provided.innerRef&#125; &#123;...provided.droppableProps&#125;&gt;</span><br><span class="line">                &#123;toDos.map(<span class="function">(<span class="params">toDo, index</span>) =&gt;</span> (</span><br><span class="line">                  &lt;Draggable key=&#123;toDo&#125; draggableId=&#123;toDo&#125; index=&#123;index&#125;&gt;</span><br><span class="line">                    &#123;<span class="function">(<span class="params">provided</span>) =&gt;</span> (</span><br><span class="line">                      &lt;Card ref=&#123;provided.innerRef&#125; &#123;...provided.dragHandleProps&#125; &#123;...provided.draggableProps&#125;&gt;</span><br><span class="line">                        &#123;toDo&#125;</span><br><span class="line">                      &lt;<span class="regexp">/Card&gt;</span></span><br><span class="line"><span class="regexp">                    )&#125;</span></span><br><span class="line"><span class="regexp">                  &lt;/</span>Draggable&gt;</span><br><span class="line">                ))&#125;</span><br><span class="line">                &#123;provided.placeholder&#125;</span><br><span class="line">              &lt;<span class="regexp">/Board&gt;</span></span><br><span class="line"><span class="regexp">            )&#125;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>Droppable&gt;</span><br><span class="line">        &lt;<span class="regexp">/Boards&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Wrapper&gt;</span><br><span class="line">    &lt;<span class="regexp">/DragDropContext&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p><code>Draggable</code> 의 <code>draggableProps</code> 는 모든 영역을 <code>dragHandleProps</code> 는 특정 영역을 통해서만 드래그 할 수 있도록 설정할 수 있습니다.</p><p><code>Draggable</code> list 를 렌더링하는 경우 각 <code>Draggable</code> 에 key prop 을 추가하는 것이 중요합니다. key 는 list 내에서 고유해야 합니다. key 에 item 의 index 가 포함되어서는 안되기 때문에 일반적으로 draggableId 를 key 로 사용합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://react-beautiful-dnd.netlify.app/iframe.html?id=board--simple" target="_blank" rel="noopener">react-beautiful-dnd 테스트해 보기</a></li><li><a href="https://codesandbox.io/s/k260nyxq9v" target="_blank" rel="noopener">react-beautiful-dnd 예시 코드</a></li><li><a href="https://github.com/LeeHyungGeun/react-beautiful-dnd-kr" target="_blank" rel="noopener">react-beautiful-dnd-kr</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/08/12/react-8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] React Hook Form</title>
      <link>http://hgko1207.github.io/2022/08/08/react-7/</link>
      <guid>http://hgko1207.github.io/2022/08/08/react-7/</guid>
      <pubDate>Mon, 08 Aug 2022 14:40:32 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;React에서 &lt;strong&gt;React Hook Form&lt;/strong&gt; 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;기본적으로 Form 을 사용할 때 작성하는 코드입니다. 하나의 &lt;code&gt;input&lt;/code&gt; 이지만 여러 개의 &lt;code&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>React에서 <strong>React Hook Form</strong> 사용 방법에 대해 알아보겠습니다.</p><p>기본적으로 Form 을 사용할 때 작성하는 코드입니다. 하나의 <code>input</code> 이지만 여러 개의 <code>input</code> 을 사용할 경우 <code>useState</code> 와 <code>onChange</code> 이벤트가 많이 생성됩니다.<br />그리고 Validation Check 하는 코드도 복잡해집니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InputForm.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InputForm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [toDo, setTodo] = useState(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">const</span> [toDoError, setTodoError] = useState(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">const</span> onChange = <span class="function">(<span class="params">event: React.FormEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      currentTarget: &#123; value &#125;,</span><br><span class="line">    &#125; = event;</span><br><span class="line">    setTodoError(<span class="string">''</span>);</span><br><span class="line">    setTodo(value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">event: React.FormEvent&lt;HTMLFormElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">if</span> (toDo.length &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> setTodoError(<span class="string">'To do should be longer'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(toDo);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;form onSubmit=&#123;onSubmit&#125;&gt;</span><br><span class="line">        &lt;input onChange=&#123;onChange&#125; value=&#123;toDo&#125; placeholder=<span class="string">"Write a to do"</span> /&gt;</span><br><span class="line">        &lt;button&gt;추가&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &#123;toDoError !== '' ? toDoError : null&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>form&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default InputForm;</span></span><br></pre></td></tr></table></figure><p><strong>react-hook-form</strong> 라이브러리를 사용하면 위의 코드들을 간략하게 줄일 수 있습니다. 그리고 Validation(검증)도 쉽게 관리할 수 있습니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install react-hook-form</span></span><br></pre></td></tr></table></figure><p>또는 yarn을 사용한다면 이 명령어를 사용하면 됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add react-hook-form</span></span><br></pre></td></tr></table></figure><h2 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h2><p>먼저 <code>useForm</code> 을 import 합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useForm &#125; <span class="keyword">from</span> <span class="string">'react-hook-form'</span>;</span><br></pre></td></tr></table></figure><h3 id="register"><a class="markdownIt-Anchor" href="#register"></a> register</h3><p><code>useForm</code>, <code>register</code>을 사용한 단 한줄의 코드가 onChange 이벤트와 value, useState 를 모두 대체했습니다.<br />사용법은 <code>{...register(name)}</code> 를 input 태크 안에 작성합니다.</p><p><code>register</code> 함수는 Validation 을 보다 쉽게 관리 할 수 있도록 해줍니다. <code>required: true</code> 처럼 조건을 작성 할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InputForm.tsx</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InputForm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; register &#125; = useForm();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;input &#123;...register(<span class="string">'toDo'</span>, &#123; required: <span class="literal">true</span> &#125;)&#125; placeholder=<span class="string">"Write a to do"</span> /&gt;</span><br><span class="line">        &lt;button&gt;추가&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>form&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default InputForm;</span></span><br></pre></td></tr></table></figure><h3 id="watch"><a class="markdownIt-Anchor" href="#watch"></a> watch</h3><p><code>watch</code> 는 form 의 입력 값들의 변화를 관찰 할 수 있게 해줍니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; register, watch &#125; = useForm();</span><br><span class="line"><span class="built_in">console</span>.log(watch);</span><br></pre></td></tr></table></figure><h3 id="handlesubmit"><a class="markdownIt-Anchor" href="#handlesubmit"></a> handleSubmit</h3><p><code>handleSubmit</code> 는 form 데이터의 Validation Check 를 해결해줍니다. 파라미터는 Validation 을 통과했을 때 호출되는 함수입니다.</p><p><code>handleSubmit</code> 를 사용하면 키보드랑 마우스를 조건이 유효하지 않은 항목으로 바로 focus 시켜줍니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InputForm.tsx</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InputForm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; register, handleSubmit &#125; = useForm();</span><br><span class="line">  <span class="keyword">const</span> onValid = <span class="function">(<span class="params">data: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;form onSubmit=&#123;handleSubmit(onValid)&#125;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          &#123;...register(<span class="string">'toDo'</span>, &#123;</span><br><span class="line">            required: <span class="literal">true</span>,</span><br><span class="line">            minLength: &#123;</span><br><span class="line">              value: <span class="number">5</span>,</span><br><span class="line">              message: <span class="string">'Your todo is too short.'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">          placeholder=<span class="string">"Write a to do"</span></span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;button&gt;추가&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>form&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default InputForm;</span></span><br></pre></td></tr></table></figure><h3 id="formstate"><a class="markdownIt-Anchor" href="#formstate"></a> formState</h3><p><code>formState</code> 을 통해 에러메시지를 출력해보겠습니다.</p><p>먼저 email 은 정규식을 통해 검증하도록 pattern 을 작성하였습니다. 조건을 입력할 때 메시지도 작성하여 에러메시지가 출력되도록 하였습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IForm = &#123;</span><br><span class="line">  errors: &#123;</span><br><span class="line">    email: &#123;</span><br><span class="line">      message: <span class="built_in">string</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  email: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InputForm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    register,</span><br><span class="line">    handleSubmit,</span><br><span class="line">    formState: &#123; errors &#125;,</span><br><span class="line">  &#125; = useForm&lt;IForm&gt;(&#123;</span><br><span class="line">    defaultValues: &#123;</span><br><span class="line">      email: <span class="string">'@gmail.com'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> onValid = <span class="function">(<span class="params">data: IForm</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;form onSubmit=&#123;handleSubmit(onValid)&#125;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          &#123;...register(<span class="string">'email'</span>, &#123;</span><br><span class="line">            required: <span class="string">'이메일을 입력하세요.'</span>,</span><br><span class="line">            pattern: &#123;</span><br><span class="line">              value: <span class="regexp">/^[A-Za-z0-9._%+-]+@gmail.com$/</span>,</span><br><span class="line">              message: <span class="string">'이메일 형식이 맞지 않습니다.'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">          placeholder=<span class="string">"Email"</span></span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;span&gt;&#123;errors?.email?.message&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button&gt;등록&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> InputForm;</span><br></pre></td></tr></table></figure><p>email 을 입력하지 않았을 경우 <strong>이메일을 입력하세요.</strong> 에러메시지가 출력되고 email 형식이 맞지 않을 경우 <strong>이메일 형식이 맞지 않습니다.</strong> 에러메시지가 출력됩니다.</p><h3 id="setvalue"><a class="markdownIt-Anchor" href="#setvalue"></a> SetValue</h3><p>submit 하고 난 후 값을 초기화 할 수 있습니다.</p><h3 id="custom-validation"><a class="markdownIt-Anchor" href="#custom-validation"></a> Custom Validation</h3><ul><li><code>setError</code> 를 통해 직접 에러를 발생시키도록 할 수 있습니다.</li><li><code>shouldFocus</code> 옵션을 사용하면 form 의 커서가 자동으로 옮겨집니다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 예</span></span><br><span class="line">setError(<span class="string">'password1'</span>, &#123; message: <span class="string">'비밀번호가 다릅니다.'</span> &#125;, &#123; shouldFocus: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://react-hook-form.com/" target="_blank" rel="noopener">https://react-hook-form.com/</a></li><li><a href="https://react-hook-form.com/kr/get-started/" target="_blank" rel="noopener">https://react-hook-form.com/kr/get-started/</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/08/08/react-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] Angular 시작</title>
      <link>http://hgko1207.github.io/2022/08/07/angular-2/</link>
      <guid>http://hgko1207.github.io/2022/08/07/angular-2/</guid>
      <pubDate>Sun, 07 Aug 2022 12:51:25 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt; 는 구글이 만든 단일 페이지 웹 애플리케이션 개발을 위한 자바스크립트 프레임워크입니다. 다양한 플랫폼에서 동작할 수 있게 하는 개발 툴과 기능들을 제공합니다.&lt;/p&gt;
&lt;h2 id=&quot;module&quot;&gt;&lt;a 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Angular</strong> 는 구글이 만든 단일 페이지 웹 애플리케이션 개발을 위한 자바스크립트 프레임워크입니다. 다양한 플랫폼에서 동작할 수 있게 하는 개발 툴과 기능들을 제공합니다.</p><h2 id="module"><a class="markdownIt-Anchor" href="#module"></a> Module</h2><p>컴포넌트, 파이프, 서비스 등과 같은 앵귤러 애플리케이션의 주요 부분을 기능단위로 그룹핑 하게 해줍니다.</p><ul><li>모든 앵귤러 애플리케이션은 하나의 Root Module 을 가집니다.</li><li>여러 Feature Module 을 가질 수 있습니다.</li><li>재사용할 수 있는 기능을 외부에 배포하기 위해 사용되기도 합니다.</li></ul><h2 id="component"><a class="markdownIt-Anchor" href="#component"></a> Component</h2><ul><li>빌딩 블록 형식</li><li>HTML 요소들의 그룹</li><li>뷰와 로직으로 구성</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ng g component todo/todos --module todo/todo.module.ts --<span class="built_in">export</span></span></span><br></pre></td></tr></table></figure><p>컴포넌트 내부에서 html, css 코드를 작성하도록 생성할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ng g component todos/todo --inline-template --inline-style</span></span><br></pre></td></tr></table></figure><h2 id="template"><a class="markdownIt-Anchor" href="#template"></a> Template</h2><ul><li>HTML 코드로서 템플릿을 표현합니다.</li><li>Template 표현식(Expression)과 Template 문장(Statement)을 가집니다.</li><li>바인딩<ul><li>바인딩의 대상: 속성, 이벤트, ngModel, class, style</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &#123;&#123; 템플릿 표현식 &#125;&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- [속성]="템플릿 표현식" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">todo</span> [<span class="attr">todo</span>]=<span class="string">"work"</span>&gt;</span><span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- (이벤트)="템플릿 문장(함수)" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"handle()"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- [(ngModel)]="템플릿 문장" --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 양방향 바인딩을 사용할 수 있음 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"name"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="컴포넌트간-커뮤니케이션"><a class="markdownIt-Anchor" href="#컴포넌트간-커뮤니케이션"></a> 컴포넌트간 커뮤니케이션</h2><ul><li><p>부모 컴포넌트 -&gt; 자식 컴포넌트</p><ul><li><code>@input()</code> 사용</li><li>ES6 setter 사용 가능</li><li><code>@ViewChild()</code> 사용</li></ul></li><li><p>자식 컴포넌트 -&gt; 부모 컴포넌트</p><ul><li><code>@Output()</code> 사용</li><li><code>EventEmitter</code> 사용하여 부모에게 이벤트 전달</li><li>부모 컴포넌트는 <code>$event</code>로 이벤트의 데이터를 전달 받음</li><li>자식이 부모 컴포넌트를 직접 주입받을 수 있음</li></ul></li></ul><h2 id="파이프pipe"><a class="markdownIt-Anchor" href="#파이프pipe"></a> 파이프(Pipe)</h2><ul><li>템플릿(HTML)에서 보이는 데이터를 변환해줍니다.</li><li>AngularJs 1.x 에서는 필터로 제공되었습니다.</li><li>실제 값을 변경하는 것이 아니라 보여주는 값만 바꿔 보여주기 위해 사용합니다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 사용법</span></span><br><span class="line">&#123;&#123; express | pipeName: paramValue &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 예</span></span><br><span class="line">today: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">&#123;&#123; today | date &#125;&#125;</span><br><span class="line">&#123;&#123; today | date:<span class="string">"yy/mm/dd"</span> &#125;&#125; <span class="comment">// 날짜 포맷 변환</span></span><br><span class="line">&#123;&#123; today | date | uppercase &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/08/07/angular-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Python] 기초(2)</title>
      <link>http://hgko1207.github.io/2022/08/02/python-2/</link>
      <guid>http://hgko1207.github.io/2022/08/02/python-2/</guid>
      <pubDate>Tue, 02 Aug 2022 14:47:28 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;나도코딩 님의 &lt;a href=&quot;https://www.youtube.com/channel/UC7iAOLiALt2rtMVAWWl4pnw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;파이썬 코딩 무료 강의 (기본편)&lt;/a&gt;을 보면서 작성하
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>나도코딩 님의 <a href="https://www.youtube.com/channel/UC7iAOLiALt2rtMVAWWl4pnw" target="_blank" rel="noopener">파이썬 코딩 무료 강의 (기본편)</a>을 보면서 작성하였습니다.</p><h2 id="기본-시작"><a class="markdownIt-Anchor" href="#기본-시작"></a> 기본 시작</h2><h3 id="함수"><a class="markdownIt-Anchor" href="#함수"></a> 함수</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_account</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"새로운 계좌가 생성되었습니다."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deposit</span><span class="params">(balance, money)</span>:</span> <span class="comment"># 입금</span></span><br><span class="line">    print(<span class="string">"입금이 완료되었습니다. 잔액은 &#123;0&#125; 원입니다."</span>.format(balance + money))</span><br><span class="line">    <span class="keyword">return</span> balance + money</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">(balance, money)</span>:</span> <span class="comment"># 출금</span></span><br><span class="line">    <span class="keyword">if</span> balance &gt;= money: <span class="comment"># 잔액이 출금보다 많으면</span></span><br><span class="line">        print(<span class="string">"출금이 완료되었습니다. 잔액은 &#123;0&#125; 원입니다."</span>.format(balance - money))</span><br><span class="line">        <span class="keyword">return</span> balance - money</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"출금이 완료되지 않았습니다. 잔액은 &#123;0&#125; 원입니다."</span>.format(balance))</span><br><span class="line">        <span class="keyword">return</span> balance</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw_night</span><span class="params">(balance, money)</span>:</span> <span class="comment"># 저녁에 출금</span></span><br><span class="line">    commission = <span class="number">100</span> <span class="comment"># 수수료 100원</span></span><br><span class="line">    <span class="keyword">return</span> commission, balance - money - commission</span><br><span class="line"></span><br><span class="line">balance = <span class="number">0</span></span><br><span class="line">balance = deposit(balance, <span class="number">1000</span>)</span><br><span class="line"><span class="comment"># balance = withdraw(balance, 500)</span></span><br><span class="line">commission, balance = withdraw_night(balance, <span class="number">500</span>)</span><br><span class="line">print(<span class="string">"수수료 &#123;0&#125; 원이며, 잔액은 &#123;1&#125; 원입니다."</span>.format(commission, balance))</span><br></pre></td></tr></table></figure><h3 id="함수-기본값"><a class="markdownIt-Anchor" href="#함수-기본값"></a> 함수 기본값</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(name, age, main_lang)</span>:</span></span><br><span class="line">    print(<span class="string">"이름 : &#123;0&#125;\t나이 : &#123;1&#125;\t주 사용언어 : &#123;2&#125;"</span>.format(name, age, main_lang))</span><br><span class="line"></span><br><span class="line">profile(<span class="string">"고형균"</span>, <span class="number">35</span>, <span class="string">"파이썬"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 같은 학교 같은 학년 같은 반 같은 수업</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(name, age=<span class="number">17</span>, main_lang=<span class="string">"파이썬"</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"이름 : &#123;0&#125;\t나이 : &#123;1&#125;\t주 사용언어 : &#123;2&#125;"</span>.format(name, age, main_lang))</span><br><span class="line"></span><br><span class="line">profile(<span class="string">"고형균"</span>)</span><br></pre></td></tr></table></figure><h3 id="가변인자"><a class="markdownIt-Anchor" href="#가변인자"></a> 가변인자</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># def profile(name, age, lang1, lang2, lang3, lang4, lang5):</span></span><br><span class="line"><span class="comment">#     print("이름 : &#123;0&#125;\t나이 : &#123;1&#125;\t".format(name, age), end=" ")</span></span><br><span class="line"><span class="comment">#     print(lang1, lang2, lang3, lang4, lang5)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(name, age, *language)</span>:</span></span><br><span class="line">    print(<span class="string">"이름 : &#123;0&#125;\t나이 : &#123;1&#125;\t"</span>.format(name, age), end=<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">for</span> lang <span class="keyword">in</span> language:</span><br><span class="line">        print(lang, end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">profile(<span class="string">"고형균"</span>, <span class="number">35</span>, <span class="string">"Python"</span>, <span class="string">"Java"</span>, <span class="string">"C"</span>, <span class="string">"C++"</span>, <span class="string">"C#"</span>, <span class="string">"JavaScript"</span>)</span><br><span class="line">profile(<span class="string">"김태호"</span>, <span class="number">40</span>, <span class="string">"Kotlin"</span>, <span class="string">"Swift"</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>)</span><br></pre></td></tr></table></figure><h3 id="지역변수와-전역변수"><a class="markdownIt-Anchor" href="#지역변수와-전역변수"></a> 지역변수와 전역변수</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gun = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkpoint</span><span class="params">(soldiers)</span>:</span> <span class="comment"># 경계근무</span></span><br><span class="line">    <span class="keyword">global</span> gun <span class="comment"># 전역 공간에 있는 gun 사용</span></span><br><span class="line">    gun = gun - soldiers</span><br><span class="line">    print(<span class="string">"[함수 내] 남은 총 : &#123;0&#125;"</span>.format(gun))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkpoint_ret</span><span class="params">(gun, soldiers)</span>:</span></span><br><span class="line">    gun = gun - soldiers</span><br><span class="line">    print(<span class="string">"[함수 내] 남은 총 : &#123;0&#125;"</span>.format(gun))</span><br><span class="line">    <span class="keyword">return</span> gun</span><br><span class="line"></span><br><span class="line">print(<span class="string">"전체 총 : &#123;0&#125;"</span>.format(gun))</span><br><span class="line"><span class="comment">#checkpoint(2) # 2명이 경계 근무 나감</span></span><br><span class="line">gun = checkpoint_ret(gun, <span class="number">2</span>)</span><br><span class="line">print(<span class="string">"남은 총 : &#123;0&#125;"</span>.format(gun))</span><br></pre></td></tr></table></figure><h3 id="표준-입출력"><a class="markdownIt-Anchor" href="#표준-입출력"></a> 표준 입출력</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(<span class="string">"Python"</span>, <span class="string">"Java"</span>, file=sys.stdout)</span><br><span class="line">print(<span class="string">"Python"</span>, <span class="string">"Java"</span>, file=sys.stderr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시험 성적</span></span><br><span class="line">scores = &#123;<span class="string">"수학"</span>:<span class="number">0</span>, <span class="string">"영어"</span>:<span class="number">50</span>, <span class="string">"코딩"</span>:<span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> subject, score <span class="keyword">in</span> scores.items():</span><br><span class="line">    <span class="comment">#print(subject, score)</span></span><br><span class="line">    print(subject.ljust(<span class="number">8</span>), str(score).rjust(<span class="number">4</span>), sep=<span class="string">":"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 은행 대기순번표</span></span><br><span class="line"><span class="comment"># 001, 002, 003, ...</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">    print(<span class="string">"대기번호 : "</span> + str(num).zfill(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="다양한-출력포맷"><a class="markdownIt-Anchor" href="#다양한-출력포맷"></a> 다양한 출력포맷</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 빈 자리는 빈공간으로 두고, 오른쪽 정렬을 하되, 총 10자리 공간을 확보</span></span><br><span class="line">print(<span class="string">"&#123;0: &gt;10&#125;"</span>.format(<span class="number">500</span>))</span><br><span class="line"><span class="comment"># 양수일 땐 +로 표시, 음수일 땐 -로 표시</span></span><br><span class="line">print(<span class="string">"&#123;0: &gt;+10&#125;"</span>.format(<span class="number">500</span>))</span><br><span class="line">print(<span class="string">"&#123;0: &gt;+10&#125;"</span>.format(<span class="number">-500</span>))</span><br><span class="line"><span class="comment"># 왼쪽 정렬하고, 빈칸으로 _로 채움</span></span><br><span class="line">print(<span class="string">"&#123;0:_&lt;+10&#125;"</span>.format(<span class="number">500</span>))</span><br><span class="line"><span class="comment"># 3자리 마다 콤마를 찍어주기</span></span><br><span class="line">print(<span class="string">"&#123;0:,&#125;"</span>.format(<span class="number">1000000000</span>))</span><br><span class="line"><span class="comment"># 3자리 마다 콤마를 찍어주기, +- 부호도 붙이기</span></span><br><span class="line">print(<span class="string">"&#123;0:+,&#125;"</span>.format(<span class="number">1000000000</span>))</span><br><span class="line"><span class="comment"># 3자리 마다 콤마를 찍어주기, +- 부호도 붙이고, 자릿수 확보하기</span></span><br><span class="line"><span class="comment"># 돈이 많으면 행복해지니까 빈 자리는 ^ 로 채워주기</span></span><br><span class="line">print(<span class="string">"&#123;0:^&lt;+30,&#125;"</span>.format(<span class="number">1000000000</span>))</span><br><span class="line"><span class="comment"># 소수점 출력</span></span><br><span class="line">print(<span class="string">"&#123;0:f&#125;"</span>.format(<span class="number">5</span>/<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 소수점 특정 자리수 까지만 표시 (소수점 3째 자리에서 반올림)</span></span><br><span class="line">print(<span class="string">"&#123;0:.2f&#125;"</span>.format(<span class="number">5</span>/<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="파일-입출력"><a class="markdownIt-Anchor" href="#파일-입출력"></a> 파일 입출력</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">score_file = open(<span class="string">"score.txt"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf8"</span>) <span class="comment"># write</span></span><br><span class="line">print(<span class="string">"수학 : 0"</span>, file=score_file)</span><br><span class="line">print(<span class="string">"영어 : 50"</span>, file=score_file)</span><br><span class="line">score_file.close()</span><br><span class="line"></span><br><span class="line">score_file = open(<span class="string">"score.txt"</span>, <span class="string">"a"</span>, encoding=<span class="string">"utf8"</span>) <span class="comment"># update</span></span><br><span class="line">score_file.write(<span class="string">"과학 : 80"</span>)</span><br><span class="line">score_file.write(<span class="string">"\n코딩 : 100"</span>)</span><br><span class="line">score_file.close()</span><br><span class="line"></span><br><span class="line">score_file = open(<span class="string">"score.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf8"</span>) <span class="comment"># read</span></span><br><span class="line">print(score_file.read())</span><br><span class="line">score_file.close()</span><br><span class="line"></span><br><span class="line">score_file = open(<span class="string">"score.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf8"</span>)</span><br><span class="line">print(score_file.readline(), end=<span class="string">""</span>) <span class="comment"># 줄별로 읽기, 한 줄 읽고 커서는 다음 줄로 이동</span></span><br><span class="line">print(score_file.readline(), end=<span class="string">""</span>)</span><br><span class="line">print(score_file.readline(), end=<span class="string">""</span>)</span><br><span class="line">print(score_file.readline(), end=<span class="string">""</span>)</span><br><span class="line">score_file.close()</span><br><span class="line"></span><br><span class="line">score_file = open(<span class="string">"score.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf8"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    line = score_file.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(line, end=<span class="string">""</span>)</span><br><span class="line">score_file.close()</span><br><span class="line"></span><br><span class="line">score_file = open(<span class="string">"score.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf8"</span>)</span><br><span class="line">lines = score_file.readlines() <span class="comment"># list 형태로 저장</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line, end=<span class="string">""</span>)</span><br><span class="line">score_file.close()</span><br></pre></td></tr></table></figure><h3 id="pickle"><a class="markdownIt-Anchor" href="#pickle"></a> pickle</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">profile_file = open(<span class="string">"profile.pickle"</span>, <span class="string">"wb"</span>) <span class="comment"># b: 바이너리</span></span><br><span class="line">profile = &#123;<span class="string">"이름"</span>:<span class="string">"고형균"</span>, <span class="string">"나이"</span>:<span class="number">36</span>, <span class="string">"취미"</span>:[<span class="string">"축구"</span>, <span class="string">"볼링"</span>, <span class="string">"코딩"</span>]&#125;</span><br><span class="line">print(profile)</span><br><span class="line">pickle.dump(profile, profile_file) <span class="comment"># profile 에 있는 정보를 file 에 저장</span></span><br><span class="line">profile_file.close()</span><br><span class="line"></span><br><span class="line">profile_file = open(<span class="string">"profile.pickle"</span>, <span class="string">"rb"</span>)</span><br><span class="line">profile = pickle.load(profile_file) <span class="comment"># file 에 있는 정보를 profile 에 불러오기</span></span><br><span class="line">print(profile)</span><br><span class="line">profile_file.close()</span><br></pre></td></tr></table></figure><h3 id="with"><a class="markdownIt-Anchor" href="#with"></a> with</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"study.txt"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf8"</span>) <span class="keyword">as</span> study_file:</span><br><span class="line">    study_file.write(<span class="string">"파이썬을 열심히 공부하고 있어요"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"study.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf8"</span>) <span class="keyword">as</span> study_file:</span><br><span class="line">    print(study_file.read())</span><br></pre></td></tr></table></figure><h3 id="클래스"><a class="markdownIt-Anchor" href="#클래스"></a> 클래스</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unit</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, hp, damage)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.hp = hp</span><br><span class="line">        self.damage = damage</span><br><span class="line">        print(<span class="string">"&#123;0&#125; 유닛이 생성되었습니다."</span>.format(self.name))</span><br><span class="line">        print(<span class="string">"체력 &#123;0&#125;, 공격력 &#123;1&#125;\n"</span>.format(self.hp, self.damage))</span><br><span class="line"></span><br><span class="line">marine1 = Unit(<span class="string">"마린"</span>, <span class="number">40</span>, <span class="number">5</span>)</span><br><span class="line">marine2 = Unit(<span class="string">"마린"</span>, <span class="number">40</span>, <span class="number">5</span>)</span><br><span class="line">tank = Unit(<span class="string">"탱크"</span>, <span class="number">150</span>, <span class="number">35</span>)</span><br></pre></td></tr></table></figure><h3 id="메소드"><a class="markdownIt-Anchor" href="#메소드"></a> 메소드</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AttackUnit</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, hp, damage)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.hp = hp</span><br><span class="line">        self.damage = damage</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(self, location)</span>:</span></span><br><span class="line">        print(<span class="string">"&#123;0&#125; : &#123;1&#125; 방향으로 적군을 공격합니다. [공격력 &#123;2&#125;]"</span>.format(self.name, location, self.damage))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">damaged</span><span class="params">(self, damage)</span>:</span></span><br><span class="line">        print(<span class="string">"&#123;0&#125; : &#123;1&#125; 데미지를 입었습니다."</span>.format(self.name, damage))</span><br><span class="line">        self.hp -= damage</span><br><span class="line">        print(<span class="string">"&#123;0&#125; : 현재 체력은 &#123;1&#125; 입니다."</span>.format(self.name, self.hp))</span><br><span class="line">        <span class="keyword">if</span> self.hp &lt;= <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"&#123;0&#125; : 파괴되었습니다."</span>.format(self.name))</span><br><span class="line"></span><br><span class="line">firebat1 = AttackUnit(<span class="string">"파이어뱃"</span>, <span class="number">50</span>, <span class="number">16</span>)</span><br><span class="line">firebat1.attack(<span class="string">"5시"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 공격 2번 받는다고 가정</span></span><br><span class="line">firebat1.damaged(<span class="number">25</span>)</span><br><span class="line">firebat1.damaged(<span class="number">25</span>)</span><br></pre></td></tr></table></figure><h3 id="상속"><a class="markdownIt-Anchor" href="#상속"></a> 상속</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unit</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, hp)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.hp = hp</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AttackUnit</span><span class="params">(Unit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, hp, damage)</span>:</span></span><br><span class="line">        Unit.__init__(self, name, hp)</span><br><span class="line">        self.damage = damage</span><br></pre></td></tr></table></figure><h3 id="다중-상속"><a class="markdownIt-Anchor" href="#다중-상속"></a> 다중 상속</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 날 수 있는 기능을 가진 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyable</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, flying_speed)</span>:</span></span><br><span class="line">        self.flying_speed = flying_speed</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self, name, location)</span>:</span></span><br><span class="line">        print(<span class="string">"&#123;0&#125; : &#123;1&#125; 방향으로 날아갑니다. [속도 &#123;2&#125;]"</span>.format(name, location, self.flying_speed))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 공중 공격 유닛 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyableAttackUnit</span><span class="params">(AttackUnit, Flyable)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, hp, damage, flying_speed)</span>:</span></span><br><span class="line">        AttackUnit.__init__(self, name, hp, damage)</span><br><span class="line">        Flyable.__init__(self, flying_speed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 발키리 : 공중 공격 유닛, 한번에 14발 미사일 발사.</span></span><br><span class="line">valkrie = FlyableAttackUnit(<span class="string">"발키리"</span>, <span class="number">200</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">valkrie.fly(valkrie.name, <span class="string">"3시"</span>);</span><br></pre></td></tr></table></figure><h3 id="메소드-오버라이딩"><a class="markdownIt-Anchor" href="#메소드-오버라이딩"></a> 메소드 오버라이딩</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyableAttackUnit</span><span class="params">(AttackUnit, Flyable)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, hp, damage, flying_speed)</span>:</span></span><br><span class="line">        AttackUnit.__init__(self, name, hp, <span class="number">0</span>, damage)</span><br><span class="line">        Flyable.__init__(self, flying_speed)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self, location)</span>:</span></span><br><span class="line">        self.fly(self.name, location) <span class="comment"># &lt;= 메소드 오버라이딩</span></span><br></pre></td></tr></table></figure><h3 id="pass"><a class="markdownIt-Anchor" href="#pass"></a> pass</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game_start</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"[알림] 새로운 게임을 시작합니다."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game_over</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">game_start()</span><br><span class="line">game_over()</span><br></pre></td></tr></table></figure><h3 id="super"><a class="markdownIt-Anchor" href="#super"></a> super</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuildingUnit</span><span class="params">(Unit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, hp, location)</span>:</span></span><br><span class="line">        <span class="comment">#Unit.__init__(self, name, hp, 0)</span></span><br><span class="line">        super().__init__(name, hp, <span class="number">0</span>)</span><br><span class="line">        self.location = location</span><br></pre></td></tr></table></figure><h3 id="예외처리"><a class="markdownIt-Anchor" href="#예외처리"></a> 예외처리</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"나누기 전용 계산기입니다."</span>)</span><br><span class="line">    nums = []</span><br><span class="line">    nums.append(int(input(<span class="string">"첫 번째 숫자를 입력하세요 : "</span>)))</span><br><span class="line">    nums.append(int(input(<span class="string">"두 번째 숫자를 입력하세요 : "</span>)))</span><br><span class="line">    nums.append(int(nums[<span class="number">0</span>] / nums[<span class="number">1</span>]))</span><br><span class="line">    print(<span class="string">"&#123;0&#125; / &#123;1&#125; = &#123;2&#125;"</span>.format(nums[<span class="number">0</span>], nums[<span class="number">1</span>], nums[<span class="number">2</span>]))</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"에러! 잘못된 값을 입력하였습니다."</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> err:</span><br><span class="line">    print(err)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">"알 수 없는 에러가 발생하였습니다."</span>)</span><br><span class="line">    print(err)</span><br></pre></td></tr></table></figure><h3 id="예외-발생시키기"><a class="markdownIt-Anchor" href="#예외-발생시키기"></a> 예외 발생시키기</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigNumberError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.msg = msg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"한 자리 숫자 나누기 전용 계산기입니다."</span>)</span><br><span class="line">    num1 = int(input(<span class="string">"첫 번째 숫자를 입력하세요 : "</span>))</span><br><span class="line">    num2 = int(input(<span class="string">"두 번째 숫자를 입력하세요 : "</span>))</span><br><span class="line">    <span class="keyword">if</span> num1 &gt;= <span class="number">10</span> <span class="keyword">or</span> num2 &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">raise</span> BigNumberError(<span class="string">"입력값 : &#123;0&#125;, &#123;1&#125;"</span>.format(num1, num2))</span><br><span class="line">    print(<span class="string">"&#123;0&#125; / &#123;1&#125; = &#123;2&#125;"</span>.format(num1, num2, int(num1 / num2)))</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"잘못된 값을 입력하였습니다. 한 자리 숫자만 입력하세요."</span>)</span><br><span class="line"><span class="keyword">except</span> BigNumberError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">"에러가 발생하였습니다. 한 자리 숫자만 입력하세요."</span>)</span><br><span class="line">    print(err)</span><br></pre></td></tr></table></figure><h3 id="모듈"><a class="markdownIt-Anchor" href="#모듈"></a> 모듈</h3><p>모듈을 사용하기 위해 <code>theater_module.py</code> 파일을 생성합니다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 일반 가격</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(people)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;0&#125;명 가격은 &#123;1&#125;원 입니다."</span>.format(people, people * <span class="number">10000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 조조 할인 가격</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">price_morning</span><span class="params">(people)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;0&#125;명 조조 할인 가격은 &#123;1&#125;원 입니다."</span>.format(people, people * <span class="number">6000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 군인 할인 가격</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">price_soldier</span><span class="params">(people)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;0&#125;명 군인 할인 가격은 &#123;1&#125;원 입니다."</span>.format(people, people * <span class="number">4000</span>))</span><br></pre></td></tr></table></figure><p>생성한 모듈을 사용하기 위한 5가지 방법입니다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1) 기본</span></span><br><span class="line"><span class="keyword">import</span> theater_module</span><br><span class="line">theater_module.price(<span class="number">3</span>) <span class="comment"># 3명이서 영화 보러 갔을 때 가격</span></span><br><span class="line">theater_module.price_morning(<span class="number">4</span>) <span class="comment"># 4명이서 조조 할인 영화 보러 갔을 때</span></span><br><span class="line">theater_module.price_soldier(<span class="number">5</span>) <span class="comment"># 5명의 군인이 영화 보러 갔을 때</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 별칭 사용</span></span><br><span class="line"><span class="keyword">import</span> theater_module <span class="keyword">as</span> mv</span><br><span class="line">mv.price(<span class="number">3</span>)</span><br><span class="line">mv.price_morning(<span class="number">4</span>)</span><br><span class="line">mv.price_soldier(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3) 전체 사용</span></span><br><span class="line"><span class="keyword">from</span> theater_module <span class="keyword">import</span> *</span><br><span class="line">price(<span class="number">3</span>)</span><br><span class="line">price_morning(<span class="number">4</span>)</span><br><span class="line">price_soldier(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4) 특정한 함수 사용</span></span><br><span class="line"><span class="keyword">from</span> theater_module <span class="keyword">import</span> price, price_morning</span><br><span class="line">price(<span class="number">5</span>)</span><br><span class="line">price_morning(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5) 함수에 별칭 사용</span></span><br><span class="line"><span class="keyword">from</span> theater_module <span class="keyword">import</span> price_soldier <span class="keyword">as</span> price</span><br><span class="line">price(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="all"><a class="markdownIt-Anchor" href="#all"></a> <strong>all</strong></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">"vietnam"</span>]</span><br></pre></td></tr></table></figure><h3 id="모듈-직접-실행"><a class="markdownIt-Anchor" href="#모듈-직접-실행"></a> 모듈 직접 실행</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThailandPackage</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"[태국 패키지 3박 5일] 방콕, 파타야 여행 (야시장 투어) 50만원"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"Thailand 모듈을 직접 실행"</span>)</span><br><span class="line">    print(<span class="string">"이 문장은 모듈을 직접 실행할 때만 실행돼요"</span>)</span><br><span class="line">    trip_to = ThailandPackage()</span><br><span class="line">    trip_to.detail()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Thailand 외부에서 모듈 호출"</span>)</span><br></pre></td></tr></table></figure><h3 id="패키지-모듈-위치"><a class="markdownIt-Anchor" href="#패키지-모듈-위치"></a> 패키지, 모듈 위치</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(inspect.getfile(random))</span><br></pre></td></tr></table></figure><h3 id="pip-install"><a class="markdownIt-Anchor" href="#pip-install"></a> pip install</h3><p><a href="https://pypi.org/search/" target="_blank" rel="noopener">https://pypi.org/search/</a></p><ul><li><code>pip install beautifulsoup4</code></li><li><code>pip list</code></li><li><code>pip show beautifulsoup4</code></li><li><code>pip install --upgrade beautifulsoup4</code></li><li><code>pip uninstall beautifulsoup4</code></li></ul><h3 id="내장-함수"><a class="markdownIt-Anchor" href="#내장-함수"></a> 내장 함수</h3><p><a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="noopener">Built-in Functions</a> 사이트는 파이썬의 내장 함수 목록을 확인할 수 있습니다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># input : 사용자 입력을 받는 함수</span></span><br><span class="line">language = input(<span class="string">"무슨 언어를 좋아하세요?"</span>)</span><br><span class="line">print(<span class="string">"&#123;0&#125;은 아주 좋은 언어입니다!"</span>.format(language))</span><br><span class="line"></span><br><span class="line"><span class="comment"># dir : 어떤 객체를 넘겨줬을 때 그 객체가 어떤 변수와 함수를 가지고 있는지 표시</span></span><br><span class="line"><span class="keyword">import</span> random <span class="comment"># 외장 함수</span></span><br><span class="line">print(dir(random))</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(dir(lst))</span><br><span class="line"></span><br><span class="line">name = <span class="string">"Ko"</span></span><br><span class="line">print(dir(name))</span><br></pre></td></tr></table></figure><h3 id="외장-함수"><a class="markdownIt-Anchor" href="#외장-함수"></a> 외장 함수</h3><p><a href="https://docs.python.org/3/py-modindex.html" target="_blank" rel="noopener">Python Module Index</a> 사이트는 파이썬의 외장 함수 목록을 확인할 수 있습니다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># glob : 경로 내의 폴더 / 파일 목록 조회 (윈도우 dir)</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">print(glob.glob(<span class="string">"*.py"</span>)) <span class="comment"># 확장자가 py 인 모든 파일</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os : 운영체제에서 제공하는 기본 기능</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.getcwd()) <span class="comment"># 현재 디렉토리</span></span><br><span class="line">print(os.listdir())</span><br><span class="line"></span><br><span class="line"><span class="comment"># time : 시간 관련 함수</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.localtime())</span><br><span class="line">print(time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">print(<span class="string">"오늘 날짜는 "</span>, datetime.date.today())</span><br><span class="line"></span><br><span class="line"><span class="comment"># timedelta : 두 날짜 사이의 간격</span></span><br><span class="line">today = datetime.date.today() <span class="comment"># 오늘 날짜 저장</span></span><br><span class="line">td = datetime.timedelta(days=<span class="number">100</span>) <span class="comment"># 100일 저장</span></span><br><span class="line">print(<span class="string">"우리가 만난지 100일은"</span>, today + td) <span class="comment"># 오늘부터 100일 후</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/08/02/python-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Python] 기초(1)</title>
      <link>http://hgko1207.github.io/2022/08/02/python-1/</link>
      <guid>http://hgko1207.github.io/2022/08/02/python-1/</guid>
      <pubDate>Tue, 02 Aug 2022 14:40:29 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;나도코딩 님의 &lt;a href=&quot;https://www.youtube.com/channel/UC7iAOLiALt2rtMVAWWl4pnw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;파이썬 코딩 무료 강의 (기본편)&lt;/a&gt;을 보면서 작성하
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>나도코딩 님의 <a href="https://www.youtube.com/channel/UC7iAOLiALt2rtMVAWWl4pnw" target="_blank" rel="noopener">파이썬 코딩 무료 강의 (기본편)</a>을 보면서 작성하였습니다.</p><h2 id="환경설정"><a class="markdownIt-Anchor" href="#환경설정"></a> 환경설정</h2><h3 id="python-설치"><a class="markdownIt-Anchor" href="#python-설치"></a> Python 설치</h3><ul><li><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a> 홈페이지 접속 후 다운로드 탭을 선택하고, 현재 버전(3.10.2) 다운로드를 합니다.</li><li>다운로드 완료 후 설치를 시작한다. <strong>Customize installation</strong> 클릭하고, <strong>install location</strong> 란에 <code>c:\Python310</code> 입력 후 설치 버튼을 클릭합니다.</li></ul><h3 id="visual-studio-code-설치"><a class="markdownIt-Anchor" href="#visual-studio-code-설치"></a> Visual Studio Code 설치</h3><ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a> 홈페이지 접속 후 다운로드 후 설치합니다.</li><li>python 익스텐션 설치</li></ul><h2 id="기본-시작"><a class="markdownIt-Anchor" href="#기본-시작"></a> 기본 시작</h2><h3 id="주석"><a class="markdownIt-Anchor" href="#주석"></a> 주석</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"주석"</span>)</span><br><span class="line"><span class="comment">#print("주석")</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">여러문장</span></span><br><span class="line"><span class="string">주석입니다.</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="숫자처리함수"><a class="markdownIt-Anchor" href="#숫자처리함수"></a> 숫자처리함수</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(abs(<span class="number">-5</span>)) <span class="comment">#5</span></span><br><span class="line">print(pow(<span class="number">4</span>, <span class="number">2</span>)) <span class="comment"># 4^2 = 4*4 = 16</span></span><br><span class="line">print(max(<span class="number">5</span>, <span class="number">12</span>)) <span class="comment"># 12</span></span><br><span class="line">print(min(<span class="number">5</span>, <span class="number">12</span>)) <span class="comment"># 5</span></span><br><span class="line">print(round(<span class="number">3.14</span>)) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line">print(floor(<span class="number">4.99</span>)) <span class="comment"># 내림. 4</span></span><br><span class="line">print(ceil(<span class="number">3.14</span>)) <span class="comment"># 올림. 4</span></span><br><span class="line">print(sqrt(<span class="number">16</span>)) <span class="comment"># 제곱근. 4</span></span><br></pre></td></tr></table></figure><h3 id="랜덤함수"><a class="markdownIt-Anchor" href="#랜덤함수"></a> 랜덤함수</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">print(random()) <span class="comment"># 0.0 ~ 1.0 미만의 임의의 값 생성</span></span><br><span class="line">print(random(<span class="number">10</span>)) <span class="comment"># 0.0 ~ 10.0 미만의 임의의 값 생성</span></span><br><span class="line">print(int(random() * <span class="number">10</span>)) <span class="comment"># 0 ~ 10 미만의 임의의 값 생성</span></span><br><span class="line">print(int(random() * <span class="number">10</span>) + <span class="number">1</span>) <span class="comment"># 1 ~ 10 이하의 임의의 값 생성</span></span><br><span class="line">print(int(random() * <span class="number">45</span>) + <span class="number">1</span>) <span class="comment"># 1 ~ 45 이하의 임의의 값 생성</span></span><br><span class="line">print(randrange(<span class="number">1</span>, <span class="number">46</span>)) <span class="comment"># 1 ~ 46 미만의 임의의 값 생성</span></span><br><span class="line">print(randint(<span class="number">1</span>, <span class="number">45</span>)) <span class="comment"># 1 ~ 45 이하의 임의의 값 생성</span></span><br></pre></td></tr></table></figure><h3 id="문자열"><a class="markdownIt-Anchor" href="#문자열"></a> 문자열</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sentence = <span class="string">'나는 소년입니다'</span></span><br><span class="line">print(sentence)</span><br><span class="line">sentence2 = <span class="string">"파이썬은 쉬워요"</span></span><br><span class="line">print(sentence2)</span><br><span class="line">sentence3 = <span class="string">"""</span></span><br><span class="line"><span class="string">나는 소년이고,</span></span><br><span class="line"><span class="string">파이썬은 쉬워요</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(sentence3)</span><br></pre></td></tr></table></figure><h3 id="슬라이싱"><a class="markdownIt-Anchor" href="#슬라이싱"></a> 슬라이싱</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jumin = <span class="string">"990101-1234567"</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"성별 : "</span> + jumin[<span class="number">7</span>])</span><br><span class="line">print(<span class="string">"연 : "</span> + jumin[<span class="number">0</span>:<span class="number">2</span>]) <span class="comment"># 0 부터 2 직전까지 (0, 1)</span></span><br><span class="line">print(<span class="string">"월 : "</span> + jumin[<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"일 : "</span> + jumin[<span class="number">4</span>:<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="string">"생년월일 : "</span> + jumin[:<span class="number">6</span>]) <span class="comment"># 처음부터 6 직전까지</span></span><br><span class="line">print(<span class="string">"뒤 7자리 : "</span> + jumin[<span class="number">7</span>:]) <span class="comment"># 7 부터 끝까지</span></span><br><span class="line">print(<span class="string">"뒤 7자리 (뒤에부터) : "</span> + jumin[<span class="number">-7</span>:])</span><br><span class="line"><span class="comment"># 맨 뒤에서 7번째부터 끝까지</span></span><br></pre></td></tr></table></figure><h3 id="문자열-처리-함수"><a class="markdownIt-Anchor" href="#문자열-처리-함수"></a> 문자열 처리 함수</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">python = <span class="string">"Python is Amazing"</span></span><br><span class="line">print(python.lower()) <span class="comment"># 소문자로</span></span><br><span class="line">print(python.upper()) <span class="comment"># 대문자로</span></span><br><span class="line">print(python[<span class="number">0</span>].isupper())</span><br><span class="line">print(len(python)) <span class="comment"># 길이</span></span><br><span class="line">print(python.replace(<span class="string">"Python"</span>, <span class="string">"Java"</span>)) <span class="comment"># 문자열 바꿈</span></span><br><span class="line"></span><br><span class="line">index = python.index(<span class="string">"n"</span>) <span class="comment"># 문자열 위치 찾기</span></span><br><span class="line">index = python.index(<span class="string">"n"</span>, index + <span class="number">1</span>) <span class="comment"># 두번째 n의 위치 찾기</span></span><br><span class="line"></span><br><span class="line">print(python.find(<span class="string">"Java"</span>)) <span class="comment"># 문자를 찾지 못할 경우 -1 출력</span></span><br><span class="line">print(python.index(<span class="string">"Java"</span>)) <span class="comment"># 문자를 찾지 못할 경우 오류남</span></span><br><span class="line"></span><br><span class="line">print(python.count(<span class="string">"n"</span>)) <span class="comment"># 문자열 n이 나오는 개수</span></span><br></pre></td></tr></table></figure><h3 id="문자열-포맷"><a class="markdownIt-Anchor" href="#문자열-포맷"></a> 문자열 포맷</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 방법 1</span></span><br><span class="line">print(<span class="string">"나는 %d살입니다."</span> % <span class="number">35</span>) <span class="comment"># 정수만</span></span><br><span class="line">print(<span class="string">"나는 %s을 좋아해요"</span> % <span class="string">"파이썬"</span>) <span class="comment"># 문자열만</span></span><br><span class="line">print(<span class="string">"Apple 은 %c로 시작해요."</span> % <span class="string">"A"</span>) <span class="comment"># 한글자만 받겠다는 의미</span></span><br><span class="line"><span class="comment"># %s</span></span><br><span class="line">print(<span class="string">"나는 %s살입니다."</span> % <span class="number">35</span>)</span><br><span class="line">print(<span class="string">"나는 %s색과 %s색을 좋아해요."</span> % (<span class="string">"파란"</span>, <span class="string">"빨간"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 방법 2</span></span><br><span class="line">print(<span class="string">"나는 &#123;&#125;살입니다."</span>.format(<span class="number">35</span>))</span><br><span class="line">print(<span class="string">"나는 &#123;&#125;색과 &#123;&#125;색을 좋아해요."</span>.format(<span class="string">"파란"</span>, <span class="string">"빨간"</span>))</span><br><span class="line">print(<span class="string">"나는 &#123;0&#125;색과 &#123;1&#125;색을 좋아해요."</span>.format(<span class="string">"파란"</span>, <span class="string">"빨간"</span>))</span><br><span class="line">print(<span class="string">"나는 &#123;1&#125;색과 &#123;0&#125;색을 좋아해요."</span>.format(<span class="string">"파란"</span>, <span class="string">"빨간"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 방법 3</span></span><br><span class="line">print(<span class="string">"나는 &#123;age&#125;살이며, &#123;color&#125;색을 좋아해요."</span>.format(age=<span class="number">35</span>, color=<span class="string">"빨간"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 방법 4 (v3.6 이상~)</span></span><br><span class="line">age = <span class="number">35</span></span><br><span class="line">color = <span class="string">"빨간"</span></span><br><span class="line">print(<span class="string">f"나는 <span class="subst">&#123;age&#125;</span>살이며, <span class="subst">&#123;color&#125;</span>색을 좋아해요."</span>)</span><br></pre></td></tr></table></figure><h3 id="탈출-문자"><a class="markdownIt-Anchor" href="#탈출-문자"></a> 탈출 문자</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \n : 줄바꿈</span></span><br><span class="line">print(<span class="string">"백문이 불여일견\n백견이 불여일타"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \" \' : 문장 내에서 따옴표</span></span><br><span class="line"><span class="comment"># 저는 "고고고" 입니다.</span></span><br><span class="line">print(<span class="string">"저는 '고고고' 입니다."</span>)</span><br><span class="line">print(<span class="string">'저는 "고고고" 입니다.'</span>)</span><br><span class="line">print(<span class="string">"저는 \"고고고\" 입니다."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \\ : 문장 내에서 \</span></span><br><span class="line">print(<span class="string">"C:\\Users\\hgko\\Desktop\\project\\Python\\PythonStudy"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \r : 커서를 맨 앞으로 이동</span></span><br><span class="line">print(<span class="string">"Red Apple\rPine"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \b : 백스페이스 (한 글자 삭제)</span></span><br><span class="line">print(<span class="string">"Redd\bApple"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \t : 탭</span></span><br><span class="line">print(<span class="string">"Red\tApple"</span>)</span><br></pre></td></tr></table></figure><h3 id="리스트"><a class="markdownIt-Anchor" href="#리스트"></a> 리스트</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트 []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 지하철 칸별로 10명, 20명, 30명</span></span><br><span class="line">subway1 = <span class="number">10</span></span><br><span class="line">subway2 = <span class="number">20</span></span><br><span class="line">subway3 = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">subway = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">print(subway)</span><br><span class="line"></span><br><span class="line">subway = [<span class="string">"유재석"</span>, <span class="string">"조세호"</span>, <span class="string">"박명수"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 조세호 씨가 몇 번째 칸에 타고 있는지?</span></span><br><span class="line">print(subway.index(<span class="string">"조세호"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 하하 씨가 다음 정류장에서 다음 칸에 탐</span></span><br><span class="line">subway.append(<span class="string">"하하"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 정형돈 씨를 유재석 / 조세호 사이에 태워봄</span></span><br><span class="line">subway.insert(<span class="number">1</span>, <span class="string">"정형돈"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 지하철에 있는 사람을 한 명 씩 뒤에서 꺼냄</span></span><br><span class="line">print(subway.pop())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 같은 이름의 사람이 몇 명 있는지 확인</span></span><br><span class="line">subway.append(<span class="string">"유재석"</span>)</span><br><span class="line">print(subway.count(<span class="string">"유재석"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 정렬</span></span><br><span class="line">num_list = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">num_list.sort()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 순서 뒤집기</span></span><br><span class="line">num_list.reverse()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모두 지우기</span></span><br><span class="line">num_list.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 다양한 자료형 함께 사용</span></span><br><span class="line">num_list = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">mix_list = [<span class="string">"유재석"</span>, <span class="number">20</span>, <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 리스트 확장</span></span><br><span class="line">num_list.extend(mix_list)</span><br></pre></td></tr></table></figure><h3 id="사전"><a class="markdownIt-Anchor" href="#사전"></a> 사전</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cabinet = &#123;<span class="number">3</span>:<span class="string">"유재석"</span>, <span class="number">100</span>:<span class="string">"김태호"</span>&#125;</span><br><span class="line">print(cabinet[<span class="number">3</span>])</span><br><span class="line">print(cabinet[<span class="number">100</span>])</span><br><span class="line"></span><br><span class="line">print(cabinet.get(<span class="number">3</span>))</span><br><span class="line">print(cabinet.get(<span class="number">5</span>, <span class="string">"사용 가능"</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="number">3</span> <span class="keyword">in</span> cabinet) <span class="comment"># True</span></span><br><span class="line">print(<span class="number">5</span> <span class="keyword">in</span> cabinet) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">cabinet = &#123;<span class="string">"A-3"</span>:<span class="string">"유재석"</span>, <span class="string">"B-100"</span>:<span class="string">"김태호"</span>&#125;</span><br><span class="line">print(cabinet[<span class="string">"A-3"</span>])</span><br><span class="line">print(cabinet[<span class="string">"B-100"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 새 손님</span></span><br><span class="line">cabinet[<span class="string">"A-3"</span>] = <span class="string">"김종국"</span> <span class="comment"># 업데이트</span></span><br><span class="line">cabinet[<span class="string">"C-20"</span>] = <span class="string">"조세호"</span> <span class="comment"># 추가</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 간 손님</span></span><br><span class="line"><span class="keyword">del</span> cabinet[<span class="string">"A-3"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># key 들만 출력</span></span><br><span class="line">print(cabinet.keys())</span><br><span class="line"></span><br><span class="line"><span class="comment"># value 들만 출력</span></span><br><span class="line">print(cabinet.values())</span><br><span class="line"></span><br><span class="line"><span class="comment"># key, value 쌍으로 출력</span></span><br><span class="line">print(cabinet.items())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 전체 삭제</span></span><br><span class="line">cabinet.clear()</span><br></pre></td></tr></table></figure><h3 id="튜플"><a class="markdownIt-Anchor" href="#튜플"></a> 튜플</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu = (<span class="string">"돈까스"</span>, <span class="string">"치즈까스"</span>)</span><br><span class="line"></span><br><span class="line">(name, age, hobby) = (<span class="string">"김종국"</span>, <span class="number">20</span>, <span class="string">"코딩"</span>)</span><br><span class="line">print(name, age, hobby)</span><br></pre></td></tr></table></figure><h3 id="세트"><a class="markdownIt-Anchor" href="#세트"></a> 세트</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 집합 (set)</span></span><br><span class="line"><span class="comment"># 중복 안됨, 순서 없음</span></span><br><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;</span><br><span class="line">print(my_set)</span><br><span class="line"></span><br><span class="line">java = &#123;<span class="string">"유재석"</span>, <span class="string">"김태호"</span>, <span class="string">"양세형"</span>&#125;</span><br><span class="line">python = set([<span class="string">"유재석"</span>, <span class="string">"박명수"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 교집합 (java 와 python 을 모두 할 수 있는 개발자)</span></span><br><span class="line">print(java &amp; python)</span><br><span class="line">print(java.intersection(python))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 합집합 (java 할 수 있거나 python 도 할 수 있는 개발자)</span></span><br><span class="line">print(java | python)</span><br><span class="line">print(java.union(python))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 차집합 (java 할 수 있지만 python 은 할 줄 모르는 개발자)</span></span><br><span class="line">print(java - python)</span><br><span class="line">print(java.difference(python))</span><br><span class="line"></span><br><span class="line"><span class="comment"># python 할 줄 아는 사람이 늘어남</span></span><br><span class="line">python.add(<span class="string">"김태호"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># java 를 잊어버림</span></span><br><span class="line">java.remove(<span class="string">"김태호"</span>)</span><br></pre></td></tr></table></figure><h3 id="자료구조의-변경"><a class="markdownIt-Anchor" href="#자료구조의-변경"></a> 자료구조의 변경</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 커피숍</span></span><br><span class="line">menu = &#123;<span class="string">"커피"</span>, <span class="string">"우유"</span>, <span class="string">"주소"</span>&#125;</span><br><span class="line">print(menu, type(menu)) <span class="comment"># &#123;'커피', '주소', '우유'&#125; &lt;class 'set'&gt;</span></span><br><span class="line"></span><br><span class="line">menu = list(menu)</span><br><span class="line">print(menu, type(menu)) <span class="comment"># ['커피', '주소', '우유'] &lt;class 'list'&gt;</span></span><br><span class="line"></span><br><span class="line">menu = tuple(menu)</span><br><span class="line">print(menu, type(menu)) <span class="comment"># ['커피', '주소', '우유'] &lt;class 'tuple'&gt;</span></span><br><span class="line"></span><br><span class="line">menu = set(menu)</span><br><span class="line">print(menu, type(menu)) <span class="comment"># ['커피', '주소', '우유'] &lt;class 'set'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="if"><a class="markdownIt-Anchor" href="#if"></a> if</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">weather = input(<span class="string">"오늘 날씨는 어때요?"</span>)</span><br><span class="line"><span class="keyword">if</span> weather == <span class="string">"비"</span> <span class="keyword">or</span> weather == <span class="string">"눈"</span>:</span><br><span class="line">    print(<span class="string">"우산을 챙기세요"</span>)</span><br><span class="line"><span class="keyword">elif</span> weather == <span class="string">"미세먼지"</span>:</span><br><span class="line">    print(<span class="string">"마스크를 챙기세요"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"준비물 필요 없어요"</span>)</span><br><span class="line"></span><br><span class="line">temp = int(input(<span class="string">"기운은 어때요?"</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="number">30</span> &lt;= temp:</span><br><span class="line">    print(<span class="string">"너무 더워요. 나가지 마세요"</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">10</span> &lt;= temp <span class="keyword">and</span> temp &lt; <span class="number">30</span>:</span><br><span class="line">    print(<span class="string">"괜찮은 날씨에요"</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">0</span> &lt;= temp &lt; <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">"외투를 챙기세요"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"너무 추워요. 나가지 마세요"</span>)</span><br></pre></td></tr></table></figure><h3 id="for"><a class="markdownIt-Anchor" href="#for"></a> for</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># randrange()</span></span><br><span class="line"><span class="keyword">for</span> waiting_no <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>): <span class="comment"># 1, 2, 3, 4, 5</span></span><br><span class="line">    print(<span class="string">"대기번호 : &#123;0&#125;"</span>.format(waiting_no))</span><br></pre></td></tr></table></figure><h3 id="while"><a class="markdownIt-Anchor" href="#while"></a> while</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">customer = <span class="string">"토르"</span></span><br><span class="line">person = <span class="string">"Unknown"</span></span><br><span class="line"><span class="keyword">while</span> person != customer:</span><br><span class="line">    print(<span class="string">"&#123;0&#125;, 커피가 준비 되었습니다."</span>.format(customer))</span><br><span class="line">    person = input(<span class="string">"이름이 어떻게 되세요?"</span>)</span><br></pre></td></tr></table></figure><h3 id="한-줄-for"><a class="markdownIt-Anchor" href="#한-줄-for"></a> 한 줄 for</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">students = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">students = [i+<span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> students]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 학생 이름을 길이도 반환</span></span><br><span class="line">students = [<span class="string">"Iron man"</span>, <span class="string">"Thor"</span>, <span class="string">"I am groot"</span>]</span><br><span class="line">students = [len(i) <span class="keyword">for</span> i <span class="keyword">in</span> students]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/08/02/python-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] Angular Cli 설치 및 사용 방법</title>
      <link>http://hgko1207.github.io/2022/07/28/angular-1/</link>
      <guid>http://hgko1207.github.io/2022/07/28/angular-1/</guid>
      <pubDate>Thu, 28 Jul 2022 11:31:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Angular 는 &lt;strong&gt;Angular CLI&lt;/strong&gt; 를 이용해 프로젝트 관리의 복잡도를 낮추고 Angular 개발에만 집중할 수 있게 합니다.&lt;/p&gt;
&lt;h2 id=&quot;설치&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Angular 는 <strong>Angular CLI</strong> 를 이용해 프로젝트 관리의 복잡도를 낮추고 Angular 개발에만 집중할 수 있게 합니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p><strong>Angular CLI</strong> 를 설치하려면 다음과 같은 npm 명령어를 실행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g @angular/cli</span></span><br></pre></td></tr></table></figure><p>설치가 완료되면 <code>ng</code> 명령어를 사용할 수 있습니다. <code>ng</code> 명령어는 Angular CLI 에서 제공하는 기능들을 실행하는 역할을 담당합니다.<br />Angular CLI 도움말 옵션을 사용해 확인해봅니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ng --<span class="built_in">help</span></span></span><br><span class="line">ng &lt;command&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  ng add &lt;collection&gt;            Adds support for an external library to your project.</span><br><span class="line">  ng analytics                   Configures the gathering of Angular CLI usage metrics.</span><br><span class="line">  ng build [project]             Compiles an Angular application or library into an output directory named dist/ at the</span><br><span class="line">                                 given output path.                                                         [aliases: b]</span><br><span class="line">  ng cache                       Configure persistent disk cache and retrieve cache statistics.</span><br><span class="line">  ng completion                  Set up Angular CLI autocompletion for your terminal.</span><br><span class="line">  ng config [json-path] [value]  Retrieves or sets Angular configuration values in the angular.json file for the</span><br><span class="line">                                 workspace.</span><br><span class="line">  ng deploy [project]            Invokes the deploy builder for a specified project or for the default project in the</span><br><span class="line">                                 workspace.</span><br><span class="line">  ng doc &lt;keyword&gt;               Opens the official Angular documentation (angular.io) in a browser, and searches for a</span><br><span class="line">                                 given keyword.                                                             [aliases: d]</span><br><span class="line">  ng e2e [project]               Builds and serves an Angular application, then runs end-to-end tests.      [aliases: e]</span><br><span class="line">  ng extract-i18n [project]      Extracts i18n messages from source code.</span><br><span class="line">  ng generate                    Generates and/or modifies files based on a schematic.                      [aliases: g]</span><br><span class="line">  ng lint [project]              Runs linting tools on Angular application code in a given project folder.</span><br><span class="line">  ng new [name]                  Creates a new Angular workspace.                                           [aliases: n]</span><br><span class="line">  ng run &lt;target&gt;                Runs an Architect target with an optional custom builder configuration defined in your</span><br><span class="line">                                 project.</span><br><span class="line">  ng serve [project]             Builds and serves your application, rebuilding on file changes.            [aliases: s]</span><br><span class="line">  ng test [project]              Runs unit tests in a project.                                              [aliases: t]</span><br><span class="line">  ng update [packages..]         Updates your workspace and its dependencies. See https://update.angular.io/.</span><br><span class="line">  ng version                     Outputs Angular CLI version.                                               [aliases: v]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --help  Shows a help message for this command in the console.                                                [boolean]</span><br><span class="line"></span><br><span class="line">For more information, see https://angular.io/cli/.</span><br></pre></td></tr></table></figure><h2 id="프로젝트-생성"><a class="markdownIt-Anchor" href="#프로젝트-생성"></a> 프로젝트 생성</h2><p>Angular 프로젝트를 생성하려면 <code>ng new</code> 명령어를 사용합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ng new [프로젝트명]</span></span><br></pre></td></tr></table></figure><p><code>ng new</code> 명령어 다음에 프로젝트 이름을 지정하면 프로젝트 이름과 일치하는 새로운 프로젝트 폴더가 생성되고 스캐폴딩(프로젝트 기본 골격)이 작성됩니다.</p><p>프로젝트 이름을 my-app 로 지정하여 프로젝트를 생성합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> $ ng new my-app</span></span><br></pre></td></tr></table></figure><p>프로젝트가 생성되면 아래와 같은 파일 구조의 스캐폴딩이 생성됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">my-app&#x2F;</span><br><span class="line">├── .git&#x2F;</span><br><span class="line">├── node_modules&#x2F;</span><br><span class="line">├── src&#x2F;</span><br><span class="line">├── .editorconfig</span><br><span class="line">├── .gitignore</span><br><span class="line">├── angular.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── README.md</span><br><span class="line">├── tsconfig.app.json</span><br><span class="line">├── tsconfig.json</span><br><span class="line">└── tsconfig.spec.json</span><br></pre></td></tr></table></figure><h2 id="시작"><a class="markdownIt-Anchor" href="#시작"></a> 시작</h2><p>프로젝트 폴더로 이동한 후 실행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm start</span></span><br></pre></td></tr></table></figure><p>또는 <code>ng serve</code> 명령어를 사용합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ng serve</span></span><br></pre></td></tr></table></figure><p>이미 포트 4200번을 사용하고 있다면 Angular CLI 내장 서버를 실행할 수 없습니다. 포트번호를 변경해 실행하려면 다음과 같이 <code>--port</code>(축약형 -p) 옵션을 추가한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ng serve --port 4201</span></span><br></pre></td></tr></table></figure><h2 id="build"><a class="markdownIt-Anchor" href="#build"></a> Build</h2><p>빌드 결과는 기본적으로 <code>dist/</code> 폴더에 저장됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ng build</span></span><br></pre></td></tr></table></figure><h2 id="컴포넌트-생성"><a class="markdownIt-Anchor" href="#컴포넌트-생성"></a> 컴포넌트 생성</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ng generate component [component-name]</span></span><br></pre></td></tr></table></figure><p>간략하게 명령어를 사용할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ng g c [component-name]</span></span><br></pre></td></tr></table></figure><p>사용 예시입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ng g c section</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ng g m section</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ng g c section/card</span></span><br></pre></td></tr></table></figure><p><code>ng generate directive|pipe|service|class|guard|interface|enum|module</code> 명령어를 통해 컴포넌트 외에 다른 파일들을 생성할 수 있습니다.</p><h2 id="running-unit-tests"><a class="markdownIt-Anchor" href="#running-unit-tests"></a> Running unit tests</h2><p><a href="https://karma-runner.github.io" target="_blank" rel="noopener">Karma</a> 를 통해 단위 테스트를 할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ng <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><h2 id="running-end-to-end-tests"><a class="markdownIt-Anchor" href="#running-end-to-end-tests"></a> Running end-to-end tests</h2><p>선택한 플랫폼을 통해 end-to-end 테스트를 실행합니다. 이 명령을 사용하려면 먼저 end-to-end 테스트 기능을 구현하는 패키지를 추가해야 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ng e2e</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://github.com/angular/angular-cli" target="_blank" rel="noopener">Angular CLI</a></li><li><a href="https://angular.io/cli" target="_blank" rel="noopener">https://angular.io/cli</a></li><li><a href="https://angular.io/tutorial" target="_blank" rel="noopener">https://angular.io/tutorial</a></li><li><a href="https://material.angular.io/" target="_blank" rel="noopener">https://material.angular.io/</a></li><li><a href="https://angular.io/guide/devtools" target="_blank" rel="noopener">https://angular.io/guide/devtools</a></li><li><a href="https://blog.angular.io/" target="_blank" rel="noopener">https://blog.angular.io/</a></li></ul><h2 id="vscode-플러그인"><a class="markdownIt-Anchor" href="#vscode-플러그인"></a> vscode 플러그인</h2><ul><li><strong>Angular Files</strong></li><li><strong>Angular Language Service</strong></li><li><strong>TypeScript Hero</strong>: 소스 코드 관리에 필요한 TypeScript 코드 정렬을 도와주는 Plugin</li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/07/28/angular-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] Recoil 사용 방법</title>
      <link>http://hgko1207.github.io/2022/07/25/react-6/</link>
      <guid>http://hgko1207.github.io/2022/07/25/react-6/</guid>
      <pubDate>Mon, 25 Jul 2022 13:54:57 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Recoil&lt;/strong&gt; 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;recoil&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#recoil&quot;&gt;&lt;/a&gt; Recoil&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Re
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Recoil</strong> 사용 방법에 대해 알아보겠습니다.</p><h2 id="recoil"><a class="markdownIt-Anchor" href="#recoil"></a> Recoil</h2><p><strong>Recoil</strong> 는 페이스북에서 만든 React를 위한 상태 관리 라이브러리입니다. Recoil을 사용하면 atoms (공유 상태)에서 selectors (순수 함수)를 거쳐 React 컴포넌트로 내려가는 data-flow graph를 만들 수 있습니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p>Recoil 패키지는 npm에 존재합니다. 안정한 최신 버전을 설치하기 위해서는 다음의 명령어를 실행하면 됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install recoil</span></span><br></pre></td></tr></table></figure><p>또는 yarn을 사용한다면 이 명령어를 사용하면 됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add recoil</span></span><br></pre></td></tr></table></figure><h2 id="recoilroot"><a class="markdownIt-Anchor" href="#recoilroot"></a> RecoilRoot</h2><p>루트에 <code>RecoilRoot</code>를 감싸줍니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; RecoilRoot &#125; <span class="keyword">from</span> <span class="string">'recoil'</span>;</span><br><span class="line"><span class="keyword">import</span> ToggleOutput <span class="keyword">from</span> <span class="string">'./ToggleOutput'</span>;</span><br><span class="line"><span class="keyword">import</span> ToggleButton <span class="keyword">from</span> <span class="string">'./ToggleButton'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;RecoilRoot&gt;</span><br><span class="line">      &lt;ToggleOutput /&gt;</span><br><span class="line">      &lt;ToggleButton /&gt;</span><br><span class="line">    &lt;<span class="regexp">/RecoilRoot&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h2><h3 id="atoms"><a class="markdownIt-Anchor" href="#atoms"></a> Atoms</h3><p><strong>Atoms</strong> 는 상태(state)의 일부를 나타냅니다. Atoms 는 어떤 컴포넌트에서나 읽고 쓸 수 있습니다.</p><p><code>atoms.ts</code> 파일을 생성하고 Recoil의 atom function 을 사용하여 필요한 데이터를 설정합니다.<br />atom 은 두 가지를 요구하는데 첫 번째는 key 로 <strong>unique ID</strong> 이고 두 번째는 <strong>default value</strong> 입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// atoms.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; atom &#125; <span class="keyword">from</span> <span class="string">'recoil'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isToggleAtom = atom(&#123;</span><br><span class="line">  key: <span class="string">'isToggle'</span>,</span><br><span class="line">  <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>컴포넌트가 atom 을 읽게 하기 위해서는 <code>useRecoilValue()</code> 를 다음과 같이 사용하면 됩니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ToggleOutput.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRecoilValue &#125; <span class="keyword">from</span> <span class="string">'recoil'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isToggleAtom &#125; <span class="keyword">from</span> <span class="string">'./atoms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToggleOutput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isToggle = useRecoilValue(isToggleAtom);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &lt;div&gt;Toggle state: &#123;isToggle&#125;&lt;<span class="regexp">/div&gt;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>컴포넌트가 atom 을 쓰게 하기 위해서는 <code>useSetRecoilState()</code> 를 다음과 같이 사용하면 됩니다.<br />atom 을 읽고 쓰게 하기 위해서는 <code>useRecoilState()</code> 를 사용하면 됩니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ToggleButton.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSetRecoilState &#125; <span class="keyword">from</span> <span class="string">'recoil'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isToggleAtom &#125; <span class="keyword">from</span> <span class="string">'./atoms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToggleButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> setToggleAtom = useSetRecoilState(isToggleAtom);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> toggle = <span class="function"><span class="params">()</span> =&gt;</span> setToggleAtom(<span class="function">(<span class="params">prev</span>) =&gt;</span> !prev);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;br /&gt;</span><br><span class="line">      &lt;button onClick=&#123;toggle&#125;&gt;Toggle Mode&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="selectors"><a class="markdownIt-Anchor" href="#selectors"></a> Selectors</h3><p><strong>Selectors</strong>는 devived state 를 나타냅니다. devived state 란 state 를 입력 받아서 그걸 변형해 반환하는 순수 함수를 거쳐 반환된 값을 말합니다.<br />atom 의 output 은 한가지 형태이므로 조금 더 잘 써먹을 수 있는 형태로 변형해줍니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IToDo &#123;</span><br><span class="line">  text: <span class="built_in">string</span>;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  category: <span class="string">'TO_DO'</span> | <span class="string">'DOING'</span> | <span class="string">'DONE'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toDoState = atom&lt;IToDo[]&gt;(&#123;</span><br><span class="line">  key: <span class="string">'toDo'</span>,</span><br><span class="line">  <span class="keyword">default</span>: [],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toDoSelector = selector(&#123;</span><br><span class="line">  key: <span class="string">'toDoSelector'</span>,</span><br><span class="line">  <span class="keyword">get</span>: <span class="function">(<span class="params">&#123; <span class="keyword">get</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> toDos = <span class="keyword">get</span>(toDoState);</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      toDos.filter(<span class="function">(<span class="params">toDo</span>) =&gt;</span> toDo.category === <span class="string">'TO_DO'</span>),</span><br><span class="line">      toDos.filter(<span class="function">(<span class="params">toDo</span>) =&gt;</span> toDo.category === <span class="string">'DOING'</span>),</span><br><span class="line">      toDos.filter(<span class="function">(<span class="params">toDo</span>) =&gt;</span> toDo.category === <span class="string">'DONE'</span>),</span><br><span class="line">    ];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>category 값을 3개의 타입 형태로 사용할 경우 타입 별로 값을 반환하고 싶을 때 selector 를 사용하여 atom 에서 각각의 타입 별로 값을 분류하고 합쳐서 하나의 값으로 반환합니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://recoiljs.org/ko/docs/introduction/getting-started" target="_blank" rel="noopener">https://recoiljs.org/ko/docs/introduction/getting-started</a></li><li><a href="https://recoiljs.org/docs/basic-tutorial/selectors/" target="_blank" rel="noopener">https://recoiljs.org/docs/basic-tutorial/selectors/</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/07/25/react-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] ApexCharts 사용 방법</title>
      <link>http://hgko1207.github.io/2022/07/24/react-5/</link>
      <guid>http://hgko1207.github.io/2022/07/24/react-5/</guid>
      <pubDate>Sun, 24 Jul 2022 13:16:30 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;ApexCharts&lt;/strong&gt; 는 데이터를 시각화 해주는 차트 라이브러리입니다. 무료로 사용할 수 있고, Js, Angular, React, Vue를 지원합니다.&lt;br /&gt;
ApexCharts 를 사용하여 React.js 에서
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>ApexCharts</strong> 는 데이터를 시각화 해주는 차트 라이브러리입니다. 무료로 사용할 수 있고, Js, Angular, React, Vue를 지원합니다.<br />ApexCharts 를 사용하여 React.js 에서 간단하게 차트 만드는 방법에 대해 알아보겠습니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p>apexcharts 와 react-apexcharts 라이브러리를 같이 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save react-apexcharts apexcharts</span></span><br></pre></td></tr></table></figure><h2 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h2><p>코인 정보를 조회하여 차트를 구성하였습니다. Line Chart 를 예제로 사용하였습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api.ts</span></span><br><span class="line"><span class="keyword">const</span> BASE_URL = <span class="string">`https://api.coinpaprika.com/v1`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 코인 정보 조회</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchCoinHistory</span>(<span class="params">coinId: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> endDate = <span class="built_in">Math</span>.floor(<span class="built_in">Date</span>.now() / <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">const</span> startDate = endDate - <span class="number">60</span> * <span class="number">60</span> * <span class="number">23</span>; <span class="comment">// 하루치 조회</span></span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">`<span class="subst">$&#123;BASE_URL&#125;</span>/coins/<span class="subst">$&#123;coinId&#125;</span>/ohlcv/historical?start=<span class="subst">$&#123;startDate&#125;</span>&amp;end=<span class="subst">$&#123;endDate&#125;</span>`</span>).then(<span class="function">(<span class="params">reponse</span>) =&gt;</span></span><br><span class="line">    reponse.json()</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://apexcharts.com/docs/options/#" target="_blank" rel="noopener">https://apexcharts.com/docs/options/#</a> 페이지를 참고하여 옵션을 커스텀합니다.<br />테마, x축, y축, 색상, 툴바 감추기, 크기, 툴팁 설정 등 세세한 부분까지 커스텀 할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Chart.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; useQuery &#125; <span class="keyword">from</span> <span class="string">'react-query'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useOutletContext &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchCoinHistory &#125; <span class="keyword">from</span> <span class="string">'../api'</span>;</span><br><span class="line"><span class="keyword">import</span> ApexChart <span class="keyword">from</span> <span class="string">'react-apexcharts'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IHistorical &#123;</span><br><span class="line">  time_open: <span class="built_in">string</span>;</span><br><span class="line">  time_close: <span class="built_in">string</span>;</span><br><span class="line">  open: <span class="built_in">number</span>;</span><br><span class="line">  high: <span class="built_in">number</span>;</span><br><span class="line">  low: <span class="built_in">number</span>;</span><br><span class="line">  close: <span class="built_in">number</span>;</span><br><span class="line">  volume: <span class="built_in">number</span>;</span><br><span class="line">  market_cap: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Chart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> coinId = useOutletContext() <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; isLoading, data &#125; = useQuery&lt;IHistorical[]&gt;<span class="function">(<span class="params">['ohlcv', coinId], (<span class="params"></span>) =&gt; fetchCoinHistory(<span class="params">coinId</span>)</span>);</span></span><br><span class="line"><span class="function">  <span class="params">return</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    &lt;div&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">      &#123;isLoading ? (<span class="params"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        'Loading chart...'</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      </span>) : (<span class="params"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        &lt;ApexChart</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">          <span class="keyword">type</span>="line"</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">          series=&#123;[</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              name: 'Price',</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              data: data?.map(<span class="params">(<span class="params">price</span>) =&gt; price.close</span>) <span class="keyword">as</span> <span class="built_in">number</span>[],</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">          ]&#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">          options=&#123;&#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            theme: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              mode: 'dark',</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            chart: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              height: 300,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              width: 500,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              toolbar: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                show: <span class="literal">false</span>,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              background: 'transparent',</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            grid: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              show: <span class="literal">false</span>,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            stroke: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              curve: 'smooth',</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              width: 4,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            yaxis: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              show: <span class="literal">false</span>,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            xaxis: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              <span class="keyword">type</span>: 'datetime',</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              categories: data?.map(<span class="params">(<span class="params">price</span>) =&gt; price.time_close</span>),</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              labels: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                style: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                  colors: '#9c88ff',</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            fill: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              <span class="keyword">type</span>: 'gradient',</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              gradient: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                gradientToColors: ['blue'],</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                stops: [0, 100],</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            colors: ['red'],</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            tooltip: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              y: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                formatter: (<span class="params">value</span>) =&gt; `$$&#123;value.toFixed(<span class="params">2</span>)&#125;`,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">              &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">          &#125;&#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        /&gt;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      </span>)&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">export</span> <span class="params">default</span> <span class="params">Chart</span>;</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://apexcharts.com/docs/react-charts/" target="_blank" rel="noopener">https://apexcharts.com/docs/react-charts/</a></li><li><a href="https://apexcharts.com/docs/options/#" target="_blank" rel="noopener">https://apexcharts.com/docs/options/#</a></li><li><a href="https://api.coinpaprika.com/#tag/Coins/paths/" target="_blank" rel="noopener">https://api.coinpaprika.com/#tag/Coins/paths/</a><sub>1coins</sub>1{coin_id}<sub>1ohlcv</sub>1historical/get</li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/07/24/react-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] React Query</title>
      <link>http://hgko1207.github.io/2022/07/23/react-4/</link>
      <guid>http://hgko1207.github.io/2022/07/23/react-4/</guid>
      <pubDate>Fri, 22 Jul 2022 15:07:58 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;React Query&lt;/strong&gt; 는 데이터 Fetching, 캐싱, 동기화, 업데이트, 에러핸들링 등 비동기 과정을 쉽게 만들어 주는 React 라이브러리입니다.&lt;/p&gt;
&lt;p&gt;React Query 를 사용하면 기존의 서버 데이
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>React Query</strong> 는 데이터 Fetching, 캐싱, 동기화, 업데이트, 에러핸들링 등 비동기 과정을 쉽게 만들어 주는 React 라이브러리입니다.</p><p>React Query 를 사용하면 기존의 서버 데이터를 가져오거나 업데이트하는 코드를 축약할 수 있고 캐싱 처리가 간단해졌습니다.</p><p>간단하게 <code>useQuery</code>를 사용하여 코인들의 정보를 조회하는 코드를 통해 React Query 사용 전 후를 비교하였었습니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i react-query</span></span><br><span class="line">or</span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add react-query</span></span><br></pre></td></tr></table></figure><h2 id="usequery"><a class="markdownIt-Anchor" href="#usequery"></a> useQuery</h2><ul><li>서버에서 데이터를 가져오기 위해 모든 Promise 기반 메서드(GET 및 POST 포함)와 함께 사용할 수 있습니다.</li><li>첫 번째 파라미터는 unique Key 이고, 두 번째는 비동기 함수(api호출 함수)입니다.</li><li>return 개체에는 api 의 로딩상태, 성공, 실패여부, 결과 데이터를 포함한 객체입니다.</li></ul><h2 id="react-query-사용-전"><a class="markdownIt-Anchor" href="#react-query-사용-전"></a> React Query 사용 전</h2><p>코인들의 정보를 조회하는 코드입니다. <code>useState</code> 를 사용하여 코인 데이터와 조회 상태를 따로 관리하였었습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Coins.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ICoin &#123;</span><br><span class="line">  id: <span class="built_in">string</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  symbol: <span class="built_in">string</span>;</span><br><span class="line">  rank: <span class="built_in">number</span>;</span><br><span class="line">  is_new: <span class="built_in">boolean</span>;</span><br><span class="line">  is_active: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Coins</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [coins, setCoins] = useState&lt;ICoin[]&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">'https://api.coinpaprika.com/v1/coins'</span>);</span><br><span class="line">      <span class="keyword">const</span> json = <span class="keyword">await</span> response.json();</span><br><span class="line">      setCoins(json.slice(<span class="number">0</span>, <span class="number">100</span>));</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;)();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    ...</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Coins;</span><br></pre></td></tr></table></figure><h2 id="react-query-사용-후"><a class="markdownIt-Anchor" href="#react-query-사용-후"></a> React Query 사용 후</h2><p>먼저 React Query 를 사용하도록 세팅합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; QueryClient, QueryClientProvider &#125; <span class="keyword">from</span> <span class="string">'react-query'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryClient = <span class="keyword">new</span> QueryClient();</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;QueryClientProvider client=&#123;queryClient&#125;&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;<span class="regexp">/QueryClientProvider&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>React.StrictMode&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>코인들의 정보를 조회하는 코드를 별도 파일을 생성하여 관리합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchCoins</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">'https://api.coinpaprika.com/v1/coins'</span>).then(<span class="function">(<span class="params">reponse</span>) =&gt;</span> reponse.json());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React Query 를 사용하기 전과 비교하면 많은 코드가 제거된 것을 확인할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useQuery &#125; <span class="keyword">from</span> <span class="string">'react-query'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchCoins &#125; <span class="keyword">from</span> <span class="string">'../api'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ICoin &#123;</span><br><span class="line">  id: <span class="built_in">string</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  symbol: <span class="built_in">string</span>;</span><br><span class="line">  rank: <span class="built_in">number</span>;</span><br><span class="line">  is_new: <span class="built_in">boolean</span>;</span><br><span class="line">  is_active: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// coins.tsx</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Coins</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isLoading, isError, data &#125; = useQuery&lt;ICoin[]&gt;(<span class="string">'allCoins'</span>, fetchCoins);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    ...</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Coins;</span><br></pre></td></tr></table></figure><p><code>useQuery</code> 파라미터와 결과 값을 다음과 같이 변형해서 사용할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; isLoading: infoLoding, data: infoData &#125; = useQuery&lt;InfoData&gt;<span class="function">(<span class="params">['info', coinId], (<span class="params"></span>) =&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">  fetchCoinInfo(<span class="params">coinId <span class="keyword">as</span> <span class="built_in">string</span></span>)</span></span></span><br><span class="line"><span class="function"><span class="params"></span>);</span></span><br></pre></td></tr></table></figure><h2 id="devtools"><a class="markdownIt-Anchor" href="#devtools"></a> Devtools</h2><p>React Query 는 query 데이터를 시각화 하기 위해서 Devtools(Developer Tools, 개발자도구)를 기능을 가지고 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; ReactQueryDevtools &#125; <span class="keyword">from</span> <span class="string">'react-query/devtools'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;QueryClientProvider client=&#123;queryClient&#125;&gt;</span><br><span class="line">      &#123;<span class="comment">/* The rest of your application */</span>&#125;</span><br><span class="line">      &lt;ReactQueryDevtools initialIsOpen=&#123;<span class="literal">false</span>&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/QueryClientProvider&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>initialIsOpen: 개발자도구가 기본적으로 열려 있도록 하려면 <code>true</code> 로 설정</li></ul><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://react-query-v3.tanstack.com/overview" target="_blank" rel="noopener">https://react-query-v3.tanstack.com/overview</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/07/23/react-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] Nested Routes</title>
      <link>http://hgko1207.github.io/2022/07/22/react-3/</link>
      <guid>http://hgko1207.github.io/2022/07/22/react-3/</guid>
      <pubDate>Thu, 21 Jul 2022 15:59:11 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Nested Routes&lt;/strong&gt; 는 route 안에 있는 또 다른 route 입니다.&lt;/p&gt;
&lt;p&gt;React Router 가 v6 로 바뀌면서 Nested Routes 만 아니라 Route 사용하는 방법이 바뀌었습니다. 전
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Nested Routes</strong> 는 route 안에 있는 또 다른 route 입니다.</p><p>React Router 가 v6 로 바뀌면서 Nested Routes 만 아니라 Route 사용하는 방법이 바뀌었습니다. 전 5 버전과 현재 6 버전 사용법을 비교하였습니다.</p><h2 id="react-router-v5"><a class="markdownIt-Anchor" href="#react-router-v5"></a> React Router v5</h2><p>nested routes 를 구현하는 방법은 자식 route 를 부모 route 의 element 내부에 작성하는 것 입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Router.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Switch, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Coin <span class="keyword">from</span> <span class="string">'./routes/Coin'</span>;</span><br><span class="line"><span class="keyword">import</span> Coins <span class="keyword">from</span> <span class="string">'./routes/Coins'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Router</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/:coinId"</span>&gt;</span><br><span class="line">          &lt;Coin /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="/</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">          &lt;Coins /&gt;</span></span><br><span class="line"><span class="string">        &lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/BrowserRouter&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">export default Router;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Coin.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; Switch, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Coin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Container&gt;</span><br><span class="line">      &lt;Header&gt;</span><br><span class="line">        &lt;Title&gt;&lt;<span class="regexp">/Title&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Header&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"price"</span>&gt;</span><br><span class="line">          &lt;Price /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="chart"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Chart /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Switch&gt;</span><br><span class="line">    &lt;<span class="regexp">/Container&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Coin;</span></span><br></pre></td></tr></table></figure><h2 id="react-router-v6"><a class="markdownIt-Anchor" href="#react-router-v6"></a> React Router v6</h2><p>nested routes 를 구현하는 방법은 두 가지가 있습니다. 6 버전에서는 Switch 가 Routes 로 변경됐습니다.</p><h3 id="첫-번째"><a class="markdownIt-Anchor" href="#첫-번째"></a> 첫 번째</h3><p>부모 route  의 path 마지막에 /*를 적어 명시적으로 이 route의 내부에서 nested route 가 render 될 수 있음을 표시하고 자식 route 를 부모 route 의 element 내부에 작성하는 방법입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Router.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Routes, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Coin <span class="keyword">from</span> <span class="string">'./routes/Coin'</span>;</span><br><span class="line"><span class="keyword">import</span> Coins <span class="keyword">from</span> <span class="string">'./routes/Coins'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Router</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">      &lt;Routes&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/:coinId/*"</span> element=&#123;&lt;Coin /&gt;&#125;&gt;&lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="/</span><span class="string">" element=&#123;&lt;Coins /&gt;&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;/Routes&gt;</span></span><br><span class="line"><span class="string">    &lt;/BrowserRouter&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default Router;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Coin.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; Routes, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Coin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Container&gt;</span><br><span class="line">      &lt;Header&gt;</span><br><span class="line">        &lt;Title&gt;&lt;<span class="regexp">/Title&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Header&gt;</span><br><span class="line">      &lt;Routes&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"price"</span> element=&#123;&lt;Price /&gt;&#125;&gt;&lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="chart" element=&#123;&lt;Chart /</span>&gt;&#125;&gt;&lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Routes&gt;</span><br><span class="line">    &lt;<span class="regexp">/Container&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Coin;</span></span><br></pre></td></tr></table></figure><h3 id="두-번째"><a class="markdownIt-Anchor" href="#두-번째"></a> 두 번째</h3><p>자식 route 를 부모 element 의 내부가 아닌 <code>Router</code> 내부에 작성하는 방법입니다. 그리고 이 자식 Route 들이 어디에 render 될지 부모의 element 안에 <code>Outlet</code> 을 이용해 표시해주면 됩니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Router.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Routes, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Chart <span class="keyword">from</span> <span class="string">'./routes/Chart'</span>;</span><br><span class="line"><span class="keyword">import</span> Coin <span class="keyword">from</span> <span class="string">'./routes/Coin'</span>;</span><br><span class="line"><span class="keyword">import</span> Coins <span class="keyword">from</span> <span class="string">'./routes/Coins'</span>;</span><br><span class="line"><span class="keyword">import</span> Price <span class="keyword">from</span> <span class="string">'./routes/Price'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Router</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">      &lt;Routes&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/:coinId"</span> element=&#123;&lt;Coin /&gt;&#125;&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"price"</span> element=&#123;&lt;Price /&gt;&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"chart"</span> element=&#123;&lt;Chart /&gt;&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="/</span><span class="string">" element=&#123;&lt;Coins /&gt;&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;/Routes&gt;</span></span><br><span class="line"><span class="string">    &lt;/BrowserRouter&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default Router;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Coin.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; Outlet, Routes, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Coin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Container&gt;</span><br><span class="line">      &lt;Header&gt;</span><br><span class="line">        &lt;Title&gt;&lt;<span class="regexp">/Title&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Header&gt;</span><br><span class="line">      &lt;Outlet /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Container&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Coin;</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://ui.dev/react-router-nested-routes" target="_blank" rel="noopener">https://ui.dev/react-router-nested-routes</a></li><li><a href="https://reactrouter.com/docs/en/v6/getting-started/overview" target="_blank" rel="noopener">https://reactrouter.com/docs/en/v6/getting-started/overview</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/07/22/react-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JPA] 복합키 사용</title>
      <link>http://hgko1207.github.io/2022/07/13/spring-jpa-2/</link>
      <guid>http://hgko1207.github.io/2022/07/13/spring-jpa-2/</guid>
      <pubDate>Wed, 13 Jul 2022 10:21:50 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;서론&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서론&quot;&gt;&lt;/a&gt; 서론&lt;/h2&gt;
&lt;p&gt;복합키는 기본키가 되지 못하는 컬럼들을 서로 묶어서 기본키처럼 사용하는 것입니다.&lt;/p&gt;
&lt;h2 id=&quot;entity&quot;&gt;&lt;a cla
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="서론"><a class="markdownIt-Anchor" href="#서론"></a> 서론</h2><p>복합키는 기본키가 되지 못하는 컬럼들을 서로 묶어서 기본키처럼 사용하는 것입니다.</p><h2 id="entity"><a class="markdownIt-Anchor" href="#entity"></a> Entity</h2><p>예를 들어 사용자명과 이메일을 복합키로 사용한다고 가정합니다. 복합키로 묶는 <code>CompositePK</code> 클래스를 생성하고, <code>@IdClass</code> 어노테이션을 사용하여 설정합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)</span><br><span class="line"><span class="meta">@IdClass</span>(CompositePK<span class="class">.<span class="keyword">class</span>) //이름과 이메일을 <span class="title">primary</span> <span class="title">key</span>로 사용</span></span><br><span class="line"><span class="class">@<span class="title">Data</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="meta">@AllArgsConstructor</span></span><br><span class="line">  <span class="meta">@NoArgsConstructor</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositePK</span> <span class="keyword">implements</span> <span class="title">Domain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 사용자명 */</span></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, length = <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 이메일 */</span></span><br><span class="line">    <span class="meta">@Column</span>(length = <span class="number">45</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 사용자비밀번호 */</span></span><br><span class="line">  <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, length = <span class="number">100</span>)</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 연락처 */</span></span><br><span class="line">  <span class="meta">@Column</span>(length = <span class="number">20</span>)</span><br><span class="line">  <span class="keyword">private</span> String tel;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 생성일시 */</span></span><br><span class="line">  <span class="meta">@CreationTimestamp</span></span><br><span class="line">  <span class="keyword">private</span> LocalDateTime createDate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 수정일시 */</span></span><br><span class="line">  <span class="meta">@UpdateTimestamp</span></span><br><span class="line">  <span class="keyword">private</span> LocalDateTime updateDate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 권한 */</span></span><br><span class="line">  <span class="meta">@Enumerated</span>(EnumType.STRING)</span><br><span class="line">  <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">  <span class="keyword">private</span> UserRole role;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> UserRole &#123;</span><br><span class="line">    ADMIN, GUEST</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="repository"><a class="markdownIt-Anchor" href="#repository"></a> Repository</h2><p>Repository 인터페이스를 생성하고 <code>JpaRepository</code> 를 상속받습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">CompositePK</span>&gt;  </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h2><p>Service 클래스를 생성하고 Repository 인터페이스를 불러와서 사용합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(CompositePK id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userRepository.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/07/13/spring-jpa-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] TypeScript 사용 방법</title>
      <link>http://hgko1207.github.io/2022/07/03/react-2/</link>
      <guid>http://hgko1207.github.io/2022/07/03/react-2/</guid>
      <pubDate>Sun, 03 Jul 2022 14:52:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;React 에서 &lt;strong&gt;TypeScript&lt;/strong&gt; 를 적용하고 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;설치&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#설치&quot;&gt;&lt;/a&gt; 설치&lt;/h2&gt;
&lt;p&gt;&lt;c
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>React 에서 <strong>TypeScript</strong> 를 적용하고 사용 방법에 대해 알아보겠습니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p><code>create-react-app</code> 명령어에 typescript 옵션을 추가합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx create-react-app typescript --template typescript</span></span><br></pre></td></tr></table></figure><p>Typescript 를 추가하지 않은 기존 프로젝트가 있다면 다음 명령어를 실행하여 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save typescript @types/node @types/react @types/react-dom @types/jest</span></span><br></pre></td></tr></table></figure><p>Typescript 사용 시 styled-components 부분에서 에러가 날 경우 다음 명령어를 실행하여 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i --save-dev @types/styled-components</span></span><br></pre></td></tr></table></figure><h2 id="typing-the-props"><a class="markdownIt-Anchor" href="#typing-the-props"></a> Typing the Props</h2><p>Prop Types 는 코드를 실행한 후 에만 브라우저의 콘솔에 경고 표시로 확인이 가능합니다.<br />TypeScript 를 사용하는 이유는 코드가 실행되기 전에 오류를 확인하기 위해서입니다.</p><p><code>interface</code> 는 일반적으로 타입 체크를 위해 사용되며 변수, 함수, 클래스에 사용할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Circle <span class="keyword">from</span> <span class="string">'./Circle'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Circle bgColor=<span class="string">"teal"</span> /&gt;</span><br><span class="line">      &lt;Circle bgColor=<span class="string">"tomato"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> CircleProps &#123;</span><br><span class="line">  bgColor: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Container = styled.div&lt;CircleProps&gt;<span class="string">`</span></span><br><span class="line"><span class="string">  width: 200px;</span></span><br><span class="line"><span class="string">  height: 200px;</span></span><br><span class="line"><span class="string">  border-radius: 100px;</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;(props) =&gt; props.bgColor&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">&#123; bgColor &#125;: CircleProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;Container bgColor=&#123;bgColor&#125; /&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Circle;</span><br></pre></td></tr></table></figure><h2 id="optional-props"><a class="markdownIt-Anchor" href="#optional-props"></a> Optional Props</h2><p>props는 기본으로 required 이지만 <code>interface</code> 의 object 뒤에 <code>?</code>를 추가하여 optional 될 수 있도록 변경 가능합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ContainerProps &#123;</span><br><span class="line">  bgColor: <span class="built_in">string</span>;</span><br><span class="line">  borderColor: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Container = styled.div&lt;ContainerProps&gt;<span class="string">`</span></span><br><span class="line"><span class="string">  width: 200px;</span></span><br><span class="line"><span class="string">  height: 200px;</span></span><br><span class="line"><span class="string">  border-radius: 100px;</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;(props) =&gt; props.bgColor&#125;</span>;</span></span><br><span class="line"><span class="string">  border: 1px solid <span class="subst">$&#123;(props) =&gt; props.borderColor&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> CircleProps &#123;</span><br><span class="line">  bgColor: <span class="built_in">string</span>;</span><br><span class="line">  borderColor?: <span class="built_in">string</span>; <span class="comment">// object뒤에 ?를 추가 =&gt; Option props</span></span><br><span class="line">  text?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">&#123; bgColor, borderColor, text = '<span class="keyword">default</span> text' &#125;: CircleProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Container bgColor=&#123;bgColor&#125; borderColor=&#123;borderColor ?? <span class="string">'white'</span>&#125;&gt;</span><br><span class="line">      &#123;text&#125;</span><br><span class="line">    &lt;<span class="regexp">/Container&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Circle;</span></span><br></pre></td></tr></table></figure><h2 id="state"><a class="markdownIt-Anchor" href="#state"></a> State</h2><p>State 사용 시 number, string 타입을 같이 쓰고 싶다면 다음과 같이 정의합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [value, setValue] = useState&lt;<span class="built_in">number</span> | <span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line">setValue(<span class="number">1</span>);</span><br><span class="line">setValue(<span class="string">'hello'</span>);</span><br><span class="line">setValue(<span class="literal">true</span>); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h2 id="event"><a class="markdownIt-Anchor" href="#event"></a> Event</h2><ul><li><a href="https://reactjs.org/docs/events.html" target="_blank" rel="noopener">https://reactjs.org/docs/events.html</a></li></ul><p>SyntheticEvent 는 기본적으로 ReactJS 버전의 이벤트입니다. 이벤트들의 정보를 확인하는 사이트입니다.</p><h2 id="form"><a class="markdownIt-Anchor" href="#form"></a> Form</h2><p><code>React.FormEvent&lt;HTMLInputElement&gt;</code> 또는 <code>React.FormEvent&lt;HTMLFormElement&gt;</code> 와 같은 Element 를 사용함으로써 event 를 보호하고 어떤 event 를 받는지 알 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">const</span> onChange = <span class="function">(<span class="params">event: React.FormEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      currentTarget: &#123; value &#125;,</span><br><span class="line">    &#125; = event;</span><br><span class="line">    setValue(value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">event: React.FormEvent&lt;HTMLFormElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;form onSubmit=&#123;onSubmit&#125;&gt;</span><br><span class="line">        &lt;input value=&#123;value&#125; onChange=&#123;onChange&#125; <span class="keyword">type</span>=<span class="string">"text"</span> placeholder=<span class="string">"username"</span> /&gt;</span><br><span class="line">        &lt;button&gt;Log <span class="keyword">in</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>form&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="theme"><a class="markdownIt-Anchor" href="#theme"></a> Theme</h2><ul><li><a href="https://styled-components.com/docs/api#typescript" target="_blank" rel="noopener">https://styled-components.com/docs/api#typescript</a></li></ul><p><strong>styled.d.ts</strong> 파일을 생성합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// styled.d.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> 'styled-components' &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> DefaultTheme &#123;</span><br><span class="line">    textColor: <span class="built_in">string</span>;</span><br><span class="line">    bgColor: <span class="built_in">string</span>;</span><br><span class="line">    btnColor: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>thmem.ts</strong> 파일을 생성하고 테마를 정의합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// thmem.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; DefaultTheme &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> lightTheme: DefaultTheme = &#123;</span><br><span class="line">  bgColor: <span class="string">'white'</span>,</span><br><span class="line">  textColor: <span class="string">'black'</span>,</span><br><span class="line">  btnColor: <span class="string">'tomato'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> darkTheme: DefaultTheme = &#123;</span><br><span class="line">  bgColor: <span class="string">'black'</span>,</span><br><span class="line">  textColor: <span class="string">'white'</span>,</span><br><span class="line">  btnColor: <span class="string">'teal'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>React에서 테마 사용하는 것과 똑같은 방식입니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ThemeProvider &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; lightTheme &#125; <span class="keyword">from</span> <span class="string">'./theme'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;ThemeProvider theme=&#123;lightTheme&#125;&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;<span class="regexp">/ThemeProvider&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>React.StrictMode&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://create-react-app.dev/docs/adding-typescript/" target="_blank" rel="noopener">https://create-react-app.dev/docs/adding-typescript/</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/07/03/react-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] Styled Components 사용 방법</title>
      <link>http://hgko1207.github.io/2022/06/28/react-1/</link>
      <guid>http://hgko1207.github.io/2022/06/28/react-1/</guid>
      <pubDate>Tue, 28 Jun 2022 14:36:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;React 에서 &lt;strong&gt;Styled Components&lt;/strong&gt;를 사용하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;설치&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#설치&quot;&gt;&lt;/a&gt; 설치&lt;/h2&gt;
&lt;p
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>React 에서 <strong>Styled Components</strong>를 사용하는 방법에 대해 알아보겠습니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p>Visual Studio Code를 사용시 Styled-Component 자동 완성을 위해 <code>vscode-styled-components</code> 플러그인을 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i styled-components</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://styled-components.com/" target="_blank" rel="noopener">https://styled-components.com/</a></li></ul><h2 id="사용-예"><a class="markdownIt-Anchor" href="#사용-예"></a> 사용 예</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Father = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">const</span> BoxOne = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  background-color: teal;</span></span><br><span class="line"><span class="string">  width: 100px;</span></span><br><span class="line"><span class="string">  height: 100px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">const</span> BoxTwo = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  background-color: tomato;</span></span><br><span class="line"><span class="string">  width: 100px;</span></span><br><span class="line"><span class="string">  height: 100px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">const</span> Text = styled.span<span class="string">`</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Father&gt;</span><br><span class="line">      &lt;BoxOne&gt;</span><br><span class="line">        &lt;Text&gt;Hello&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>BoxOne&gt;</span><br><span class="line">      &lt;BoxTwo /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Father&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="확장"><a class="markdownIt-Anchor" href="#확장"></a> 확장</h2><p>컴포넌트를 확장하는 방법입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Box = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;(props) =&gt; props.bgColor&#125;</span>;</span></span><br><span class="line"><span class="string">  width: 100px;</span></span><br><span class="line"><span class="string">  height: 100px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">const</span> Circle = styled(Box)<span class="string">`</span></span><br><span class="line"><span class="string">  border-radius: 50px;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h2 id="as-and-attrs"><a class="markdownIt-Anchor" href="#as-and-attrs"></a> ‘As’ and Attrs</h2><p>다음과 같이 <code>as</code> 속성을 사용하여 값을 <code>a</code> 로 지정하면 button 태그가 a 태그로 변경됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Btn = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string">  background-color: tomato;</span></span><br><span class="line"><span class="string">  border: 0;</span></span><br><span class="line"><span class="string">  border-radius: 15px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">&lt;Btn <span class="keyword">as</span>=<span class="string">"a"</span>&gt;Log <span class="keyword">in</span>&lt;<span class="regexp">/Btn&gt;;</span></span><br></pre></td></tr></table></figure><h2 id="속성-값-설정"><a class="markdownIt-Anchor" href="#속성-값-설정"></a> 속성 값 설정</h2><p><code>attrs</code> 을 사용하여 HTML 태그에 속성 값을 설정 할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Input = styled.input.attrs(&#123; <span class="attr">require</span>: <span class="literal">true</span>, <span class="attr">minLength</span>: <span class="number">10</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  background-color: tomato;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h2 id="animation"><a class="markdownIt-Anchor" href="#animation"></a> Animation</h2><p><code>keyframes</code> 를 추가하고, Animation 을 설정합니다. 그리고 styled components 에 <code>${}</code> 를 통해 설정된 변수를 지정합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled, &#123; keyframes &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rotationAnimation = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">  0% &#123;</span></span><br><span class="line"><span class="string">    transform: rotate(0deg);</span></span><br><span class="line"><span class="string">    border-radius: 0px;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  50% &#123;</span></span><br><span class="line"><span class="string">    border-radius: 100px;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  100% &#123;</span></span><br><span class="line"><span class="string">    transform: rotate(360deg);</span></span><br><span class="line"><span class="string">    border-radius: 0px;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Wrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Box = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  height: 200px;</span></span><br><span class="line"><span class="string">  width: 200px;</span></span><br><span class="line"><span class="string">  background-color: tomato;</span></span><br><span class="line"><span class="string">  animation: <span class="subst">$&#123;rotationAnimation&#125;</span> 1s linear infinite;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Wrapper&gt;</span><br><span class="line">      &lt;Box /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Wrapper&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="theme"><a class="markdownIt-Anchor" href="#theme"></a> Theme</h2><p><strong>index.js</strong> 파일에서 <code>ThemeProvider</code> 를 styled-components 로 부터 Import 한 후 <code>App</code> 태그를 감쌉니다. Theme 에 어떤 색을 사용할 건지 설정합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ThemeProvider &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> darkTheme = &#123;</span><br><span class="line">  textColor: <span class="string">'whitesmoke'</span>,</span><br><span class="line">  backgroundColor: <span class="string">'#111'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lightTheme = &#123;</span><br><span class="line">  textColor: <span class="string">'#111'</span>,</span><br><span class="line">  backgroundColor: <span class="string">'whitesmoke'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;ThemeProvider theme=&#123;darkTheme&#125;&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;<span class="regexp">/ThemeProvider&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>React.StrictMode&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>위에서 설정한 Theme 변수를 사용합니다. Theme가 변경되면 <code>Title</code> 이나 <code>Wrapper</code> 안의 글자 색상과 배경색이 변화되는 것을 확인 할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Title = styled.h1<span class="string">`</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;(props) =&gt; props.theme.textColor&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Wrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  justify-content: center;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  width: 100vw;</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;(props) =&gt; props.theme.backgroundColor&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Wrapper&gt;</span><br><span class="line">      &lt;Title&gt;Hello&lt;<span class="regexp">/Title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Wrapper&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/06/28/react-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[WPF] ffmpeg을 활용한 동영상 만들기</title>
      <link>http://hgko1207.github.io/2022/06/24/wpf-7/</link>
      <guid>http://hgko1207.github.io/2022/06/24/wpf-7/</guid>
      <pubDate>Fri, 24 Jun 2022 14:06:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;ffmpeg-build-다운로드-받기&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ffmpeg-build-다운로드-받기&quot;&gt;&lt;/a&gt; FFmpeg Build 다운로드 받기&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://f
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="ffmpeg-build-다운로드-받기"><a class="markdownIt-Anchor" href="#ffmpeg-build-다운로드-받기"></a> FFmpeg Build 다운로드 받기</h2><p><a href="https://ffmpeg.org/download.html#build-windows" target="_blank" rel="noopener">https://ffmpeg.org/download.html#build-windows</a> 사이트에서 <strong>Windows EXE Files</strong> 항목의 원하는 형식으로 다운로드를 받습니다.<br />다운로드 받은 후 압축해제 합니다. 프로젝트의 <strong>ffmpeg</strong> 폴더를 생성 후 실행에 사용되는 exe, dll 파일들을 복사합니다.</p><h2 id="bitmap들을-동영상으로-만들기"><a class="markdownIt-Anchor" href="#bitmap들을-동영상으로-만들기"></a> Bitmap들을 동영상으로 만들기</h2><h3 id="ffmpegloader"><a class="markdownIt-Anchor" href="#ffmpegloader"></a> FFmpegLoader</h3><p><strong>ffmpeg</strong>를 사용하기 위해 <strong>FFMediaToolkit</strong> 패키지를 Nuget 을 이용하여 설치합니다. <code>FFmpegLoader</code>를 사용하여 Path를 지정합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 예</span></span><br><span class="line">FFmpegLoader.FFmpegPath = <span class="string">@".\ffmpeg"</span>;</span><br></pre></td></tr></table></figure><h3 id="동영상에-프레임-추가"><a class="markdownIt-Anchor" href="#동영상에-프레임-추가"></a> 동영상에 프레임 추가</h3><p>아래는 예제코드입니다. <code>StartRecordVideo</code> 함수에 저장될 경로를 지정하여 <code>mediaFile</code>을 생성합니다. 그리고 <code>AddRecordFrame</code> 함수를 통해 <code>Bitmap</code> 이미지를 설정한 <strong>30fps</strong> 로 동영상에 추가합니다. 이렇게 생성된 동영상은 <strong>MPEG2</strong> 형식이므로 <strong>MPEG4</strong> 형식으로 변경합니다. <strong>MPEG2</strong> 형식의 동영상은 가끔 윈도우 환경에서 오류가 발생하는 경우가 있습니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> FFMediaToolkit;</span><br><span class="line"><span class="keyword">using</span> FFMediaToolkit.Encoding;</span><br><span class="line"><span class="keyword">using</span> FFMediaToolkit.Graphics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Hgko.Utils</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ImageService</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> ffmpegInit = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> MediaOutput mediaFile = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Start Record video</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="path"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartRecordVideo</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (mediaFile == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ffmpegInit)</span><br><span class="line">            &#123;</span><br><span class="line">                FFmpegLoader.FFmpegPath = <span class="string">@".\ffmpeg"</span>;</span><br><span class="line">                ffmpegInit = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> width = <span class="number">1024</span>;</span><br><span class="line">            <span class="keyword">int</span> heigth = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">            VideoEncoderSettings settings = <span class="keyword">new</span> VideoEncoderSettings(width, heigth, <span class="number">30</span>, VideoCodec.MPEG2);</span><br><span class="line">            settings.EncoderPreset = EncoderPreset.Medium;</span><br><span class="line"></span><br><span class="line">            mediaFile = MediaBuilder.CreateContainer(path).WithVideo(settings).Create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Add RecordFrame</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="bitmap"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddRecordFrame</span>(<span class="params">Bitmap bitmap</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bitmap == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mediaFile == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        System.Drawing.Imaging.BitmapData bdata = bitmap.LockBits(<span class="keyword">new</span> Rectangle(System.Drawing.Point.Empty, bitmap.Size), System.Drawing.Imaging.ImageLockMode.WriteOnly, bitmap.PixelFormat);</span><br><span class="line">        ImageData imgdata = ImageData.FromPointer(bdata.Scan0, ImagePixelFormat.Bgra32, bitmap.Size);</span><br><span class="line">        mediaFile.Video.AddFrame(imgdata);</span><br><span class="line">        bitmap.UnlockBits(bdata);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Stop Record Video</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopRecordVideo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (mediaFile != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mediaFile.Video.Dispose();</span><br><span class="line">            mediaFile.Dispose();</span><br><span class="line">            mediaFile = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="동영상-포맷-변환"><a class="markdownIt-Anchor" href="#동영상-포맷-변환"></a> 동영상 포맷 변환</h3><p>임시로 빌드되는 경로에 <strong>display/video</strong> 경로의 폴더를 생성합니다. 포맷 변환하는 방법은 많습니다. 다음 코드는 여러 이미지 또는 동영상을 합쳐서 새로운 동영상으로 만드는 형식의 방법을 활용하여 포맷 변환을 진행합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> End Record Video</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="mp2Path"&gt;</span>mp2 형식으로 저장된 파일경로<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EndRecordVideo</span>(<span class="params"><span class="keyword">string</span> mp2Path</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">string</span> videoWorkingPath = <span class="string">@".\display\video\"</span>;</span><br><span class="line">  <span class="keyword">string</span> vedeoWorkingFolder = Directory.GetCurrentDirectory() + videoWorkingPath.Replace(<span class="string">"."</span>, <span class="string">""</span>);</span><br><span class="line">  <span class="keyword">string</span> outputVeideoPath = vedeoWorkingFolder + Path.GetFileNameWithoutExtension(mp2Path) + <span class="string">".mp4"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// if exist video working directory, clean up.</span></span><br><span class="line">  <span class="keyword">if</span> (Directory.Exists(videoWorkingPath))</span><br><span class="line">      ClearFolder(videoWorkingPath);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remake working dir.</span></span><br><span class="line">  Directory.CreateDirectory(videoWorkingPath);</span><br><span class="line"></span><br><span class="line">  Task.Run(() =&gt;</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">string</span> lstPath = vedeoWorkingFolder + <span class="string">"lst.txt"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 텍스트 파일에 앞에서 생성된 mp2 동영상 파일 경로 추가</span></span><br><span class="line">      <span class="keyword">using</span> (StreamWriter writer = File.CreateText(lstPath))</span><br><span class="line">      &#123;</span><br><span class="line">          writer.WriteLine(<span class="string">"file '&#123;0&#125;'"</span>, mp2Path);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// h264 or mpeg4</span></span><br><span class="line">      <span class="keyword">string</span> codec = <span class="string">"h264"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 동영상 포맷 변환(mp2 -&gt; mp4)</span></span><br><span class="line">      <span class="keyword">string</span> arg = <span class="string">$@"-safe 0 -f concat -i ""<span class="subst">&#123;lstPath&#125;</span>"" -c copy -vcodec ""<span class="subst">&#123;codec&#125;</span>"" ""<span class="subst">&#123;outputVeideoPath&#125;</span>"""</span>;</span><br><span class="line">      <span class="keyword">using</span> (Process process = Process.Start(<span class="string">@".\ffmpeg\ffmpeg.exe"</span>, arg))</span><br><span class="line">      &#123;</span><br><span class="line">          process.WaitForExit();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Clear Folder</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="path"&gt;</span>삭제할 경로<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ClearFolder</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DirectoryInfo dir = <span class="keyword">new</span> DirectoryInfo(path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove all files</span></span><br><span class="line">    <span class="keyword">foreach</span> (FileInfo fi <span class="keyword">in</span> dir.GetFiles())</span><br><span class="line">        fi.Delete();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove dir recursive</span></span><br><span class="line">    <span class="keyword">foreach</span> (DirectoryInfo di <span class="keyword">in</span> dir.GetDirectories())</span><br><span class="line">    &#123;</span><br><span class="line">        ClearFolder(di.FullName);</span><br><span class="line">        di.Delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/06/24/wpf-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>스프링 부트와 AWS로 혼자 구현하는 웹 서비스</title>
      <link>http://hgko1207.github.io/2022/06/22/book-1/</link>
      <guid>http://hgko1207.github.io/2022/06/22/book-1/</guid>
      <pubDate>Wed, 22 Jun 2022 07:05:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;책-정보&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#책-정보&quot;&gt;&lt;/a&gt; 책 정보&lt;/h3&gt;
&lt;img width=&quot;100%&quot; src=&quot;/images/book/book1.png&quot; alt=&quot;&quot; title=&quot;스프링 부트와 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="책-정보"><a class="markdownIt-Anchor" href="#책-정보"></a> 책 정보</h3><img width="100%" src="/images/book/book1.png" alt="" title="스프링 부트와 AWS로 혼자 구현하는 웹 서비스"><h3 id="책-소개"><a class="markdownIt-Anchor" href="#책-소개"></a> 책 소개</h3><p>이 책은 제목 그대로 스프링 부트와 AWS로 웹 서비스를 구현합니다. JPA와 JUnit 테스트, 그레이들, 머스테치, 스프링 시큐리티를 활용한 소셜 로그인 등으로 애플리케이션을 개발하고, 뒤이어 AWS 인프라의 기본 사용법과 AWS EC2와 RDS를 사용해 서비스가 가능하도록 합니다. 이렇게 점진적으로 스프링 부트 프로젝트를 개선해서 배포 자동화하고 무중단 배포까지 경험합니다. 실무 현장에서의 노하우와 테스트 방법, 객체지향 프로그래밍 등을 소개하고 다룹니다.</p><h3 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h3><p>스프링 부트와 AWS로 웹 서비스 구현에 대한 설명이 잘 정리 되어있고, 코드만 따라해도 완성품을 만들 수 있어 도움이 되었습니다. 다만 스프링 부트와 자바에 대한 경험이 필요합니다. 책의 예제 중에서 시간이 지나면서 안되는 기능, 부분들은 GitHub에 오류 수정으로 설명되어 있어 찾으면서 진행하면 좋습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/06/22/book-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[WPF] 이미지 자르기</title>
      <link>http://hgko1207.github.io/2022/06/20/wpf-6/</link>
      <guid>http://hgko1207.github.io/2022/06/20/wpf-6/</guid>
      <pubDate>Mon, 20 Jun 2022 02:02:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;사각형, 타원, 삼각형으로 이미지를 자르기 위해 다음처럼 정의합니다.&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>사각형, 타원, 삼각형으로 이미지를 자르기 위해 다음처럼 정의합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ShapeType</span><br><span class="line">&#123;</span><br><span class="line">    Rectangle,</span><br><span class="line">    Ellipse,</span><br><span class="line">    Triangle,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="이미지-자르기"><a class="markdownIt-Anchor" href="#이미지-자르기"></a> 이미지 자르기</h2><p>기존 비트맵 이미지에서 주어진 위치과 크기, 도형을 통해 이미지를 자릅니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">CreateCroppedImage</span>(<span class="params">Bitmap image, <span class="keyword">double</span> left, <span class="keyword">double</span> top, <span class="keyword">double</span> width, <span class="keyword">double</span> height, ShapeType shapeType</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bitmap result = <span class="keyword">new</span> Bitmap(image.Width, image.Height);</span><br><span class="line">    <span class="keyword">using</span> (Graphics g = Graphics.FromImage(result))</span><br><span class="line">    &#123;</span><br><span class="line">        RectangleF srcRect = <span class="keyword">new</span> Rectangle((<span class="keyword">int</span>)left, (<span class="keyword">int</span>)top, (<span class="keyword">int</span>)width, (<span class="keyword">int</span>)height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (shapeType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> ShapeType.Rectangle:</span><br><span class="line">                g.DrawImage(image, <span class="keyword">new</span> Rectangle(<span class="number">0</span>, <span class="number">0</span>, result.Width, result.Height), srcRect, GraphicsUnit.Pixel);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ShapeType.Ellipse:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> x = (<span class="keyword">int</span>)width / <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">int</span> y = (<span class="keyword">int</span>)height / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                    g.SmoothingMode = SmoothingMode.AntiAlias;</span><br><span class="line">                    g.TranslateTransform(result.Width / <span class="number">2</span>, result.Height / <span class="number">2</span>);</span><br><span class="line">                    GraphicsPath gp = <span class="keyword">new</span> GraphicsPath();</span><br><span class="line">                    gp.AddEllipse(<span class="number">0</span> - x, <span class="number">0</span> - y, result.Width, result.Height);</span><br><span class="line">                    Region rg = <span class="keyword">new</span> Region(gp);</span><br><span class="line">                    g.SetClip(rg, CombineMode.Replace);</span><br><span class="line"></span><br><span class="line">                    g.DrawImage(image, <span class="keyword">new</span> Rectangle(-x, -y, result.Width, result.Height), srcRect, GraphicsUnit.Pixel);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ShapeType.Triangle:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">float</span> x1 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">float</span> y1 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">float</span> x2 = (<span class="keyword">float</span>)(x1 + width);</span><br><span class="line">                    <span class="keyword">float</span> y2 = (<span class="keyword">float</span>)(y1 + height);</span><br><span class="line"></span><br><span class="line">                    PointF[] destPoints =</span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="keyword">new</span> PointF(x1 + (x2 - x1) / <span class="number">2</span>,  y1),</span><br><span class="line">                        <span class="keyword">new</span> PointF(x2,  y2),</span><br><span class="line">                        <span class="keyword">new</span> PointF(x1,  y2),</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    GraphicsPath gp = <span class="keyword">new</span> GraphicsPath();</span><br><span class="line">                    gp.AddPolygon(destPoints);</span><br><span class="line">                    Region region = <span class="keyword">new</span> Region(gp);</span><br><span class="line">                    g.SetClip(region, CombineMode.Replace);</span><br><span class="line"></span><br><span class="line">                    g.DrawImage(image, <span class="keyword">new</span> Rectangle(<span class="number">0</span>, <span class="number">0</span>, result.Width, result.Height), srcRect, GraphicsUnit.Pixel);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="이미지-제외-나머지-부분-제거"><a class="markdownIt-Anchor" href="#이미지-제외-나머지-부분-제거"></a> 이미지 제외 나머지 부분 제거</h2><p>기존 비트맵 이미지에서 주어진 위치과 크기, 도형을 통해 이미지를 제외한 나머지 부분을 제거합니다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">CreateInvertCroppedImage</span>(<span class="params">Bitmap image, <span class="keyword">double</span> left, <span class="keyword">double</span> top, <span class="keyword">double</span> width, <span class="keyword">double</span> height, ShapeType shapeType</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bitmap result = <span class="keyword">new</span> Bitmap(image.Width, image.Height);</span><br><span class="line">    <span class="keyword">using</span> (Graphics g = Graphics.FromImage(result))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (shapeType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> ShapeType.Rectangle:</span><br><span class="line">                Rectangle rect = <span class="keyword">new</span> Rectangle((<span class="keyword">int</span>)left, (<span class="keyword">int</span>)top, (<span class="keyword">int</span>)width, (<span class="keyword">int</span>)height);</span><br><span class="line">                g.SetClip(rect, CombineMode.Exclude);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ShapeType.Ellipse:</span><br><span class="line">                &#123;</span><br><span class="line">                    GraphicsPath gp = <span class="keyword">new</span> GraphicsPath();</span><br><span class="line">                    gp.AddEllipse((<span class="keyword">int</span>)left, (<span class="keyword">int</span>)top, (<span class="keyword">float</span>)width, (<span class="keyword">float</span>)height);</span><br><span class="line">                    Region region = <span class="keyword">new</span> Region(gp);</span><br><span class="line">                    g.SetClip(region, CombineMode.Exclude);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ShapeType.Triangle:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">float</span> x1 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">float</span> y1 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">float</span> x2 = (<span class="keyword">float</span>)(x1 + width);</span><br><span class="line">                    <span class="keyword">float</span> y2 = (<span class="keyword">float</span>)(y1 + height);</span><br><span class="line"></span><br><span class="line">                    PointF[] destPoints =</span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="keyword">new</span> PointF(x1 + (x2 - x1) / <span class="number">2</span>,  y1),</span><br><span class="line">                        <span class="keyword">new</span> PointF(x2,  y2),</span><br><span class="line">                        <span class="keyword">new</span> PointF(x1,  y2),</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    GraphicsPath gp = <span class="keyword">new</span> GraphicsPath();</span><br><span class="line">                    gp.AddPolygon(destPoints);</span><br><span class="line">                    Region region = <span class="keyword">new</span> Region(gp);</span><br><span class="line">                    g.SetClip(region, CombineMode.Exclude);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Rectangle destRect = <span class="keyword">new</span> Rectangle(<span class="number">0</span>, <span class="number">0</span>, result.Width, result.Height);</span><br><span class="line">        Rectangle srcRect = <span class="keyword">new</span> Rectangle(<span class="number">0</span>, <span class="number">0</span>, result.Width, result.Height);</span><br><span class="line"></span><br><span class="line">        g.DrawImage(image, destRect, srcRect, GraphicsUnit.Pixel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/06/20/wpf-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[WPF] 이미지 불러오기</title>
      <link>http://hgko1207.github.io/2022/06/18/wpf-5/</link>
      <guid>http://hgko1207.github.io/2022/06/18/wpf-5/</guid>
      <pubDate>Sat, 18 Jun 2022 13:03:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;이미지-로드&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#이미지-로드&quot;&gt;&lt;/a&gt; 이미지 로드&lt;/h2&gt;
&lt;p&gt;이미지 파일 경로를 통해 이미지를 로드합니다.&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="이미지-로드"><a class="markdownIt-Anchor" href="#이미지-로드"></a> 이미지 로드</h2><p>이미지 파일 경로를 통해 이미지를 로드합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Drawing.Imaging;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">LoadImage</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (Bitmap bitmap = <span class="keyword">new</span> Bitmap(path))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> bitmap.Clone(<span class="keyword">new</span> Rectangle(<span class="number">0</span>, <span class="number">0</span>, bitmap.Width, bitmap.Height), PixelFormat.Format32bppArgb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bitmapsource-변환"><a class="markdownIt-Anchor" href="#bitmapsource-변환"></a> BitmapSource 변환</h2><p>주어진 비트맵을 WPF 이미징 프레임워크에서 사용 가능한 BitmapSource 형식으로 변환합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Drawing.Imaging;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media.Imaging;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BitmapSource <span class="title">ConvertGDIBitmapToWPF</span>(<span class="params">Bitmap image</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (image == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    Rectangle rect = <span class="keyword">new</span> Rectangle(<span class="number">0</span>, <span class="number">0</span>, image.Width, image.Height);</span><br><span class="line">    BitmapData bitmapData = image.LockBits(rect, ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> size = rect.Width * rect.Height * <span class="number">4</span>;</span><br><span class="line">        BitmapSource result = BitmapSource.Create(image.Width, image.Height,</span><br><span class="line">            image.HorizontalResolution, image.VerticalResolution, PixelFormats.Bgra32,</span><br><span class="line">            <span class="literal">null</span>, bitmapData.Scan0, size, bitmapData.Stride);</span><br><span class="line">        result.Freeze();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        image.UnlockBits(bitmapData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="빈-비트맵-생성"><a class="markdownIt-Anchor" href="#빈-비트맵-생성"></a> 빈 비트맵 생성</h2><p>주어진 크기를 갖는 빈 비트맵을 생성합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Drawing.Imaging;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">MakeEmptyImage</span>(<span class="params"><span class="keyword">int</span> width, <span class="keyword">int</span> height</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Bitmap(width, height, PixelFormat.Format32bppArgb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/06/18/wpf-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Devexpress] GridControl 자동 번호 매기기</title>
      <link>http://hgko1207.github.io/2022/06/18/wpf-4/</link>
      <guid>http://hgko1207.github.io/2022/06/18/wpf-4/</guid>
      <pubDate>Sat, 18 Jun 2022 02:33:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Devexpress GridControl 의 TableView 에서 행이 추가될 때마다 컬럼의 숫자가 자동 증가하도록 구현한 코드입니다.&lt;/p&gt;
&lt;h2 id=&quot;converter-생성&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Devexpress GridControl 의 TableView 에서 행이 추가될 때마다 컬럼의 숫자가 자동 증가하도록 구현한 코드입니다.</p><h2 id="converter-생성"><a class="markdownIt-Anchor" href="#converter-생성"></a> Converter 생성</h2><p><code>IValueConverter</code> 인터페이스를 상속받아 <code>IndexFromOneConverter</code> 클래스를 생성합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Globalization;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> GridControl의 자동 생성 인덱스를 1 부터로 변환하는 컨버터</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IVM.Studio.Utils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IndexFromOneConverter</span> : <span class="title">IValueConverter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 자동 증가되도록 1을 더해준다.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Convert</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)<span class="keyword">value</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">ConvertBack</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="적용"><a class="markdownIt-Anchor" href="#적용"></a> 적용</h2><p>위에서 만든 Converter를 불러와서 <code>GridControl</code>에 적용합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">"Test.MainWindow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:d</span>=<span class="string">"http://schemas.microsoft.com/expression/blend/2008"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:mc</span>=<span class="string">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">mc:Ignorable</span>=<span class="string">"d"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:util</span>=<span class="string">"clr-namespace:Test.Utils"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:prism</span>=<span class="string">"http://prismlibrary.com/"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">prism:ViewModelLocator.AutoWireViewModel</span>=<span class="string">"True"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Title</span>=<span class="string">"Test"</span> <span class="attr">Height</span>=<span class="string">"600"</span> <span class="attr">Width</span>=<span class="string">"560"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">utils:IndexFromOneConverter</span> <span class="attr">x:Key</span>=<span class="string">"IndexFromOneConverter"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Margin</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dxg:GridControl</span> <span class="attr">ItemsSource</span>=<span class="string">"&#123;Binding TestInfos&#125;"</span> <span class="attr">SelectedItem</span>=<span class="string">"&#123;Binding SelectedTestInfo&#125;"</span> <span class="attr">SelectionMode</span>=<span class="string">"Row"</span> <span class="attr">ShowBorder</span>=<span class="string">"True"</span> <span class="attr">RenderOptions.EdgeMode</span>=<span class="string">"Aliased"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dxg:GridControl.View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dxg:TableView</span> <span class="attr">AutoWidth</span>=<span class="string">"True"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dxg:GridControl.View</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dxg:GridControl.Columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dxg:GridColumn</span> <span class="attr">Header</span>=<span class="string">"#"</span> <span class="attr">Width</span>=<span class="string">"40"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dxg:GridColumn.CellTemplate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding RowData.RowHandle.Value, Converter=&#123;StaticResource IndexFromOneConverter&#125;&#125;"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dxg:GridColumn.CellTemplate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dxg:GridColumn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dxg:GridColumn</span> <span class="attr">Header</span>=<span class="string">"Note"</span> <span class="attr">Width</span>=<span class="string">"100"</span> <span class="attr">FieldName</span>=<span class="string">"Note"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dxg:GridColumn</span> <span class="attr">Header</span>=<span class="string">"Content"</span> <span class="attr">Width</span>=<span class="string">"200"</span> <span class="attr">FieldName</span>=<span class="string">"Content"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dxg:GridColumn</span> <span class="attr">Header</span>=<span class="string">"Area"</span> <span class="attr">Width</span>=<span class="string">"200"</span> <span class="attr">FieldName</span>=<span class="string">"Area"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dxg:GridControl.Columns</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dxg:GridControl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/06/18/wpf-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CE, LE 계산</title>
      <link>http://hgko1207.github.io/2022/06/17/satellite-ce-le/</link>
      <guid>http://hgko1207.github.io/2022/06/17/satellite-ce-le/</guid>
      <pubDate>Fri, 17 Jun 2022 12:56:43 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;관측값 즉, 지상기준점과 측정점의 차이에 대해 CE 및 LE 결과를 내기 위해 구현을 하게 되었고 참고자료를 바탕으로 정리하였습니다.&lt;/p&gt;
&lt;p&gt;소스 코드는 &lt;a href=&quot;https://hgko1207.github.io/2020/11/23/s
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>관측값 즉, 지상기준점과 측정점의 차이에 대해 CE 및 LE 결과를 내기 위해 구현을 하게 되었고 참고자료를 바탕으로 정리하였습니다.</p><p>소스 코드는 <a href="https://hgko1207.github.io/2020/11/23/satellite-ce-le/">CE, LE 계산</a> 사이트에 있습니다.</p><h2 id="cecircular-error"><a class="markdownIt-Anchor" href="#cecircular-error"></a> CE(Circular Error)</h2><ul><li>X, Y 축의 값에 대한 2차원 오차를 측정합니다.</li><li>원형오차라고 부르며, CE 50, CE 90, CE 95 등의 형식으로 표현합니다.</li><li>예) CE90 5m는 오차들이 실제 값에서 5m 반경 안에 90% 있음을 나타냄.</li></ul><h3 id="ce-90-계산"><a class="markdownIt-Anchor" href="#ce-90-계산"></a> CE 90 계산</h3><h4 id="1-관측값-평균이-0일-경우"><a class="markdownIt-Anchor" href="#1-관측값-평균이-0일-경우"></a> 1) 관측값 평균이 0일 경우</h4><ul><li>CE_XX = R * 𝜎𝑚𝑎𝑥</li></ul><ol><li>2x2 공분산 행렬을 계산하고, 공분산 행렬에 대해 고유값(Eigenvalue) 계산</li><li>최소, 최대 고유값에 대해 제곱근으로 𝜎𝑚𝑖𝑛, 𝜎𝑚𝑎𝑥 값을 구함<ul><li>예) MATLAB은 eig(A) 함수를 사용</li></ul></li><li>r = 𝜎𝑚𝑖𝑛/𝜎𝑚𝑎𝑥, p=90/100 두 개의 값과 아래 표의 값을 통해 선형 보간하여 확률 계수 R을 구함<ul><li>예) r = 0.509, p = 0.9 일 때, R = 0.041/0.05 * 1.7371 + 0.009/0.05 * 1.7621 = 1.7416</li></ul></li><li>확률 계수와 𝜎𝑚𝑎𝑥를 곱함</li></ol><p><img src="/images/satellite/cele/ce.png" alt="" /></p><h4 id="2-관측값-평균이-0이-아닐-경우"><a class="markdownIt-Anchor" href="#2-관측값-평균이-0이-아닐-경우"></a> 2) 관측값 평균이 0이 아닐 경우</h4><p><img src="/images/satellite/cele/size.png" alt="" /></p><ol><li>X, Y 축에 대해 각각 공분산 값을 구하고 2x2 공분산 행렬을 계산</li><li>i 수만큼 위의 수식으로 2x1(X, Y)의 Si 를 계산</li><li>Si 의 크기를 가장 작은 것부터 가장 큰 것 순으로 정렬(크기는 아래 수식과 같음)</li></ol><p><img src="/images/satellite/cele/si.png" alt="" /></p><ol start="4"><li>RExx는 xx% 가장 큰 크기, RE*xx는 다음으로 큰 크기를 지정.</li><li>CE_XX 계산은 아래 수식으로 계산.</li></ol><p><img src="/images/satellite/cele/ce_xx.png" alt="" /></p><h2 id="lelinear-error"><a class="markdownIt-Anchor" href="#lelinear-error"></a> LE(Linear Error)</h2><ul><li>Z축(고도)에 대한 오차를 측정합니다.</li><li>지형의 수직 정확도를 측정합니다.(TIN, DEM, DSM 등)</li><li>선형오차라고 부르며, LE 50, LE 90, LE 95 등의 형식으로 표현합니다.</li></ul><h3 id="le-90-계산"><a class="markdownIt-Anchor" href="#le-90-계산"></a> LE 90 계산</h3><h4 id="1-관측값-평균이-0일-경우-2"><a class="markdownIt-Anchor" href="#1-관측값-평균이-0일-경우-2"></a> 1) 관측값 평균이 0일 경우</h4><ul><li>LE_XX = P(확률계수) * 𝜎𝑧 (표준편차)</li></ul><ol><li>관측값에 대한 표준편차를 구함</li><li>다음의 표에서 p=90/100(0.90) 에 대한 확률 계수인 1.6449를 구함</li><li>표준편차와 확률 계수를 곱함</li></ol><ul><li>LE_90 = 1.6449 * (표준편차)</li></ul><p><img src="/images/satellite/cele/le.png" alt="" /></p><h4 id="2-관측값-평균이-0이-아닐-경우-2"><a class="markdownIt-Anchor" href="#2-관측값-평균이-0이-아닐-경우-2"></a> 2) 관측값 평균이 0이 아닐 경우</h4><p><img src="/images/satellite/cele/le_1.png" alt="" /></p><ol><li>기준점과 측정점을 통해 표준편차와 평균을 구함</li><li>위의 식(누적분포함수)에서 p 값을 계산</li><li>p 값에 대해 오차 역함수(Inverse Error Function)을 구함</li><li>다음의 식을 통해 LE를 계산</li></ol><p><img src="/images/satellite/cele/le_2.png" alt="" /></p><h2 id="참고내용"><a class="markdownIt-Anchor" href="#참고내용"></a> 참고내용</h2><h3 id="1-분산variance"><a class="markdownIt-Anchor" href="#1-분산variance"></a> 1) 분산(Variance)</h3><ul><li>관측값에 대한 분산</li></ul><p><img src="/images/satellite/cele/variance.png" alt="" /></p><h3 id="2-공분산covariance"><a class="markdownIt-Anchor" href="#2-공분산covariance"></a> 2) 공분산(Covariance)</h3><ul><li>관측값에 대한 공분산</li></ul><p><img src="/images/satellite/cele/cov.png" alt="" /></p><h3 id="3-공분산-행렬"><a class="markdownIt-Anchor" href="#3-공분산-행렬"></a> 3) 공분산 행렬</h3><ul><li>두 개의 확률 변수의 공분산 행렬은 각 변수 쌍에 대해 계산된 공분산 값으로 구성된 행렬</li></ul><p><img src="/images/satellite/cele/cov_matrix.png" alt="" /></p><h3 id="4-표준편차standard-deviation"><a class="markdownIt-Anchor" href="#4-표준편차standard-deviation"></a> 4) 표준편차(Standard Deviation)</h3><ul><li>관측값에 대한 표준편차</li></ul><p><img src="/images/satellite/cele/stdev.png" alt="" /></p><h2 id="참고자료"><a class="markdownIt-Anchor" href="#참고자료"></a> 참고자료</h2><ul><li>Computation of scalar accuracy metrics LE, CE, and SE as both predictive and samplebased statistics (NGA)</li><li>Geopositional Statistical Methods (NASA)</li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/06/17/satellite-ce-le/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DEM</title>
      <link>http://hgko1207.github.io/2022/06/15/satellite-dem/</link>
      <guid>http://hgko1207.github.io/2022/06/15/satellite-dem/</guid>
      <pubDate>Tue, 14 Jun 2022 15:39:52 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;digital-elevation-models&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#digital-elevation-models&quot;&gt;&lt;/a&gt; Digital Elevation Models&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="digital-elevation-models"><a class="markdownIt-Anchor" href="#digital-elevation-models"></a> Digital Elevation Models</h1><ul><li>수치표고모형(DEM)은 수치지형 또는 수심측량 데이터에 관한 일반적인 용어로서, 일반적으로 <span style="color:red"><strong>식생과 인공지물을 포함하지 않는 지형만의 높이를 의미</strong></span>하며, 강, 호수의 DEM 높이 값은 수표면을 나타냅니다.</li><li><strong>DEM</strong>은 일반적으로 **DTM(Digital Terrain Model)**과 비슷한 의미로 사용됩니다.</li><li>**USGS(U.S. Geological Survey)**의 정의 : <strong>DEM</strong>은 보통 높이의 기준면으로부터 측정한 z값을 사용하여 x, y 방향으로 일정한 간격의 지형에 대한 높이 값을 수치지도 형식으로 표현한 것 입니다.</li><li>이 정의는 **NIMA(National Imagery and Mapping Agency)**에서 작성한 **DTED(Digital Terrain Elevation Data)**의 정의와 유사합니다.</li></ul><p><strong>DEM</strong>의 기하학적 구조는 규칙격자망(Regular Grid, Elevation Matrix)과 불규칙삼각망(Triangular Irregular Network, TIN)이 있으며 각각 장단점을 가지고 있습니다.</p><img width="90%" src="/images/dem/1.png" alt="" title="" ><h2 id="dtmdigital-terrain-model"><a class="markdownIt-Anchor" href="#dtmdigital-terrain-model"></a> DTM(Digital Terrain Model)</h2><ul><li><strong>DEM</strong>과 유사한 뜻으로 사용되며, 동일한 간격의 z값을 가집니다. <strong>DTM</strong>은 <strong>DEM</strong>과 비슷하지만 지형을 좀 더 정확하게 묘사하기 위해 불규칙적으로 간격을 갖는 <span style="color:red"><strong>불연속성(breakline)이 존재</strong></span> 한다는 것이 다릅니다.</li><li><strong>DTM</strong>의 최종적인 결과는 특정 지형을 명확히 묘사하는 것이며, 등고선은 지형의 실제 형태에 가깝도록 <strong>DTM</strong>으로부터 생성하곤 합니다.</li></ul><h2 id="dsmdigital-surface-mode"><a class="markdownIt-Anchor" href="#dsmdigital-surface-mode"></a> DSM(Digital Surface Mode)</h2><ul><li><strong>DEM</strong>에 식생, 건물, 도로 등 자연 및 인공 지형지물의 표고 값이 포함된 것을 나타냅니다.</li><li>원거리통신관리, 산림관리, 3D 시뮬레이션 등에 이용됩니다.</li></ul><h2 id="규칙격자망"><a class="markdownIt-Anchor" href="#규칙격자망"></a> 규칙격자망</h2><ul><li>일정 크기 사각형 격자지점의 표고행렬로 지형기복 변화를 표현하는 방법입니다.</li><li>규칙적인 격자의 교차점에서의 고도를 저장하며, 보통 불규칙한 기준점 집합으로부터 정교한 보간 기법을 거쳐 계산됩니다.</li><li>일반적으로 격자의 크기는 기준점 사이의 거리보다 더 작으며, 불연속선이나 높이를 나타내는 점에 의해 표현된 지질학적 정보도 규칙적인 격자로 형성됩니다.<br /><br/></li><li><strong>장점</strong><ul><li>고도만 저장되므로 자료의 구조가 간단함</li><li>등고선, 경사각, 경사 방향 계산, 음영이나 분지를 표현하는데 유용</li><li>행렬 처리를 적용함에 있어서 계산 시간이 빠름</li></ul></li><li><strong>단점</strong><ul><li>복잡한 지형의 표현 시 격자 간격을 좁게 해야 함</li><li>표면을 표현하기 위해 높은 밀도의 점들을 저장해야 함</li><li>규칙적인 격자에서 불연속선을 표현하는 데 따르는 문제점</li></ul></li></ul><h2 id="불규칙삼각망tin"><a class="markdownIt-Anchor" href="#불규칙삼각망tin"></a> 불규칙삼각망(TIN)</h2><ul><li>불규칙삼각망은 원래의 자료 점들을 Delaunay 삼각망을 활용하여 불규칙한 형태의 연속적인 삼각형을 연결시켜 지형의 기복을 표현합니다.<br /><br/></li><li><strong>장점</strong><ul><li>기복이 심한 지역에서 효과적으로 사용될 수 있음</li><li>자료의 중복을 줄일 수 있으므로 지형을 효과적으로 표현</li><li>최소한의 표고점을 이용하여 능선이나 곡선과 같은 지형 구조 특성을 반영한 보간을 할 수 있다는 점</li></ul></li><li><strong>단점</strong><ul><li>점 들의 불규칙한 구조로 인해 각각의 점들을 저장하려면 대상에 대한 더 많은 정보가 필요함</li><li>등고선, 능선, 합수선, 인공구조물 등을 가로질러 TIN이 구성되면 실제 지형 특성을 반영하기 못함</li><li>수치등고선으로 TIN을 구성할 때 동일 등고선 상의 꼭지점들 안으로 TIN이 구성되면 그 TIN 내부는 평지로 표현이 됨</li></ul></li></ul><h2 id="원천-자료에-따른-dem-구축-방법-별-특성"><a class="markdownIt-Anchor" href="#원천-자료에-따른-dem-구축-방법-별-특성"></a> 원천 자료에 따른 DEM 구축 방법 별 특성</h2><table><thead><tr><th style="text-align:center">구분</th><th style="text-align:center">소요 장비</th><th style="text-align:center">경제성</th><th style="text-align:center">정확성</th><th style="text-align:center">현시성</th></tr></thead><tbody><tr><td style="text-align:center">지상 측량</td><td style="text-align:center">Total Station, GPS</td><td style="text-align:center">시간경비과다</td><td style="text-align:center">우수</td><td style="text-align:center">우수</td></tr><tr><td style="text-align:center">종이 지도</td><td style="text-align:center">Digitizer</td><td style="text-align:center">수동, 시간 과다</td><td style="text-align:center">지도에 달림</td><td style="text-align:center">지도에 달림</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Scanner GEOVEC</td><td style="text-align:center">자동, 기술적 애로</td><td style="text-align:center">지도에 달림</td><td style="text-align:center">지도에 달림</td></tr><tr><td style="text-align:center">수치 지도</td><td style="text-align:center">MAP 지도 S/W</td><td style="text-align:center">우수</td><td style="text-align:center">지도에 달림</td><td style="text-align:center">지도에 달림</td></tr><tr><td style="text-align:center">기존 사진(사진 측량)</td><td style="text-align:center">해석도화기</td><td style="text-align:center">양호</td><td style="text-align:center">우수</td><td style="text-align:center">사진에 달림</td></tr><tr><td style="text-align:center">신규 촬영(사진 측량)</td><td style="text-align:center">수치도화기</td><td style="text-align:center">촬영비 추가</td><td style="text-align:center">우수</td><td style="text-align:center">우수</td></tr><tr><td style="text-align:center">원격 탐사</td><td style="text-align:center">Image Processor</td><td style="text-align:center">우수</td><td style="text-align:center">개선 중</td><td style="text-align:center">우수</td></tr><tr><td style="text-align:center">레이저 측량</td><td style="text-align:center">레이저 고도계</td><td style="text-align:center">우수</td><td style="text-align:center">우수</td><td style="text-align:center">우수</td></tr></tbody></table><h2 id="dem-추출-방법-수치-지도-활용"><a class="markdownIt-Anchor" href="#dem-추출-방법-수치-지도-활용"></a> DEM 추출 방법 – 수치 지도 활용</h2><ul><li>이미 제작된 수치지도를 이용하여 DEM을 구축하는 방법으로 수치지도의 등고선 및 고도점의 좌표를 추출하여 DEM을 생성합니다.</li><li>DEM 생성 시 고려해야 할 사항<ul><li>수치지도 제작 시기가 오래되었을 경우 현재의 지표 및 지물의 정보가 부족</li><li>인공지물 밀집 지역일 경우 고도 추출점이 표기되어 있지 않을 수 있음</li></ul></li><li>따라서, 수치지도로 DEM을 작성할 때에는 항공사진 혹은 보다 대축척의 수치지도, 지상측량 등의 보조 자료를 이용하여 등고선 및 고도점을 보완해야 합니다.</li><li>등고선 데이터는 제한된 범위의 정확도를 가진 DEM을 구축합니다.<ul><li>기대할 수 있는 최대의 정확도는 등고선 간격의 1/2 정보</li></ul></li><li>등고선으로부터 DEM을 생성하는 것은 대부분의 상용 소프트웨어(PCI, Erdas Imagine)등에서 지원합니다.</li></ul><h2 id="dem-추출-방법-항공-사진-측량"><a class="markdownIt-Anchor" href="#dem-추출-방법-항공-사진-측량"></a> DEM 추출 방법 – 항공 사진 측량</h2><ul><li>항공사진(또는 항공영상)을 이용한 DEM 구축 방법은 현재 실용화된 방법 중 가장 정확하고 최신의 수치 고도 자료를 얻을 수 있습니다.<ul><li>항공사진측량용 카메라로 촬영된 입체 항공사진을 이용하여 해석도화기와 도화사의 작업을 통해 수동으로 DEM을 추출하는 방법</li><li>항공사진을 스캐닝하거나 항공사진 측량용 디지털카메라로 획득한 항공 영상을 이용하여 수치도화기에서 자동으로 DEM을 추출하는 방법</li></ul></li><li>항공사진(또는 항공영상)을 이용하면 지형은 물론이고 지물에 대한 DEM 구축이 가능합니다.</li></ul><h2 id="dem-추출-방법-위성-영상"><a class="markdownIt-Anchor" href="#dem-추출-방법-위성-영상"></a> DEM 추출 방법 – 위성 영상</h2><ul><li>위성영상의 해상력이 높아지고 이동한 위치에서 반복 촬영한 동일 지점의 영상을 획득할 수 있게 됨으로써 위성영상으로부터 DEM 구축이 가능해집니다.</li><li>위성영상은 항공사진에 비하여 포함면적이 넓고, 주기적으로 영상을 얻을 수 있으므로 최신의 정보를 획득하는데 소요되는 시간과 비용을 절감할 수 있습니다.</li><li>위성영상에 항공사진의 수치사진측량기법을 적용하여 자동으로 DEM을 생성할 수 있습니다.</li></ul><h2 id="dem의-정확도"><a class="markdownIt-Anchor" href="#dem의-정확도"></a> DEM의 정확도</h2><ul><li>수치표고모델의 정확도는 선형적으로 보간 된 DEM과 지도나 GPS 자료와 같은 참조자료와의 비교를 통한 RMSE(root-mean square error)값을 이용합니다.</li><li>DEM의 정확도는 데이터의 스케일과 공간 해상도, 격자 간격에 영향을 많이 받습니다.<ul><li>DEM의 수평정확도는 표고행렬의 수평간격에 영향을 많이 받음</li><li>DEM의 수직정확도는 원시 데이터의 질과 공간 해상도, 자료의 수집과 처리과정에 많은 영향을 받음</li></ul></li><li>등고선으로부터 구축된 DEM의 평가 기준(Carrara, 1997)<ul><li>수치 지도의 등고선 근처에 배치된 격자점의 표고는 그 등고선의 표고와 일치하거나 큰 차이가 없어야 함</li><li>두 등고선으로 포위된 영역 내에 있는 격자점의 표고는 두 등고선 표고 사이의 표고이며, 두 등고선 사이에서 선형 변화함</li><li>경사 변화가 완만한 지역에서도 DEM은 지형을 현실적으로 묘사하여야 함</li><li>일정 규모이상의 인공 지물에 대한 정보를 DEM으로부터 추출할 수 있어야 함</li></ul></li></ul><h2 id="dem-자동-제작-방법"><a class="markdownIt-Anchor" href="#dem-자동-제작-방법"></a> DEM 자동 제작 방법</h2><img width="100%" src="/images/dem/2.png" alt="" title="" ><img width="100%" src="/images/dem/3.png" alt="" title="" >]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/06/15/satellite-dem/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DPPDB</title>
      <link>http://hgko1207.github.io/2022/06/14/satellite-dppdb/</link>
      <guid>http://hgko1207.github.io/2022/06/14/satellite-dppdb/</guid>
      <pubDate>Tue, 14 Jun 2022 12:36:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;digital-point-positioning-database&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#digital-point-positioning-database&quot;&gt;&lt;/a&gt; Digital Point Posit
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="digital-point-positioning-database"><a class="markdownIt-Anchor" href="#digital-point-positioning-database"></a> Digital Point Positioning Database</h1><p><strong>네이버 백과사전</strong></p><blockquote><p>정밀영상위치제공 지형정보로서 미(美) 국가영상지도국(NIMA)이 1970년대 베트남전 중 미 공군의 B-52와 F-111에서 정밀항법 유도무기를 사용하기 위해 개발했다가 1995년 IT 발달에 따라 디지털로 전환시켰습니다. 3차원 지형데이터에 각종 건물 등 지상 구조물 데이터를 통합해 매우 정밀한 위치정보를 제공합니다. 이 데이터와 미군용 GPS를 결합하면 수십km 밖에서도 미사일 등 유도 무기를 1m의 오차로 공격할 수 있습니다.</p></blockquote><p>DPPDB는 <span style="color:#2e75b6"><strong>스테레오 이미지 쌍 및 관련 보조 데이터의 모음</strong></span>으로, 이미지에서 식별할 수 있는 모든 점 또는 특징에 대한 정확한 위치 데이터를 신속하게 확인할 수 있는 기능을 제공합니다. 이 데이터는 스테레오 이미지를 분할, 방사 보정, 합리적인 다항식 구성 및 압축 등의 추가 처리를 함으로써 얻을 수 있습니다. 일반적으로 1도 면적(60 x 60 NM)을 커버하며 NITF 파일로 제공됩니다.</p><p>참고로 DPPDB는 NITF(National Imagery Transmission Format ) 2.0 사양의 제품입니다.</p><p>DPPDB 제품은 세 가지 주요 구성 요소로 구성된 디지털 제품입니다.</p><p><strong>1. imagery support data</strong> : Master Product File(MPF)<br /><strong>2. a map graphic for reference(참고 용 지도)</strong> : CADRG 프레임 파일<br /><strong>3. stereo imagery(입체 영상)</strong> : 전체 해상도 및 Overview 이미지 파일</p><h2 id="nitf-란"><a class="markdownIt-Anchor" href="#nitf-란"></a> NITF 란</h2><p><span style="color:#2e75b6"><strong>National Imagery Transmission Format Standard</strong></span> (국가 영상정보 전송 포맷 표준)</p><p>NITF는 공중에서 영상을 획득하는 플랫폼들로부터 얻어진 원본 영상을 기반으로 <strong>영상, 서브-영상(sub-images), 그래픽, 심볼, 텍스트 뿐 아니라 영상과 관련된 정보</strong>를 담을 수 있는 하나의 패키지(package)로서 2차 디지털 영상(secondary digital imagery)의 배포 또는 유통을 지원하기 위한 포맷입니다. 따라서 단순히 영상 자체만을 저장하는 일반 영상 포맷과 차별화됩니다.</p><p>NITF에 대한 개발은 1987년 미국 정부에 의하여 시작되었으며, 1991년 미국 국방부(DoD) 내에서 영상 파일에 대한 표준인 MIL-STD-2500B로 지정되었으며, 현재 MIL-STD-2500C로 발전되었습니다. NITF는 영상유통포맷의 최초 개발로 1989년 NITF 1.1 발표 이후, 1991년 국방부 표준으로 지정되면서 이름을 NITFS(National Imagery Transmission Format Standard)로 개명하게 되었습니다.</p><h2 id="dppdb-구조"><a class="markdownIt-Anchor" href="#dppdb-구조"></a> DPPDB 구조</h2><p>DPPDB 제품 파일은 아래 그림과 같이 순차적으로 배열됩니다. 첫 번째 파일은 MPF(Master Product File)이며 DPPDB 및 참조 그래픽에 대한 정보를 제공하는 수많은 서브 헤더 파일이 있습니다. MPF 다음에는 참조 그래픽 프레임을 구성하는 파일이 있습니다. DPPDB에 포함 된 나머지 파일은 이미지 파일입니다.</p><img width="90%" src="/images/dppdb/1.png" alt="" title="" ><h3 id="1-mpf-master-product-file"><a class="markdownIt-Anchor" href="#1-mpf-master-product-file"></a> 1) MPF (Master Product File)</h3><p>정확도, 세그먼트간 이격점 데이터, 진단점, 불량 지역 정보, 풋 프린트 및 이미지 파일과 참조 그래픽에 대한 정보와 같은 보조 데이터를 포함하고 있습니다. 그림은 기본 구성 요소만 보여주는 MPF의 파일 구조입니다.</p><img width="80%" src="/images/dppdb/2.png" alt="" title="" ><h3 id="2-reference-graphic-files"><a class="markdownIt-Anchor" href="#2-reference-graphic-files"></a> 2) Reference Graphic files</h3><p>MPF 다음으로 구성된 그래픽 파일은 사용자가 지정한 영역에 대한 디지털 맵을 제공합니다. 다양한 벡터 오버레이를 표시하고 대상의 대략적인 위치를 식별하기 위해 사용됩니다. DPPDB 제품의 사각형보다 약간 큰 영역을 포함하는 8 비트 컬러 래스터 이미지입니다. 그래픽의 소스는 CADRG(Compressed ARC Digitized Raster Graphics) 데이터입니다.</p><img width="80%" src="/images/dppdb/3.png" alt="" title="" ><h3 id="3-image-files"><a class="markdownIt-Anchor" href="#3-image-files"></a> 3) Image Files</h3><p>이미지 파일은 전체 해상도 및 overview(전체 해상도 이미지의 1/8x 또는 1/4x 축소 된 이미지) 세그먼트 이미지 세트로 구성되어 있습니다.<br />각 전체 해상도 및 overview 이미지 파일에는 해당 이미지에 대한 정보 및 함수 계수도 포함되어 있습니다.<br />이미지 파일은 4 개의 그룹 (왼쪽과 오른쪽의 전체 해상도 및 overview 이미지)으로 구성되며 각 그룹은 단일 DPPDB 모델에 포함됩니다.<br />아래 그림은 전체 해상도 및 overview 이미지 세그먼트의 파일 구조를 보여줍니다.</p><img width="80%" src="/images/dppdb/4.png" alt="DPPDB Overview Segment Image File" title="DPPDB Overview Segment Image File" ><img width="80%" src="/images/dppdb/5.png" alt="DPPDB Full Resolution Segment Image File" title="DPPDB Full Resolution Segment Image File" ><h2 id="dppdb-생성"><a class="markdownIt-Anchor" href="#dppdb-생성"></a> DPPDB 생성</h2><p>NITF 영상 및 위치결정자료 생성 절차를 설명합니다.</p><img width="100%" src="/images/dppdb/6.png" alt="" title="" ><h4 id="세그먼트-분할"><a class="markdownIt-Anchor" href="#세그먼트-분할"></a> 세그먼트 분할</h4><p>입체시 영상에 대한 세그먼트 이미지를 분할합니다.</p><h4 id="불량지역-생성"><a class="markdownIt-Anchor" href="#불량지역-생성"></a> 불량지역 생성</h4><p>불량지역 생성 기능을 통해 영상에서 유효하지 않는 영역을 식별 또는 추가합니다.<br />불량지역은 구름으로 관측이 어려운 지역이나, 바다, 호수와 같이 수계지역을 의미합니다.</p><h4 id="정확도-평가"><a class="markdownIt-Anchor" href="#정확도-평가"></a> 정확도 평가</h4><p>각 세그먼트간 측정오차, 절대정확도, 상대정확도를 계산합니다.</p><h4 id="세그먼트간-이격점-생성"><a class="markdownIt-Anchor" href="#세그먼트간-이격점-생성"></a> 세그먼트간 이격점 생성</h4><p>각 세그먼트 간 중복지역에서 특징점을 추출하고, 매칭을 통해 자동으로 점을 생성합니다.</p><h2 id="참고문헌"><a class="markdownIt-Anchor" href="#참고문헌"></a> 참고문헌</h2><p><strong>미국 군사규격서</strong></p><ol><li>MIL-PRF-89034 : Digital Point Positioning Data Base(DPPDB)</li><li>MIL-STD-2500A: National Imagery Transmission Format(NITF) for NITFS</li><li>MIL-STD-2301A : Computer Graphics Metafile(CGM) Implementation Standard for the National Imagery Transmission Format Standard(NITFS)</li><li>MIL-PRF-89038 : Compressed ARC Digitized Raster Graphics(CARRG)</li><li>MIL-PRF-89041: Controlled Image Base(CIB)</li></ol><p><strong>NITF</strong></p><ol><li>NITFS : <a href="https://terms.naver.com/entry.nhn?docId=3480012&amp;cid=58439&amp;categoryId=58439" target="_blank" rel="noopener">https://terms.naver.com/entry.nhn?docId=3480012&amp;cid=58439&amp;categoryId=58439</a></li><li>NITF/NSIF Background : <a href="https://www.harrisgeospatial.com/docs/BackgroundNITFNSIFFormat.html#Main" target="_blank" rel="noopener">https://www.harrisgeospatial.com/docs/BackgroundNITFNSIFFormat.html#Main</a></li></ol>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/06/14/satellite-dppdb/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CSM</title>
      <link>http://hgko1207.github.io/2022/06/13/satellite-csm/</link>
      <guid>http://hgko1207.github.io/2022/06/13/satellite-csm/</guid>
      <pubDate>Mon, 13 Jun 2022 11:01:13 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;community-sensor-modelcsm&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#community-sensor-modelcsm&quot;&gt;&lt;/a&gt; Community Sensor Model(CSM)&lt;/h1&gt;
&lt;p&gt;N
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="community-sensor-modelcsm"><a class="markdownIt-Anchor" href="#community-sensor-modelcsm"></a> Community Sensor Model(CSM)</h1><p>NGA(국가지리정보국, National Geospatial Intelligence Agency)에서는 센서 모델을 동일한 방법으로 접근할 필요성에 따라 CSM(Community Sensor Model)을 개발하여 통일된 인터페이스를 제공합니다.</p><p>CSM은 현재 운용되고 있거나 추후 운용이 예상되는 <span style="color:#2e75b6"><strong>위성 센서의 모델, 알고리즘, 소프트웨어에 대한 개발, 시험, 평가를 지원하는 플러그인 소프트웨어 라이브러리</strong></span>입니다.</p><p>CSM은 WGS84 타원체의 ECEF(Earth Centered Earth Fixed) 좌표계를 사용하고 있습니다. 따라서 모든 함수에서 지상 좌표의 입력과 출력 값은 ECEF 좌표로 구성해야 합니다.</p><p><strong>CSM 사용 소프트웨어</strong></p><ul><li>ENVI, ERDAS, SOCET GXP 등</li></ul><h2 id="csm-장단점"><a class="markdownIt-Anchor" href="#csm-장단점"></a> CSM 장단점</h2><h3 id="장점"><a class="markdownIt-Anchor" href="#장점"></a> 장점</h3><ul><li>센서모델링을 수행하기 위한 소프트웨어 개발 시 모델링에 사용되는 행렬과 반복 알고리즘만 구현하면 되므로 <span style="color:#2e75b6"><strong>소프트웨어의 개발비용 절감효과가 큽니다</strong>.</span></li><li>새로운 센서나 모델들이 개발되면, 센서모델에 대한 플러그인만 개발하여 배포하고 응용 소프트웨어에서 호출하여 모델링을 수행하므로 <span style="color:#2e75b6"><strong>센서모델의 확장성이 뛰어납니다</strong>.</span></li></ul><h3 id="단점"><a class="markdownIt-Anchor" href="#단점"></a> 단점</h3><ul><li>ECEF 좌표계 사용을 위해 경우에 따라 중복된 좌표 변환 작업을 수행하게 되어 효율성이 다소 저하됩니다.</li></ul><h2 id="csm-context-diagram"><a class="markdownIt-Anchor" href="#csm-context-diagram"></a> CSM Context Diagram</h2><img width="80%" src="/images/satellite/csm.png" alt="" title="" ><h2 id="csm-api"><a class="markdownIt-Anchor" href="#csm-api"></a> CSM API</h2><p>CSM은 CSMPlugin 클래스와 CSMSensorModel 클래스로 구분됩니다.</p><h3 id="csmplugin-클래스"><a class="markdownIt-Anchor" href="#csmplugin-클래스"></a> CSMPlugin 클래스</h3><ul><li>플러그인 제조사, 배포 일자와 같은 기본적인 정보를 제공합니다.</li><li>센서 모델 선택, Image Support Data(ISD) 처리, 센서 모델 생성과 같은 기능을 하는 함수들로 구성됩니다.</li></ul><h3 id="smsensormodel-클래스"><a class="markdownIt-Anchor" href="#smsensormodel-클래스"></a> SMSensorModel 클래스</h3><ul><li>영상좌표에서 지상좌표의 상호간 변환, 편미분, 공분산, 파라미터 설정 등 사진 측량에 필요한 함수들로 구성됩니다.</li></ul><h2 id="sensor-model"><a class="markdownIt-Anchor" href="#sensor-model"></a> Sensor Model</h2><img width="95%" src="/images/satellite/sensorModel.png" alt="" title="" ><h2 id="download"><a class="markdownIt-Anchor" href="#download"></a> Download</h2><p>Github Page - Community Sensor Model API</p><p><a href="https://github.com/USGS-Astrogeology/csm/" target="_blank" rel="noopener"><img src="/images/satellite/usgs-csm.png" alt="" /></a></p><h2 id="build"><a class="markdownIt-Anchor" href="#build"></a> Build</h2><ol><li>다운로드가 완료되면 압축을 풀어줍니다.</li><li>빌드에 필요한 <a href="https://cmake.org/download/" target="_blank" rel="noopener">CMake</a>를 설치합니다.</li><li>설치가 완료되면 CMake gui를 실행합니다.</li><li>빌드를 하기 전 CSM 폴더 안에 build 폴더를 생성합니다.</li><li>CMake gui에서 Source 및 Build(생성한 build 폴더 경로) 경로를 입력하고 <strong>Configure</strong> 버튼을 클릭합니다.</li><li>오류 없이 설정이 완료되면 <strong>Generate</strong> 버튼을 클릭합니다.</li><li>CMake Build가 완료되면 다음과 같이 프로젝트가 생성됩니다.</li></ol><img width="75%" src="/images/satellite/csm-build.png" alt="" title="" ><ol start="8"><li>프로젝트를 실행하여 빌드를 실행하면 csmapi.dll, csmapi.lib 파일이 생성됩니다.</li></ol><p>CSM 은 공통 인터페이스를 제공하기 때문에 csmapi.dll, csmapi.lib, 헤더 파일을 참조 및 로드하여 위성에 대한 센서 모델을 구현합니다. 기본적으로 Plugin, RasterGM을 상속받아 구현합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/06/13/satellite-csm/#disqus_thread</comments>
    </item>
    
    <item>
      <title>개발 시 도움이 될 도구들</title>
      <link>http://hgko1207.github.io/2022/06/11/util-2/</link>
      <guid>http://hgko1207.github.io/2022/06/11/util-2/</guid>
      <pubDate>Sat, 11 Jun 2022 13:31:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;1-댓글&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-댓글&quot;&gt;&lt;/a&gt; 1. 댓글&lt;/h2&gt;
&lt;p&gt;게시판, 커뮤니티, 블로고 등 컨텐츠 위주의 서비스면 댓글은 필수입니다. 댓글 기능이 메인은 아니지만 필요한 기능 중
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="1-댓글"><a class="markdownIt-Anchor" href="#1-댓글"></a> 1. 댓글</h2><p>게시판, 커뮤니티, 블로고 등 컨텐츠 위주의 서비스면 댓글은 필수입니다. 댓글 기능이 메인은 아니지만 필요한 기능 중 하나이며, 구현하기에는 시간도 많이 듭니다. 그래서 다음 서비스들로 대체해서 사용합니다.</p><h3 id="disqus"><a class="markdownIt-Anchor" href="#disqus"></a> Disqus</h3><p><strong>Disqus</strong>(<a href="https://disqus.com/" target="_blank" rel="noopener">https://disqus.com/</a>)는 소셜 댓글 서비스입니다. 자바스크립트 코드만 사이트에 등록하면 위젯 형태로 서비스에서 바로 사용이 가능한 댓글 전문 서비스입니다.</p><h3 id="livere"><a class="markdownIt-Anchor" href="#livere"></a> LiveRe</h3><p><strong>LiveRe</strong>(<a href="https://www.livere.com/" target="_blank" rel="noopener">https://www.livere.com/</a>)는 국내에서 만든 소셜 댓글 서비스입니다. 별도의 가입이 필요하지 않고, SNS(카카오톡, 네이버, 페이스북 등) 계정이 있으면 언제든 댓글을 남길 수 있는 편의성이 있습니다.</p><h3 id="utterances"><a class="markdownIt-Anchor" href="#utterances"></a> Utterances</h3><p><strong>Utterances</strong>(<a href="https://rtterances.es/" target="_blank" rel="noopener">https://rtterances.es/</a>)는 깃허브 댓글입니다. 깃허브의 이슈 기능을 이용했기 때문에 무료로 사용 가능합니다. 깃허브의 마크다운 에디터를 그래도 사용하고 있어 댓글을 마크다운으로 작성할 수 있다는 장점이 있습니다.</p><h2 id="2-외부-서비스-연동"><a class="markdownIt-Anchor" href="#2-외부-서비스-연동"></a> 2. 외부 서비스 연동</h2><p>SNS 연동 서비스들입니다.</p><h3 id="zapier"><a class="markdownIt-Anchor" href="#zapier"></a> Zapier</h3><p><strong>Zapier</strong>(<a href="https://zapier.com/" target="_blank" rel="noopener">https://zapier.com/</a>)는 수많은 클라우드와 SNS 서비스들의 오픈 API를 이용하여 서로 간의 연동을 지원하는 서비스입니다.</p><h3 id="ifttt"><a class="markdownIt-Anchor" href="#ifttt"></a> IFTTT</h3><p><strong>IFTTT</strong>(<a href="https://ifttt.com/" target="_blank" rel="noopener">https://ifttt.com/</a>)는 IF This Then That의 약자로, 만약 A를 하면 B를 하라는 의미로 클라우드와 SNS 연동을 지원하는 서비스입니다.</p><h2 id="3-방문자-분석"><a class="markdownIt-Anchor" href="#3-방문자-분석"></a> 3. 방문자 분석</h2><p>사이트 운영에 필요한 여러 정보들을 분석하는 기능을 무료로 지원하는 도구들입니다.</p><h3 id="구글-애널리틱스"><a class="markdownIt-Anchor" href="#구글-애널리틱스"></a> 구글 애널리틱스</h3><p>구글 애널리틱스는 구글에서 지원하는 사이트 분석 도구입니다. 국내에도 많은 자료가 공유되어 있어 사용하기 편하고 다른 구글 서비스들과의 연동도 잘 되어 있습니다.</p><h2 id="4-cdn"><a class="markdownIt-Anchor" href="#4-cdn"></a> 4. CDN</h2><p>CDN은 Content Delivery Network의 약자로 전 세계에 분산되어 있는 서버 네트워크입니다. 정적 콘텐츠라고 불리는 JS, CSS, 이미지 등을 전 세계에 퍼진 서버에 전달하여 사용자가 서비스에 접속할 때 가장 가까운 서버에서 가져가도록 지원하는 서비스입니다. CDN의 목적은 트래픽 분산을 위함입니다.</p><h3 id="클라우드플레어"><a class="markdownIt-Anchor" href="#클라우드플레어"></a> 클라우드플레어</h3><p><strong>클라우드플레어</strong>(<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">https://www.cloudflare.com/</a>)는 해외뿐만 아니라 국내에서도 가장 많이 사용되는 CDN 서비스입니다. 정적 파일들을 캐싱하여 제공하는 CDN의 기능은 무료로 사용할 수 있습니다.</p><h2 id="5-이메일-마케팅"><a class="markdownIt-Anchor" href="#5-이메일-마케팅"></a> 5. 이메일 마케팅</h2><p>뉴스레터와 같은 이메일 마케팅 기능을 지원하는 서비스입니다.</p><h3 id="mailchimp"><a class="markdownIt-Anchor" href="#mailchimp"></a> Mailchimp</h3><p><strong>Mailchimp</strong>(<a href="https://mailchimp.com/" target="_blank" rel="noopener">https://mailchimp.com/</a>)는 해외에서 서비스 중인 이메일 마케팅 서비스입니다. 회원 2000명에게 월 12000개의 메일을 무료로 보낼 수 있어 초기에 사용하기 좋습니다. 반응형을 고려한 뉴스레터나 구독자 관리, 통계 등의 기능을 지원합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/06/11/util-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>지리공간자료 정확도</title>
      <link>http://hgko1207.github.io/2022/06/11/satellite-accuracy/</link>
      <guid>http://hgko1207.github.io/2022/06/11/satellite-accuracy/</guid>
      <pubDate>Sat, 11 Jun 2022 13:29:25 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;지리공간자료-정확도의-형태&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#지리공간자료-정확도의-형태&quot;&gt;&lt;/a&gt; 지리공간자료 정확도의 형태&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spatial (position, geometry, t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="지리공간자료-정확도의-형태"><a class="markdownIt-Anchor" href="#지리공간자료-정확도의-형태"></a> 지리공간자료 정확도의 형태</h2><ul><li>Spatial (position, geometry, topology)</li><li>Attributional (correctness of attributes)</li><li>Spectral (band depth)</li><li>Temporal (appropriate date)</li><li>Radiometric (capture piece of electromagnetic spectrum)</li></ul><h2 id="지리공간자료"><a class="markdownIt-Anchor" href="#지리공간자료"></a> 지리공간자료</h2><ul><li>기하보정된 위성영상</li><li>정사영상(Orthoimagery)</li><li>DTM(Digital Terrain Model)</li><li>DEM(Digital Elevation Model)</li><li>DSM(Digital Surface Model)</li><li>TIN(Triangulated Irregular Network)</li></ul><h2 id="정확도accuracy"><a class="markdownIt-Anchor" href="#정확도accuracy"></a> 정확도(Accuracy)</h2><p>과학, 산업, 공업, 통계학 분야에서 재거나 계산된 양이 실제 값과 얼만큼 가까운지를 나타내는 기준이며, 관측의 정교성이나 균질성과는 무관합니다.</p><p>측정에 의해 얻은 최고 추정 값과 측정 된 수량의 &quot;참&quot;값에 대한 근접성입니다.</p><h2 id="위치-정확도position-accuracy"><a class="markdownIt-Anchor" href="#위치-정확도position-accuracy"></a> 위치 정확도(Position Accuracy)</h2><p>두 지리 공간 레이어 사이 또는 지리 공간 레이어와 현실 사이의 위치 차이를 나타내는 정량화 가능한 값 입니다.</p><h2 id="root-mean-square-errorrmse"><a class="markdownIt-Anchor" href="#root-mean-square-errorrmse"></a> Root Mean Square Error(RMSE)</h2><ul><li>평균 제곱근 편차(Root Mean Square Deviation; <strong>RMSD</strong>) 또는 평균 제곱근 오차(Root Mean Square Error; <strong>RMSE</strong>)는 추정 값 또는 모델이 예측한 값과 실제 환경에서 관찰되는 값의 차이를 다룰 때 흔히 사용하는 측도이다. 정밀도를 표현하는데 적합합니다. 각각의 차이 값은 잔차(residual)라고도 하며, 평균 제곱근 편차는 잔차들을 하나의 측도로 종합할 때 사용됩니다.</li><li>잔차 값 간의 분산을 통계적으로 측정 한 것 입니다.</li></ul><h2 id="standard-deviationstdev-표준-편차"><a class="markdownIt-Anchor" href="#standard-deviationstdev-표준-편차"></a> Standard Deviation(StDev) : 표준 편차</h2><ul><li>자료의 산포도를 나타내는 수치로, 분산의 양의 제곱근으로 정의됩다.</li></ul><h2 id="circular-errorce-원형-오차"><a class="markdownIt-Anchor" href="#circular-errorce-원형-오차"></a> Circular Error(CE) : 원형 오차</h2><ul><li>CE는 X, Y 모두에 대한 2차원 오차를 측정합니다.</li><li>CE90, CE95, CE99 형식으로 표현합니다.<ul><li>원형 분포에서 모든 오차가 n%를 초과하지 않는 반경 오차</li><li>예) CE 90 = 2미터인 경우 : 오차들이 반지름 2미터인 원 안에 있을 확률이 90%라는 것을 나타낸다.</li></ul></li></ul><h2 id="linear-errorle-선형-오차"><a class="markdownIt-Anchor" href="#linear-errorle-선형-오차"></a> Linear Error(LE) : 선형 오차</h2><ul><li>Z축(고도)에 대한 오차 측정을 합니다.</li><li>측정된 값과 실제 또는 알려진 값과의 차이를 계산합니다.</li><li>지형의 수직 정확도 측정(예: DEM 또는 TIN)</li><li>LE90, LE95, LE99 형식으로 표현합니다.<ul><li>예) LE 95 = 10m인 경우: 오차들이 10 미터 내에 있을 확률이 90%라는 것을 나타낸다.</li></ul></li></ul><h2 id="circular-error-probablecep"><a class="markdownIt-Anchor" href="#circular-error-probablecep"></a> Circular Error Probable(CEP)</h2><ul><li><strong>Circular Error Probability</strong> 또는 <strong>Circular Error Probable</strong>, 원형 공산 오차 라고 하며 탄도학 에서 무장의 정밀도를 측정하는 단위.</li><li>CEP는 폭탄 등이 투하되었을 경우, 그 중의 반수가 명중하는 원의 반경을 가리킵니다. 즉 10발 공격했을 때 5발이 들어가는 원을 그렸을 때 그 반경이 5m이라고 하면 CEP는 5m라고 합니다.</li><li>2차원의 수평방향 성분에 대해 50%의 원형 확률 오차(CEP)의 수치는 원의 반경과 같으며, 측점들의 각각의 계산 값에 포함되는 잔차들 중 50%는 이 원안에 들어오고 나머지는 원 밖에 존재합니다.</li><li>항해시의 위치정밀도 측정치로, 실제 수평자표에서 오차 타원에서 그 반경을 나타냅니다. 이 값은 현재 위치가 실제 위치에 있을 확률이 50%임을 나타냅니다.</li><li>실제위치를 중심으로 한 위치추정값의 50%를 함유하는 원의 반경 수치입니다.</li><li>CE50 형식과 같습니다.</li></ul><h2 id="참고자료"><a class="markdownIt-Anchor" href="#참고자료"></a> 참고자료</h2><ul><li><a href="https://www.gps.re.kr/outline/outline_17.asp" target="_blank" rel="noopener">GPS 기초</a></li><li><a href="https://m.blog.naver.com/PostView.nhn?blogId=pig9456&amp;logNo=191149079&amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F" target="_blank" rel="noopener">GCP 용어정리</a></li><li><a href="http://introgps.uga.edu/course/CEP.html" target="_blank" rel="noopener">Introduction to GPS</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/06/11/satellite-accuracy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] nohup 사용 방법</title>
      <link>http://hgko1207.github.io/2022/05/29/linux-17/</link>
      <guid>http://hgko1207.github.io/2022/05/29/linux-17/</guid>
      <pubDate>Sun, 29 May 2022 13:11:12 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 &lt;strong&gt;nohup&lt;/strong&gt; 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;nohup&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nohup&quot;&gt;&lt;/a&gt; nohup&lt;/h2&gt;
&lt;ul&gt;
&lt;li
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 <strong>nohup</strong> 사용 방법에 대해 알아보겠습니다.</p><h2 id="nohup"><a class="markdownIt-Anchor" href="#nohup"></a> nohup</h2><ul><li><strong>nohup</strong> 은 No Hang Ups의 약자로 백그라운드로 지속적으로 실행하는 프로세스를 의미합니다.</li><li><strong>nohup</strong> 은 실행을 현재 사용자 세션이 아닌 운영체제가 제공하는 백그라운드 공간에서 실행을 한다.</li><li>&amp; 는 사용자 세션에서 실행되며, 화면 출력만 백그라운드로 전환한 상태입니다. 즉 &amp; 로 실행된 프로세스는 사용자 세션이 로그아웃되는 시점에 같이 종료되어지는 것입니다.</li><li>애플리케이션 실행할 때 터미널을 종료해도 애플리케이션은 계속 구동될 수 있도록 <code>nohup</code> 명령어를 사용합니다.</li></ul><h2 id="실행"><a class="markdownIt-Anchor" href="#실행"></a> 실행</h2><h3 id="기본-실행"><a class="markdownIt-Anchor" href="#기본-실행"></a> 기본 실행</h3><p><code>nohup</code> 명령어를 사용하여 실행합니다.</p><blockquote><p><strong>nohup 으로 실행시킬 파일은 반드시 755 퍼미션을 가지고 있어야 합니다.</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup [실행파일명]</span></span><br></pre></td></tr></table></figure><p>예시입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./run.sh</span></span><br></pre></td></tr></table></figure><p>실행을 하면 <strong>“nohup: ignoring input and appending output to ‘nohup.out’”</strong> 메세지와 함께 해당 프로그램의 nohup 을 실행시킨 경로에 <code>nohup.out</code> 파일이 생성되고 표준출력 내용이 출력됩니다.</p><h3 id="백그라운드-실행"><a class="markdownIt-Anchor" href="#백그라운드-실행"></a> 백그라운드 실행</h3><p><code>&amp;</code> 명령어를 맨 끝에 불여서 사용하면 백그라운드로 실행됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup [실행파일명] &amp;</span></span><br></pre></td></tr></table></figure><p>예시입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./run.sh &amp;</span></span><br></pre></td></tr></table></figure><h2 id="파일-저장"><a class="markdownIt-Anchor" href="#파일-저장"></a> 파일 저장</h2><h3 id="표준출력과-표준에러-같은-파일-저장"><a class="markdownIt-Anchor" href="#표준출력과-표준에러-같은-파일-저장"></a> 표준출력과 표준에러 같은 파일 저장</h3><p><code>2&gt;&amp;1</code>을 추가하면 <strong>표준 출력(1)과 표준 에러(2)를 한 파일에 저장됩니다.</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup [실행파일명] 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure><p>예시입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./run.sh 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure><h3 id="표준출력과-표준에러-다른-파일-저장"><a class="markdownIt-Anchor" href="#표준출력과-표준에러-다른-파일-저장"></a> 표준출력과 표준에러 다른 파일 저장</h3><p>표준 출력(1)은 run_output.out 파일로 저장하고, 표준 에러(2)는 run_output.err 파일로 저장됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./run.sh 1 &gt; run_output.out 2 &gt; run_output.err</span></span><br></pre></td></tr></table></figure><h3 id="표준출력-다른-위치에-저장"><a class="markdownIt-Anchor" href="#표준출력-다른-위치에-저장"></a> 표준출력 다른 위치에 저장</h3><p>표준 출력을 nohup.out 이 아닌 다른 이름의 파일이나 다른 위치에 저장하려면 다음 명령어를 사용합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup [실행파일명] &gt; [파일위치]</span></span><br></pre></td></tr></table></figure><p>예시입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./run.sh &gt; /data/run_output.out</span></span><br></pre></td></tr></table></figure><h3 id="표준출력-남지기-않도록"><a class="markdownIt-Anchor" href="#표준출력-남지기-않도록"></a> 표준출력 남지기 않도록</h3><p>표준 출력을 별도로 남기고 싶지 않다면 <code>/dev/null</code> 를 추가합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup [실행파일명] &gt; /dev/null</span></span><br></pre></td></tr></table></figure><p>예시입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./run.sh &gt; /dev/null</span></span><br></pre></td></tr></table></figure><h2 id="실행-프로세스-확인"><a class="markdownIt-Anchor" href="#실행-프로세스-확인"></a> 실행 프로세스 확인</h2><p>백그라운드 실행의 경우 다음 명령어를 통해 실행중인 프로세스 상태를 확인할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -ef | grep run.sh</span></span><br></pre></td></tr></table></figure><h2 id="프로세스-종료"><a class="markdownIt-Anchor" href="#프로세스-종료"></a> 프로세스 종료</h2><p>백그라운드로 실행 중인 프로세스를 종료하는 방법입니다. 먼저 프로세스 아이디를 찾고 종료를 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -ef | grep run.sh</span></span><br></pre></td></tr></table></figure><p>프로세스 아이디를 입력하여 종료합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> -9 [프로세스 아이디]</span></span><br></pre></td></tr></table></figure><p>여기까지 nohup 사용법에 대해 알아보았습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/05/29/linux-17/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] Hostname 변경</title>
      <link>http://hgko1207.github.io/2022/05/28/linux-16/</link>
      <guid>http://hgko1207.github.io/2022/05/28/linux-16/</guid>
      <pubDate>Sat, 28 May 2022 01:32:02 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;hostname-등록&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hostname-등록&quot;&gt;&lt;/a&gt; HOSTNAME 등록&lt;/h2&gt;
&lt;p&gt;각 서버가 어느 서비스 인지 표현하기 위해 &lt;strong&gt;HOSTNAME&lt;/str
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="hostname-등록"><a class="markdownIt-Anchor" href="#hostname-등록"></a> HOSTNAME 등록</h2><p>각 서버가 어느 서비스 인지 표현하기 위해 <strong>HOSTNAME</strong>을 변경합니다. 다음 명령어로 편집 파일을 엽니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/sysconfig/network</span></span><br></pre></td></tr></table></figure><p>편집 화면에서 <strong>HOSTNAME</strong> 항목을 <strong>본인이 원하는 서비스명</strong>으로 추가합니다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=hgko-webservice</span><br><span class="line">NOZEROCONF=yes</span><br></pre></td></tr></table></figure><p>변경 한 후 서버를 재부팅 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo reboot</span></span><br></pre></td></tr></table></figure><p>재부팅이 끝나고 나서 <code>ssh</code> 명령어를 사용하여 다시 접속해보면 <strong>HOSTNAME</strong>이 잘 변경됬는지 확인할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh hgko-webservice</span></span><br></pre></td></tr></table></figure><h2 id="다른-hostname-등록"><a class="markdownIt-Anchor" href="#다른-hostname-등록"></a> 다른 HOSTNAME 등록</h2><p>리눅스 버전에 따라 명령어가 다르기 때문에 위의 내용으로 등록이 안될 시 다음 명령어를 통해 <strong>HOSTNAME</strong>을 등록합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo hostnamectl <span class="built_in">set</span>-hostname [변경할 호스트명]</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo hostnamectl <span class="built_in">set</span>-hostname hgko-webservice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 확인</span></span><br><span class="line">hostname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과 출력</span></span><br><span class="line">hgko-webservice</span><br></pre></td></tr></table></figure><h2 id="hosts-추가"><a class="markdownIt-Anchor" href="#hosts-추가"></a> hosts 추가</h2><p>호스트 주소를 찾을 때 먼저 검색해 보는 <code>/etc/hosts</code> 에 추가한 hostname을 등록합니다. 다음 명령어로 <code>/etc/hosts</code> 파일을 엽니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/hosts</span></span><br></pre></td></tr></table></figure><p>편집 화면에서 등록한 <strong>HOSTNAME</strong>을 추가합니다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>   hgko-webservice</span><br></pre></td></tr></table></figure><p>저장하고 종료한 뒤 정상적으로 등록되었는지 다음 명령어로 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl hgko-webservice</span></span><br></pre></td></tr></table></figure><p>잘 등록하였다면 다음과 같이 80 포트로 접근이 안 된다는 에러가 발생합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (7) Failed to connect to hgko-webservice port 80 after 0 ms: Connection refused</span><br></pre></td></tr></table></figure><p>아직 80 포트로 실행된 서비스가 없음을 의미입니다. <code>curl 호스트 이름</code> 명령어로 실행이 잘 되었음을 확인합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/05/28/linux-16/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] 타임존 변경</title>
      <link>http://hgko1207.github.io/2022/05/27/linux-15/</link>
      <guid>http://hgko1207.github.io/2022/05/27/linux-15/</guid>
      <pubDate>Thu, 26 May 2022 23:14:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;타임존-변경&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#타임존-변경&quot;&gt;&lt;/a&gt; 타임존 변경&lt;/h2&gt;
&lt;p&gt;리눅스 서버 타임존이 UTC인 경우가 있습니다. 이는 세계 표준 시간으로 한국의 시간대가 아닙니다. &lt;str
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="타임존-변경"><a class="markdownIt-Anchor" href="#타임존-변경"></a> 타임존 변경</h2><p>리눅스 서버 타임존이 UTC인 경우가 있습니다. 이는 세계 표준 시간으로 한국의 시간대가 아닙니다. <strong>한국의 시간과는 9시간 차이</strong>가 발생하므로 서버에서 수행되는 애플리케이션에서 생성되는 시간도 모두 9시간씩 차이가 나기 떄문에 수정이 필요합니다. 서버의 타임존을 한국 시간(KST)로 변경하겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo rm /etc/localtime</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime</span></span><br></pre></td></tr></table></figure><h2 id="타임존-확인"><a class="markdownIt-Anchor" href="#타임존-확인"></a> 타임존 확인</h2><p>date 명령어로 타임존이 KST로 변경된 것을 확인 할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> date</span></span><br></pre></td></tr></table></figure><p>결과입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fri May 27 08:18:19 KST 2022</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/05/27/linux-15/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] Java 8 설치 및 환경변수 설정 방법</title>
      <link>http://hgko1207.github.io/2022/05/26/linux-14/</link>
      <guid>http://hgko1207.github.io/2022/05/26/linux-14/</guid>
      <pubDate>Thu, 26 May 2022 13:06:50 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 &lt;strong&gt;Java 8&lt;/strong&gt; 버전 설치 및 환경변수 설정 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;java-설치&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-설치&quot;&gt;&lt;/a&gt; J
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 <strong>Java 8</strong> 버전 설치 및 환경변수 설정 방법에 대해 알아보겠습니다.</p><h2 id="java-설치"><a class="markdownIt-Anchor" href="#java-설치"></a> JAVA 설치</h2><p><code>yum</code> 을 이용해서 설치를 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sudo yum install -y java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure><h3 id="버전-변경"><a class="markdownIt-Anchor" href="#버전-변경"></a> 버전 변경</h3><p>설치가 완료되었으면 Java 버전을 8로 변경합니다. 다음 명령어를 실행하면 선택 화면이 나옵니다. 선택 화면에서 Java8을 선택합니다(1 입력).</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sudo /usr/sbin/alternatives --config java</span><br></pre></td></tr></table></figure><h3 id="확인"><a class="markdownIt-Anchor" href="#확인"></a> 확인</h3><p>현재 버전이 Java8 로 되었는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# java -version</span><br><span class="line">openjdk version "1.8.0_312"</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa java*jdk-devel</span><br><span class="line">java-1.8.0-openjdk-devel-1.8.0.342.b07-1.el7_9.x86_64</span><br></pre></td></tr></table></figure><h3 id="제거"><a class="markdownIt-Anchor" href="#제거"></a> 제거</h3><p>만약 사용하지 않는 Java 가 설치되었으면 삭제를 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sudo yum remove java-1.7.0-openjdk</span><br></pre></td></tr></table></figure><h2 id="환경변수-설정"><a class="markdownIt-Anchor" href="#환경변수-설정"></a> 환경변수 설정</h2><h3 id="환경변수-확인"><a class="markdownIt-Anchor" href="#환경변수-확인"></a> 환경변수 확인</h3><p>일단 현재 <code>JAVA_HOME</code> 환경변수가 설정 되어 있는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $JAVA_HOME</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><p><code>JAVA_HOME</code> 환경변수가 설정이 안되어 있는 것을 확인했습니다.</p><h3 id="설치위치-확인"><a class="markdownIt-Anchor" href="#설치위치-확인"></a> 설치위치 확인</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# which javac</span><br><span class="line">/usr/bin/javac</span><br><span class="line">[root@localhost ~]# readlink -f /usr/bin/javac</span><br><span class="line">/usr/lib/jvm/java-1.8.0-openjdk-devel-1.8.0.342.b07-1.el7_9.x86_64/bin/javac</span><br></pre></td></tr></table></figure><ul><li><strong>which javac</strong> 명령어는 javac 명령어의 위치를 알려줍니다.</li><li><strong>/usr/bin/javac</strong> 는 심볼릭 링크이므로 원본 파일의 위치를 찾기 위해 <code>readlink -f /usr/bin/javac</code> 명령어를 사용하였습니다.</li><li><strong>readlink -f</strong> 는 심볼릭 링크에서 원본파일을 추출하는 명령어입니다.</li></ul><h3 id="설정"><a class="markdownIt-Anchor" href="#설정"></a> 설정</h3><p>환경변수를 설정할 수 있는 profile 파일을 엽니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/profile</span><br></pre></td></tr></table></figure><p>해당 파일 하단에 다음의 내용을 추가한 후 저장합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-devel-1.8.0.342.b07-1.el7_9.x86_64</span><br></pre></td></tr></table></figure><p>다음 명령어를 이용하여 수정한 파일을 적용합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="설정-확인"><a class="markdownIt-Anchor" href="#설정-확인"></a> 설정 확인</h3><p><code>JAVA_HOME</code> 환경변수가 제대로 설정되었는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $JAVA_HOME</span><br><span class="line">/usr/lib/jvm/java-1.8.0-openjdk-devel-1.8.0.342.b07-1.el7_9.x86_64</span><br><span class="line">[root@localhost ~]# $JAVA_HOME/bin/javac -version</span><br><span class="line">javac 1.8.0_312</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2022/05/26/linux-14/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MyBatis] 동적 쿼리</title>
      <link>http://hgko1207.github.io/2021/09/17/mybatis-2/</link>
      <guid>http://hgko1207.github.io/2021/09/17/mybatis-2/</guid>
      <pubDate>Fri, 17 Sep 2021 12:49:15 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;검색 조건에 따라 비교하면서 동적 쿼리를 사용하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MyBatis&lt;/strong&gt; 와 데이터베이스는 &lt;strong&gt;Oracle&lt;/strong&gt; 을 사용하였습니다.&lt;/p&gt;
&lt;h2 id=&quot;조건문&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>검색 조건에 따라 비교하면서 동적 쿼리를 사용하는 방법에 대해 알아보겠습니다.</p><p><strong>MyBatis</strong> 와 데이터베이스는 <strong>Oracle</strong> 을 사용하였습니다.</p><h2 id="조건문"><a class="markdownIt-Anchor" href="#조건문"></a> 조건문</h2><p>조건문에는 단일(if), 다중(choose, when, otherwise) 조건문이 있습니다.</p><h3 id="1-단일-조건문"><a class="markdownIt-Anchor" href="#1-단일-조건문"></a> 1. 단일 조건문</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findBySearch"</span> <span class="attr">resultType</span>=<span class="string">"Sample"</span> <span class="attr">parameterType</span>=<span class="string">"SearchParam"</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM TB_SAMPLE</span><br><span class="line">  WHERE</span><br><span class="line">    column1 = #&#123;parameter1&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"parameter2 != null and parameter2 != ''"</span>&gt;</span></span><br><span class="line">    AND column2 LIKE %'||#&#123;parameter2&#125;||'%'</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-다중-조건문"><a class="markdownIt-Anchor" href="#2-다중-조건문"></a> 2. 다중 조건문</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findBySearch"</span> <span class="attr">resultType</span>=<span class="string">"Sample"</span> <span class="attr">parameterType</span>=<span class="string">"SearchParam"</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM TB_SAMPLE</span><br><span class="line">  WHERE</span><br><span class="line">    column1 = #&#123;parameter1&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"parameter2 != null and parameter2 == ''"</span>&gt;</span></span><br><span class="line">      AND column2 = #&#123;parameter2&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND column3 = #&#123;parameter3&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="비교-형식"><a class="markdownIt-Anchor" href="#비교-형식"></a> 비교 형식</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 문자열 비교 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"parameter != null and (parameter eq 'all'.toString())"</span>&gt;</span><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"!parameter.equals('all')"</span>&gt;</span><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 공백 비교 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"parameter == ' '"</span>&gt;</span><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 값 비교 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"uesYn == 'Y'"</span>&gt;</span><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="for-문"><a class="markdownIt-Anchor" href="#for-문"></a> for 문</h2><p><code>foreach</code> 를 사용하여 조건을 만들 수 있습니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findBySearch"</span> <span class="attr">resultType</span>=<span class="string">"Sample"</span> <span class="attr">parameterType</span>=<span class="string">"SearchParam"</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM TB_SAMPLE</span><br><span class="line">  WHERE</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">    column1 IN $&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="where-절"><a class="markdownIt-Anchor" href="#where-절"></a> where 절</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findBySearch"</span> <span class="attr">resultType</span>=<span class="string">"Sample"</span> <span class="attr">parameterType</span>=<span class="string">"SearchParam"</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM TB_SAMPLE</span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND|OR"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"parameter1 != null and parameter1 != ''"</span>&gt;</span></span><br><span class="line">      AND column1 = #&#123;parameter1&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"parameter2 != null and parameter2 != ''"</span>&gt;</span></span><br><span class="line">      AND column2 = #&#123;parameter2&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/09/17/mybatis-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MyBatis] 페이징 처리</title>
      <link>http://hgko1207.github.io/2021/09/17/mybatis-1/</link>
      <guid>http://hgko1207.github.io/2021/09/17/mybatis-1/</guid>
      <pubDate>Fri, 17 Sep 2021 12:44:53 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;웹 개발 시 페이징 처리는 필수입니다. &lt;strong&gt;MyBatis&lt;/strong&gt; 를 사용하여 페이징 처리하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;데이터베이스는 &lt;code&gt;Oracle&lt;/code&gt; 을 사용하였습니다.&lt;/p&gt;
&lt;h1 id=&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>웹 개발 시 페이징 처리는 필수입니다. <strong>MyBatis</strong> 를 사용하여 페이징 처리하는 방법에 대해 알아보겠습니다.</p><p>데이터베이스는 <code>Oracle</code> 을 사용하였습니다.</p><h1 id="1-기본-페이징"><a class="markdownIt-Anchor" href="#1-기본-페이징"></a> 1. 기본 페이징</h1><p>공지사항 조회 시 페이징을 예제로 만들었습니다.</p><h2 id="class-생성"><a class="markdownIt-Anchor" href="#class-생성"></a> Class 생성</h2><p>공지사항 관련 Class 와 페이징을 위한 Class 를 생성하였습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Notice.java</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Notice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 작성사용자ID */</span></span><br><span class="line">  <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 작성사용자명 */</span></span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 제목 */</span></span><br><span class="line">  <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 내용 */</span></span><br><span class="line">  <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 조회수 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pagination.java</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pagination</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 페이지 번호 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> pageNo;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 한 페이지당 데이터 수 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mapper-생성"><a class="markdownIt-Anchor" href="#mapper-생성"></a> Mapper 생성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NoticeMapper.java</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NoticeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Notice&gt; <span class="title">getListWithPaging</span><span class="params">(Pagination pagination)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="쿼리-작성"><a class="markdownIt-Anchor" href="#쿼리-작성"></a> 쿼리 작성</h2><p>CDATA 태크는 XML 에서 부등호를 사용하기 위함입니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.hgko.test.repository.NoticeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getListWithPaging"</span> <span class="attr">resultType</span>=<span class="string">"Notice"</span> <span class="attr">parameterType</span>=<span class="string">"Pagination"</span>&gt;</span></span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">      SELECT USER_NAME, TITLE, CONTENT</span><br><span class="line">      FROM</span><br><span class="line">      (</span><br><span class="line">        SELECT *, ROWNUM RN</span><br><span class="line">        FROM TB_NOTICE</span><br><span class="line">        WHERE ROWNUM &lt;= #&#123;pageNo&#125; * #&#123;amount&#125;</span><br><span class="line">      )</span><br><span class="line">      WHERE RN &gt; (#&#123;pageNo&#125; - 1) * #&#123;amount&#125;</span><br><span class="line">    ]]&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="테스트"><a class="markdownIt-Anchor" href="#테스트"></a> 테스트</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">MybatisTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">NoticeMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> NoticeMapper noticeMapper;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getListTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Pagination pagination = <span class="keyword">new</span> Pagination();</span><br><span class="line">    pagination.setPageNo(<span class="number">1</span>);</span><br><span class="line">    pagination.SetAmount(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Notice&gt; notices = noticeMapper.getListWithPaging(pagination);</span><br><span class="line">    System.out.println(notices);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-조회-조건-추가"><a class="markdownIt-Anchor" href="#2-조회-조건-추가"></a> 2. 조회 조건 추가</h1><p>위의 기본 페이징 형식에서 조회 조건을 추가하였습니다.</p><h2 id="조회-조건-class-생성"><a class="markdownIt-Anchor" href="#조회-조건-class-생성"></a> 조회 조건 Class 생성</h2><p>조회 조건 Class 를 생성하고, <code>Pagination</code> Class 를 상속받았습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SearchParam.java</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchParam</span> <span class="keyword">extends</span> <span class="title">Pagination</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 작성사용자명 */</span></span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 제목 */</span></span><br><span class="line">  <span class="keyword">private</span> String title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mapper-수정"><a class="markdownIt-Anchor" href="#mapper-수정"></a> Mapper 수정</h2><p>Mapper Class 에 조회 조건으로 조회하는 함수를 추가하였습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NoticeMapper.java</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NoticeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Notice&gt; <span class="title">getListWithPaging</span><span class="params">(Pagination pagination)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 조회조건을 통해 조회 */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Notice&gt; <span class="title">getListWithCondition</span><span class="params">(SearchParam searchParam)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="조회-쿼리-추가"><a class="markdownIt-Anchor" href="#조회-쿼리-추가"></a> 조회 쿼리 추가</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- NoticeMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getListWithCondition"</span> <span class="attr">resultType</span>=<span class="string">"Notice"</span> <span class="attr">parameterType</span>=<span class="string">"SearchParam"</span>&gt;</span></span><br><span class="line">  SELECT USER_NAME, TITLE, CONTENT</span><br><span class="line">  FROM</span><br><span class="line">  (</span><br><span class="line">    SELECT *, ROWNUM RN</span><br><span class="line">    FROM</span><br><span class="line">    (</span><br><span class="line">      SELECT *</span><br><span class="line">      FROM TB_NOTICE</span><br><span class="line">      <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND|OR"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null and userName != ''"</span>&gt;</span></span><br><span class="line">          AND USER_NAME LIKE %'||#&#123;userName&#125;||'%'</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null and title != ''"</span>&gt;</span></span><br><span class="line">          AND TITLE LIKE %'||#&#123;title&#125;||'%'</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">    WHERE ROWNUM &lt;= #&#123;pageNo&#125; * #&#123;amount&#125;</span><br><span class="line">    ]]&gt;</span><br><span class="line">  )</span><br><span class="line">  &lt;![CDATA[</span><br><span class="line">  WHERE RN &gt; (#&#123;pageNo&#125; - 1) * #&#123;amount&#125;</span><br><span class="line">  ]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyBatis 와 Oracle DB 를 이용하여 페이징 처리를 해봤습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/09/17/mybatis-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Vue] 설치와 세팅</title>
      <link>http://hgko1207.github.io/2021/08/22/vue-1/</link>
      <guid>http://hgko1207.github.io/2021/08/22/vue-1/</guid>
      <pubDate>Sun, 22 Aug 2021 09:46:02 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;vue-쓰는-이유&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#vue-쓰는-이유&quot;&gt;&lt;/a&gt; Vue 쓰는 이유&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web app(Single Page Application)&lt;/str
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="vue-쓰는-이유"><a class="markdownIt-Anchor" href="#vue-쓰는-이유"></a> Vue 쓰는 이유</h2><ul><li><strong>Web app(Single Page Application)</strong> 만들 때 사용합니다.</li><li>코드 작성할 때 방법이 정해져 있습니다.<ul><li><strong>React</strong> 는 방법이 다양한 방면 <strong>Vue</strong> 는 <code>v-for</code>, <code>v-if</code>, <code>v-else</code> 등 방법이 하나로 정해져 있어 개발 초보에게도 쉽습니다.</li><li>물론 <strong>Vue</strong> 도 <strong>React</strong> 처럼 자유도 높은 개발도 가능합니다.</li></ul></li><li>HTML 렌더링이 <strong>React</strong> 보다 빠르다고 합니다.(크게 영향을 주지 않음)</li><li>업데이트가 잘 됩니다.</li></ul><p>결론은 <strong>React</strong> 보다 학습 곡선이 낮아 쉽고, 가볍고 빠르며, 누구나 빨리 배울 수 있어 접근성이 뛰어나 많이 쓰이고 있습니다.</p><h2 id="설치하기"><a class="markdownIt-Anchor" href="#설치하기"></a> 설치하기</h2><h3 id="1-nodejs-설치"><a class="markdownIt-Anchor" href="#1-nodejs-설치"></a> 1. Nodejs 설치</h3><p><a href="https://nodejs.org/ko/download/" target="_blank" rel="noopener">Node.js 공식 다운로드 페이지</a> 에서 운영체제에 맞게 다운로드 하고 설치합니다.<br />현재 최신 버전은 <strong>14.17.5</strong> 입니다.</p><p><a href="https://nodejs.org/ko/download/" target="_blank" rel="noopener"><img src="/images/vue/download.png" alt="Windows Installer를 클릭하여 다운로드" /></a></p><p>설치가 끝나면 터미널(또는 명령프롬프트) 창을 열고, 다음 명령어를 실행하여 제대로 설치했는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br><span class="line">v14.17.5</span><br></pre></td></tr></table></figure><h3 id="2-에디터-설치"><a class="markdownIt-Anchor" href="#2-에디터-설치"></a> 2. 에디터 설치</h3><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">VS Code 공식 다운로드 페이지</a> 에서 운영체제에 맞는 버전을 설치합니다. 여기서는 Windows 버전을 설치합니다. 이 에디터는 macOS, Window, 리눅스를 모두 지원합니다.</p><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener"><img src="/images/vue/vscode.png" alt="Visual Studio Code 다운로드" /></a></p><p>VS Code 설치가 완료되었으면 <strong>Vue</strong> 개발을 효율적으로 하기 위해 Extension 을 설치합니다.</p><ul><li>Vetur</li><li>html css support</li><li>Vue 3 Snippets</li></ul><h3 id="vue-cli-설치"><a class="markdownIt-Anchor" href="#vue-cli-설치"></a> Vue-cli 설치</h3><p>Vue 개발환경 세팅을 도와주는 프로그램을 설치합니다. 명령어를 실행하고 vue 버전 선택을 하면 설치가 완료됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g @vue/cli</span></span><br></pre></td></tr></table></figure><h2 id="프로젝트-생성"><a class="markdownIt-Anchor" href="#프로젝트-생성"></a> 프로젝트 생성</h2><p>프로젝트를 생성할 때는 <code>vue create &lt;프로젝트명&gt;</code> 명령어를 사용합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vue create exapmle-vue</span></span><br></pre></td></tr></table></figure><h2 id="실행"><a class="markdownIt-Anchor" href="#실행"></a> 실행</h2><p>터미널에 <code>npm run serve</code> 명령어를 실행합니다. 실행하여 완료했다면 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 로 접속하여 웹 페이지를 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> example-vue</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm run serve</span></span><br></pre></td></tr></table></figure><img width="75%" src="/images/vue/webpage.png" alt="초기 프로젝트 페이지" title="" ><h2 id="정리"><a class="markdownIt-Anchor" href="#정리"></a> 정리</h2><p><strong>Vue</strong> 에 대한 설명부터 설치, 프로젝트 실행까지 진행했습니다. 프로젝트를 진행하면서 중요한 부분을 정리 할 예정입니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://kr.vuejs.org/v2/guide/index.html" target="_blank" rel="noopener">https://kr.vuejs.org/v2/guide/index.html</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/08/22/vue-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] 압축 및 해제</title>
      <link>http://hgko1207.github.io/2021/08/20/linux-13/</link>
      <guid>http://hgko1207.github.io/2021/08/20/linux-13/</guid>
      <pubDate>Fri, 20 Aug 2021 05:17:29 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;압축&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#압축&quot;&gt;&lt;/a&gt; 압축&lt;/h2&gt;
&lt;h3 id=&quot;tar-파일-압축&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tar-파일-압축&quot;&gt;&lt;/a&gt; tar 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="압축"><a class="markdownIt-Anchor" href="#압축"></a> 압축</h2><h3 id="tar-파일-압축"><a class="markdownIt-Anchor" href="#tar-파일-압축"></a> tar 파일 압축</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf [파일명.tar] [압축할 파일 또는 폴더명]</span><br><span class="line"></span><br><span class="line">예) tar -cvf test.tar <span class="built_in">test</span>/</span><br></pre></td></tr></table></figure><h3 id="targz-파일-압축"><a class="markdownIt-Anchor" href="#targz-파일-압축"></a> tar.gz 파일 압축</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf [파일명.tar.gz] [압축할 파일 또는 폴더명]</span><br><span class="line"></span><br><span class="line">예) tar -zcvf test.tar.gz <span class="built_in">test</span>/</span><br></pre></td></tr></table></figure><h2 id="압축-해제"><a class="markdownIt-Anchor" href="#압축-해제"></a> 압축 해제</h2><h3 id="zip-파일-압축풀기"><a class="markdownIt-Anchor" href="#zip-파일-압축풀기"></a> zip 파일 압축풀기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unzip [파일명]</span><br><span class="line">unzip [파일명] -d [폴더경로]</span><br><span class="line"></span><br><span class="line">예) unzip test.zip</span><br></pre></td></tr></table></figure><h3 id="tar-파일-압축-풀기"><a class="markdownIt-Anchor" href="#tar-파일-압축-풀기"></a> tar 파일 압축 풀기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf [파일명.tar]</span><br><span class="line"></span><br><span class="line">예) tar -xvf test.tar</span><br></pre></td></tr></table></figure><h3 id="targz-파일-압축-풀기"><a class="markdownIt-Anchor" href="#targz-파일-압축-풀기"></a> tar.gz 파일 압축 풀기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf [파일명.tar.gz]</span><br><span class="line"></span><br><span class="line">예) tar -zxvf test.tar.gz</span><br></pre></td></tr></table></figure><h2 id="tar-압축-옵션"><a class="markdownIt-Anchor" href="#tar-압축-옵션"></a> tar 압축 옵션</h2><table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td>-c</td><td>tar로 묶기</td></tr><tr><td>-v</td><td>묶거나 파일을 풀 때 과정을 화면으로 출력</td></tr><tr><td>-f</td><td>파일을 묶도록 지정 (반드시 추가되어야 함)</td></tr><tr><td>-x</td><td>tar를 풀기</td></tr><tr><td>-z</td><td>gzip(gz)으로 압축 또는 해제</td></tr><tr><td>-p</td><td>심볼릭 링크 설정</td></tr><tr><td>-C</td><td>경로를 지정</td></tr></tbody></table>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/08/20/linux-13/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Go] 설치 및 기본 사용 방법</title>
      <link>http://hgko1207.github.io/2021/08/19/go-1/</link>
      <guid>http://hgko1207.github.io/2021/08/19/go-1/</guid>
      <pubDate>Thu, 19 Aug 2021 00:38:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;서론&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서론&quot;&gt;&lt;/a&gt; 서론&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://nomadcoders.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;노마드 코더&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="서론"><a class="markdownIt-Anchor" href="#서론"></a> 서론</h2><p><a href="https://nomadcoders.co/" target="_blank" rel="noopener">노마드 코더</a> 에서 무료인 <strong>쉽고 빠른 Go 시작하기</strong> 강의 내용을 코딩하며 정리하였습니다.</p><h2 id="시작"><a class="markdownIt-Anchor" href="#시작"></a> 시작</h2><p><a href="https://go.dev/" target="_blank" rel="noopener">https://go.dev/</a> 페이지에서 Go 를 다운로드 합니다. 다운로드 완료 시 설치파일을 실행하여 설치합니다. 그리고 폴더를 다음과 같이 생성합니다.</p><ol><li>mkdir <a href="http://github.com/hgko1207" target="_blank" rel="noopener">github.com/hgko1207</a></li><li>cd <a href="http://github.com/hgko1207" target="_blank" rel="noopener">github.com/hgko1207</a></li><li>mkdir learngo</li><li>cd learngo</li><li>go mod init <a href="http://github.com/hgko1207/learngo" target="_blank" rel="noopener">github.com/hgko1207/learngo</a></li></ol><h2 id="코딩"><a class="markdownIt-Anchor" href="#코딩"></a> 코딩</h2><ul><li>main.go 는 컴파일을 위한 파일</li><li>export 함수를 만들 경우 함수명 맨 앞에 대문자로 작성</li><li>function -&gt; func</li><li>null -&gt; nil</li></ul><h2 id="상수와-변수"><a class="markdownIt-Anchor" href="#상수와-변수"></a> 상수와 변수</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constants</span></span><br><span class="line"><span class="keyword">const</span> name <span class="keyword">string</span> = <span class="string">"eden"</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Variables</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name <span class="keyword">string</span> = <span class="string">"eden"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 변수를 아래와 같이 축약형으로 사용 가능</span></span><br><span class="line">    <span class="comment">// 축약형은 함수 안에서만 동작</span></span><br><span class="line">    name := <span class="string">"eden"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-문"><a class="markdownIt-Anchor" href="#for-문"></a> For 문</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">people := [<span class="number">2</span>]<span class="keyword">string</span>&#123;<span class="string">"eden"</span>, <span class="string">"haeun"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, person := <span class="keyword">range</span> people &#123;</span><br><span class="line">    fmt.Println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="함수"><a class="markdownIt-Anchor" href="#함수"></a> 함수</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// naked return</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lenAndUpper</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(length <span class="keyword">int</span>, uppercase <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 'derfer' function이 끝난 후에 실행되는 코드</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">"I'm done"</span>)</span><br><span class="line"></span><br><span class="line">    length = <span class="built_in">len</span>(name)</span><br><span class="line">    uppercase = strings.ToUpper(name)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go가 내부적으로 호출하는 method를 사용하는 방법</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Account)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprint(a.Owner(), <span class="string">"'s account.\nHas: "</span>, a.Balance())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="배열-선언"><a class="markdownIt-Anchor" href="#배열-선언"></a> 배열 선언</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data := [<span class="number">2</span>]<span class="keyword">string</span>&#123;<span class="string">"test1"</span>, <span class="string">"test2"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map-사용"><a class="markdownIt-Anchor" href="#map-사용"></a> Map 사용</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// empty map을 초기화하고 싶을때</span></span><br><span class="line"><span class="comment">// map 끝에 중괄호(&#123;&#125;)를 작성하여 초기화 해야 함</span></span><br><span class="line"><span class="keyword">var</span> results = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 또는 make 사용</span></span><br><span class="line"><span class="keyword">var</span> results = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">results[<span class="string">"hello"</span>] = <span class="string">"Hello"</span></span><br></pre></td></tr></table></figure><h2 id="goroutines"><a class="markdownIt-Anchor" href="#goroutines"></a> Goroutines</h2><ul><li>Goroutines 이란 기본적으로 다른 함수와 동시에 실행시키는 함수입니다.</li><li>Goroutines 는 프로그램이 작동하는 동안(메인함수가 실행하는 동안)만 유효합니다.</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수 앞에 go를 붙입니다.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> count()</span><br><span class="line">    count()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이 경우는 main함수가 바로 종료되기 때문에 동작하지 않습니다.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> count()</span><br><span class="line">    <span class="keyword">go</span> count()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="channels"><a class="markdownIt-Anchor" href="#channels"></a> Channels</h2><ul><li>Channel 은 Goroutines 이랑 메인함수 사이에 정보를 전달하기 위한 방법입니다.</li><li>채널로부터 뭔가를 받을 때 메인 함수가 어떤 결과가 올때까지 기다립니다.</li><li>채널의 타입은 chan 입니다.</li><li>채널은 데이터를 받을 순 없고 보낼 수만 있도록 작성할 수 있습니다.(send-only)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">    <span class="keyword">go</span> channelTest(c)</span><br><span class="line">    result := &lt;- c</span><br><span class="line">    fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">channelTest</span><span class="params">(c <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">    c &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// send-only</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendOnlyTest</span><span class="params">(c <span class="keyword">chan</span>&lt;- <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    c &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="error"><a class="markdownIt-Anchor" href="#error"></a> Error</h2><ul><li>errors.New() 를 사용하여 에러를 정의하고 호출합니다.</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> err = errors.New(<span class="string">"error content"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.PrintLn(errTest())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errTest</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="goquery"><a class="markdownIt-Anchor" href="#goquery"></a> goquery</h2><p>HTML 을 navigate 하고 필요한 걸 HTML에서 찾아내기 위해서 사용 JQuery 와 유사한 go 를 위한 라이브러리입니다.</p><ul><li><a href="https://github.com/PuerkitoBio/goquery" target="_blank" rel="noopener">https://github.com/PuerkitoBio/goquery</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go get github.com/PuerkitoBio/goquery</span></span><br></pre></td></tr></table></figure><h1 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h1><ul><li>go lang std library</li><li><a href="https://golang.org/" target="_blank" rel="noopener">https://golang.org/</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/08/19/go-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] yum을 이용한 rpm 패키지 다운로드</title>
      <link>http://hgko1207.github.io/2021/07/23/linux-12/</link>
      <guid>http://hgko1207.github.io/2021/07/23/linux-12/</guid>
      <pubDate>Fri, 23 Jul 2021 08:50:03 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;yum-downloadonly-패키지-이용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#yum-downloadonly-패키지-이용&quot;&gt;&lt;/a&gt; yum-downloadonly 패키지 이용&lt;/h2&gt;
&lt;p&gt;yum-downl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="yum-downloadonly-패키지-이용"><a class="markdownIt-Anchor" href="#yum-downloadonly-패키지-이용"></a> yum-downloadonly 패키지 이용</h2><p>yum-downloadonly 패키지를 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install yum-downloadonly</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install [패키지명] -y --downloadonly --downloaddir=[다운로드 경로]</span></span><br></pre></td></tr></table></figure><p>사용 예제입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install dotnet-sdk-5.0 -y --downloadonly --downloaddir=/home/rpm/download</span></span><br></pre></td></tr></table></figure><h2 id="yumdownloader-이용"><a class="markdownIt-Anchor" href="#yumdownloader-이용"></a> yumdownloader 이용</h2><p>yumdownloader 명령어가 있는 yum-utils 패키지를 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install yum-utils</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yumdownloader --downloadonly --resolve --destdir=[다운로드 경로] [패키지명]</span></span><br></pre></td></tr></table></figure><p>사용 예제입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yumdownloader --downloadonly --resolve --destdir=/home/rpm/download dotnet-sdk-5.0</span></span><br></pre></td></tr></table></figure><h2 id="패키지-의존성-정보-확인"><a class="markdownIt-Anchor" href="#패키지-의존성-정보-확인"></a> 패키지 의존성 정보 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum deplist [패키지명]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum deplist dotnet-sdk-5.0</span></span><br></pre></td></tr></table></figure><h2 id="패키지-설치"><a class="markdownIt-Anchor" href="#패키지-설치"></a> 패키지 설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh [패키지 파일명]</span></span><br></pre></td></tr></table></figure><h2 id="패키지-삭제"><a class="markdownIt-Anchor" href="#패키지-삭제"></a> 패키지 삭제</h2><p>설치된 패키지를 삭제합니다. 패키지명만 입력합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -e [패키지명]</span></span><br></pre></td></tr></table></figure><h2 id="패키지-설치-여부"><a class="markdownIt-Anchor" href="#패키지-설치-여부"></a> 패키지 설치 여부</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -q [패키지명]</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/07/23/linux-12/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Chocolatey 설치</title>
      <link>http://hgko1207.github.io/2021/07/21/chocolatey/</link>
      <guid>http://hgko1207.github.io/2021/07/21/chocolatey/</guid>
      <pubDate>Wed, 21 Jul 2021 10:21:51 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;윈도우를 사용하면서 개발 환경을 쉽게 꾸릴 수 있는 &lt;strong&gt;Chocolatey(윈도우용 패키지 매니저)&lt;/strong&gt; 설치와 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h1 id=&quot;설치&quot;&gt;&lt;a class=&quot;markdownIt-Anchor
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>윈도우를 사용하면서 개발 환경을 쉽게 꾸릴 수 있는 <strong>Chocolatey(윈도우용 패키지 매니저)</strong> 설치와 사용 방법에 대해 알아보겠습니다.</p><h1 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h1><p><a href="https://chocolatey.org/install" target="_blank" rel="noopener">공식 Install 홈페이지</a>를 따라 설치를 진행합니다.<br />윈도우 7 이상, 윈도우 서버 2003 이상에서 설치가 가능하고, PowerShell 에서 명령어로 설치할 수 있습니다.</p><h2 id="powershell-사용"><a class="markdownIt-Anchor" href="#powershell-사용"></a> PowerShell 사용</h2><p>관리자 권한으로 실행해야 합니다. 그렇지 않으면 에러 메세지를 보여줍니다.<br><br />다음 설치 명령어를 복사하여 실행하면 설치가 진행됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(<span class="string">'https://community.chocolatey.org/install.ps1'</span>))</span><br></pre></td></tr></table></figure><p>설치가 완료되었다면 <code>choco</code> 명령어를 실행하였을 때 다음과 같이 버전 정보가 나옵니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt; choco</span><br><span class="line">Chocolatey v0.10.15</span><br><span class="line">Please run 'choco -?' or 'choco &lt;command&gt; -?' for help menu.</span><br><span class="line">C:\Windows\system32&gt;</span><br></pre></td></tr></table></figure><h1 id="패키지-설치"><a class="markdownIt-Anchor" href="#패키지-설치"></a> 패키지 설치</h1><p><a href="https://community.chocolatey.org/packages" target="_blank" rel="noopener">패키지 리스트</a> 에서 설치 가능한 패키지들을 확인 할 수 있습니다.<br></p><p>구글 크롬을 예제로 설치해보겠습니다. 검색 창에 <code>google chrome</code> 을 검색하면 결과가 나오고 오른쪽에 설치 명령어가 보여집니다. 명령어를 복사하고 PowerShell 에 입력하면 설치가 진행됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> choco install googlechrome</span></span><br></pre></td></tr></table></figure><p>설치가 완료되었으면 다음 명령어를 실행하여 설치된 패키지들을 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> choco search googlechrome</span></span><br></pre></td></tr></table></figure><p><strong>Ubuntu</strong> 의 <code>apt-get</code> 와 <strong>CentOS</strong> <code>rpm</code> 명령어처럼 윈도우에서도 설치 명령어를 통해 필요한 프로그램을 쉽게 설치할 수 있습니다.</p><h2 id="추천-패키지들"><a class="markdownIt-Anchor" href="#추천-패키지들"></a> 추천 패키지들</h2><ul><li>Windows Terminal</li><li>vscode</li><li>python3</li><li>git</li><li>postman</li><li>jdk8</li><li>Adobe Acrobat Reader</li><li>Notepad++</li><li>Node JS</li><li>PowerToys</li><li>WSL(Windows Subsystem for Linux)</li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/07/21/chocolatey/#disqus_thread</comments>
    </item>
    
    <item>
      <title>알아두면 손해 안보는 사이트</title>
      <link>http://hgko1207.github.io/2021/07/21/util-1/</link>
      <guid>http://hgko1207.github.io/2021/07/21/util-1/</guid>
      <pubDate>Wed, 21 Jul 2021 02:59:01 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;개발&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#개발&quot;&gt;&lt;/a&gt; 개발&lt;/h2&gt;
&lt;p&gt;자바스크립트&lt;br /&gt;
&lt;a href=&quot;https://beautifier.io/&quot; target=&quot;_blank&quot; rel=&quot;noope
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="개발"><a class="markdownIt-Anchor" href="#개발"></a> 개발</h2><p>자바스크립트<br /><a href="https://beautifier.io/" target="_blank" rel="noopener">https://beautifier.io/</a><br /><br><br />온라인 JSON Parser<br /><a href="http://json.parser.online.fr/" target="_blank" rel="noopener">http://json.parser.online.fr/</a><br /><br><br />변수명 짓기<br /><a href="https://www.curioustore.com/#!/" target="_blank" rel="noopener">https://www.curioustore.com/#!/</a><br /><br><br />웹 템플릿<br /><a href="https://semantic-ui.com/" target="_blank" rel="noopener">https://semantic-ui.com/</a><br /><a href="https://themeforest.net/" target="_blank" rel="noopener">https://themeforest.net/</a><br /><br><br />마크다운 툴<br /><a href="https://stackedit.io/app#" target="_blank" rel="noopener">https://stackedit.io/app#</a><br /><br><br />CSS Gradient Generator<br /><a href="https://www.colorzilla.com/gradient-editor/" target="_blank" rel="noopener">https://www.colorzilla.com/gradient-editor/</a></p><h2 id="디자인"><a class="markdownIt-Anchor" href="#디자인"></a> 디자인</h2><p>컬러 팔레트<br /><a href="https://flatuicolors.com/" target="_blank" rel="noopener">https://flatuicolors.com/</a><br><br /><br><br />무료 아이콘 모음<br /><a href="https://icons8.com/" target="_blank" rel="noopener">https://icons8.com/</a><br /><a href="https://www.flaticon.com/" target="_blank" rel="noopener">https://www.flaticon.com/</a><br /><br><br />아이콘 변환<br /><a href="https://flat-icon.surge.sh/#" target="_blank" rel="noopener">https://flat-icon.surge.sh/#</a><br /><br><br />사진 모음<br /><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></p><h2 id="etc"><a class="markdownIt-Anchor" href="#etc"></a> ETC.</h2><p>파일 포맷 정보<br /><a href="https://eknote.tistory.com/89" target="_blank" rel="noopener">https://eknote.tistory.com/89</a><br /><br><br />좌표계 변환<br /><a href="http://www.synnatschke.de/geo-tools/coordinate-converter.php" target="_blank" rel="noopener">http://www.synnatschke.de/geo-tools/coordinate-converter.php</a><br /><br><br />Convert Lat Long to UTM<br /><a href="https://www.latlong.net/lat-long-utm.html" target="_blank" rel="noopener">https://www.latlong.net/lat-long-utm.html</a><br /><br><br />사진 용량 줄이기<br /><a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/07/21/util-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JPA] Select Query</title>
      <link>http://hgko1207.github.io/2021/06/19/spring-jpa-1/</link>
      <guid>http://hgko1207.github.io/2021/06/19/spring-jpa-1/</guid>
      <pubDate>Sat, 19 Jun 2021 13:27:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;SpringData JPA&lt;/strong&gt; 를 사용하여 웹 프로젝트를 진행하면서 Select Query 를 작성 시 잊어버리게 되어 검색을 하게되는데 자주 사용하는 내용들을 정리하였습니다. &lt;code&gt;JpaRepository&lt;/co
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>SpringData JPA</strong> 를 사용하여 웹 프로젝트를 진행하면서 Select Query 를 작성 시 잊어버리게 되어 검색을 하게되는데 자주 사용하는 내용들을 정리하였습니다. <code>JpaRepository</code> 를 상속받아 사용하는 기본 Query 와 <code>@Query</code> 주석을 사용하여 JPQL 및 네이티브 SQL 쿼리를 실행 하는 방법에 대해 알아보겠습니다.</p><h2 id="entity"><a class="markdownIt-Anchor" href="#entity"></a> Entity</h2><p>먼저 데이터베이스에 저장하기 위해 <strong>tb_user</strong> 테이블 이름의 Entity 클래스를 작성합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 사용자ID */</span></span><br><span class="line">  <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, length = <span class="number">45</span>)</span><br><span class="line">  <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** 사용자명 */</span></span><br><span class="line">  <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, length = <span class="number">100</span>)</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 사용자비밀번호 */</span></span><br><span class="line">  <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, length = <span class="number">100</span>)</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 이메일 */</span></span><br><span class="line">  <span class="meta">@Column</span>(length = <span class="number">45</span>)</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 연락처 */</span></span><br><span class="line">  <span class="meta">@Column</span>(length = <span class="number">20</span>)</span><br><span class="line">  <span class="keyword">private</span> String tel;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 생성일시 */</span></span><br><span class="line">  <span class="meta">@CreationTimestamp</span></span><br><span class="line">  <span class="keyword">private</span> LocalDateTime createDate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 수정일시 */</span></span><br><span class="line">  <span class="meta">@UpdateTimestamp</span></span><br><span class="line">  <span class="keyword">private</span> LocalDateTime updateDate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 권한 */</span></span><br><span class="line">  <span class="meta">@Enumerated</span>(EnumType.STRING)</span><br><span class="line">  <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">  <span class="keyword">private</span> UserRole role;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> UserRole &#123;</span><br><span class="line">    ADMIN, GUEST</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="repository"><a class="markdownIt-Anchor" href="#repository"></a> Repository</h2><p>Entity 클래스를 작성했다면 이번엔 Repository 인터페이스를 만들어야 합니다.<br />Entity 의 기본적인 CRUD가 가능하도록 <code>JpaRepository</code> 인터페이스를 제공합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="기본-query"><a class="markdownIt-Anchor" href="#기본-query"></a> 기본 Query</h2><p>Spring Data JPA 에서 기본적으로 제공하는 Query는 규칙에 맞게 작성해야 합니다.</p><table><thead><tr><th>Method</th><th>설명</th></tr></thead><tbody><tr><td>findBy…</td><td>쿼리를 요청</td></tr><tr><td>countBy…</td><td>쿼리 결과 행 수를 요청</td></tr><tr><td>orderBy…</td><td>쿼리 결과를 정렬</td></tr><tr><td>existsBy…</td><td>해당 조건의 항목이 존재하는지 확인</td></tr></tbody></table><p>그리고 Query 메소드에 포함할 수 있는 키워드가 있습니다. 아래 참고 사이트에 자세하게 더 다양하게 정리가 되어있습니다.</p><table><thead><tr><th>Keyword</th><th>설명</th></tr></thead><tbody><tr><td>And</td><td>여러 컬럼을 and 로 쿼리</td></tr><tr><td>Or</td><td>여러 컬럼을 or 로 쿼리</td></tr><tr><td>Containing</td><td>like 쿼리</td></tr><tr><td>Like</td><td>like 쿼리</td></tr><tr><td>Between</td><td>컬럼의 두 값 사이에 있는 항목 쿼리</td></tr><tr><td>OrderBy</td><td>쿼리 결과를 정렬</td></tr><tr><td>In</td><td>여러 값 중에 하나인 항목 쿼리</td></tr><tr><td>Exists</td><td>해당 조건의 항목이 존재하는지 확인</td></tr></tbody></table><p>아래는 예제 코드입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">findByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">findByUserIdAndPassword</span><span class="params">(String userId, String password)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">OrderByName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">OrderByCreateDateDesc</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByRoleOrderByCreateDateDesc</span><span class="params">(Role role)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByNameContaining</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByCreateDateBetween</span><span class="params">(LocalDateTime startDate, LocalDateTime endDate)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">existsByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countByRole</span><span class="params">(Role role)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="jpqljava-persistence-query-language"><a class="markdownIt-Anchor" href="#jpqljava-persistence-query-language"></a> JPQL(Java Persistence Query Language)</h2><p>JPQL은 SQL과 비슷한 문법을 가진 객체 지향 쿼리입니다.</p><p>JPQL과 Native SQL 동일하게 <code>@Query</code> 어노테이션을 사용하여 쿼리를 작성하고, 또한 두 가지 방법으로 쿼리에 메소드의 매개변수 값을 전달 할 수 있습니다.</p><ol><li><code>@Param</code> 어노테이션을 사용하여 이름으로 정의 된 매개변수를 쿼리에 전달합니다.</li><li>메소드의 매개변수 순서로 쿼리에 전달합니다.(1부터 시작)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"SELECT u FROM User u WHERE u.role = 'GUEST'"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByRole</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT u FROM User u WHERE u.userId = :userId"</span>)</span><br><span class="line"><span class="function">User <span class="title">findByUserId</span><span class="params">(@Param(<span class="string">"userId"</span>)</span> String userId)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT u FROM User u WHERE u.userId = :userId and u.password = :password"</span>)</span><br><span class="line"><span class="function">User <span class="title">findByUserIdAndPassword</span><span class="params">(@Param(<span class="string">"userId"</span>)</span> String userId, @<span class="title">Param</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT u FROM User u WHERE u.userId = ?1"</span>)</span><br><span class="line"><span class="function">User <span class="title">findByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT u FROM User u WHERE u.userId = ?1 and u.password = ?2"</span>)</span><br><span class="line"><span class="function">User <span class="title">findByUserIdAndPassword</span><span class="params">(String userId, String password)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="native-sql"><a class="markdownIt-Anchor" href="#native-sql"></a> Native SQL</h2><p>네이티브 SQL을 사용하여 쿼리를 정의 할 수 있습니다. 네이티브 SQL을 사용하려면 <strong>nativeQuery 속성의 값을 true</strong> 로 설정합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"SELECT * FROM tb_user u WHERE u.role = 'GUEST'"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByRole</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT * FROM tb_user u WHERE u.userId = :userId"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">User <span class="title">findByUserId</span><span class="params">(@Param(<span class="string">"userId"</span>)</span> String userId)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT * FROM tb_user u WHERE u.userId = :userId and u.password = :password"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">User <span class="title">findByUserIdAndPassword</span><span class="params">(@Param(<span class="string">"userId"</span>)</span> String userId, @<span class="title">Param</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT * FROM tb_user u WHERE u.userId = ?1"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">User <span class="title">findByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT * FROM tb_user u WHERE u.userId = ?1 and u.password = ?2"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">User <span class="title">findByUserIdAndPassword</span><span class="params">(String userId, String password)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://www.baeldung.com/spring-data-jpa-query" target="_blank" rel="noopener">Spring Data JPA @Query</a></li><li><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repository-query-keywords" target="_blank" rel="noopener">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repository-query-keywords</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/06/19/spring-jpa-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JavaScript] 모달에서 이미지 및 동영상 출력</title>
      <link>http://hgko1207.github.io/2021/06/16/js-dev-4/</link>
      <guid>http://hgko1207.github.io/2021/06/16/js-dev-4/</guid>
      <pubDate>Wed, 16 Jun 2021 13:25:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;서론&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서론&quot;&gt;&lt;/a&gt; 서론&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;[사진 보기]&lt;/strong&gt;, &lt;strong&gt;[동영상 보기]&lt;/strong&gt; 버튼을 클릭 시 모달창이 띄워지면서 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="서론"><a class="markdownIt-Anchor" href="#서론"></a> 서론</h2><p><strong>[사진 보기]</strong>, <strong>[동영상 보기]</strong> 버튼을 클릭 시 모달창이 띄워지면서 사진 또는 동영상이 출력되도록 하는 예제입니다. 사진과 동영상 파일을 images 경로에 저장하여 출력하였고, 실제 구동되는 프로젝트에서는 웹 서버가 실행되는 곳의 특정 경로에 저장하여 URL을 불러와서 출력합니다.</p><h2 id="html"><a class="markdownIt-Anchor" href="#html"></a> html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">onClick</span>=<span class="string">"openImageModal()"</span>&gt;</span>사진 보기<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">onClick</span>=<span class="string">"openVideoModal()"</span>&gt;</span>동영상 보기<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 모달창 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fileModal"</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">role</span>=<span class="string">"dialog"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header modal-header-sm"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h6</span> <span class="attr">class</span>=<span class="string">"modal-title"</span>&gt;</span>사진/동영상 보기<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body text-center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"file-viewer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> javascript</h2><p>JQuery 를 이용하여 모달창을 생성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이미지 출력 모달창 오픈</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openImageModal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'#file-viewer'</span>).empty();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">  img.setAttribute(<span class="string">'src'</span>, <span class="string">'images/image.jpg'</span>);</span><br><span class="line">  img.setAttribute(<span class="string">'class'</span>, <span class="string">'img-fluid'</span>);</span><br><span class="line"></span><br><span class="line">  $(<span class="string">'#file-viewer'</span>).append(img);</span><br><span class="line">  $(<span class="string">'#fileModal'</span>).modal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 동영상 출력 모달창 오픈</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openVideoModal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'#file-viewer'</span>).empty();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.setAttribute(<span class="string">'class'</span>, <span class="string">'embed-responsive embed-responsive-16by9'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// video 태그 사용</span></span><br><span class="line">  <span class="keyword">var</span> video = <span class="built_in">document</span>.createElement(<span class="string">'video'</span>);</span><br><span class="line">  video.setAttribute(<span class="string">'class'</span>, <span class="string">'embed-responsive-item'</span>);</span><br><span class="line">  video.setAttribute(<span class="string">'controls'</span>, <span class="string">'controls'</span>);</span><br><span class="line">  ideo.setAttribute(<span class="string">'src'</span>, <span class="string">'images/video.mp4'</span>);</span><br><span class="line">  div.append(video);</span><br><span class="line"></span><br><span class="line">  $(<span class="string">'#file-viewer'</span>).append(div);</span><br><span class="line">  $(<span class="string">'#fileModal'</span>).modal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="응용"><a class="markdownIt-Anchor" href="#응용"></a> 응용</h2><p>서버에서 파일를 조회하여 출력하도록 하는 예제입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contextPath = <span class="string">'$&#123;pageContext.request.contextPath&#125;'</span>;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  url: contextPath + <span class="string">'/file/get'</span>,</span><br><span class="line">  type: <span class="string">'GET'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (file.fileType == <span class="string">'IMAGE'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">      img.setAttribute(<span class="string">'src'</span>, contextPath + <span class="string">'/uploads/'</span> + file.fileName);</span><br><span class="line">      img.setAttribute(<span class="string">'class'</span>, <span class="string">'img-fluid'</span>);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'#file-viewer'</span>).append(img);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.fileType == <span class="string">'VIDEO'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      div.setAttribute(<span class="string">'class'</span>, <span class="string">'embed-responsive embed-responsive-16by9'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> video = <span class="built_in">document</span>.createElement(<span class="string">'video'</span>);</span><br><span class="line">      video.setAttribute(<span class="string">'class'</span>, <span class="string">'embed-responsive-item'</span>);</span><br><span class="line">      video.setAttribute(<span class="string">'controls'</span>, <span class="string">'controls'</span>);</span><br><span class="line">      video.setAttribute(<span class="string">'src'</span>, contextPath + <span class="string">'/uploads/'</span> + file.fileName);</span><br><span class="line">      div.append(video);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'#file-viewer'</span>).append(div);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'#fileModal'</span>).modal();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/06/16/js-dev-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[WPF] Slider Custom Style</title>
      <link>http://hgko1207.github.io/2021/06/04/wpf-3/</link>
      <guid>http://hgko1207.github.io/2021/06/04/wpf-3/</guid>
      <pubDate>Fri, 04 Jun 2021 13:50:55 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;WPF 기본 Slider Stlye 에서 Thumb 을 드래그할 때마다 박스 안에 숫자가 표시되도록 Style 을 하였습니다.&lt;/p&gt;
&lt;h3 id=&quot;slider-모양&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#slider-
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>WPF 기본 Slider Stlye 에서 Thumb 을 드래그할 때마다 박스 안에 숫자가 표시되도록 Style 을 하였습니다.</p><h3 id="slider-모양"><a class="markdownIt-Anchor" href="#slider-모양"></a> Slider 모양</h3><img width="50%" src="/images/wpf/slider.png" alt="" title=""><h3 id="style-추가"><a class="markdownIt-Anchor" href="#style-추가"></a> Style 추가</h3><p><strong>App.xaml</strong> 에 추가하거나 <strong>Resource.xaml</strong> 파일을 생성하여 Style 을 추가합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">"CustomSliderBackgroundSolidColorBrush"</span> <span class="attr">Color</span>=<span class="string">"#1E211B"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">x:Key</span>=<span class="string">"CustomSliderForegroundBrush"</span> <span class="attr">StartPoint</span>=<span class="string">"0,0"</span> <span class="attr">EndPoint</span>=<span class="string">"0,1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">"#65351F"</span> <span class="attr">Offset</span>=<span class="string">"0.2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">"#9B5B2B"</span> <span class="attr">Offset</span>=<span class="string">"0.5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">"#65351F"</span> <span class="attr">Offset</span>=<span class="string">"0.8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">x:Key</span>=<span class="string">"CustomSliderThumBrush"</span> <span class="attr">StartPoint</span>=<span class="string">"0,0"</span> <span class="attr">EndPoint</span>=<span class="string">"0,1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">"#3B3C39"</span> <span class="attr">Offset</span>=<span class="string">"0.2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">"#454543"</span> <span class="attr">Offset</span>=<span class="string">"0.5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">"#3B3C39"</span> <span class="attr">Offset</span>=<span class="string">"0.8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">"CustomSliderThumbStyle"</span> <span class="attr">TargetType</span>=<span class="string">"&#123;x:Type Thumb&#125;"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Focusable"</span> <span class="attr">Value</span>=<span class="string">"false"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"SnapsToDevicePixels"</span> <span class="attr">Value</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"OverridesDefaultStyle"</span> <span class="attr">Value</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Height"</span> <span class="attr">Value</span>=<span class="string">"20"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Width"</span> <span class="attr">Value</span>=<span class="string">"30"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Cursor"</span> <span class="attr">Value</span>=<span class="string">"Hand"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Template"</span>&gt;</span></span></span><br><span class="line"><span class="css">        &lt;<span class="selector-tag">Setter</span><span class="selector-class">.Value</span>&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">"&#123;x:Type Thumb&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Canvas</span> <span class="attr">SnapsToDevicePixels</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Height</span>=<span class="string">"20"</span> <span class="attr">Width</span>=<span class="string">"30"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">x:Name</span>=<span class="string">"Background"</span></span></span></span><br><span class="line">                            Fill="&#123;StaticResource CustomSliderThumBrush&#125;" Stroke="#FFDADADA"</span><br><span class="line">                            Height="20" Width="30"</span><br><span class="line">                            RadiusX="3" RadiusY="3"/&gt;</span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span></span></span></span><br><span class="line">                            Foreground="White" FontSize="10"</span><br><span class="line">                            Text="&#123;Binding Value, RelativeSource=&#123;RelativeSource AncestorType=&#123;x:Type Slider&#125;&#125;&#125;"/&gt;</span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span></span><br><span class="line"><span class="css">                &lt;<span class="selector-tag">ControlTemplate</span><span class="selector-class">.Triggers</span>&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"IsMouseOver"</span> <span class="attr">Value</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Fill"</span> <span class="attr">TargetName</span>=<span class="string">"Background"</span> <span class="attr">Value</span>=<span class="string">"Orange"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"IsDragging"</span> <span class="attr">Value</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Fill"</span> <span class="attr">TargetName</span>=<span class="string">"Background"</span> <span class="attr">Value</span>=<span class="string">"&#123;StaticResource CustomSliderThumBrush&#125;"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"IsEnabled"</span> <span class="attr">Value</span>=<span class="string">"false"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Fill"</span> <span class="attr">TargetName</span>=<span class="string">"Background"</span>  <span class="attr">Value</span>=<span class="string">"Gray"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">"CustomSliderControlTemplate"</span> <span class="attr">TargetType</span>=<span class="string">"&#123;x:Type Slider&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Background</span>=<span class="string">"Transparent"</span> <span class="attr">SnapsToDevicePixels</span>=<span class="string">"True"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"&#123;TemplateBinding MinHeight&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">DockPanel</span> <span class="attr">LastChildFill</span>=<span class="string">"True"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Border</span> <span class="attr">x:Name</span>=<span class="string">"PART_SelectionRange"</span> <span class="attr">Height</span>=<span class="string">"5"</span> <span class="attr">ClipToBounds</span>=<span class="string">"True"</span> <span class="attr">Visibility</span>=<span class="string">"Visible"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Margin</span>=<span class="string">"0 0 -10 0"</span> <span class="attr">RadiusX</span>=<span class="string">"2"</span> <span class="attr">RadiusY</span>=<span class="string">"2"</span> <span class="attr">Fill</span>=<span class="string">"&#123;StaticResource CustomSliderForegroundBrush&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Border</span> <span class="attr">ClipToBounds</span>=<span class="string">"True"</span> <span class="attr">Height</span>=<span class="string">"5"</span> <span class="attr">Visibility</span>=<span class="string">"Visible"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Margin</span>=<span class="string">"0 0 0 0"</span> <span class="attr">RadiusX</span>=<span class="string">"2"</span> <span class="attr">RadiusY</span>=<span class="string">"2"</span> <span class="attr">Fill</span>=<span class="string">"&#123;StaticResource CustomSliderBackgroundSolidColorBrush&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">DockPanel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Track</span> <span class="attr">x:Name</span>=<span class="string">"PART_Track"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Track.Thumb</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Thumb</span> <span class="attr">Style</span>=<span class="string">"&#123;StaticResource CustomSliderThumbStyle&#125;"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Width</span>=<span class="string">"&#123;TemplateBinding MinWidth&#125;"</span> <span class="attr">Height</span>=<span class="string">"&#123;TemplateBinding MinHeight&#125;"</span> <span class="attr">OverridesDefaultStyle</span>=<span class="string">"True"</span> <span class="attr">Focusable</span>=<span class="string">"False"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Track.Thumb</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Track</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">"CustomSliderStyle"</span> <span class="attr">TargetType</span>=<span class="string">"&#123;x:Type Slider&#125;"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Template"</span> <span class="attr">Value</span>=<span class="string">"&#123;StaticResource CustomSliderControlTemplate&#125;"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"VerticalAlignment"</span> <span class="attr">Value</span>=<span class="string">"Center"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"MinWidth"</span> <span class="attr">Value</span>=<span class="string">"30"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"MinHeight"</span> <span class="attr">Value</span>=<span class="string">"20"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Height"</span> <span class="attr">Value</span>=<span class="string">"20"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"MaxHeight"</span> <span class="attr">Value</span>=<span class="string">"20"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"BorderBrush"</span> <span class="attr">Value</span>=<span class="string">"Transparent"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Background"</span> <span class="attr">Value</span>=<span class="string">"Transparent"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"AutoToolTipPlacement"</span> <span class="attr">Value</span>=<span class="string">"None"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"IsMoveToPointEnabled"</span> <span class="attr">Value</span>=<span class="string">"True"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"SelectionStart"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"SelectionEnd"</span> <span class="attr">Value</span>=<span class="string">"&#123;Binding Path=Value, RelativeSource=&#123;RelativeSource Self&#125;&#125;"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Stylus.IsPressAndHoldEnabled"</span> <span class="attr">Value</span>=<span class="string">"false"</span> /&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="slider-style-적용"><a class="markdownIt-Anchor" href="#slider-style-적용"></a> Slider Style 적용</h3><p>다음과 같이 Slider 에 Style을 지정합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Slider</span> <span class="attr">Minimum</span>=<span class="string">"1"</span> <span class="attr">Maximum</span>=<span class="string">"255"</span> <span class="attr">IsSnapToTickEnabled</span>=<span class="string">"True"</span> <span class="attr">Style</span>=<span class="string">"&#123;StaticResource CustomSliderStyle&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/06/04/wpf-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[WPF] Prism ViewModelBase 정의</title>
      <link>http://hgko1207.github.io/2021/05/27/wpf-2/</link>
      <guid>http://hgko1207.github.io/2021/05/27/wpf-2/</guid>
      <pubDate>Thu, 27 May 2021 05:50:42 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;WPF 에서 Prism 을 사용하여 ViewModel 을 구현할 때 필요에 따라 &lt;code&gt;Container&lt;/code&gt;, &lt;code&gt;EventAggregator&lt;/code&gt;, &lt;code&gt;RegionManager&lt;/code&gt;, &lt;code&gt;Logg
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>WPF 에서 Prism 을 사용하여 ViewModel 을 구현할 때 필요에 따라 <code>Container</code>, <code>EventAggregator</code>, <code>RegionManager</code>, <code>Logger</code> 등의 서비스를 사용합니다.</p><p>서비스를 각각 ViewModel 에 정의해서 사용하는 것이 아닌 공통으로 작성하여 편리하게 사용할 수 있는 추상 클래스를 작성하였습니다.</p><h3 id="viewmodelbase-class"><a class="markdownIt-Anchor" href="#viewmodelbase-class"></a> ViewModelBase Class</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Prism.Events;</span><br><span class="line"><span class="keyword">using</span> Prism.Logging;</span><br><span class="line"><span class="keyword">using</span> Prism.Ioc;</span><br><span class="line"><span class="keyword">using</span> Prism.Mvvm;</span><br><span class="line"><span class="keyword">using</span> Unity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Prism.Project.Common.Mvvm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ViewModelBase</span> : <span class="title">BindableBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> title;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Title</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">get</span> =&gt; title;</span><br><span class="line">          <span class="keyword">set</span> =&gt; SetProperty(<span class="keyword">ref</span> title, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> IUnityContainer Container &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> IEventAggregator eventAggregator;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> The EventAggregator</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> IEventAggregator EventAggregator</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> eventAggregator; &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span> &#123; <span class="keyword">this</span>.SetProperty&lt;IEventAggregator&gt;(<span class="keyword">ref</span> <span class="keyword">this</span>.eventAggregator, <span class="keyword">value</span>); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> IRegionManager regionManager;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> The region manager</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> IRegionManager RegionManager</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> regionManager; &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span> &#123; <span class="keyword">this</span>.SetProperty&lt;IRegionManager&gt;(<span class="keyword">ref</span> <span class="keyword">this</span>.regionManager, <span class="keyword">value</span>); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> ILoggerFacade Logger &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">ViewModelBase</span>(<span class="params">IUnityContainer container</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Container = container;</span><br><span class="line">            RegionManager = container.Resolve&lt;IRegionManager&gt;();</span><br><span class="line">            EventAggregator = container.Resolve&lt;IEventAggregator&gt;();</span><br><span class="line"></span><br><span class="line">            Logger = container.Resolve&lt;ILoggerFacade&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="사용-코드"><a class="markdownIt-Anchor" href="#사용-코드"></a> 사용 코드</h3><p><code>ViewModelBase</code> 클래스를 상속받고 생성자에 <code>container</code> 를 정의합니다.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Prism.Project.Common.Mvvm;</span><br><span class="line"><span class="keyword">using</span> Unity;</span><br><span class="line"><span class="keyword">using</span> Prism.Events;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Prism.Project.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainWindowViewModel</span> : <span class="title">ViewModelBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindowViewModel</span>(<span class="params">IUnityContainer container</span>) : <span class="title">base</span>(<span class="params">container</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Title = <span class="string">"Prism 테스트"</span>;</span><br><span class="line"></span><br><span class="line">            Logger.Log(<span class="string">"[MainWindowViewModel Created]"</span>, Category.Debug, Priority.None);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Event 예제 코드</span></span><br><span class="line">            EventAggregator.GetEvent&lt;MainWindowClosedEvent&gt;().Subscribe(MainWindowClosed);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> MainWindow 화면 종료 시</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainWindowClosed</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/05/27/wpf-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JQuery] Select Box 제어</title>
      <link>http://hgko1207.github.io/2021/05/21/js-dev-3/</link>
      <guid>http://hgko1207.github.io/2021/05/21/js-dev-3/</guid>
      <pubDate>Fri, 21 May 2021 02:47:06 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;JQuery&lt;/strong&gt; 를 이용해서 select 를 제어하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>JQuery</strong> 를 이용해서 select 를 제어하는 방법에 대해 알아보겠습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"nameSelect"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="선택된-옵션-값-읽기"><a class="markdownIt-Anchor" href="#선택된-옵션-값-읽기"></a> 선택된 옵션 값 읽기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#nameSelect option:selected'</span>).val();</span><br><span class="line">$(<span class="string">'select[name=name]'</span>).val();</span><br></pre></td></tr></table></figure><h3 id="선택된-옵션-이름-읽기"><a class="markdownIt-Anchor" href="#선택된-옵션-이름-읽기"></a> 선택된 옵션 이름 읽기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#nameSelect option:selected'</span>).text();</span><br></pre></td></tr></table></figure><h3 id="옵션-추가하기"><a class="markdownIt-Anchor" href="#옵션-추가하기"></a> 옵션 추가하기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#nameSelect'</span>).append(</span><br><span class="line">  $(<span class="string">'&lt;option&gt;'</span>, &#123;</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    text: <span class="string">'테스트'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="값이-변경되었을-때"><a class="markdownIt-Anchor" href="#값이-변경되었을-때"></a> 값이 변경되었을 때</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#nameSelect'</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = $(<span class="keyword">this</span>).val();</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="특정한-값-선택하기"><a class="markdownIt-Anchor" href="#특정한-값-선택하기"></a> 특정한 값 선택하기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#nameSelect'</span>).val(<span class="number">1</span>).trigger(<span class="string">'change'</span>);</span><br></pre></td></tr></table></figure><h3 id="옵션-삭제"><a class="markdownIt-Anchor" href="#옵션-삭제"></a> 옵션 삭제</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 지정한 인덱스의 옵션 삭제</span></span><br><span class="line">$(<span class="string">'#nameSelect option:eq(0)'</span>).remove();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫 번째 옵션 삭제</span></span><br><span class="line">$(<span class="string">'#nameSelect option:first'</span>).remove();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 마지막 옵션 삭제</span></span><br><span class="line">$(<span class="string">'#nameSelect option:first'</span>).remove();</span><br></pre></td></tr></table></figure><h3 id="select-box-비우기"><a class="markdownIt-Anchor" href="#select-box-비우기"></a> Select Box 비우기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#nameSelect'</span>).empty();</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/05/21/js-dev-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Android] Yahoo Weather API를 이용하여 날씨정보 조회</title>
      <link>http://hgko1207.github.io/2021/05/12/android-dev-1/</link>
      <guid>http://hgko1207.github.io/2021/05/12/android-dev-1/</guid>
      <pubDate>Wed, 12 May 2021 07:58:49 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Yahoo Weather API&lt;/strong&gt; 를 이용하여 현재 위치의 날씨 정보를 조회하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;개발-환경&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#개발-환경
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Yahoo Weather API</strong> 를 이용하여 현재 위치의 날씨 정보를 조회하는 방법에 대해 알아보겠습니다.</p><h2 id="개발-환경"><a class="markdownIt-Anchor" href="#개발-환경"></a> 개발 환경</h2><ul><li>Android Studio</li><li>Java</li></ul><h2 id="설정"><a class="markdownIt-Anchor" href="#설정"></a> 설정</h2><ul><li>build.gradle -&gt; dependencies 추가</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'zh.wang.android:yweathergetter4a:1.3.0'</span></span><br></pre></td></tr></table></figure><ul><li>manifest -&gt; permission 추가</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 인터넷 사용 권한 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- GPS 사용 권한 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_FINE_LOCATION"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_COARSE_LOCATION"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="코드-작성"><a class="markdownIt-Anchor" href="#코드-작성"></a> 코드 작성</h2><p>Activity 또는 Fragment 에 <code>YahooWeatherInfoListener</code> 인터페이스를 implements 하면 <code>gotWeatherInfo</code> 함수를 오버라이딩(Override)을 하게 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">YahooWeatherInfoListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_weather);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gotWeatherInfo</span><span class="params">(WeatherInfo weatherInfo, YahooWeather.ErrorType errorType)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 날씨 정보를 불러오기 위해 다음의 함수 중 상황에 맞게 호출합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 장소 이름으로 쿼리</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryYahooWeatherByPlaceName</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> String cityAreaOrLocation, <span class="keyword">final</span> YahooWeatherInfoListener result)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 위도와 경도로 쿼리</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryYahooWeatherByLatLon</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> String lat, <span class="keyword">final</span> String lon, <span class="keyword">final</span> YahooWeatherInfoListener result)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// GPS를 사용하여 현재 위치로 쿼리</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryYahooWeatherByGPS</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> YahooWeatherInfoListener result)</span></span></span><br></pre></td></tr></table></figure><p>이번 프로젝트에는 GPS를 사용하여 현재 위치의 날씨 정보를 얻었습니다. 쿼리 함수를 호출하면 오버라이딩한 <code>gotWeatherInfo</code> 함수를 통해 날씨 정보를 얻을 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">YahooWeather yahooWeather = YahooWeather.getInstance();</span><br><span class="line"></span><br><span class="line">yahooWeather.setNeedDownloadIcons(<span class="keyword">true</span>);</span><br><span class="line">yahooWeather.setUnit(YahooWeather.UNIT.CELSIUS);</span><br><span class="line">yahooWeather.setSearchMode(YahooWeather.SEARCH_MODE.GPS);</span><br><span class="line">yahooWeather.queryYahooWeatherByGPS(getApplicationContext(), <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>날씨 정보를 한 번만 불러오는 것이 아니라 1분 마다 얻기 위해 Timer 를 사용하였습니다. Timer 를 사용하기 위해 위의 코드를 함수로 만들었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">timer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Handler(Looper.getMainLooper()).post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                searchByGPS();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">0</span>, <span class="number">1000</span> * <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchByGPS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  yahooWeather.setNeedDownloadIcons(<span class="keyword">true</span>);</span><br><span class="line">  yahooWeather.setUnit(YahooWeather.UNIT.CELSIUS);</span><br><span class="line">  yahooWeather.setSearchMode(YahooWeather.SEARCH_MODE.GPS);</span><br><span class="line">  yahooWeather.queryYahooWeatherByGPS(getApplicationContext(), <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 1분 마다 날씨 정보를 불러올 수 있게 되었습니다. 현재 위치, 시간, 온도, 습도, 대기압, 풍향, 풍속 등의 다양한 날씨 정보를 화면에 표출하여 완성하였습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gotWeatherInfo</span><span class="params">(WeatherInfo weatherInfo, YahooWeather.ErrorType errorType)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (weatherInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">          datetimeText.setText(dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">          logitudeText.setText(weatherInfo.getAddress().getLongitude() + <span class="string">""</span>);</span><br><span class="line">          latitudeText.setText(weatherInfo.getAddress().getLatitude() + <span class="string">""</span>);</span><br><span class="line">          addressText.setText(weatherInfo.getAddress().getAddressLine(<span class="number">0</span>));</span><br><span class="line">          weatherText.setText(weatherInfo.getCurrentText());</span><br><span class="line">          temperatureText.setText(weatherInfo.getCurrentTemp() + <span class="string">" ºC"</span>);</span><br><span class="line">          humidityText.setText(weatherInfo.getAtmosphereHumidity() + <span class="string">" %"</span>);</span><br><span class="line">          pressureText.setText(weatherInfo.getAtmospherePressure());</span><br><span class="line">          windDirectionText.setText(weatherInfo.getWindDirection() + <span class="string">"˚"</span>);</span><br><span class="line">          windSpeedText.setText(weatherInfo.getWindSpeed() + <span class="string">" m/s"</span>);</span><br><span class="line">          windChillText.setText(weatherInfo.getWindChill() + <span class="string">" °F"</span>);</span><br><span class="line">          visibilityText.setText(weatherInfo.getAtmosphereVisibility());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="전체-코드"><a class="markdownIt-Anchor" href="#전체-코드"></a> 전체 코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WeatherActivity.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Looper;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> butterknife.BindView;</span><br><span class="line"><span class="keyword">import</span> butterknife.ButterKnife;</span><br><span class="line"><span class="keyword">import</span> me.hgko.networkinfo.R;</span><br><span class="line"><span class="keyword">import</span> zh.wang.android.yweathergetter4a.WeatherInfo;</span><br><span class="line"><span class="keyword">import</span> zh.wang.android.yweathergetter4a.YahooWeather;</span><br><span class="line"><span class="keyword">import</span> zh.wang.android.yweathergetter4a.YahooWeatherInfoListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">YahooWeatherInfoListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy.MM.dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BindView</span>(R.id.logitudeText)</span><br><span class="line">    TextView logitudeText;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.latitudeText)</span><br><span class="line">    TextView latitudeText;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.datetimeText)</span><br><span class="line">    TextView datetimeText;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.addressText)</span><br><span class="line">    TextView addressText;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.weatherText)</span><br><span class="line">    TextView weatherText;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.temperatureText)</span><br><span class="line">    TextView temperatureText;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.humidityText)</span><br><span class="line">    TextView humidityText;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.pressureText)</span><br><span class="line">    TextView pressureText;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.windDirectionText)</span><br><span class="line">    TextView windDirectionText;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.windSpeedText)</span><br><span class="line">    TextView windSpeedText;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.windChillText)</span><br><span class="line">    TextView windChillText;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.visibilityText)</span><br><span class="line">    TextView visibilityText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> YahooWeather yahooWeather;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Timer timer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_weather);</span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        yahooWeather = YahooWeather.getInstance();</span><br><span class="line"></span><br><span class="line">        timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">new</span> Handler(Looper.getMainLooper()).post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        searchByGPS();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">1000</span> * <span class="number">60</span> * <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gotWeatherInfo</span><span class="params">(WeatherInfo weatherInfo, YahooWeather.ErrorType errorType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weatherInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            datetimeText.setText(dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">            logitudeText.setText(weatherInfo.getAddress().getLongitude() + <span class="string">""</span>);</span><br><span class="line">            latitudeText.setText(weatherInfo.getAddress().getLatitude() + <span class="string">""</span>);</span><br><span class="line">            addressText.setText(weatherInfo.getAddress().getAddressLine(<span class="number">0</span>));</span><br><span class="line">            weatherText.setText(weatherInfo.getCurrentText());</span><br><span class="line">            temperatureText.setText(weatherInfo.getCurrentTemp() + <span class="string">" ºC"</span>);</span><br><span class="line">            humidityText.setText(weatherInfo.getAtmosphereHumidity() + <span class="string">" %"</span>);</span><br><span class="line">            pressureText.setText(weatherInfo.getAtmospherePressure());</span><br><span class="line">            windDirectionText.setText(weatherInfo.getWindDirection() + <span class="string">"˚"</span>);</span><br><span class="line">            windSpeedText.setText(weatherInfo.getWindSpeed() + <span class="string">" m/s"</span>);</span><br><span class="line">            windChillText.setText(weatherInfo.getWindChill() + <span class="string">" °F"</span>);</span><br><span class="line">            visibilityText.setText(weatherInfo.getAtmosphereVisibility());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">searchByGPS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        yahooWeather.setNeedDownloadIcons(<span class="keyword">true</span>);</span><br><span class="line">        yahooWeather.setUnit(YahooWeather.UNIT.CELSIUS);</span><br><span class="line">        yahooWeather.setSearchMode(YahooWeather.SEARCH_MODE.GPS);</span><br><span class="line">        yahooWeather.queryYahooWeatherByGPS(getApplicationContext(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="keyword">if</span> (timer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            timer.cancel();</span><br><span class="line">            timer = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- activity_weather.xml --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".activity.WeatherActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">"Datetime :"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/datetimeText"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"@color/colorBlue"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">"Logitude :"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/logitudeText"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"@color/colorBlue"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">"Latitude :"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/latitudeText"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"@color/colorBlue"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">"Address :"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/addressText"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"@color/colorBlue"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">"Weather :"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/weatherText"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"@color/colorBlue"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">"Temperature :"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/temperatureText"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"@color/colorBlue"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">"Wind Chill :"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/windChillText"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"@color/colorBlue"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">"Wind Direction :"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/windDirectionText"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"@color/colorBlue"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">"Wind Speed :"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/windSpeedText"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"@color/colorBlue"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">"Humidity :"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/humidityText"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"@color/colorBlue"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">"Pressure :"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/pressureText"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"@color/colorBlue"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">"Visibility :"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/visibilityText"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/TextStyle2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"@color/colorBlue"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>TextView 에 공통으로 스타일을 지정하기 위해 styles.xml 에 추가합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"TextStyle1"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>0dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>wrap_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_weight"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/colorText<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>14sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"TextStyle2"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>0dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>wrap_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_weight"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/colorText<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>14sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="실행-결과"><a class="markdownIt-Anchor" href="#실행-결과"></a> 실행 결과</h2><p>앱을 실행하면 아래 이미지와 같이 현재 위치의 날씨 정보를 확인할 수 있습니다.</p><img width="50%" src="/images/android/dev1/weather.png" alt="" title=""><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://github.com/zh-wang/YWeatherGetter4a" target="_blank" rel="noopener">https://github.com/zh-wang/YWeatherGetter4a</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/05/12/android-dev-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MATLAB] MinGW-W64 수동 설치</title>
      <link>http://hgko1207.github.io/2021/05/06/matlab-1/</link>
      <guid>http://hgko1207.github.io/2021/05/06/matlab-1/</guid>
      <pubDate>Thu, 06 May 2021 07:41:52 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;MATLAB&lt;/strong&gt; 에서 개발하고 MATLAB Coder를 사용하여 C 또는 C++ 코드로 변환하려고 하였다. 그런데 MEX 컴파일러를 확인할 수 없다는 에러가 났습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/mat
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>MATLAB</strong> 에서 개발하고 MATLAB Coder를 사용하여 C 또는 C++ 코드로 변환하려고 하였다. 그런데 MEX 컴파일러를 확인할 수 없다는 에러가 났습니다.</p><p><img src="/images/matlab/1/1.png" alt="" /></p><p>MATLAB 에서 <code>mex -setup</code> 명령어를 실행했더니 다음과 같이 MinGW-w64 C/C++ 컴파일러를 설치해야 한다는 내용이 나왔습니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; mex -setup</span><br><span class="line">다음 사용 중 오류가 발생함: mex</span><br><span class="line">사용할 수 있는 컴파일러 또는 SDK를 찾을 수 없습니다. 무료로 제공되는 MinGW-w64 C/C++ 컴파일러를 설치할 수 있습니다. MinGW-w64 컴파일러 설치를 참조하십시오. 더 많은 옵션을</span><br><span class="line">보려면 http://www.mathworks.com/support/compilers/R2016a/win64.html을 참조하십시오.</span><br></pre></td></tr></table></figure><p>구글 검색했을 때 <strong><em>홈 탭 &gt; 환경 섹션 &gt; 애드온</em></strong> 을 이용하여 설치할 수 있다고 하였는데 지금 사용하고 있는 <strong>MATLAB 2016a</strong> 버전 같은 경우에는 설치를 지원하지 않는 것인지 자동으로 설치를 할 수가 없었습니다. 그래서 직접 설치 파일을 다운받아 설치를 진행하였습니다.</p><h2 id="수동-설치"><a class="markdownIt-Anchor" href="#수동-설치"></a> 수동 설치</h2><ol><li><a href="https://jmeubank.github.io/tdm-gcc/download/" target="_blank" rel="noopener">https://jmeubank.github.io/tdm-gcc/download/</a> 페이지에서 현재 최신 버전인 <strong>tdm64-gcc-9.2.0.exe</strong> 설치 파일 다운로드(윈도우 운영체제에 맞게 다운로드)</li></ol><img width="75%" src="/images/matlab/1/2.png" alt="" title=""><ol start="2"><li>위 그림처럼 체크를 해제한 후 <strong>Create</strong> 버튼을 클릭</li></ol><p><img src="/images/matlab/1/3.png" alt="" /></p><ol start="3"><li>설치 경로는 공백이 없는 <strong>C:\TDM-GCC-64</strong> 경로로 지정하여 설치</li><li>환경 변수가 자동으로 등록되며 설치 완료</li></ol><h2 id="환경-설정-및-setup"><a class="markdownIt-Anchor" href="#환경-설정-및-setup"></a> 환경 설정 및 setup</h2><p>MATLAB 으로 돌아와서 <code>setenv</code> 명령어를 통해 설치된 경로에 대해 환경 설정을 하고 <code>mex -setup</code> 명령어를 실행하면 이제 MinGW64 Compiler 를 사용할 수 있습니다.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; setenv ( <span class="string">'MW_MINGW64_LOC'</span>, <span class="string">'C:\TDM-GCC-64'</span> )</span><br><span class="line">&gt;&gt; mex -setup</span><br><span class="line">MEX이(가) C 언어 컴파일에 <span class="string">'MinGW64 Compiler (C)'</span>을(를) 사용하도록 구성되었습니다.</span><br><span class="line">경고: <span class="number">2</span>^<span class="number">32</span><span class="number">-1</span>개의 요소를 초과하는 MATLAB 변수를 지원하기 위해</span><br><span class="line"> MATLAB C와 Fortran API가 변경되었습니다. 새 API를 활용하기</span><br><span class="line"> 위해서는 가까운 시일 내에 코드를 업데이트해야</span><br><span class="line"> 할 수 있습니다. 자세한 내용은</span><br><span class="line"> http://www.mathworks.com/help/matlab/matlab_external/upgrading-mex-files-to-use-64-bit-api.html에서 확인할 수 있습니다.</span><br><span class="line"></span><br><span class="line">다른 언어를 선택하려면 다음 중 하나를 선택하십시오.</span><br><span class="line"> mex -setup C++</span><br><span class="line"> mex -setup FORTRAN</span><br></pre></td></tr></table></figure><p>MinGW64 Compiler (C++) 을 사용하도록 구성할 시 다음 명령어를 실행합니다.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; mex -setup C++</span><br></pre></td></tr></table></figure><h2 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h2><p>MATLAB Coder를 이용한 Code 변환도 성공적으로 완료되었습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/05/06/matlab-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++] 평균, 표준편차 구하기</title>
      <link>http://hgko1207.github.io/2021/04/28/cpp-coding-4/</link>
      <guid>http://hgko1207.github.io/2021/04/28/cpp-coding-4/</guid>
      <pubDate>Wed, 28 Apr 2021 00:49:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;평균-및-표준편차-계산-함수&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#평균-및-표준편차-계산-함수&quot;&gt;&lt;/a&gt; 평균 및 표준편차 계산 함수&lt;/h2&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="평균-및-표준편차-계산-함수"><a class="markdownIt-Anchor" href="#평균-및-표준편차-계산-함수"></a> 평균 및 표준편차 계산 함수</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 평균 계산 함수</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">double</span> <span class="title">Mean</span>(<span class="title">std</span>:</span>:<span class="built_in">vector</span>&lt;T&gt; <span class="built_in">array</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.size(); i++)</span><br><span class="line">        sum += <span class="built_in">array</span>[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum / <span class="built_in">array</span>.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 표준 편차 계산 함수</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">double</span> <span class="title">StandardDeviation</span>(<span class="title">std</span>:</span>:<span class="built_in">vector</span>&lt;T&gt; <span class="built_in">array</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> meanValue = Mean&lt;T&gt;(<span class="built_in">array</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 배열 요소가 1개밖에 없을 때는</span></span><br><span class="line">    <span class="comment">// NaN(숫자가 아님)이라는 의미로</span></span><br><span class="line">    <span class="comment">// sqrt(-1.0) 을 반환</span></span><br><span class="line">    <span class="keyword">int</span> size = <span class="built_in">array</span>.size();</span><br><span class="line">    <span class="keyword">if</span> (size &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="number">-1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">double</span> diff = <span class="built_in">array</span>[i] - meanValue;</span><br><span class="line">        sum += diff * diff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(sum / (size - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="테스트"><a class="markdownIt-Anchor" href="#테스트"></a> 테스트</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>;</span><br><span class="line">    <span class="built_in">array</span>.push_back(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">array</span>.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">array</span>.push_back(<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">array</span>.push_back(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">array</span>.push_back(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">array</span>.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">array</span>.push_back(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">array</span>.push_back(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> meanValue = Mean&lt;<span class="keyword">int</span>&gt;(<span class="built_in">array</span>);</span><br><span class="line">    <span class="keyword">double</span> stddevValue = StandardDeviation&lt;<span class="keyword">int</span>&gt;(<span class="built_in">array</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"meanValue : "</span> &lt;&lt; meanValue &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"stddevValue : "</span> &lt;&lt; stddevValue &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meanValue : <span class="number">5.75</span></span><br><span class="line">stddevValue : <span class="number">3.28416</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/04/28/cpp-coding-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JAVA] 날짜 비교</title>
      <link>http://hgko1207.github.io/2021/04/26/java-dev-7/</link>
      <guid>http://hgko1207.github.io/2021/04/26/java-dev-7/</guid>
      <pubDate>Mon, 26 Apr 2021 01:18:29 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;SimpleDateFormat&lt;/strong&gt; 을 이용한 날짜 비교하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;소스코드&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#소스코드&quot;&gt;&lt;/a&gt; 소스코드&lt;/h2
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>SimpleDateFormat</strong> 을 이용한 날짜 비교하는 방법에 대해 알아보겠습니다.</p><h2 id="소스코드"><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormatExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getDayCount</span><span class="params">( String start, String end )</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat( <span class="string">"yyyy-M-d"</span> );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> diff = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date dateStart = format.parse( start );</span><br><span class="line">            Date dateEnd = format.parse( end );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// time is always 00:00:00 so rounding should help to ignore the</span></span><br><span class="line">            <span class="comment">// missing hour when going from winter to summer time as well as the</span></span><br><span class="line">            <span class="comment">// extra hour in the other direction</span></span><br><span class="line">            diff = Math.round( ( dateEnd.getTime() - dateStart.getTime() ) / (<span class="keyword">double</span>)( <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">1000</span> ) );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> diff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> diff = getDayCount( <span class="string">"2021-1-1"</span>, <span class="string">"2021-4-26"</span> );</span><br><span class="line">        System.out.println( <span class="string">"결과 : "</span> + diff + <span class="string">" 일"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">결과 : <span class="number">115</span> 일</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/04/26/java-dev-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++] Is the Point Inside the Polygon?</title>
      <link>http://hgko1207.github.io/2021/04/13/cpp-coding-3/</link>
      <guid>http://hgko1207.github.io/2021/04/13/cpp-coding-3/</guid>
      <pubDate>Tue, 13 Apr 2021 04:58:06 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;point-in-polygon-pip&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#point-in-polygon-pip&quot;&gt;&lt;/a&gt; point-in-polygon (PIP)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“In
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="point-in-polygon-pip"><a class="markdownIt-Anchor" href="#point-in-polygon-pip"></a> point-in-polygon (PIP)</h2><blockquote><p>“In computational geometry, the point-in-polygon (PIP) problem asks whether a given point in the plane lies inside, outside, or on the boundary of a polygon.” Wikipedia.</p></blockquote><p>점이 다각형(Polygon) 내부에 있는지 확인하는 코드입니다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsidePolygon</span><span class="params">(<span class="keyword">int</span> nvert, Point polygon[], <span class="keyword">int</span> pointx, <span class="keyword">int</span> pointy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> inside = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = nvert - <span class="number">1</span>; i &lt; nvert; j = i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (((polygon[i].y &gt; pointy) != (polygon[j].y &gt; pointy)) &amp;&amp;</span><br><span class="line">          (pointx &lt; (polygon[j].x - polygon[i].x) * (pointy - polygon[i].y) / (polygon[j].y - polygon[i].y) + polygon[i].x)) &#123;</span><br><span class="line">            inside = !inside;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inside;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="인수"><a class="markdownIt-Anchor" href="#인수"></a> 인수</h3><ul><li>nvert : 다각형의 정점 수</li><li>polygon[] : 다각형을 형성하는 점의 배열</li><li>pointx : 점의 X 좌표</li><li>pointy : 점의 Y 좌표</li></ul><h2 id="테스트"><a class="markdownIt-Anchor" href="#테스트"></a> 테스트</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Point polygon[] = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">50</span>, <span class="number">0</span>&#125;, &#123;<span class="number">50</span>, <span class="number">50</span>&#125;, &#123;<span class="number">0</span>, <span class="number">50</span>&#125;&#125;;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(polygon) / <span class="keyword">sizeof</span>(polygon[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> result = InsidePolygon(n, polygon, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">  result ? <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES \n"</span> : <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"NO \n"</span>;</span><br><span class="line"></span><br><span class="line">  result = InsidePolygon(n, polygon, <span class="number">60</span>, <span class="number">20</span>);</span><br><span class="line">  result ? <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES \n"</span> : <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"NO \n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/04/13/cpp-coding-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Oracle] Spatial Data Query</title>
      <link>http://hgko1207.github.io/2021/03/18/oracle-2/</link>
      <guid>http://hgko1207.github.io/2021/03/18/oracle-2/</guid>
      <pubDate>Thu, 18 Mar 2021 00:39:31 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;table&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#table&quot;&gt;&lt;/a&gt; Table&lt;/h2&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="table"><a class="markdownIt-Anchor" href="#table"></a> Table</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sample_table</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">NUMBER</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR2</span>(<span class="number">20</span>),</span><br><span class="line">  shape SDO_GEOMETRY</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="insert"><a class="markdownIt-Anchor" href="#insert"></a> INSERT</h2><p>SDO_GEOMETRY 컬럼에 넣을 데이터는 타입마다 형식이 다릅니다.</p><ul><li>Point(점) 타입</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SDO_GEOMETRY(</span><br><span class="line">    2001,</span><br><span class="line">    4326,</span><br><span class="line">    SDO_POINT_TYPE(126.64,36.86, NULL),</span><br><span class="line">    NULL,</span><br><span class="line">    NULL</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><ul><li>Rectangle(직사각형) 타입</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SDO_GEOMETRY(</span><br><span class="line">    2003, <span class="comment">-- 2차원의 폴리곤</span></span><br><span class="line">    4326,</span><br><span class="line">    NULL,</span><br><span class="line">    SDO_ELEM_INFO_ARRAY(1,1003,3), <span class="comment">-- 1개의 사각형</span></span><br><span class="line">    SDO_ORDINATE_ARRAY(126.63,36.84, 126.65,36.88)</span><br><span class="line">    <span class="comment">-- 사각형을 정의하기 위해 오직 2개의 포인트 필요(lower left and upper right)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>Polygon 타입</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SDO_GEOMETRY(</span><br><span class="line">    2003,</span><br><span class="line">    4326,</span><br><span class="line">    NULL,</span><br><span class="line">    SDO_ELEM_INFO_ARRAY(1,1003,1), <span class="comment">-- 1개의 폴리곤</span></span><br><span class="line">    SDO_ORDINATE_ARRAY(126.63,36.88, 126.64,36.88, 126.64,36.84, 126.63,36.84, 126.63,36.88)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><ul><li>Circle(원) 타입</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SDO_GEOMETRY(</span><br><span class="line">    2003,</span><br><span class="line">    4326,</span><br><span class="line">    NULL,</span><br><span class="line">    SDO_ELEM_INFO_ARRAY(1,1003,4), <span class="comment">-- 1개의 원</span></span><br><span class="line">    SDO_ORDINATE_ARRAY(8,7, 10,9, 8,11) <span class="comment">-- 1개의 원은 최소 3개의 점으로 정의됨</span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure><ul><li>두 개의 폴리곤</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SDO_GEOMETRY (</span><br><span class="line">    2003,  <span class="comment">-- 2차원의 폴리곤</span></span><br><span class="line">    4326,</span><br><span class="line">    NULL,</span><br><span class="line">    SDO_ELEM_INFO_ARRAY(1,1003,1, 19,2003,1),</span><br><span class="line">    SDO_ORDINATE_ARRAY(0,0, 10,0, 10,10, 0,10, 0,0, 4,4, 6,4, 6,6, 4,6, 4,4)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><ul><li>Insert 예제</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sample_table (<span class="keyword">id</span>, <span class="keyword">name</span>, shape)</span><br><span class="line"><span class="keyword">VALUES</span> ( <span class="number">1</span>, <span class="string">'Rectangle'</span>,</span><br><span class="line">        SDO_GEOMETRY(<span class="number">2003</span>, <span class="number">4326</span>, <span class="literal">NULL</span>,</span><br><span class="line">          SDO_ELEM_INFO_ARRAY(<span class="number">1</span>,<span class="number">1003</span>,<span class="number">3</span>),</span><br><span class="line">          SDO_ORDINATE_ARRAY(<span class="number">126.63</span>,<span class="number">36.84</span>, <span class="number">126.65</span>,<span class="number">36.88</span>)) );</span><br></pre></td></tr></table></figure><h2 id="select"><a class="markdownIt-Anchor" href="#select"></a> SELECT</h2><ul><li>입력된 직사각형 영역 안의 데이터 조회</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SDO_INTERSECTION(geometry1, geometry2, tolerance);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span> sample_table</span><br><span class="line"><span class="keyword">WHERE</span> SDO_GEOM.SDO_INTERSECTION(</span><br><span class="line">        shape,</span><br><span class="line">        SDO_GEOMETRY(<span class="number">2003</span>, <span class="number">4326</span>, <span class="literal">NULL</span>,</span><br><span class="line">          SDO_ELEM_INFO_ARRAY(<span class="number">1</span>,<span class="number">1003</span>,<span class="number">3</span>),</span><br><span class="line">          SDO_ORDINATE_ARRAY(<span class="number">126.61</span>,<span class="number">36.82</span>, <span class="number">126.66</span>,<span class="number">36.90</span>)),</span><br><span class="line">        <span class="number">0.005</span></span><br><span class="line">      ) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SDO_RELATE(geometry1, geometry2, param);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span> sample_table</span><br><span class="line"><span class="keyword">WHERE</span> SDO_RELATE(</span><br><span class="line">        shape,</span><br><span class="line">        SDO_GEOMETRY(<span class="number">2003</span>, <span class="number">4326</span>, <span class="literal">NULL</span>,</span><br><span class="line">          SDO_ELEM_INFO_ARRAY(<span class="number">1</span>,<span class="number">1003</span>,<span class="number">3</span>),</span><br><span class="line">          SDO_ORDINATE_ARRAY(<span class="number">126.61</span>,<span class="number">36.82</span>, <span class="number">126.66</span>,<span class="number">36.90</span>)),</span><br><span class="line">        <span class="string">'mask=INSIDE+OVERLAPBDYINTERSECT+EQUAL+COVERS'</span></span><br><span class="line">      ) = <span class="string">'TRUE'</span></span><br></pre></td></tr></table></figure><p>위의 쿼리에서 SDO_RELATE 의 param에 대한 내용은 참고 사이트에 자세하게 설명되어 있습니다.</p><ul><li>X, Y 좌표 조회</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, t.x, t.y, t.id</span><br><span class="line"><span class="keyword">FROM</span> sample_table s, <span class="keyword">TABLE</span>(SDO_UTIL.GETVERTICES(s.shape)) t</span><br></pre></td></tr></table></figure><ul><li>Polygon Center 좌표 조회</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  SDO_GEOM.SDO_CENTROID(s.shape, m.diminfo).SDO_POINT.X x,</span><br><span class="line">  SDO_GEOM.SDO_CENTROID(s.shape, m.diminfo).SDO_POINT.Y y</span><br><span class="line"><span class="keyword">FROM</span> sample_table s, user_sdo_geom_metadata m</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Polygon'</span></span><br></pre></td></tr></table></figure><ul><li>Geometry 형식이 맞는가?</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.name, SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT(s.shape, <span class="number">0.005</span>)</span><br><span class="line"><span class="keyword">FROM</span> sample_table s</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://docs.oracle.com/database/121/SPATL/spatial-relationships-and-filtering.htm#SPATL460" target="_blank" rel="noopener">Oracle Help Center - Spatial Relationships and Filtering</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/03/18/oracle-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Oracle] SDO_GEOMETRY 사용 방법</title>
      <link>http://hgko1207.github.io/2021/03/16/oracle-1/</link>
      <guid>http://hgko1207.github.io/2021/03/16/oracle-1/</guid>
      <pubDate>Tue, 16 Mar 2021 01:22:54 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;sdo_geometry&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sdo_geometry&quot;&gt;&lt;/a&gt; SDO_GEOMETRY&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Oracle Spatial&lt;/strong&gt; 을 사용하여 공간 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="sdo_geometry"><a class="markdownIt-Anchor" href="#sdo_geometry"></a> SDO_GEOMETRY</h2><p><strong>Oracle Spatial</strong> 을 사용하여 공간 데이터를 생성하고 관리합니다. Oracle 에는 <code>SDO_GEOMETRY</code> 타입을 통하여 공간 데이터를 구성할 수 있습니다.</p><p><code>SDO_GEOMETRY</code> 은 다음과 같이 정의됩니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> sdo_geometry <span class="keyword">AS</span> <span class="keyword">OBJECT</span> (</span><br><span class="line">  SDO_GTYPE <span class="built_in">NUMBER</span>,</span><br><span class="line">  SDO_SRID <span class="built_in">NUMBER</span>,</span><br><span class="line">  SDO_POINT SDO_POINT_TYPE,</span><br><span class="line">  SDO_ELEM_INFO SDO_ELEM_INFO_ARRAY,</span><br><span class="line">  SDO_ORDINATES SDO_ORDINATE_ARRAY</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="sdo_gtype"><a class="markdownIt-Anchor" href="#sdo_gtype"></a> SDO_GTYPE</h5><ul><li>00 - UNKNOWN_GEOMETRY</li><li>01 - POINT</li><li>02 - LINE or CURVE</li><li>03 - POLYGON or SURFACE</li><li>04 - COLLECTION</li><li>05 - MULTIPOINT</li><li>06 - MULTILINE or MULTICURVE</li><li>07 - MULTIPOLYGON or MULTISURFACE</li><li>08 - SOLID</li><li>09 - MULTISOLID</li></ul><p>예) 2003 일 경우 2차원의 POLYGON 형식</p><h5 id="sdo_srid"><a class="markdownIt-Anchor" href="#sdo_srid"></a> SDO_SRID</h5><p>Geometry 와 연관된 Coordinate System(Spatial Reference System) 입니다. 값이 NULL 이면 관련된 Coordinate System 이 없는 것 입니다.</p><h5 id="sdo_point"><a class="markdownIt-Anchor" href="#sdo_point"></a> SDO_POINT</h5><p>POINT 형식일 때 사용합니다. <code>SDO_POINT_TYPE(x, y, z)</code> 을 통해 포인트를 입력합니다.</p><h5 id="sdo_elem_info"><a class="markdownIt-Anchor" href="#sdo_elem_info"></a> SDO_ELEM_INFO</h5><p><code>SDO_ORDINATES</code> 에 저장될 값의 형식을 정의합니다.</p><p>예) SDO_ELEM_INFO_ARRAY(1,1003,3)</p><ul><li>첫 번째 1 은 <code>SDO_ORDINATES</code> 에 입력된 도형 ARRAY 의 시작 위치</li><li>1003과 3은 도형 형식을 정의<ul><li>1003 은 외부도형, 2003 일 경우 내부도형</li><li>(1,1003,1) or (1,2003,1) : 폴리곤 형식으로 4면 다각형의 경우 5개의 점을 지정하고 점 5와 점 1은 동일</li><li>(1,1003,3) or (1,2003,3) : 직사각형 유형. 왼쪽 하단과 오른쪽 상단의 두 점을 지정</li><li>(1,1003,4) or (1,2003,4) : 원형 유형. 최소 3개의 점을 지정해야 함</li><li>자세한 내용은 참고 사이트에서 확인</li></ul></li></ul><h5 id="sdo_ordinates"><a class="markdownIt-Anchor" href="#sdo_ordinates"></a> SDO_ORDINATES</h5><p><code>SDO_ELEM_INFO</code> 에서 정의된 형식으로 값을 입력합니다.</p><h2 id="spatial-table-생성"><a class="markdownIt-Anchor" href="#spatial-table-생성"></a> Spatial Table 생성</h2><h3 id="1-테이블-생성"><a class="markdownIt-Anchor" href="#1-테이블-생성"></a> 1. 테이블 생성</h3><p>shape 필드에 <code>SDO_GEOMETRY</code> 타입을 지정하여 Spatial 테이블을 생성하였습니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sample_table</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">NUMBER</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR2</span>(<span class="number">20</span>),</span><br><span class="line">  shape SDO_GEOMETRY</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-메타데이터-생성"><a class="markdownIt-Anchor" href="#2-메타데이터-생성"></a> 2. 메타데이터 생성</h3><p><code>SDO_GEOMETRY</code> 를 사용하기 전에 꼭 메타데이터를 생성해줘야 합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_sdo_geom_metadata</span><br><span class="line">  (</span><br><span class="line">    table_name,</span><br><span class="line">    column_name,</span><br><span class="line">    diminfo,</span><br><span class="line">    srid</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">  (</span><br><span class="line">    <span class="string">'sample_table'</span>,</span><br><span class="line">    <span class="string">'shape'</span>,</span><br><span class="line">    SDO_DIM_ARRAY(</span><br><span class="line">      SDO_DIM_ELEMENT(<span class="string">'Longitude'</span>, <span class="number">-180</span>, <span class="number">180</span>, <span class="number">0.5</span>), =&gt; <span class="number">10</span> 미터 허용오차</span><br><span class="line">      SDO_DIM_ELEMENT(<span class="string">'Latitude'</span>, <span class="number">-90</span>, <span class="number">90</span>, <span class="number">0.5</span>)</span><br><span class="line">    ),</span><br><span class="line">    <span class="number">4326</span>  ====&gt; Longitude/Latitude(WGS <span class="number">84</span>) : <span class="number">4326</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h3 id="3-인덱스-생성"><a class="markdownIt-Anchor" href="#3-인덱스-생성"></a> 3. 인덱스 생성</h3><p>메타데이터 생성 후 Spatial 테이블의 인덱스를 생성합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 인덱스 생성 형식</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name(column_name) <span class="keyword">INDEXTYPE</span> <span class="keyword">IS</span> MDSYS.SPATIAL_INDEX;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사용 예제</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> sample_index <span class="keyword">ON</span> sample_table(shape) <span class="keyword">indextype</span> <span class="keyword">IS</span> MDSYS.SPATIAL_INDEX;</span><br></pre></td></tr></table></figure><h3 id="4-데이터-입력"><a class="markdownIt-Anchor" href="#4-데이터-입력"></a> 4. 데이터 입력</h3><p>테이블을 생성하고 메타데이터와 인덱스까지 생성하였으면 데이터를 넣어봅니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Rectangle 데이터</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sample_table (<span class="keyword">id</span>, <span class="keyword">name</span>, shape)</span><br><span class="line"><span class="keyword">VALUES</span> ( <span class="number">1</span>, <span class="string">'Rectangle'</span>,</span><br><span class="line">        SDO_GEOMETRY(<span class="number">2003</span>, <span class="number">4326</span>, <span class="literal">NULL</span>,</span><br><span class="line">          SDO_ELEM_INFO_ARRAY(<span class="number">1</span>,<span class="number">1003</span>,<span class="number">3</span>),</span><br><span class="line">          SDO_ORDINATE_ARRAY(<span class="number">5</span>,<span class="number">5</span>, <span class="number">10</span>,<span class="number">10</span>)) );</span><br></pre></td></tr></table></figure><h3 id="5-확인"><a class="markdownIt-Anchor" href="#5-확인"></a> 5. 확인</h3><p>입력된 데이터가 <code>SDO_GEOMETRY</code> 형식인지 확인합니다. 결과가 <strong>TRUE</strong> 가 아니면 잘못된 입력입니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT(shape, <span class="number">0.5</span>) <span class="keyword">FROM</span> sample_table;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과</span></span><br><span class="line">1, Rectangle, TRUE</span><br></pre></td></tr></table></figure><p><code>SDO_GEOMETRY</code> 타입을 사용하여 공간 데이터 생성을 진행하였습니다. 다음에는 생성된 공간 데이터에 대한 쿼리를 알아보겠습니다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://docs.oracle.com/database/121/SPATL/sdo_geometry-object-type.htm#SPATL492" target="_blank" rel="noopener">Oracle Help Center - SDO_GEOMETRY Object Type</a></li><li><a href="https://docs.oracle.com/database/121/SPATL/polygon-hole.htm#SPATL520" target="_blank" rel="noopener">Oracle Help Center - Polygon with a Hole</a></li><li><a href="http://www.gisdeveloper.co.kr/?p=2018" target="_blank" rel="noopener">Oracle Spatial Geometry Type 및 Spatial Table 생성</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/03/16/oracle-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Spring Boot] 환경에 따른 설정 방법</title>
      <link>http://hgko1207.github.io/2021/03/11/springboot-2/</link>
      <guid>http://hgko1207.github.io/2021/03/11/springboot-2/</guid>
      <pubDate>Thu, 11 Mar 2021 00:38:25 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Spring Boot 를 사용하여 웹 프로젝트를 할 때에 환경(개발 또는 배포)에 따라 설정 값들을 달리 할 필요가 있습니다.&lt;/p&gt;
&lt;p&gt;Spring Boot 에서는 &lt;code&gt;application.properties&lt;/code&gt; 파일을 &lt;st
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Spring Boot 를 사용하여 웹 프로젝트를 할 때에 환경(개발 또는 배포)에 따라 설정 값들을 달리 할 필요가 있습니다.</p><p>Spring Boot 에서는 <code>application.properties</code> 파일을 <strong>profile</strong> 로 구분하여 사용할 수 있습니다. <strong>profile</strong> 을 작성하지 않을경우 <strong>default</strong> 로 <code>application.properties</code> 를 사용합니다.</p><h2 id="applicationproperties-작성-규칙"><a class="markdownIt-Anchor" href="#applicationproperties-작성-규칙"></a> application.properties 작성 규칙</h2><p><code>profile</code> 을 포함한 파일명을 작성합니다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default</span></span><br><span class="line"><span class="attr">application.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 배포 환경(prod)</span></span><br><span class="line"><span class="attr">application-prod.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 개발 환경(dev)</span></span><br><span class="line"><span class="attr">application-dev.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 테스트 환경(test)</span></span><br><span class="line"><span class="attr">application-test.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># custom</span></span><br><span class="line"><span class="attr">application-custom.properties</span></span><br></pre></td></tr></table></figure><h2 id="예제"><a class="markdownIt-Anchor" href="#예제"></a> 예제</h2><p>개발과 배포 할 때의 설정을 나눈 예제입니다.</p><h3 id="파일-생성"><a class="markdownIt-Anchor" href="#파일-생성"></a> 파일 생성</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 배포용(기본)</span></span><br><span class="line"><span class="attr">application.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 개발용(dev)</span></span><br><span class="line"><span class="attr">application-dev.properties</span></span><br></pre></td></tr></table></figure><h3 id="applicationproperties-설정"><a class="markdownIt-Anchor" href="#applicationproperties-설정"></a> application.properties 설정</h3><p><code>application-dev.properties</code> 파일에 <code>spring.profiles.active=dev</code> 을 추가합니다.</p><ul><li><strong>application.properties</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Server 설정</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Database 설정</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://[외부 IP]:3306/test?characterEncoding=UTF-8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root!23</span></span><br></pre></td></tr></table></figure><ul><li><strong>application-dev.properties</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Profile 설정 - 이 값을 꼭 넣어야 합니다.</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server 설정</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Database 설정</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">test!23</span></span><br></pre></td></tr></table></figure><h3 id="application-실행-설정"><a class="markdownIt-Anchor" href="#application-실행-설정"></a> Application 실행 설정</h3><h4 id="stsspring-tool-suite-spring-boot-run"><a class="markdownIt-Anchor" href="#stsspring-tool-suite-spring-boot-run"></a> <strong>STS(Spring Tool Suite)</strong> - Spring Boot Run</h4><p>다음의 이미지와 같이 <code>Profile</code> 에 적용하고자 하는 환경 값(예: dev)을 선택하면 <code>application-dev.properties</code> 의 설정을 읽어옵니다.</p><p><img src="/images/springboot/profile_setting.png" alt="" /></p><h3 id="실행-테스트"><a class="markdownIt-Anchor" href="#실행-테스트"></a> 실행 테스트</h3><p><code>dev</code> 환경을 주입 후 실행 테스트를 하였습니다. <code>dev</code> 환경일 때 서버 포트를 <strong>8081</strong> 으로 설정을 하였었는데 다음의 실행 로그를 보면 <code>Tomcat started on port(s): 8081</code> 처럼 <strong>8081</strong> 포트로 서버가 실행 된 것을 확인할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2021-03-11 13:52:28.738  INFO 13588 --- [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory <span class="keyword">for</span> persistence unit <span class="string">'default'</span></span><br><span class="line">2021-03-11 13:52:28.772  INFO 13588 --- [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729</span><br><span class="line">2021-03-11 13:52:29.903  INFO 13588 --- [  restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService <span class="string">'applicationTaskExecutor'</span></span><br><span class="line">2021-03-11 13:52:30.836  INFO 13588 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8081 (http) with context path <span class="string">'/admin'</span></span><br><span class="line">2021-03-11 13:52:30.839  INFO 13588 --- [  restartedMain] c.y.a.a.EAfterschoolAdminApplication     : Started EAfterschoolAdminApplication <span class="keyword">in</span> 6.985 seconds (JVM running <span class="keyword">for</span> 7.822)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/03/11/springboot-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JavaScript] String형 Bytes length 구하기</title>
      <link>http://hgko1207.github.io/2021/03/10/js-dev-2/</link>
      <guid>http://hgko1207.github.io/2021/03/10/js-dev-2/</guid>
      <pubDate>Wed, 10 Mar 2021 00:52:06 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;utf-8-인코딩-방식-바이트-길이-구하기&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#utf-8-인코딩-방식-바이트-길이-구하기&quot;&gt;&lt;/a&gt; UTF-8 인코딩 방식 바이트 길이 구하기&lt;/h2&gt;
&lt;p&gt;한글 한글자당 3
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="utf-8-인코딩-방식-바이트-길이-구하기"><a class="markdownIt-Anchor" href="#utf-8-인코딩-방식-바이트-길이-구하기"></a> UTF-8 인코딩 방식 바이트 길이 구하기</h2><p>한글 한글자당 3 바이트씩 계산됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function</span></span><br><span class="line"><span class="keyword">const</span> getByteLengthOfString = <span class="function"><span class="keyword">function</span> (<span class="params">s, b, i, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (b = i = <span class="number">0</span>; (c = s.charCodeAt(i++)); b += c &gt;&gt; <span class="number">11</span> ? <span class="number">3</span> : c &gt;&gt; <span class="number">7</span> ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="string">'테스트'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'length : '</span>, getByteLengthOfString(test), <span class="string">'Bytes'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 결과</span></span><br><span class="line">length : <span class="number">9</span> Bytes</span><br></pre></td></tr></table></figure><h2 id="한글의-경우-2바이트-계산되도록"><a class="markdownIt-Anchor" href="#한글의-경우-2바이트-계산되도록"></a> 한글의 경우 2바이트 계산되도록</h2><p>다음의 함수를 통해 한글 문자열의 바이트 수를 2 바이트로 나오게 할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function</span></span><br><span class="line"><span class="built_in">String</span>.prototype.getBytes = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> contents = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> str_character;</span><br><span class="line">  <span class="keyword">let</span> int_char_count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> int_contents_length = contents.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; int_contents_length; k++) &#123;</span><br><span class="line">    str_character = contents.charAt(k);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">escape</span>(str_character).length &gt; <span class="number">4</span>) int_char_count += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> int_char_count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> int_char_count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="string">'테스트'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'length : '</span>, test.getBytes(), <span class="string">'Bytes'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 결과</span></span><br><span class="line">length : <span class="number">6</span> Bytes</span><br></pre></td></tr></table></figure><h2 id="입력된-길이-만큼의-문자열을-리턴"><a class="markdownIt-Anchor" href="#입력된-길이-만큼의-문자열을-리턴"></a> 입력된 길이 만큼의 문자열을 리턴</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function</span></span><br><span class="line"><span class="built_in">String</span>.prototype.getStringFromByteLength = <span class="function"><span class="keyword">function</span> (<span class="params">length</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> contents = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> str_character;</span><br><span class="line">  <span class="keyword">let</span> int_char_count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> int_contents_length = contents.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> returnValue = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; int_contents_length; k++) &#123;</span><br><span class="line">    str_character = contents.charAt(k);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">escape</span>(str_character).length &gt; <span class="number">4</span>) int_char_count += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> int_char_count++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (int_char_count &gt; length) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    returnValue += str_character;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="string">'테스트'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result : '</span>, test.getStringFromByteLength(<span class="number">4</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 결과</span></span><br><span class="line">result: 테스;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/03/10/js-dev-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JAVA] String형 Bytes length 구하기</title>
      <link>http://hgko1207.github.io/2021/03/10/java-dev-6/</link>
      <guid>http://hgko1207.github.io/2021/03/10/java-dev-6/</guid>
      <pubDate>Wed, 10 Mar 2021 00:32:48 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;string-길이-구하기&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#string-길이-구하기&quot;&gt;&lt;/a&gt; String 길이 구하기&lt;/h2&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="string-길이-구하기"><a class="markdownIt-Anchor" href="#string-길이-구하기"></a> String 길이 구하기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String test = <span class="string">"테스트"</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"length : "</span> + test.length());</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 결과</span></span><br><span class="line">length : 3</span><br></pre></td></tr></table></figure><h2 id="바이트-길이-구하기"><a class="markdownIt-Anchor" href="#바이트-길이-구하기"></a> 바이트 길이 구하기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String test = <span class="string">"테스트"</span>;</span><br><span class="line"><span class="keyword">int</span> length = test.getBytes().length;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"length : "</span> + length + <span class="string">" Bytes"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 결과</span></span><br><span class="line">length : 9 Bytes</span><br></pre></td></tr></table></figure><p>기본 인코딩이 UTF-8 설정 되어있을 경우 한글은 한글자당 3바이트씩 계산됩니다. 한글 한글자당 2바이트씩 나오게 하려면 다음과 같이 인코딩을 설정하면 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String charset = <span class="string">"euc-kr"</span>;</span><br><span class="line">String test = <span class="string">"테스트"</span>;</span><br><span class="line"><span class="keyword">int</span> length = test.getBytes(charset).length;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"length : "</span> + length + <span class="string">" Bytes"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 결과</span></span><br><span class="line">length : 6 Bytes</span><br></pre></td></tr></table></figure><h2 id="인코딩-문자셋에-따라-바이트-길이-구하기"><a class="markdownIt-Anchor" href="#인코딩-문자셋에-따라-바이트-길이-구하기"></a> 인코딩 문자셋에 따라 바이트 길이 구하기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 문자열의 바이크 길이 구하기</span></span><br><span class="line"><span class="comment"> * 인코딩 문자셋에 따라 바이크 길이 달라짐.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str 문자열</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> charset 인코딩 문자셋</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getByteLength</span><span class="params">(String str, String charset)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str.getBytes(charset).length;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/03/10/java-dev-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Spring Boot] Maven 빌드 방법</title>
      <link>http://hgko1207.github.io/2021/03/09/springboot-1/</link>
      <guid>http://hgko1207.github.io/2021/03/09/springboot-1/</guid>
      <pubDate>Tue, 09 Mar 2021 04:52:07 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;stsspring-tool-suite-에서-빌드-방법&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#stsspring-tool-suite-에서-빌드-방법&quot;&gt;&lt;/a&gt; STS(Spring Tool Suite) 에서 빌드 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="stsspring-tool-suite-에서-빌드-방법"><a class="markdownIt-Anchor" href="#stsspring-tool-suite-에서-빌드-방법"></a> STS(Spring Tool Suite) 에서 빌드 방법</h2><ol><li>메뉴 -&gt; Run -&gt; Run Configurations -&gt; Maven Build(우클릭) -&gt; New Configuration 클릭</li><li><strong>[Name]</strong> 입력 란에 작성</li><li><strong>[Base directory]</strong> 에서 <strong>Workspace</strong> 버튼 클릭</li><li>빌드하려는 프로젝트 선택</li><li><strong>[Goals]</strong> 입력 란에 <code>clean install</code> 작성</li><li>저장 후 빌드 실행</li></ol><p>아래 이미지는 설정 한 내용입니다.</p><p><img src="/images/springboot/maven_build.png" alt="" /></p><h2 id="maven-빌드-중에-데이터베이스-연결을-제외하는-방법"><a class="markdownIt-Anchor" href="#maven-빌드-중에-데이터베이스-연결을-제외하는-방법"></a> Maven 빌드 중에 데이터베이스 연결을 제외하는 방법</h2><ul><li><p>Maven Build -&gt; <strong>[Goals]</strong> 입력 란에 <code>clean install -DskipTests</code> 작성합니다.</p></li><li><p>또는 pom.xml에 아래 코드를 추가합니다.</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/03/09/springboot-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Kubernetes] 명령어들</title>
      <link>http://hgko1207.github.io/2021/03/04/kubernetes-1/</link>
      <guid>http://hgko1207.github.io/2021/03/04/kubernetes-1/</guid>
      <pubDate>Thu, 04 Mar 2021 02:17:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;명령어들&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#명령어들&quot;&gt;&lt;/a&gt; 명령어들&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="명령어들"><a class="markdownIt-Anchor" href="#명령어들"></a> 명령어들</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 생성</span></span><br><span class="line">kubectl create -f test.pod.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 중지 및 삭제</span></span><br><span class="line">kubectl delete pod <span class="built_in">test</span> --grace-period=0 --force</span><br><span class="line">kubectl delete service <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># node 정보 확인</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># pod 확인</span></span><br><span class="line">kubectl get pods --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 서비스 확인</span></span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 배포 확인</span></span><br><span class="line">kubectl get deployments</span><br><span class="line"></span><br><span class="line"><span class="comment"># 상세 정보 확인</span></span><br><span class="line">kubectl describe pods</span><br><span class="line"></span><br><span class="line"><span class="comment"># 개별 상세 정보 확인</span></span><br><span class="line">kubectl describe pod &lt;name&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/03/04/kubernetes-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Docker] 명령어들</title>
      <link>http://hgko1207.github.io/2021/01/26/docker-2/</link>
      <guid>http://hgko1207.github.io/2021/01/26/docker-2/</guid>
      <pubDate>Tue, 26 Jan 2021 06:18:26 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;컨테이너-관련-명령어들&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#컨테이너-관련-명령어들&quot;&gt;&lt;/a&gt; 컨테이너 관련 명령어들&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="컨테이너-관련-명령어들"><a class="markdownIt-Anchor" href="#컨테이너-관련-명령어들"></a> 컨테이너 관련 명령어들</h2><table><thead><tr><th>명령어</th><th>설명</th></tr></thead><tbody><tr><td>docker ps</td><td>실행되고 있는 컨테이너 목록</td></tr><tr><td>docker ps -a</td><td>전체 컨테이너 목록</td></tr><tr><td>docker ps --no-trunc</td><td>컨테이너 정보 전체 표시</td></tr><tr><td>docker logs [컨테이너명 or ID]</td><td>로그 확인</td></tr><tr><td>docker exec -i -t [컨테이너명 or ID] /bin/bash</td><td>컨테이너 내부 셸 접속</td></tr><tr><td>docker rm [컨테이너명 or ID]</td><td>컨테이너 삭제</td></tr><tr><td>docker rm -f [컨테이너명 or ID]</td><td>컨테이너 강제 삭제</td></tr><tr><td>docker commit [옵션] [컨테이너명] [이미지명]:[태그]</td><td>컨테이너 커밋</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 컨테이너 압축</span></span><br><span class="line"><span class="comment"># export의 경우 컨테이너를 동작하는데 필요한 모든 파일이 압축됨</span></span><br><span class="line">docker <span class="built_in">export</span> [컨테이너명 or ID] &gt; [파일명]</span><br><span class="line">docker <span class="built_in">export</span> <span class="built_in">test</span> &gt; test.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 컨테이너 import</span></span><br><span class="line">docker import [파일명]</span><br><span class="line">docker import test.tar</span><br></pre></td></tr></table></figure><h2 id="이미지-관련-명령어들"><a class="markdownIt-Anchor" href="#이미지-관련-명령어들"></a> 이미지 관련 명령어들</h2><table><thead><tr><th>명령어</th><th>설명</th></tr></thead><tbody><tr><td>docker images</td><td>이미지 목록 확인</td></tr><tr><td>docker build [옵션] [이미지명] [Dockerfile 경로]</td><td>이미지 생성</td></tr><tr><td>docker rmi [이미지명 or ID]</td><td>이미지 삭제</td></tr><tr><td>docker tag [기존 이미지명] [새로운 이미지명]</td><td>이미지 태그명 변경</td></tr><tr><td>docker tag [기존 이미지명]:[기존 태그명] [새로운 이미지명]:[새로운 태그명]</td><td>이미지 태그명 변경</td></tr><tr><td>docker pull [저장소 주소]/[이미지명]</td><td>도커 허브에서 다운로드</td></tr><tr><td>docker push [저장소 주소]/[이미지명]</td><td>도커 허브 저장소에 이미지 올리기</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 이미지 압축</span></span><br><span class="line">docker save [옵션] [파일명] &lt;이미지명 또는 이미지ID&gt;</span><br><span class="line">docker save -o baseimage.tar baseimage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모든 이미지 압축</span></span><br><span class="line">docker save -o images.tar $(docker image ls -q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gzip을 이용한 이미지 압축</span></span><br><span class="line">docker save [이미지명] | gzip &gt; [파일명]</span><br><span class="line">docker save baseimage | gzip &gt; baseimage.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 이미지 로드</span></span><br><span class="line">docker load [옵션] [파일명]</span><br><span class="line">docker load -i baseimage.tar</span><br></pre></td></tr></table></figure><h2 id="기타-명령어"><a class="markdownIt-Anchor" href="#기타-명령어"></a> 기타 명령어</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 컨테이너 정보 일부 표시</span></span><br><span class="line">docker ps --format <span class="string">"table &#123;&#123;.image&#125;&#125;\t&#123;&#123;.command&#125;&#125;"</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/01/26/docker-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] Cmake 설치 및 사용 방법</title>
      <link>http://hgko1207.github.io/2021/01/25/linux-11/</link>
      <guid>http://hgko1207.github.io/2021/01/25/linux-11/</guid>
      <pubDate>Mon, 25 Jan 2021 07:36:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 Cmake 설치 및 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;다운로드&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#다운로드&quot;&gt;&lt;/a&gt; 다운로드&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cma
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 Cmake 설치 및 사용 방법에 대해 알아보겠습니다.</p><h2 id="다운로드"><a class="markdownIt-Anchor" href="#다운로드"></a> 다운로드</h2><p><a href="https://cmake.org/download/" target="_blank" rel="noopener">https://cmake.org/download/</a> 페이지를 가서 최신 버전을 다운 받습니다. 현재 날짜 기준으로 3.19.3 버전입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hgko@localhost ~]$ sudo su</span><br><span class="line">[root@localhost ~]$ cd /usr/local/src</span><br><span class="line">[root@localhost src]$ wget http://www.cmake.org/files/v3.19/cmake-3.19.3.tar.gz</span><br></pre></td></tr></table></figure><p>다운로드가 완료되면 압축해제를 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]$ tar -zxvf cmake-3.19.3.tar.gz</span><br></pre></td></tr></table></figure><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p>/usr/local 경로의 bin 폴더에 설치가 됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]$ cd cmake-3.19.3</span><br><span class="line">[root@localhost cmake-3.19.3]$ ./bootstrap --prefix=/usr/local</span><br><span class="line">[root@localhost cmake-3.19.3]$ make</span><br><span class="line">[root@localhost cmake-3.19.3]$ make install</span><br></pre></td></tr></table></figure><h2 id="설치-확인"><a class="markdownIt-Anchor" href="#설치-확인"></a> 설치 확인</h2><p>다음과 같이 버전 정보가 출력되면 성공적으로 설치가 완료되었습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ cmake --version</span><br><span class="line">cmake version 3.19.3</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure><h2 id="사용-방법"><a class="markdownIt-Anchor" href="#사용-방법"></a> 사용 방법</h2><p>다음 명령어는 사용 방법입니다.</p><ol><li>CMakeLists.txt 파일을 생성하고 내용을 작성</li><li>cmake 명령어로 실행</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cmake CMakeLists.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make install</span></span><br></pre></td></tr></table></figure><h3 id="make-파일-정리"><a class="markdownIt-Anchor" href="#make-파일-정리"></a> make 파일 정리</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make clean</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/01/25/linux-11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] 유용하게 쓰는 명령어들</title>
      <link>http://hgko1207.github.io/2021/01/20/linux-10/</link>
      <guid>http://hgko1207.github.io/2021/01/20/linux-10/</guid>
      <pubDate>Wed, 20 Jan 2021 01:53:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;유용하게-쓰는-명령어들&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#유용하게-쓰는-명령어들&quot;&gt;&lt;/a&gt; 유용하게 쓰는 명령어들&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="유용하게-쓰는-명령어들"><a class="markdownIt-Anchor" href="#유용하게-쓰는-명령어들"></a> 유용하게 쓰는 명령어들</h2><table><thead><tr><th>명령어</th><th>설명</th></tr></thead><tbody><tr><td>source /etc/profile</td><td>profile 적용</td></tr><tr><td>free -h</td><td>메모리 용량 확인</td></tr><tr><td>dh -h</td><td>디스크 용량 확인</td></tr><tr><td>nproc</td><td>CPU 코어 수 확인</td></tr><tr><td>pwd</td><td>현재 경로 확인</td></tr><tr><td>chmod -R 755 [폴더 or 파일]</td><td>사용 권한 변경</td></tr><tr><td>chown -R root:root [폴더 or 파일]</td><td>소유자와 그룹 변경</td></tr><tr><td>ps -ef | grep [프로세스명]</td><td>프로세스 확인</td></tr><tr><td>rpm -qa | grep [패키지명]</td><td>설치된 패키지 확인</td></tr><tr><td>kill -9 [프로세스ID]</td><td>프로세스 삭제</td></tr><tr><td>mv [파일명] [변경할파일명]</td><td>파일명 바꾸기</td></tr><tr><td>mv [폴더명] [변경할폴더명]</td><td>폴더명 바꾸기</td></tr><tr><td>pgrep -f [파일명]</td><td>프로세스 id만 추출</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 특정 파일 제외하고 삭제</span></span><br><span class="line">find ./ ! -name <span class="string">'*.h'</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 두 개의 파일 형식 빼고 다 삭제</span></span><br><span class="line"><span class="comment"># 예) .h, .inl 파일 빼고 삭제</span></span><br><span class="line">find ./ \( ! -name <span class="string">'*.inl'</span> ! -name <span class="string">'*.h'</span> \) -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 별칭 설정</span></span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">'rm -i'</span></span><br><span class="line"><span class="built_in">alias</span> cp=<span class="string">'cp -i'</span></span><br><span class="line"><span class="built_in">alias</span> mv=<span class="string">'mv -i'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 환경변수 설정</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/bin:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 폴더와 하위 폴더에 있는 파일명 텍스트로 추출</span></span><br><span class="line">dir [폴더경로] &gt; list.txt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tail -n 로 가장 나중의 jar 파일 찾기</span></span><br><span class="line">ls -tr | grep jar | tail -n 1</span><br></pre></td></tr></table></figure><h2 id="가끔-쓰인-명령어들"><a class="markdownIt-Anchor" href="#가끔-쓰인-명령어들"></a> 가끔 쓰인 명령어들</h2><table><thead><tr><th>명령어</th><th>설명</th></tr></thead><tbody><tr><td>uname -r</td><td>커널 버전 확인</td></tr><tr><td>ln -s [원본파일] [링크파일]</td><td>심볼릭 링크 설정</td></tr></tbody></table>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2021/01/20/linux-10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] Nginx 설치 및 사용 방법</title>
      <link>http://hgko1207.github.io/2020/11/16/linux-9/</link>
      <guid>http://hgko1207.github.io/2020/11/16/linux-9/</guid>
      <pubDate>Mon, 16 Nov 2020 02:35:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 &lt;strong&gt;Nginx&lt;/strong&gt; 설치 및 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;1-nginx-저장소-추가&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-nginx-저장소-추가&quot;&gt;&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 <strong>Nginx</strong> 설치 및 사용 방법에 대해 알아보겠습니다.</p><h2 id="1-nginx-저장소-추가"><a class="markdownIt-Anchor" href="#1-nginx-저장소-추가"></a> 1. Nginx 저장소 추가</h2><p>yum 저장소에는 nginx 라이브러리가 없기 때문에 저장소를 추가합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hgko@localhost ~]$ sudo vi /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure><p><strong>/etc/yum.repos.d</strong> 경로에 nginx.repo 파일을 추가하고 다음과 같이 작성합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/7/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><h2 id="2-설치"><a class="markdownIt-Anchor" href="#2-설치"></a> 2. 설치</h2><p>저장소를 추가하였다면 설치를 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hgko@localhost ~]$ sudo yum install -y nginx</span><br></pre></td></tr></table></figure><h2 id="3-방화벽-포트-개방"><a class="markdownIt-Anchor" href="#3-방화벽-포트-개방"></a> 3. 방화벽 포트 개방</h2><p>웹서버의 8080 포트를 사용할 계획이므로, 8080 포트를 개방합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 포트 개방</span></span><br><span class="line">[hgko@localhost ~]$ sudo firewall-cmd --permanent --zone=public --add-port=8080/tcp</span><br><span class="line"><span class="comment"># 방화벽 재시작</span></span><br><span class="line">[hgko@localhost ~]$ sudo firewall-cmd --reload</span><br><span class="line"><span class="comment"># 개방된 포트 목록 확인</span></span><br><span class="line">[hgko@localhost ~]$ sudo firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><h2 id="4-서비스-시작"><a class="markdownIt-Anchor" href="#4-서비스-시작"></a> 4. 서비스 시작</h2><p>서비스를 등록하고 시작합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hgko@localhost ~]$ sudo systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">[hgko@localhost ~]$ sudo systemctl start nginx</span><br></pre></td></tr></table></figure><h2 id="5-웹-서버-배포"><a class="markdownIt-Anchor" href="#5-웹-서버-배포"></a> 5. 웹 서버 배포</h2><p>서비스가 시작되었으면 개발된 웹 서버 배포 작업을 진행합니다.</p><ul><li>빌드된 프로젝트를 <strong>/usr/share/nginx/</strong> 경로로 이동시킵니다.</li><li>기존의 설정파일인 <code>default.conf</code> 파일을 엽니다. 기존 설정파일을 지우고 새로 생성해도 됩니다.</li><li>포트를 변경하고, 프로젝트 경로를 입력하고, 필요한 proxy 정보를 입력합니다.</li><li>proxy_pass에는 backend server url을 입력합니다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hgko@localhost ~]$ sudo su</span><br><span class="line">[root@localhost ~]$ vi /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8080;</span><br><span class="line">    listen       [::]:8080;</span><br><span class="line"></span><br><span class="line">    server_name  localhost; <span class="comment"># 도메인 주소</span></span><br><span class="line"></span><br><span class="line">    root /usr/share/nginx/frontend; <span class="comment"># 배포된 프로젝트 경로</span></span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 100M;</span><br><span class="line">    location ^~ /api &#123;</span><br><span class="line">        proxy_pass       http://127.0.0.1:3100;  <span class="comment"># backend url</span></span><br><span class="line">        proxy_set_header Host       <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~ /stream &#123;</span><br><span class="line">        proxy_pass       http://127.0.0.1:3100;  <span class="comment"># backend url</span></span><br><span class="line"></span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">"upgrade"</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_cache_bypass <span class="variable">$http_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-서비스-재시작"><a class="markdownIt-Anchor" href="#6-서비스-재시작"></a> 6. 서비스 재시작</h2><p>설정이 완료되면 서비스를 재시작 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hgko@localhost ~]$ sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="7-확인"><a class="markdownIt-Anchor" href="#7-확인"></a> 7. 확인</h2><p>http://localhost:8080을 접속하여 웹 서버가 잘 실행되고 있는지 확인합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/11/16/linux-9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] PM2 설치 및 사용 방법</title>
      <link>http://hgko1207.github.io/2020/10/26/linux-8/</link>
      <guid>http://hgko1207.github.io/2020/10/26/linux-8/</guid>
      <pubDate>Mon, 26 Oct 2020 06:57:59 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 &lt;strong&gt;PM2&lt;/strong&gt; 설치 및 사용 방법에 대해서 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;Node.js 는 단일 CPU 코어에서 실행되기 때문에 CPU 개수만큼 멀티코어 시스템을 사용하기 위해 &lt;strong&gt;PM2(Proce
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 <strong>PM2</strong> 설치 및 사용 방법에 대해서 알아보겠습니다.</p><p>Node.js 는 단일 CPU 코어에서 실행되기 때문에 CPU 개수만큼 멀티코어 시스템을 사용하기 위해 <strong>PM2(Process Manager 2)</strong> 를 설치하고 사용하였습니다.</p><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p>npm 이 설치되어 있어야 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ npm install pm2 -g</span><br></pre></td></tr></table></figure><h2 id="설치-확인"><a class="markdownIt-Anchor" href="#설치-확인"></a> 설치 확인</h2><p>pm2 프로세스의 상태를 확인합니다. 처음에는 시작한 어플리케이션이 없기 때문에 아무것도 없습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ pm2 list</span><br></pre></td></tr></table></figure><h2 id="기본-사용-방법"><a class="markdownIt-Anchor" href="#기본-사용-방법"></a> 기본 사용 방법</h2><p>pm2를 사용해보기 위해 간단한 어플리케이션을 작성하겠습니다. <code>app.js</code> 파일을 생성하고 아래 코드를 복사합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`application is listening on port <span class="subst">$&#123;port&#125;</span>...`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>pm2를 통해 실행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]$ pm2 start app.js</span><br></pre></td></tr></table></figure><p>또는 이름을 지정하여 실행 할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]$ pm2 start app.js --name app</span><br></pre></td></tr></table></figure><p><img src="/images/linux/pm2_1.png" alt="" /></p><p>아무런 옵션없이 PM2를 사용하여 실행하면 위의 그림처럼 포크(fork)모드로 어플리케이션을 실행합니다.</p><h2 id="클러스터-모드-사용"><a class="markdownIt-Anchor" href="#클러스터-모드-사용"></a> 클러스터 모드 사용</h2><p>설정파일을 활용해 클러스터 모드로 실행할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 설정파일 생성</span></span><br><span class="line">[root@localhost test]$ touch ecosystem.config.js</span><br><span class="line">[root@localhost test]$ vi ecosystem.config.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ecosystem.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'app'</span>,</span><br><span class="line">      script: <span class="string">'./app.js'</span>,</span><br><span class="line">      instances: <span class="number">0</span>,</span><br><span class="line">      exec_mode: <span class="string">'cluster'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]$ pm2 start ecosystem.config.js</span><br></pre></td></tr></table></figure><p>위의 코드를 복사하고 pm2 명령어로 실행하면 클러스터 모드로 실행됩니다. <code>exec_mode</code> 값을 'cluster’로 설정하면 클러스터 모드로 실행한다는 의미이고, <code>instances</code> 값을 '0’으로 설정하면 CPU 코어 수 만큼 프로세스를 실행한다는 의미입니다. <code>instances</code> 값을 0이 아닌 고정으로 설정할 수도 있습니다.</p><h2 id="다수의-어플리케이션-설정"><a class="markdownIt-Anchor" href="#다수의-어플리케이션-설정"></a> 다수의 어플리케이션 설정</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'collect'</span>,</span><br><span class="line">      cwd: <span class="string">'./workspace/pipeline-service-collector'</span>,</span><br><span class="line">      script: <span class="string">'npm'</span>,</span><br><span class="line">      args: <span class="string">'run serve'</span>,</span><br><span class="line">      instances: <span class="number">5</span>,</span><br><span class="line">      exec_mode: <span class="string">'cluster'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'collect-manager'</span>,</span><br><span class="line">      cwd: <span class="string">'./workspace/pipeline-service-collector-manager'</span>,</span><br><span class="line">      script: <span class="string">'npm'</span>,</span><br><span class="line">      args: <span class="string">'run serve'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위의 코드는 두 개의 어플리케이션을 실행하는 예제입니다. 첫 번째는 클러스터 모드로 5개의 프로세스를 실행하도록 설정하였고, 두 번째는 포크(fork) 모드로 하나의 프로세스를 실행하도록 하였습니다. 이렇게 여러 개의 어플리케이션을 한번에 실행하도록 설정을 할 수도 있습니다. 실제로 동작하는 상태는 아래 그림과 같습니다.</p><p><img src="/images/linux/pm2_2.png" alt="" /></p><h2 id="프로세스-줄이기"><a class="markdownIt-Anchor" href="#프로세스-줄이기"></a> 프로세스 줄이기</h2><p>프로세스의 수가 많다면 프로세스를 2개로 줄일 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]$ pm2 scale app 2</span><br></pre></td></tr></table></figure><h2 id="재시작"><a class="markdownIt-Anchor" href="#재시작"></a> 재시작</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]$ pm2 reload</span><br></pre></td></tr></table></figure><h2 id="중지"><a class="markdownIt-Anchor" href="#중지"></a> 중지</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]$ pm2 stop app</span><br></pre></td></tr></table></figure><h2 id="삭제"><a class="markdownIt-Anchor" href="#삭제"></a> 삭제</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]$ pm2 delete app</span><br></pre></td></tr></table></figure><h2 id="추가-설정"><a class="markdownIt-Anchor" href="#추가-설정"></a> 추가 설정</h2><h3 id="nodejs-권한이-잘못-되어있는-경우"><a class="markdownIt-Anchor" href="#nodejs-권한이-잘못-되어있는-경우"></a> nodejs 권한이 잘못 되어있는 경우</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hgko@localhost test]$ sudo su</span><br><span class="line">[root@localhost test]$ cd /usr/local/lib</span><br><span class="line">[root@localhost lib]$ chown -R hgko:hgko nodejs</span><br><span class="line">[root@localhost lib]$ exit</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/10/26/linux-8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] 아파치 톰캣(Tomcat) 설치 및 사용 방법</title>
      <link>http://hgko1207.github.io/2020/10/12/linux-7/</link>
      <guid>http://hgko1207.github.io/2020/10/12/linux-7/</guid>
      <pubDate>Mon, 12 Oct 2020 01:30:46 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 아파치 톰캣 설치 및 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;아파치-톰캣tomcat-이란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#아파치-톰캣tomcat-이란&quot;&gt;&lt;/a&gt; 아파치 톰캣(Tom
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 아파치 톰캣 설치 및 사용 방법에 대해 알아보겠습니다.</p><h2 id="아파치-톰캣tomcat-이란"><a class="markdownIt-Anchor" href="#아파치-톰캣tomcat-이란"></a> 아파치 톰캣(Tomcat) 이란</h2><blockquote><p>아파치 톰캣(Apache Tomcat)은 아파치 소프트웨어 재단에서 개발한 서블릿 컨테이너(또는 웹 컨테이너)만 있는 웹 애플리케이션 서버이다.<br />톰캣은 웹 서버와 연동하여 실행할 수 있는 자바 환경을 제공하여 자바서버 페이지(JSP)와 자바 서블릿이 실행할 수 있는 환경을 제공하고 있다.<br />톰캣은 관리툴을 통해 설정을 변경할 수 있지만, XML 파일을 편집하여 설정할 수도 있다. 그리고, 톰캣은 HTTP 서버도 자체 내장하기도 한다.<br />출처 : <a href="https://ko.wikipedia.org/wiki/%EC%95%84%ED%8C%8C%EC%B9%98_%ED%86%B0%EC%BA%A3" target="_blank" rel="noopener">위키백과</a></p></blockquote><h2 id="1-다운로드"><a class="markdownIt-Anchor" href="#1-다운로드"></a> 1. 다운로드</h2><p><a href="http://archive.apache.org/dist/tomcat/tomcat-8/" target="_blank" rel="noopener">http://archive.apache.org/dist/tomcat/tomcat-8/</a> 사이트에서 최신 버전을 확인하고 다운로드합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hgko@localhost ~]$ <span class="built_in">cd</span> /home/download</span><br><span class="line">[hgko@localhost download]$ wget http://archive.apache.org/dist/tomcat/tomcat-8/v8.5.59/bin/apache-tomcat-8.5.59.tar.gz</span><br></pre></td></tr></table></figure><p>오프라인 환경에서는 <a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">Tomcat 8 Download</a> 사이트 접속해서 tar.gz 파일을 직접 다운로드 후 서버에 전송합니다.</p><h2 id="2-설치"><a class="markdownIt-Anchor" href="#2-설치"></a> 2. 설치</h2><p>먼저 <code>tar</code> 명령어를 사용하여 압축을 풀어 줍니다. 압축이 풀리면 모든 사용자가 사용하고 관리가 편리하도록 Root 계정으로 접속 후 해당 폴더로 이동 시켜줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 압축 해제</span></span><br><span class="line">[hgko@localhost download]$ tar zxvf apache-tomcat-8.5.59.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 폴더 이동</span></span><br><span class="line">[hgko@localhost download]$ sudo su</span><br><span class="line">[root@localhost download]$ mv /home/download/apache-tomcat-8.5.59 /usr/<span class="built_in">local</span>/lib</span><br></pre></td></tr></table></figure><h2 id="3-환경-설정"><a class="markdownIt-Anchor" href="#3-환경-설정"></a> 3. 환경 설정</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ vi /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line">JRE_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line">CATALINA_HOME=/usr/<span class="built_in">local</span>/lib/apache-tomcat-8.5.59</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$CATALINA_HOME</span>/lib/jsp-api.jar:<span class="variable">$CATALINA_HOME</span>/lib/servlet-api.jar</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME CLASSPATH PATH CATALINA_HOME</span><br></pre></td></tr></table></figure><p>Tomcat 설정 부분(CATALINA)만 수정하면 됩니다. 설정이 완료되면 반영합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 설정 반영</span></span><br><span class="line">[root@localhost ~]$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 설정 확인</span></span><br><span class="line">[root@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$CATALINA_HOME</span></span><br></pre></td></tr></table></figure><h2 id="4-방화벽-설정"><a class="markdownIt-Anchor" href="#4-방화벽-설정"></a> 4. 방화벽 설정</h2><p>현재 톰캣 포트가 8080이기 때문에 8080 포트에 대한 방화벽을 설정합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ firewall-cmd --permanent --zone=public --add-port=8080/tcp</span><br><span class="line">[root@localhost ~]$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="5-실행"><a class="markdownIt-Anchor" href="#5-실행"></a> 5. 실행</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ cd /usr/local/lib/apache-tomcat-8.5.59/bin</span><br><span class="line">[root@localhost bin]$ ./startup.sh</span><br></pre></td></tr></table></figure><h2 id="6-중지"><a class="markdownIt-Anchor" href="#6-중지"></a> 6. 중지</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]$ ./shutdown.sh</span><br></pre></td></tr></table></figure><h2 id="7-실행-확인"><a class="markdownIt-Anchor" href="#7-실행-확인"></a> 7. 실행 확인</h2><p><code>http://localhost(ip 주소):8080</code> 에 접속해서 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]$ tail -f /usr/local/lib/apache-tomcat-8.5.59/logs/catalina.out</span><br></pre></td></tr></table></figure><p><code>tail</code> 명령어를 사용하여 로그 내용을 출력해서 진행 상태를 파악할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/10/12/linux-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] NFS 설치 및 설정</title>
      <link>http://hgko1207.github.io/2020/10/12/linux-6/</link>
      <guid>http://hgko1207.github.io/2020/10/12/linux-6/</guid>
      <pubDate>Mon, 12 Oct 2020 00:42:48 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 &lt;strong&gt;NFS&lt;/strong&gt; 설치 및 설정 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;nfs-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nfs-란&quot;&gt;&lt;/a&gt; NFS 란&lt;/h2&gt;
&lt;bloc
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 <strong>NFS</strong> 설치 및 설정 방법에 대해 알아보겠습니다.</p><h2 id="nfs-란"><a class="markdownIt-Anchor" href="#nfs-란"></a> NFS 란</h2><blockquote><p>네트워크 파일 시스템(Network File System, NFS)은 1984년에 썬 마이크로시스템즈가 개발한 프로토콜이다. 클라이언트 컴퓨터의 사용자가 네트워크 상의 파일을 직접 연결된 스토리지에 접근하는 방식과 비슷한 방식으로 접근하도록 도와 준다. 다른 수많은 프로토콜과 마찬가지로 ONC RPC 시스템을 기반으로 한다. 네트워크 파일 시스템은 RFC에 정의된 오픈 표준이므로 누구나 구현할 수 있다.<br />출처 : <a href="https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%ED%8C%8C%EC%9D%BC_%EC%8B%9C%EC%8A%A4%ED%85%9C" target="_blank" rel="noopener">위키백과</a></p></blockquote><h2 id="운영환경"><a class="markdownIt-Anchor" href="#운영환경"></a> 운영환경</h2><ul><li>CentOS 7.6</li></ul><h2 id="nfs-서버-설정"><a class="markdownIt-Anchor" href="#nfs-서버-설정"></a> NFS 서버 설정</h2><h3 id="1-설치"><a class="markdownIt-Anchor" href="#1-설치"></a> 1. 설치</h3><p>nfs-utils 패키지가 설치 되어있는지 확인하고 없을 시 yum 을 사용하여 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 설치 패키지 확인</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -qa | grep nfs-utils</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> nfs 설치</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install nfs-utils</span></span><br></pre></td></tr></table></figure><h3 id="2-서비스-시작"><a class="markdownIt-Anchor" href="#2-서비스-시작"></a> 2. 서비스 시작</h3><p>부팅 시 자동 시작되도록 서비스 등록을 하고 실행을 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> nfs-server</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start nfs-server</span></span><br></pre></td></tr></table></figure><h3 id="3-마운트할-디렉토리-생성"><a class="markdownIt-Anchor" href="#3-마운트할-디렉토리-생성"></a> 3. 마운트할 디렉토리 생성</h3><p>마운트 할 임의의 디렉토리 생성합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /nfstest</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 700 /nfstest</span></span><br></pre></td></tr></table></figure><h3 id="4-마운트"><a class="markdownIt-Anchor" href="#4-마운트"></a> 4. 마운트</h3><p>마운트 설정을 위해 <code>/etc/export</code> 파일을 수정합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/<span class="built_in">export</span></span></span><br></pre></td></tr></table></figure><p>아래 내용을 추가합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/nfstest 192.168.0.*(rw,sync)</span><br></pre></td></tr></table></figure><ul><li>/nfstest: 공유할 디렉토리</li><li>192.168.0.*: 허가할 호스트 대역</li><li>rw : 읽기, 쓰기 가능</li><li>ro : 읽기만 가능</li><li>secure : 클라이언트 마운트 요청 시 포트를 1024 이하로 설정</li><li>noaccess : 액세스 거부</li><li>root_squach : 클라이언트의 root가 서버의 root 권한을 획득하는 것을 차단</li><li>no_root_squash : 클라이언트의 계정을 root로 매핑</li><li>sync : 파일 시스템이 변경되면 즉시 동기화</li><li>all_squach : root를 제외하고 서버와 클라이언트의 사용자를 동일한 권한으로 설정</li><li>no_all_squach : root를 제외하고 서버와 클라이언트의 사용자들을 하나의 권한을 가지도록 설정</li></ul><p>참고로 /etc/exports 에서 IP 입력 후 띄어쓰기 없이 (rw) 설정을 해야하고, 만약 띄어쓰기를 사용하면 설정이 제대로 되지 않아 Read-only 설정으로 되어 에러가 발생할 수 있습니다.</p><h3 id="4-수정내용-적용"><a class="markdownIt-Anchor" href="#4-수정내용-적용"></a> 4. 수정내용 적용</h3><p>수정한 export 내용을 적용합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ exportfs -r</span><br></pre></td></tr></table></figure><p>서비스를 재시작 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart nfs-server</span></span><br></pre></td></tr></table></figure><h3 id="5-수정내용-확인"><a class="markdownIt-Anchor" href="#5-수정내용-확인"></a> 5. 수정내용 확인</h3><p>NFS 설정이 정상적으로 되었는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> showmount -e</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> exportfs -v</span></span><br></pre></td></tr></table></figure><h2 id="클라이언트-마운트-설정"><a class="markdownIt-Anchor" href="#클라이언트-마운트-설정"></a> 클라이언트 마운트 설정</h2><h3 id="1-설치-2"><a class="markdownIt-Anchor" href="#1-설치-2"></a> 1. 설치</h3><p>nfs-utils 패키지가 설치 되어있는지 확인하고 없을 시 yum 을 사용하여 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 설치 패키지 확인</span></span><br><span class="line">$ rpm -qa | grep nfs-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># nfs 설치</span></span><br><span class="line">$ yum install nfs-utils</span><br></pre></td></tr></table></figure><h3 id="2-서비스-시작-2"><a class="markdownIt-Anchor" href="#2-서비스-시작-2"></a> 2. 서비스 시작</h3><p>서비스 등록 및 시작 명령어입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> nfs-server</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start nfs-server</span></span><br></pre></td></tr></table></figure><h3 id="3-마운트할-디렉토리-생성-2"><a class="markdownIt-Anchor" href="#3-마운트할-디렉토리-생성-2"></a> 3. 마운트할 디렉토리 생성</h3><p>마운트 할 임의의 디렉토리를 생성합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /nfstest</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 700 /nfstest</span></span><br></pre></td></tr></table></figure><h3 id="4-마운트-2"><a class="markdownIt-Anchor" href="#4-마운트-2"></a> 4. 마운트</h3><p>생성된 디렉토리에 NFS 디렉토리를 마운트 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mount -t nfs 192.168.0.100:/nfstest /nfstest</span></span><br></pre></td></tr></table></figure><ul><li>192.168.0.100: nfs 서버 주소</li></ul><h3 id="5-마운트-영구-적용"><a class="markdownIt-Anchor" href="#5-마운트-영구-적용"></a> 5. 마운트 영구 적용</h3><p>마운트 영구 적용을 위해 /etc/fstab 파일을 수정합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/fstab</span></span><br><span class="line">192.168.0.100:/nfstest /nfstest nfs defaults 0 0</span><br></pre></td></tr></table></figure><ul><li>192.168.0.100: nfs 서버 주소</li></ul><h3 id="6-마운트-확인"><a class="markdownIt-Anchor" href="#6-마운트-확인"></a> 6. 마운트 확인</h3><p>정상적으로 마운트 되었는지 확인을 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> df -h | grep nfs</span></span><br><span class="line">192.168.0.100:/nfstest  24G 6.4G  16G 30% /nfstest</span><br></pre></td></tr></table></figure><h3 id="7-설정-확인"><a class="markdownIt-Anchor" href="#7-설정-확인"></a> 7. 설정 확인</h3><p>설정이 완료되었다면 /nfstest 경로에서 파일을 생성해보고 클라이언트와 서버에 제대로 공유가 되는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ cd /nfstest</span><br><span class="line">[root@localhost nfstest]$ touch test</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/10/12/linux-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[PostgreSQL] TimescaleDB 설치</title>
      <link>http://hgko1207.github.io/2020/10/08/postgresql-4/</link>
      <guid>http://hgko1207.github.io/2020/10/08/postgresql-4/</guid>
      <pubDate>Thu, 08 Oct 2020 04:12:58 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;timescaledb-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#timescaledb-란&quot;&gt;&lt;/a&gt; TimescaleDB 란&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TimescaleDB&lt;/strong&gt;는 빠른 수집, 복잡
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="timescaledb-란"><a class="markdownIt-Anchor" href="#timescaledb-란"></a> TimescaleDB 란</h2><p><strong>TimescaleDB</strong>는 빠른 수집, 복잡한 쿼리를 편리하게 사용하기 위해 설계된 오픈 소스 시계열 데이터베이스 입니다.</p><p>PostgreSQL을 기반으로 하며 자동 파티셔닝과 SQL 지원을 제공합니다. PostgreSQL 보다 10 ~ 100배 빠른 쿼리를 수행하고 시계열에 대해 최적화가 되어 있습니다.</p><p>5 ~ 10분 단위로 수집되는 많은 양의 데이터를 데이터베이스에 추가하고 시계열로 관리하며 빠르게 조회하기 위해 TimescaleDB를 사용하였습니다.</p><h2 id="운영환경"><a class="markdownIt-Anchor" href="#운영환경"></a> 운영환경</h2><ul><li>CentOS 7.6</li><li>PostgreSQL 11</li></ul><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p>PostgreSQL이 설치 되어있어야 합니다. 미설치 시 <a href="https://hgko1207.github.io/2020/09/10/postgresql-1/">[PostgreSQL] CentOS 7에서 PostgreSQL 설치 및 시작</a>을 참고해서 설치합니다.</p><h3 id="1-postgresql-설치-확인"><a class="markdownIt-Anchor" href="#1-postgresql-설치-확인"></a> 1. PostgreSQL 설치 확인</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -qa | grep postgresql</span></span><br></pre></td></tr></table></figure><h3 id="2-계정-확인"><a class="markdownIt-Anchor" href="#2-계정-확인"></a> 2. 계정 확인</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd | grep postgres</span></span><br></pre></td></tr></table></figure><p>postgres 계정이 없으면 생성합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo useradd postgres</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo passwd postgres</span></span><br></pre></td></tr></table></figure><h3 id="3-설정-변경"><a class="markdownIt-Anchor" href="#3-설정-변경"></a> 3. 설정 변경</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vi /var/lib/pgsql/11/data/postgresql.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#listen_addresses = 'localhost'  -&gt;  listen_addresses = '*'</span></span><br><span class="line"><span class="comment">#password_encryption = md5  -&gt;  password_encryption = md5</span></span><br></pre></td></tr></table></figure><h3 id="4-timescaledb-다운로드"><a class="markdownIt-Anchor" href="#4-timescaledb-다운로드"></a> 4. TimescaleDB 다운로드</h3><p>다음 명령어를 복사해서 붙여넣습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cat &gt; /etc/yum.repos.d/timescale_timescaledb.repo &lt;&lt;EOL</span><br><span class="line">[timescale_timescaledb]</span><br><span class="line">name=timescale_timescaledb</span><br><span class="line">baseurl=https://packagecloud.io/timescale/timescaledb/el/7/\<span class="variable">$basearch</span></span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packagecloud.io/timescale/timescaledb/gpgkey</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line">EOL</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum update -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y timescaledb-postgresql-11</span></span><br></pre></td></tr></table></figure><h3 id="5-데이터베이스-설정"><a class="markdownIt-Anchor" href="#5-데이터베이스-설정"></a> 5. 데이터베이스 설정</h3><p>계속 y를 눌러줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo timescaledb-tune --pg-config=/usr/pgsql-11/bin/pg_config</span></span><br></pre></td></tr></table></figure><h3 id="6-postgresql-재시작"><a class="markdownIt-Anchor" href="#6-postgresql-재시작"></a> 6. PostgreSQL 재시작</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart postgresql-11</span></span><br></pre></td></tr></table></figure><h3 id="7-접속"><a class="markdownIt-Anchor" href="#7-접속"></a> 7. 접속</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo su</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> su - postgres</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> psql</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/10/08/postgresql-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] Apache Kafka 설치 및 사용 방법</title>
      <link>http://hgko1207.github.io/2020/10/01/linux-5/</link>
      <guid>http://hgko1207.github.io/2020/10/01/linux-5/</guid>
      <pubDate>Thu, 01 Oct 2020 13:16:06 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;아파치 카프카(Apache Kafka)는 아파치 소프트웨어 재단이 스칼라로 개발한 오픈 소스 메시지 브로커 프로젝트이다.&lt;br /&gt;
출처 : &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%95
        
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote><p>아파치 카프카(Apache Kafka)는 아파치 소프트웨어 재단이 스칼라로 개발한 오픈 소스 메시지 브로커 프로젝트이다.<br />출처 : <a href="https://ko.wikipedia.org/wiki/%EC%95%84%ED%8C%8C%EC%B9%98_%EC%B9%B4%ED%94%84%EC%B9%B4" target="_blank" rel="noopener">위키백과</a></p></blockquote><p>메시지 큐를 사용하여 동기화 서비스 및 대용량 분산 시스템을 구축하기 위해 Zookeeper와 함께 <code>Apache Kafka</code>를 사용하게 되었습니다.</p><h2 id="운영환경"><a class="markdownIt-Anchor" href="#운영환경"></a> 운영환경</h2><ul><li>CentOS 7.6</li></ul><h2 id="1-다운로드-및-설치"><a class="markdownIt-Anchor" href="#1-다운로드-및-설치"></a> 1. 다운로드 및 설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ <span class="built_in">cd</span> /home/<span class="built_in">test</span></span><br><span class="line">[root@localhost <span class="built_in">test</span>]$ wget http://apache.mirror.cdnetworks.com/kafka/2.1.0/kafka_2.11-2.3.0.tgz</span><br><span class="line">[root@localhost <span class="built_in">test</span>]$ ln -s kafka_2.11-2.3.0 kafka</span><br></pre></td></tr></table></figure><h2 id="2-serverproperties-수정"><a class="markdownIt-Anchor" href="#2-serverproperties-수정"></a> 2. server.properties 수정</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost <span class="built_in">test</span>]$ vim kafka/config/server.properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># zookeeper 서버의 myid 값으로 설정</span></span><br><span class="line">broker.id=1</span><br><span class="line"><span class="comment">#Broker가 받은 데이터를 관리위한 저장공간</span></span><br><span class="line">log.dirs=/home/<span class="built_in">test</span>/kafka-logs</span><br><span class="line"><span class="comment">#Broker가 사용하는 호스트와 포트를 지정</span></span><br><span class="line">listeners=PLAINTEXT://0.0.0.0:9002</span><br><span class="line"><span class="comment">#Producer와 Consumer가 접근할 호스트와 포트를 지정, 기본값은 listeners를 사용</span></span><br><span class="line">advertised.listeners=PLAINTEXT://192.168.24.10:9092</span><br><span class="line"><span class="comment"># zookeeper의 접속 정보</span></span><br><span class="line">zookeeper.connect=192.168.24.7:2181</span><br></pre></td></tr></table></figure><h2 id="3-실행"><a class="markdownIt-Anchor" href="#3-실행"></a> 3. 실행</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost <span class="built_in">test</span>]$ <span class="built_in">cd</span> kafka/bin</span><br><span class="line">[root@localhost bin]$ ./kafka-server.start.sh ../config/server.properties</span><br></pre></td></tr></table></figure><p>정상적으로 실행이 되면 다음과 같은 메시지가 뜹니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">....중략....</span><br><span class="line">[KafkaServer id=1] started (kafka.server.KafkaServer)</span><br></pre></td></tr></table></figure><h2 id="4-서비스-등록"><a class="markdownIt-Anchor" href="#4-서비스-등록"></a> 4. 서비스 등록</h2><p>마지막으로 kafka-server.service라는 스크립트를 만들고 서비스에 등록합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 종료 후 서비스 등록</span></span><br><span class="line">[root@localhost bin]$ ./kafka-server-stop.sh</span><br><span class="line">[root@localhost bin]$ vi /etc/systemd/system/kafka.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=kafka</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=<span class="built_in">test</span></span><br><span class="line">Group=<span class="built_in">test</span></span><br><span class="line">SyslogIdentifier=kafka</span><br><span class="line">WorkingDirectory=/home/<span class="built_in">test</span>/kafka</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=0s</span><br><span class="line">ExecStart=/home/<span class="built_in">test</span>/kafka/bin/kafka-server-start.sh /home/<span class="built_in">test</span>/kafka/config/server.properties</span><br><span class="line">ExecStop=/home/<span class="built_in">test</span>/kafka/bin/kafka-server-stop.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>저장하고 나서 서비스를 재시작하고 카프카를 실행합니다. 정상적으로 실행되면 시스템 부팅 시 자동실행 설정을 지정합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 서비스 데몬 재시작</span></span><br><span class="line">[root@localhost ~]$ systemctl daemon-reload</span><br><span class="line"><span class="comment"># 카프카 실행 (종료는 stop, 재시작은 restart)</span></span><br><span class="line">[root@localhost ~]$ systemctl start kafka-server.service</span><br><span class="line"><span class="comment"># 실행상태 확인</span></span><br><span class="line">[root@localhost ~]$ systemctl status kafka-server.service</span><br><span class="line"><span class="comment"># 시스템 부팅할때 자동실행 설정</span></span><br><span class="line">[root@localhost ~]$ systemctl <span class="built_in">enable</span> kafka-server.service</span><br></pre></td></tr></table></figure><h2 id="방화벽-설정"><a class="markdownIt-Anchor" href="#방화벽-설정"></a> 방화벽 설정</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ firewall-cmd --permanent --zone=public --add-port=9092/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment">## 방화벽 재시작</span></span><br><span class="line">[root@localhost ~]$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="kafka-topic-관리"><a class="markdownIt-Anchor" href="#kafka-topic-관리"></a> kafka topic 관리</h2><h3 id="topic-리스트"><a class="markdownIt-Anchor" href="#topic-리스트"></a> topic 리스트</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 192.168.24.7는 zookeeper 접속 주소</span></span><br><span class="line">[root@localhost ~]$ <span class="built_in">cd</span> /home/<span class="built_in">test</span>/kafka/bin</span><br><span class="line">[root@localhost bin]$ ./kafka-topics.sh --list --zookeeper 192.168.24.7:2181</span><br></pre></td></tr></table></figure><h3 id="topic-생성"><a class="markdownIt-Anchor" href="#topic-생성"></a> topic 생성</h3><p>topic 명은 manager-out 로 설정하였습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ <span class="built_in">cd</span> /home/<span class="built_in">test</span>/kafka/bin</span><br><span class="line">[root@localhost bin]$ ./kafka-topics.sh --create --zookeeper 192.168.24.7:2181 --replication-factor 1 --partitions 5 --topic manager-out</span><br><span class="line">[root@localhost bin]$ ./kafka-topics.sh --zookeeper 192.168.24.7:2181 --alter --topic manager-out --config retention.ms=600000</span><br></pre></td></tr></table></figure><h3 id="topic-삭제"><a class="markdownIt-Anchor" href="#topic-삭제"></a> topic 삭제</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]$ ./kafka-topics.sh --delete --zookeeper 192.168.24.7:2181 --topic manager-out</span><br></pre></td></tr></table></figure><h3 id="topic-상세정보"><a class="markdownIt-Anchor" href="#topic-상세정보"></a> topic 상세정보</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]$ ./kafka-topics.sh --describe --zookeeper 192.168.24.7:2181</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/10/01/linux-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] Apache Zookeeper 설치 및 사용 방법</title>
      <link>http://hgko1207.github.io/2020/09/28/linux-4/</link>
      <guid>http://hgko1207.github.io/2020/09/28/linux-4/</guid>
      <pubDate>Mon, 28 Sep 2020 01:36:53 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;아파치 주키퍼(Apache ZooKeeper)는 아파치 소프트웨어 재단 프로젝트중의 한 소프트웨어 프로젝트로서 공개 분산형 구성 서비스, 동기 서비스 및 대용량 분산 시스템을 위한 네이밍 레지스트리를 제공한다. 주키퍼는 하
        
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote><p>아파치 주키퍼(Apache ZooKeeper)는 아파치 소프트웨어 재단 프로젝트중의 한 소프트웨어 프로젝트로서 공개 분산형 구성 서비스, 동기 서비스 및 대용량 분산 시스템을 위한 네이밍 레지스트리를 제공한다. 주키퍼는 하둡의 한 하위 프로젝트이었으나 지금은 독립적인 상위 프로젝트이다.<br />출처 : <a href="https://ko.wikipedia.org/wiki/%EC%95%84%ED%8C%8C%EC%B9%98_%EC%A3%BC%ED%82%A4%ED%8D%BC" target="_blank" rel="noopener">위키백과</a></p></blockquote><p>위의 설명처럼 메시키 큐를 관리하고 동기 서비스 및 대용량 분산 시스템을 구축하기 위해 <code>Apache ZooKeeper</code> 를 사용할 경우가 있습니다. <code>Apache ZooKeeper</code> 설치 및 사용 방법에 대해 알아보겠습니다.</p><h2 id="운영환경"><a class="markdownIt-Anchor" href="#운영환경"></a> 운영환경</h2><ul><li>CentOS 7.6</li></ul><h2 id="java-jdk-설치"><a class="markdownIt-Anchor" href="#java-jdk-설치"></a> Java jdk 설치</h2><p>먼저 java jdk를 필수로 설치를 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ yum install java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure><p>profile 정보를 변경합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> profile 파일 안에 아래의 내용을 추가</span></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk</span><br></pre></td></tr></table></figure><p><code>source</code> 명령어를 이용해서 변경된 내용 적용합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="zookeeper-설치"><a class="markdownIt-Anchor" href="#zookeeper-설치"></a> Zookeeper 설치</h2><p>Zookeeper 서버 패키지를 다운로드 받고 환경 설정을 합니다.</p><h3 id="1-계정-생성"><a class="markdownIt-Anchor" href="#1-계정-생성"></a> 1. 계정 생성</h3><p>먼저 계정을 생성합니다. 계정을 생성하는 이유는 Zookeeper를 별도로 관리하기 위함입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ useradd zookeeper</span><br><span class="line">[root@localhost ~]$ passwd zookeeper</span><br></pre></td></tr></table></figure><p>생성된 계정으로 변경합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ su - zookeeper</span><br></pre></td></tr></table></figure><h3 id="2-다운로드-및-설치"><a class="markdownIt-Anchor" href="#2-다운로드-및-설치"></a> 2. 다운로드 및 설치</h3><p>다음의 명령어 순서대로 실행해서 다운로드 한 후 압축을 해제합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zookeeper@localhost ~]$ cd /home/test</span><br><span class="line">[zookeeper@localhost zookeeper]$ wget http://apache.mirror.cdnetworks.com/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span><br><span class="line">[zookeeper@localhost zookeeper]$ tar xvfzp zookeeper-3.4.14.tar.gz</span><br><span class="line">[zookeeper@localhost zookeeper]$ ln -s zookeeper-3.4.14 zookeeper</span><br></pre></td></tr></table></figure><h3 id="3-설정-파일-변경"><a class="markdownIt-Anchor" href="#3-설정-파일-변경"></a> 3. 설정 파일 변경</h3><p>데이터 디렉터리 경로와 서버 설정을 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[zookeeper@localhost test]$ cd zookeeper/conf</span><br><span class="line">[zookeeper@localhost conf]$ cp zoo_sample.cfg zoo.cfg</span><br><span class="line">[zookeeper@localhost conf]$ vim zoo.cfg</span><br><span class="line"></span><br><span class="line">dataDir=/home/test/zookeeper/data #zookeeper 데이터 위치, 원하는 경로에 저장입력</span><br><span class="line">server.1=zoo-1:2888:3888 #멀티 서버 설정 (주키퍼 서버가 한곳이 아닐때)</span><br><span class="line"><span class="meta">#</span><span class="bash"> server.2=server_host_1:2888:3888</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> server.3=server_host_2:2888:3888</span></span><br></pre></td></tr></table></figure><h3 id="4-myid-생성"><a class="markdownIt-Anchor" href="#4-myid-생성"></a> 4. myid 생성</h3><p>반드시 <strong>myid</strong> 파일을 <strong>dataDir</strong> 속성에 넣었던 경로에 만들어야 합니다. 호스트마다 아이디를 부여해야 합니다. 위의 설정에서 server.1에만 설정하였기 때문에 <code>{dataDir}/myid</code> 내부에 <code>1</code>이라는 값이 있어야 합니다. 그리고 이 값은 유일해야 하고 <strong>1~255</strong> 사이로 설정해야 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[zookeeper@localhost ~]$ cd /home/test/zookeeper/data</span><br><span class="line">[zookeeper@localhost data]$ touch myid</span><br><span class="line">[zookeeper@localhost data]$ echo 1 &gt; myid</span><br></pre></td></tr></table></figure><h3 id="5-zookeeper-서버-실행"><a class="markdownIt-Anchor" href="#5-zookeeper-서버-실행"></a> 5. Zookeeper 서버 실행</h3><p>다음 명령어를 실행하면 이상없이 서버가 실행됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zookeeper@localhost ~]$ cd /home/test/zookeeper/bin</span><br><span class="line">[zookeeper@localhost bin]$ ./zkServer.sh start</span><br></pre></td></tr></table></figure><h3 id="실행-확인"><a class="markdownIt-Anchor" href="#실행-확인"></a> 실행 확인</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zookeeper@localhost bin]$ ./zkCli.sh -server zoo-1:2181</span><br><span class="line">[zookeeper@localhost bin]$ ls /</span><br></pre></td></tr></table></figure><h3 id="zookeeper-서버-중지"><a class="markdownIt-Anchor" href="#zookeeper-서버-중지"></a> Zookeeper 서버 중지</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[zookeeper@localhost bin]$ ./zkServer.sh stop</span><br></pre></td></tr></table></figure><h2 id="추가-설정"><a class="markdownIt-Anchor" href="#추가-설정"></a> 추가 설정</h2><p>추가적으로 프로세스 저장 경로와 로그 저장 경로 변경 및 환경변수 등록을 위한 절차입니다. 변경하지 않아도 됩니다.</p><h3 id="폴더-권한-변경"><a class="markdownIt-Anchor" href="#폴더-권한-변경"></a> 폴더 권한 변경</h3><p>Zookeeper 프로세스 아이디 저장 폴더와 로그 저장 폴더를 생성하고 권한을 변경합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> root 계정으로 전환</span></span><br><span class="line">[zookeeper@localhost ~]$ su -</span><br><span class="line">[root@localhost ~]$ cd /var/run</span><br><span class="line">[root@localhost run]$ mkdir zookeeper</span><br><span class="line">[root@localhost run]$ chown zookeeper:zookeeper /var/run/zookeeper</span><br><span class="line">[root@localhost run]$ cd ../log</span><br><span class="line">[root@localhost log]$ mkdir zookeeper</span><br><span class="line">[root@localhost log]$ chown zookeeper:zookeeper /var/log/zookeeper</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> zookeeper 계정으로 다시 돌아가기</span></span><br><span class="line">[root@localhost log]$ exit</span><br></pre></td></tr></table></figure><p>추가로 위 두개의 폴더에 링크를 생성합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[zookeeper@localhost log]$ cd /home/test/zookeeper</span><br><span class="line">[zookeeper@localhost zookeeper]$ ln -s /var/run/zookeeper/ pids</span><br><span class="line">[zookeeper@localhost zookeeper]$ ln -s /var/log/zookeeper/ logs</span><br></pre></td></tr></table></figure><h3 id="환경변수-변경"><a class="markdownIt-Anchor" href="#환경변수-변경"></a> 환경변수 변경</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk</span><br><span class="line">export ZOOKEEPER_HOME=/home/test/zookeeper</span><br><span class="line">export ZOOKEEPER_CONF_DIR=$ZOOKEEPER_HOME/conf</span><br><span class="line">export ZOOKEEPER_LOG_DIR=/var/log/zookeeper</span><br><span class="line">export ZOO_LOG_DIR=$ZOOKEEPER_LOG_DIR</span><br><span class="line">export ZOOKEEPER_PID_DIR=/var/run/zookeeper</span><br><span class="line">export ZOOPIDFILE=$ZOOKEEPER_PID_DIR/zookeeper_server.pid</span><br><span class="line">export SERVER_JVMFLAGS=-Xmx1024m</span><br><span class="line">export JAVA=$JAVA_HOME/bin/java</span><br><span class="line">export CLASSPATH=$ZOOKEEPER_CONF_DIR:/usr/share/java/jline.jar:/usr/share/java/log4j-1.2.jar:/usr/share/java/xercesImpl.jar:/usr/share/java/xmlParserAPIs.jar:/usr/share/java/netty.jar:/usr/share/java/slf4j-api.jar:/usr/share/java/slf4j-log4j12.jar:/usr/share/java/zookeeper.jar</span><br></pre></td></tr></table></figure><h3 id="서버-재시작"><a class="markdownIt-Anchor" href="#서버-재시작"></a> 서버 재시작</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zookeeper@localhost bin]$ ./zkServer.sh stop</span><br><span class="line">[zookeeper@localhost bin]$ ./zkServer.sh start</span><br></pre></td></tr></table></figure><h3 id="방화벽-설정"><a class="markdownIt-Anchor" href="#방화벽-설정"></a> 방화벽 설정</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ firewall-cmd --permanent --zone=public --add-port=2181/tcp</span><br><span class="line">[root@localhost ~]$ firewall-cmd --permanent --zone=public --add-port=2888/tcp</span><br><span class="line">[root@localhost ~]$ firewall-cmd --permanent --zone=public --add-port=3888/tcp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 방화벽 재시작</span></span></span><br><span class="line">[root@localhost ~]$ firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/28/linux-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] Proxy 서버를 사용한 내부망 yum 사용 방법</title>
      <link>http://hgko1207.github.io/2020/09/28/linux-3/</link>
      <guid>http://hgko1207.github.io/2020/09/28/linux-3/</guid>
      <pubDate>Mon, 28 Sep 2020 00:49:32 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;서버가 운영되는 시스템은 인터넷이 안되는 시스템이 많습니다. 이런 상황에서 &lt;strong&gt;yum&lt;/strong&gt; 을 통한 Package 를 설치할 수 없게 되어 관리가 쉽지 않습니다.&lt;/p&gt;
&lt;p&gt;Proxy 서버를 이용하여 인터넷이 가능한 하나의
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>서버가 운영되는 시스템은 인터넷이 안되는 시스템이 많습니다. 이런 상황에서 <strong>yum</strong> 을 통한 Package 를 설치할 수 없게 되어 관리가 쉽지 않습니다.</p><p>Proxy 서버를 이용하여 인터넷이 가능한 하나의 서버 시스템을 통해 모든 서버가 인터넷이 가능하도록 구성 할 수 있습니다.</p><h2 id="운영환경"><a class="markdownIt-Anchor" href="#운영환경"></a> 운영환경</h2><ul><li>CentOS 7.6</li></ul><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><p>인터넷이 되는 서버에 <code>squid</code> Package를 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install squid</span></span><br></pre></td></tr></table></figure><h2 id="설정"><a class="markdownIt-Anchor" href="#설정"></a> 설정</h2><p>다음과 같이 Proxy 정책을 설정합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/squid/squid.conf</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">... 생략 ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Only allow cachemgr access from localhost</span></span><br><span class="line"><span class="meta">#</span><span class="bash">http_access allow localhost manager</span></span><br><span class="line"><span class="meta">#</span><span class="bash">http_access deny manager</span></span><br><span class="line"></span><br><span class="line">http_access allow all                      # 모든 IP 에 대해 Allow 정책 추가</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> And finally deny all other access to this proxy</span></span><br><span class="line"><span class="meta">#</span><span class="bash">http_access deny all                      <span class="comment"># deny 정책 해제</span></span></span><br><span class="line"></span><br><span class="line">... 생략 ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Squid normally listens to port 3128</span></span><br><span class="line">http_port 8080                             # Proxy 로 사용하길 원하는 Port 지정</span><br><span class="line"><span class="meta">#</span><span class="bash">http_port 3128</span></span><br></pre></td></tr></table></figure><h2 id="서비스-시작"><a class="markdownIt-Anchor" href="#서비스-시작"></a> 서비스 시작</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl start squid</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status squid</span></span><br></pre></td></tr></table></figure><p>정상적으로 Proxy 서비스가 안될경우 다음과 같이 커널 파라미터를 추가합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure><h2 id="proxy-서비스-테스트"><a class="markdownIt-Anchor" href="#proxy-서비스-테스트"></a> Proxy 서비스 테스트</h2><p>인터넷이 안되는 내부 시스템에서 다음 명령어를 실행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum repolist</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Determining fastest mirrors</span><br><span class="line">Could not retrieve mirrorlist http://mirrorlist.centos.org/?release=7&amp;arch=x86_64&amp;repo=os&amp;infra=stock error was</span><br><span class="line">14: curl#6 - "Could not resolve host: mirrorlist.centos.org; Unknown error"</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">repo id                         repo name                        status</span><br><span class="line">base/7/x86_64                   CentOS-7 - Base                    0</span><br><span class="line">extras/7/x86_64                 CentOS-7 - Extras                  0</span><br><span class="line">updates/7/x86_64                CentOS-7 - Updates                 0</span><br><span class="line">repolist: 0</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><p>아직 <code>yum</code> 을 사용 할 수 없습니다.</p><h2 id="yumconf-수정"><a class="markdownIt-Anchor" href="#yumconf-수정"></a> yum.conf 수정</h2><p><code>/etc/yum.conf</code> 파일에 다음과 같이 <code>proxy</code> 옵션을 추가합니다. 인터넷이 되는 시스템의 IP와 Port 정보를 입력합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/yum.conf</span><br><span class="line"></span><br><span class="line">[main]</span><br><span class="line">cachedir=/var/cache/yum/$basearch/$releasever</span><br><span class="line">keepcache=0</span><br><span class="line">debuglevel=2</span><br><span class="line">logfile=/var/log/yum.log</span><br><span class="line">exactarch=1</span><br><span class="line">obsoletes=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">plugins=1</span><br><span class="line">installonly_limit=5</span><br><span class="line">bugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&amp;ref=http://bugs.centos.org/bug_report_page.php?category=yum</span><br><span class="line">distroverpkg=centos-release</span><br><span class="line"></span><br><span class="line">proxy=http://192.168.100.200:8080      # Proxy 서버 정보 추가</span><br></pre></td></tr></table></figure><h2 id="테스트"><a class="markdownIt-Anchor" href="#테스트"></a> 테스트</h2><p><code>yum</code> 사용이 가능한지 다시 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum repolist</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Repository nodesource is listed more than once in the configuration</span><br><span class="line">Repository nodesource-source is listed more than once in the configuration</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirror.kakao.com</span><br><span class="line"> * epel: ftp.riken.jp</span><br><span class="line"> * extras: mirror.kakao.com</span><br><span class="line"> * updates: mirror.kakao.com</span><br><span class="line">repo id                         repo name                        status</span><br><span class="line">base/7/x86_64                   CentOS-7 - Base                  10,070</span><br><span class="line">extras/7/x86_64                 CentOS-7 - Extras                413</span><br><span class="line">updates/7/x86_64                CentOS-7 - Updates               1,134</span><br><span class="line">repolist: 11,617</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><p>위와 같은 결과가 나타나면 <code>yum</code> 을 사용할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/28/linux-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] VNC 설치 및 사용 방법(오프라인 환경)</title>
      <link>http://hgko1207.github.io/2020/09/19/linux-2/</link>
      <guid>http://hgko1207.github.io/2020/09/19/linux-2/</guid>
      <pubDate>Sat, 19 Sep 2020 12:18:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;오프라인 환경에서 VNC 설치 및 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;운영환경&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#운영환경&quot;&gt;&lt;/a&gt; 운영환경&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CentOS 7.6&lt;/li&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>오프라인 환경에서 VNC 설치 및 사용 방법에 대해 알아보겠습니다.</p><h2 id="운영환경"><a class="markdownIt-Anchor" href="#운영환경"></a> 운영환경</h2><ul><li>CentOS 7.6</li></ul><h2 id="server-설치"><a class="markdownIt-Anchor" href="#server-설치"></a> Server 설치</h2><h3 id="다운로드"><a class="markdownIt-Anchor" href="#다운로드"></a> 다운로드</h3><p><a href="http://mirror.centos.org/centos/7/os/x86_64/Packages/" target="_blank" rel="noopener">http://mirror.centos.org/centos/7/os/x86_64/Packages/</a> 사이트에 접속 후 <strong>tigervnc-server-1.8.0-19.el7.x86_64.rpm</strong> 파일을 선택하여 다운 받습니다.<br />다운로드가 완료되면 파일을 리눅스 환경으로 이동시킵니다.</p><h3 id="설치-및-설정"><a class="markdownIt-Anchor" href="#설치-및-설정"></a> 설치 및 설정</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 실행</span></span><br><span class="line">$ sudo rpm -ivh tigervnc-server-1.8.0-19.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 입력 시 5901 포트번호로 생성됩니다.</span></span><br><span class="line">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/systemd/system/vncserver@:1.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 변경</span></span><br><span class="line">ExecStart=/usr/bin/vncserver_wrapper &lt;USER&gt; %i</span><br><span class="line">- &lt;USER&gt;를 서버 계정으로 변경</span><br></pre></td></tr></table></figure><h3 id="서비스-등록"><a class="markdownIt-Anchor" href="#서비스-등록"></a> 서비스 등록</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl <span class="built_in">enable</span> vncserver@:1.service</span><br></pre></td></tr></table></figure><h3 id="방화벽-설정"><a class="markdownIt-Anchor" href="#방화벽-설정"></a> 방화벽 설정</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 포트 열기</span></span><br><span class="line">$ firewall-cmd --zone=public --permanent --add-port=5901/tcp</span><br><span class="line"><span class="comment"># 포트 갱신</span></span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line"><span class="comment"># 포트 확인</span></span><br><span class="line">$ firewall-cmd --zone=public --list-all</span><br></pre></td></tr></table></figure><h2 id="client-설치-및-접속"><a class="markdownIt-Anchor" href="#client-설치-및-접속"></a> Client 설치 및 접속</h2><ol><li><a href="https://www.realvnc.com/en/connect/download/viewer/" target="_blank" rel="noopener">https://www.realvnc.com/en/connect/download/viewer/</a> 사이트 접속 후 <strong>Download VNC Viewer</strong>를 클릭하여 다운 받습니다.</li><li>다운로드가 완료되면 설치를 합니다.</li><li>VNC Viewer 실행 후 상단 search 란에 host:5901 입력 후 Enter 키를 누릅니다.</li><li>서버 계정명과 패스워드를 입력하면 리눅스 환경의 화면이 나오는 것을 확인할 수 있습니다.</li></ol>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/19/linux-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Node.js] 시작 및 구성</title>
      <link>http://hgko1207.github.io/2020/09/15/nodejs-1/</link>
      <guid>http://hgko1207.github.io/2020/09/15/nodejs-1/</guid>
      <pubDate>Tue, 15 Sep 2020 09:11:31 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;다운로드-및-설치&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#다운로드-및-설치&quot;&gt;&lt;/a&gt; 다운로드 및 설치&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/ko/download/&quot; target=&quot;_
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="다운로드-및-설치"><a class="markdownIt-Anchor" href="#다운로드-및-설치"></a> 다운로드 및 설치</h2><p><a href="https://nodejs.org/ko/download/" target="_blank" rel="noopener"><img src="/images/nodejs/download.png" alt="Node.js 다운로드" /></a></p><p>위의 페이지에 접속 한 후 플랫폼에 맞게 선택을 하여 다운로드합니다.</p><p>Windows 환경에서 개발하기 위해 <strong>Windows Installer (.msi) 64-bit</strong>를 다운로드 합니다. 현재 최신 LTS 버전은 <strong>v16.17.0</strong> 버전입니다. 다운 받은 인스톨러 파일을 실행해서 설치를 진행합니다. 설치가 완료 되면 다음 명령어를 실행해서 확인을 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D\&gt; node -v</span><br><span class="line">v16.17.0</span><br><span class="line"></span><br><span class="line">D\&gt; npm -v</span><br><span class="line">8.15.0</span><br></pre></td></tr></table></figure><p>Node.js 를 설치하면 자동으로 NPM 이 설치가 됩니다.</p><blockquote><p>npm (노드 패키지 매니저/Node Package Manager)은 자바스크립트 프로그래밍 언어를 위한 패키지 관리자이다. 자바스크립트 런타임 환경 Node.js의 기본 패키지 관리자이다. 출처 : <a href="https://ko.wikipedia.org/wiki/Npm_(%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4)" target="_blank" rel="noopener">위키백과</a></p></blockquote><h2 id="시작"><a class="markdownIt-Anchor" href="#시작"></a> 시작</h2><h3 id="1-작업-디렉터리-생성"><a class="markdownIt-Anchor" href="#1-작업-디렉터리-생성"></a> 1. 작업 디렉터리 생성</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\&gt; mkdir node_test</span><br><span class="line">D:\&gt; cd node_test</span><br></pre></td></tr></table></figure><h3 id="2-프로젝트-초기화"><a class="markdownIt-Anchor" href="#2-프로젝트-초기화"></a> 2. 프로젝트 초기화</h3><p><code>npm init</code> 명령어를 실행하면 각 항목들을 설정할 수 있는데 아무것도 입력하지 않고 엔터만 치면 괄호안의 기본값 또는 빈값으로 설정이 됩니다.</p><p>최종적으로 모든 설정이 끝나면 <strong>package.json</strong> 파일의 경로와 내용이 출력되고 yes를 입력하게 되면 저장과 동시에 종료됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">D:\node_test&gt; npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See <span class="string">`npm help init`</span> <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Use <span class="string">`npm install &lt;pkg&gt;`</span> afterwards to install a package and</span><br><span class="line">save it <span class="keyword">as</span> a dependency <span class="keyword">in</span> the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">version: (<span class="number">1.0</span><span class="number">.0</span>)</span><br><span class="line">description:</span><br><span class="line">entry point: (index.js)</span><br><span class="line">test command:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to D:\node_test\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"node_test"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Is <span class="keyword">this</span> OK? (yes) yes</span><br><span class="line">D:\node_test&gt;</span><br></pre></td></tr></table></figure><h3 id="3-패키지-설치"><a class="markdownIt-Anchor" href="#3-패키지-설치"></a> 3. 패키지 설치</h3><p><code>npm install</code> 명령어를 실행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\node_test&gt; npm install</span><br></pre></td></tr></table></figure><p>설치된 패키지들은 <strong>node_modules</strong> 디렉터리에 저장됩니다.</p><h3 id="4-웹-사이트-구축"><a class="markdownIt-Anchor" href="#4-웹-사이트-구축"></a> 4. 웹 사이트 구축</h3><p><strong>app.js</strong> 파일을 생성합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\node_test&gt; copy /Y /b NUL app.js</span><br></pre></td></tr></table></figure><p>간단하게 <a href="https://nodejs.org/ko/docs/guides/getting-started-guide/" target="_blank" rel="noopener">Node.js 시작 가이드</a>에 있는 코드를 복사해서 붙여넣습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span>;</span><br><span class="line">  res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</span><br><span class="line">  res.end(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(port, hostname, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-실행"><a class="markdownIt-Anchor" href="#5-실행"></a> 5. 실행</h3><p><code>node app.js</code> 명령어를 실행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\node_test&gt; node app.js</span><br><span class="line">Server running at http://127.0.0.1:3000/</span><br></pre></td></tr></table></figure><p>실행이 완료되면 서버가 구동이 됩니다. 사이트에 접속 하면 <strong>Hello World</strong> 문자가 출력됩니다.</p><p>이로써 Node.js 설치와 초기 설정 및 실행을 완료하였습니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/15/nodejs-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CentOS] 기본 명령어</title>
      <link>http://hgko1207.github.io/2020/09/14/linux-1/</link>
      <guid>http://hgko1207.github.io/2020/09/14/linux-1/</guid>
      <pubDate>Mon, 14 Sep 2020 02:21:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;기본-명령어&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#기본-명령어&quot;&gt;&lt;/a&gt; 기본 명령어&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="기본-명령어"><a class="markdownIt-Anchor" href="#기본-명령어"></a> 기본 명령어</h2><table><thead><tr><th>명령어</th><th>설명</th></tr></thead><tbody><tr><td>ll</td><td>해당 디렉토리 파일 목록 보기</td></tr><tr><td>ls -al</td><td>숨김 파일까지 보기</td></tr><tr><td>ls -lt</td><td>시간순으로 보기</td></tr><tr><td>hostname</td><td>호스트명 보기</td></tr><tr><td>cat [파일명]</br>예) cat /etc/hosts</td><td>파일 내용 출력</td></tr><tr><td>vi [파일명]</br>예) vi /etc/hosts</td><td>파일 내용 편집</td></tr><tr><td>mkdir [폴더명]</td><td>폴더 생성</td></tr><tr><td>touch [파일명]</td><td>파일 생성</td></tr><tr><td>rm [파일명]</td><td>파일 삭제</td></tr><tr><td>rm -f [파일명]</td><td>묻지 않고 삭제</td></tr><tr><td>rm -rf [폴더명]</td><td>폴더 삭제</td></tr><tr><td>cp [복사대상] [붙여넣을파일명]</td><td>파일 복사</td></tr><tr><td>cp -r [복사대상] [붙여넣을폴더명]</td><td>폴더 복사</td></tr><tr><td>mv [파일] [변경할파일]</td><td>파일 또는 폴더 이동</td></tr><tr><td>pwd</td><td>현재 경로 보기</td></tr></tbody></table><h2 id="서비스"><a class="markdownIt-Anchor" href="#서비스"></a> 서비스</h2><table><thead><tr><th>명령어</th><th>설명</th></tr></thead><tbody><tr><td>systemctl enable [서비스명]</td><td>서비스 등록</td></tr><tr><td>systemctl start [서비스명]</td><td>서비스 시작</td></tr><tr><td>systemctl stop [서비스명]</td><td>서비스 중지</td></tr><tr><td>systemctl restart [서비스명]</td><td>서비스 재시작</td></tr><tr><td>systemctl status [서비스명]</td><td>서비스 상태확인</td></tr><tr><td>systemctl list-unit-files | grep [서비스명]</td><td>서비스 검색</td></tr></tbody></table><h2 id="계정"><a class="markdownIt-Anchor" href="#계정"></a> 계정</h2><table><thead><tr><th>명령어</th><th>설명</th></tr></thead><tbody><tr><td>su [계정명]</td><td>접속 계정 변경</td></tr><tr><td>su - </br>예) su - root</td><td>다시 로그인</td></tr><tr><td>whoami</td><td>접속 사용자 확인</td></tr></tbody></table><h2 id="주요-명령어"><a class="markdownIt-Anchor" href="#주요-명령어"></a> 주요 명령어</h2><table><thead><tr><th>명령어</th><th>설명</th></tr></thead><tbody><tr><td>ssh 계정@IP주소</br>예) ssh <a href="mailto:root@192.168.20.25">root@192.168.20.25</a></td><td>SSH 접속</td></tr><tr><td>scp 파일명 계정@IP주소:폴더위치 </br>예) scp mydb.sql <a href="mailto:root@192.168.20.24">root@192.168.20.24</a>:/home/sql</td><td>파일 이동</td></tr></tbody></table><h2 id="실시간-명령어"><a class="markdownIt-Anchor" href="#실시간-명령어"></a> 실시간 명령어</h2><table><thead><tr><th>명령어</th><th>설명</th></tr></thead><tbody><tr><td>watch [-d] [-n seconds] ‘command’</td><td>기본 사용 방법</td></tr></tbody></table>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/14/linux-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[PostgreSQL] Command 명령어</title>
      <link>http://hgko1207.github.io/2020/09/14/postgresql-3/</link>
      <guid>http://hgko1207.github.io/2020/09/14/postgresql-3/</guid>
      <pubDate>Mon, 14 Sep 2020 01:40:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;명령어&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#명령어&quot;&gt;&lt;/a&gt; 명령어&lt;/h2&gt;
&lt;p&gt;PostgreSQL에 접속합니다.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="명령어"><a class="markdownIt-Anchor" href="#명령어"></a> 명령어</h2><p>PostgreSQL에 접속합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> psql -U postgres</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>명령어</th><th>설명</th></tr></thead><tbody><tr><td>\list or \l</td><td>데이터베이스 목록 조회</td></tr><tr><td>\list+ or \l+</td><td>데이터베이스 목록 상세조회</td></tr><tr><td>\c [DB Name]</td><td>다른 DB에 접속</td></tr><tr><td>\d</td><td>테이블 목록 보기</td></tr><tr><td>\dt [Table Name]</td><td>지정된 테이블 컬럼 목록 보기</td></tr><tr><td>\dS</td><td>시스템 테이블 목록 보기</td></tr><tr><td>\dv</td><td>뷰 목록 보기</td></tr><tr><td>\ds</td><td>시퀀스 목록 보기</td></tr><tr><td>\du</td><td>롤 목록 보기</td></tr><tr><td>\dn</td><td>스키마 목록 보기</td></tr><tr><td>\q</td><td>psql 종료(Ctrl + d)</td></tr></tbody></table><h2 id="백업-및-복원"><a class="markdownIt-Anchor" href="#백업-및-복원"></a> 백업 및 복원</h2><table><thead><tr><th>명령어</th><th>설명</th></tr></thead><tbody><tr><td>pg_dump &gt; [백업파일명]</td><td>전체 백업</td></tr><tr><td>pg_dump [DB명] &gt; [백업파일명]</br>예) pg_dump mydb &gt; db.sql</td><td>데이터베이스만 백업</td></tr><tr><td>psql -U postgres [DB명] &gt; [백업파일명]</td><td>데이터베이스만 백업</td></tr><tr><td>psql -f [백업파일명] [복원할 DB명]</br>예) psql -f db.sql mydb</td><td>DB 만 복원</br>단, DB가 없는 경우에는 생성을 먼저 해줘야 한다.</td></tr><tr><td>psql [복원할 DB명] &lt; [백업파일명]</br>예) psql mydb &lt; db.sql</td><td>DB 만 복원</br>단, DB가 없는 경우에는 생성을 먼저 해줘야 한다.</td></tr></tbody></table>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/14/postgresql-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[PostgreSQL] 외부 접속 허용</title>
      <link>http://hgko1207.github.io/2020/09/11/postgresql-2/</link>
      <guid>http://hgko1207.github.io/2020/09/11/postgresql-2/</guid>
      <pubDate>Fri, 11 Sep 2020 01:20:47 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;외부-접속-허용-설정&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#외부-접속-허용-설정&quot;&gt;&lt;/a&gt; 외부 접속 허용 설정&lt;/h2&gt;
&lt;h3 id=&quot;1-사용자-비밀번호-설정&quot;&gt;&lt;a class=&quot;markdownIt-Anch
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="외부-접속-허용-설정"><a class="markdownIt-Anchor" href="#외부-접속-허용-설정"></a> 외부 접속 허용 설정</h2><h3 id="1-사용자-비밀번호-설정"><a class="markdownIt-Anchor" href="#1-사용자-비밀번호-설정"></a> 1. 사용자 비밀번호 설정</h3><p>외부에서 접속 하기 위해선 우선 <code>postgres</code> 비밀번호를 설정해야 합니다.</p><p>postgres 계정으로 접속합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> su - postgres psql</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 비밀번호 설정</span></span><br><span class="line">\password postgres</span><br><span class="line"></span><br><span class="line"><span class="comment"># 종료</span></span><br><span class="line">\q</span><br></pre></td></tr></table></figure><h3 id="2-방화벽-개방"><a class="markdownIt-Anchor" href="#2-방화벽-개방"></a> 2. 방화벽 개방</h3><p>방화벽에서 5432 포트를 개방합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --permanent --zone=public --add-port=5432/tcp</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --reload</span></span><br></pre></td></tr></table></figure><h3 id="3-설정-파일-변경"><a class="markdownIt-Anchor" href="#3-설정-파일-변경"></a> 3. 설정 파일 변경</h3><p>postgresql 접속 후 Data 디렉토리 확인을 할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> show data_directory;</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> /var/lib/pgsql/11/data</span></span><br></pre></td></tr></table></figure><p>postgresql.conf 설정 파일을 엽니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /var/lib/pgsql/11/data/postgresql.conf</span></span><br></pre></td></tr></table></figure><p>설정 파일에서 다음과 같이 변경합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># listen_addresses = 'localhost' -&gt; 주석으로 되어있음</span></span><br><span class="line">listen_addresses = <span class="string">'*'</span></span><br></pre></td></tr></table></figure><h3 id="4-보안-설정-변경"><a class="markdownIt-Anchor" href="#4-보안-설정-변경"></a> 4. 보안 설정 변경</h3><p>외부 접속을 위해 보안 설정을 변경합니다.</p><p>root 계정으로 복귀합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> su - root</span></span><br></pre></td></tr></table></figure><p>설정 파일을 엽니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /var/lib/pgsql/11/data/pg_hba.conf</span></span><br></pre></td></tr></table></figure><p>설정 정보를 다음과 같이 변경합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span> all all peer =&gt; <span class="built_in">local</span> all all md5</span><br><span class="line">host all all 127.0.0.1/32 ident =&gt; host all all 0.0.0.0/0 md5</span><br><span class="line">host all all ::1/128 ident =&gt; host all all ::1/128 md5</span><br></pre></td></tr></table></figure><ul><li><code>md5</code> : 패스워드를 md5로 암호화해서 전송</li></ul><h3 id="5-서비스-재시작"><a class="markdownIt-Anchor" href="#5-서비스-재시작"></a> 5. 서비스 재시작</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart postgresql-11</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><p>아래 링크에서는 pg_hba.conf를 수정하지 않고 접근제어를 할 수 있도록 하는 방법이 설명되어 있는데 테스트 해보진 않았습니다.</p><ul><li><a href="https://rastalion.me/centos-7-%EC%97%90%EC%84%9C-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%97%90-postgresql-%EB%A6%AC%EC%8A%A4%EB%84%88-%ED%8F%AC%ED%8A%B8-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/" target="_blank" rel="noopener">CentOS 7 에서 방화벽에 PostgreSQL 리스너 포트 등록하기</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/11/postgresql-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[PostgreSQL] CentOS 7에서 PostgreSQL 설치 및 시작</title>
      <link>http://hgko1207.github.io/2020/09/10/postgresql-1/</link>
      <guid>http://hgko1207.github.io/2020/09/10/postgresql-1/</guid>
      <pubDate>Thu, 10 Sep 2020 09:22:53 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 &lt;strong&gt;PostgreSQL&lt;/strong&gt; 설치 및 시작 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;운영환경&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#운영환경&quot;&gt;&lt;/a&gt; 운영환경&lt;/h2&gt;
&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 <strong>PostgreSQL</strong> 설치 및 시작 방법에 대해 알아보겠습니다.</p><h2 id="운영환경"><a class="markdownIt-Anchor" href="#운영환경"></a> 운영환경</h2><ul><li>CentOS 7.6</li><li>PostgreSQL 11.9</li></ul><h2 id="인터넷이-되는-환경"><a class="markdownIt-Anchor" href="#인터넷이-되는-환경"></a> 인터넷이 되는 환경</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install the repository RPM:</span></span><br><span class="line">$ sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># PostgreSQL을 설치합니다.</span></span><br><span class="line">$ sudo yum install -y postgresql11-server postgresql11-contrib</span><br></pre></td></tr></table></figure><h2 id="인터넷이-안되는-환경"><a class="markdownIt-Anchor" href="#인터넷이-안되는-환경"></a> 인터넷이 안되는 환경</h2><h3 id="1-rpm-다운로드"><a class="markdownIt-Anchor" href="#1-rpm-다운로드"></a> 1. RPM 다운로드</h3><p>외부 환경에서 <a href="https://yum.postgresql.org/11/redhat/rhel-7-x86_64/repoview/postgresqldbserver11.group.html" target="_blank" rel="noopener">PostgreSQL Database Server 11 PGDG</a> 페이지에 접속해서 RPM 파일들을 다운로드 하고 리눅스 환경으로 이동시킨다.</p><ul><li>postgresql11-11.9-1PGDG.rhel7.x86_64.rpm</li><li>postgresql11-contrib-11.9-1PGDG.rhel7.x86_64.rpm</li><li>postgresql11-libs-11.9-1PGDG.rhel7.x86_64.rpm</li><li>postgresql11-server-11.9-1PGDG.rhel7.x86_64.rpm</li></ul><h3 id="2-설치"><a class="markdownIt-Anchor" href="#2-설치"></a> 2. 설치</h3><p>postgresql11-libs -&gt; postgresql11 -&gt; (postgresql11-server, postgresql11-contrib) 순으로 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh postgresql11-libs-11.5-1PGDG.rhel7.x86_64.rpm</span><br><span class="line">sudo rpm -ivh postgresql11-11.5-1PGDG.rhel7.x86_64.rpm</span><br><span class="line">sudo rpm -ivh postgresql11-server-11.5-1PGDG.rhel7.x86_64.rpm</span><br><span class="line">sudo rpm -ivh postgresql11-contrib-11.5-1PGDG.rhel7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="설치된-패키지-확인"><a class="markdownIt-Anchor" href="#설치된-패키지-확인"></a> 설치된 패키지 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -qa | grep postgresql</span></span><br></pre></td></tr></table></figure><h2 id="기본-database-생성"><a class="markdownIt-Anchor" href="#기본-database-생성"></a> 기본 Database 생성</h2><p><code>initdb</code> 명령어를 통해 기본 데이터베이스를 설치합니다. 기본 데이터베이스는 <code>postgres</code> 라는 이름으로 생성됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo /usr/pgsql-11/bin/postgresql-11-setup initdb</span></span><br></pre></td></tr></table></figure><h2 id="서비스-등록-및-실행"><a class="markdownIt-Anchor" href="#서비스-등록-및-실행"></a> 서비스 등록 및 실행</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> postgresql-11</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start postgresql-11</span></span><br></pre></td></tr></table></figure><h2 id="postgresql-접속"><a class="markdownIt-Anchor" href="#postgresql-접속"></a> postgresql 접속</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo -u postgres psql</span></span><br></pre></td></tr></table></figure><h2 id="데이터베이스-생성"><a class="markdownIt-Anchor" href="#데이터베이스-생성"></a> 데이터베이스 생성</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=# create database &lt;name&gt; encoding 'utf-<span class="number">8</span>';</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/10/postgresql-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[WPF] Event Notifier</title>
      <link>http://hgko1207.github.io/2020/09/07/wpf-1/</link>
      <guid>http://hgko1207.github.io/2020/09/07/wpf-1/</guid>
      <pubDate>Mon, 07 Sep 2020 01:40:55 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;컴포넌트 간의 데이터를 주고 받을 경우 Prism의 EventAggregator를 사용하면 편리하지만 WPF 만을 사용할 경우 아래 코드와 같이 구성하여 사용하였습니다.&lt;/p&gt;
&lt;h2 id=&quot;event-manager&quot;&gt;&lt;a class=&quot;markd
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>컴포넌트 간의 데이터를 주고 받을 경우 Prism의 EventAggregator를 사용하면 편리하지만 WPF 만을 사용할 경우 아래 코드와 같이 구성하여 사용하였습니다.</p><h2 id="event-manager"><a class="markdownIt-Anchor" href="#event-manager"></a> Event Manager</h2><p><code>EventManager.cs</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Tool.Event</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventManager</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">EventHandler</span>(<span class="params"></span>)</span>;</span><br><span class="line">        <span class="keyword">event</span> EventHandler <span class="keyword">event</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Subscribe</span>(<span class="params">EventHandler handler</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">          <span class="keyword">event</span> += handler;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnSubscribe</span>(<span class="params">EventHandler handler</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">event</span> -= handler;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Publish</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">event</span>?.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class EventManager&lt;T&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">EventHandler</span>(<span class="params">T item</span>)</span>;</span><br><span class="line">        <span class="keyword">event</span> EventHandler <span class="keyword">event</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Subscribe</span>(<span class="params">EventHandler handler</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">event</span> += handler;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnSubscribe</span>(<span class="params">EventHandler handler</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">event</span> -= handler;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Publish</span>(<span class="params">T item</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">event</span>?.Invoke(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="event-notifier"><a class="markdownIt-Anchor" href="#event-notifier"></a> Event Notifier</h2><p><code>EventNotifier.cs</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Tool.Event</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventNotifier</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> EventManager&lt;<span class="keyword">string</span>&gt; InputDataEvent = <span class="keyword">new</span> EventManager&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> EventManager OpenEvent = <span class="keyword">new</span> EventManager();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> EventManager CloseEvent = <span class="keyword">new</span> EventManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="사용-예"><a class="markdownIt-Anchor" href="#사용-예"></a> 사용 예</h2><p>이벤트 등록</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Tool.Views</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">TestWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TestWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CloseClick</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Close();</span><br><span class="line">            EventNotifier.CloseEvent.Publish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이벤트 받기</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Tool.ViewModwl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainWindowViewModwl</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            EventNotifier.CloseEvent.Subscribe(CloseEvent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CloseEvent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"CloseEvent"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드는 다른 Window 에서 창을 종료시 메인 Window 의 기능을 수행하기 위한 예제입니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/07/wpf-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Docker] 주요 명령어 및 기본 사용법</title>
      <link>http://hgko1207.github.io/2020/09/06/docker-1/</link>
      <guid>http://hgko1207.github.io/2020/09/06/docker-1/</guid>
      <pubDate>Sun, 06 Sep 2020 12:57:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리눅스 환경에서 Docker 명령어와 기본 사용 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;운영환경&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#운영환경&quot;&gt;&lt;/a&gt; 운영환경&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CentOS 7.6
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>리눅스 환경에서 Docker 명령어와 기본 사용 방법에 대해 알아보겠습니다.</p><h2 id="운영환경"><a class="markdownIt-Anchor" href="#운영환경"></a> 운영환경</h2><ul><li>CentOS 7.6</li></ul><h2 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install docker</span></span><br></pre></td></tr></table></figure><p>설치가 완료되면 버전을 조회하여 설치 확인을 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker -v</span></span><br></pre></td></tr></table></figure><h2 id="컨테이너-생성-및-실행"><a class="markdownIt-Anchor" href="#컨테이너-생성-및-실행"></a> 컨테이너 생성 및 실행</h2><p><code>docker run</code> 명령어는 컨테이너를 생성 및 실행과 동시에 컨테이너 내부로 들어갑니다.</p><p>기본 포맷입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run (&lt;옵션&gt;) &lt;이미지 식별자&gt; (&lt;명령어&gt;) (&lt;인자&gt;)</span></span><br></pre></td></tr></table></figure><p>예시입니다. 가독성을 위해 (역슬래시)를 이용해 각 설정 옵션을 구분합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d \</span></span><br><span class="line">    --name hgko.default.local \</span><br><span class="line">    --privileged \</span><br><span class="line">    -h hgko --network insnet \</span><br><span class="line">    -v /data:/data \</span><br><span class="line">    -p 5914:5901 \</span><br><span class="line">    hgko</span><br></pre></td></tr></table></figure><p>간략한 예시입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -i -t <span class="built_in">test</span> /bin/bash</span></span><br></pre></td></tr></table></figure><h3 id="run-옵션-목록"><a class="markdownIt-Anchor" href="#run-옵션-목록"></a> Run 옵션 목록</h3><ul><li><code>-d</code> : 컨테이너를 백그라운드로 실행해야 할 때 사용</li><li><code>-name</code> : 컨테이너를 식별할 수 있도록 이름을 부여</li><li><code>-h</code> : 컨테이너 호스트 이름 설정</li><li><code>-v</code> : 볼륨 마운트 (컨테이너 외부 &lt;-&gt; 컨테이너 내부 디렉토리 마운트)</li><li><code>-p</code> : 포트 연결 (컨테이너 외부 &lt;-&gt; 컨테이너 내부 포트간의 연결)</li><li><code>--link</code> : 내부 IP를 알 필요 없이 항상 컨테이너에 별명으로 접근하도록 설정</li><li><code>--privileged</code> : 시스템 내 장치 등 주요 자원에 접근하며 커널의 기능을 대부분 사용할 수 있도록 설정</li></ul><h3 id="컨테이너-생성"><a class="markdownIt-Anchor" href="#컨테이너-생성"></a> 컨테이너 생성</h3><p><code>docker create</code> 명령어는 컨테이너를 생성만 할 뿐 컨테이너 내부로 들어가지 않습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker create -i -t --name mycentos centos:7</span></span><br></pre></td></tr></table></figure><h3 id="컨테이너-실행"><a class="markdownIt-Anchor" href="#컨테이너-실행"></a> 컨테이너 실행</h3><p>다음 명령어를 실행하여 컨테이너를 시작합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start mycentos</span></span><br></pre></td></tr></table></figure><p>컨테이너 내부로 들어갑니다.(단, -i -t 옵션을 사용 했을 때)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker attach mycentos</span></span><br></pre></td></tr></table></figure><h3 id="컨테이너-내부-셸-사용"><a class="markdownIt-Anchor" href="#컨테이너-내부-셸-사용"></a> 컨테이너 내부 셸 사용</h3><p>mycentos 컨테이너 내부에 bash 프로세스를 실행하고, -i -t 옵션을 사용해서 bash 셸을 쓸 수 있게 유지합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -i -t  mycentos \bin\bash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -i -t  mycentos bash</span></span><br></pre></td></tr></table></figure><h3 id="컨테이너-내부에서-빠져나오기"><a class="markdownIt-Anchor" href="#컨테이너-내부에서-빠져나오기"></a> 컨테이너 내부에서 빠져나오기</h3><p>컨테이너 내부에서 빠져나오는 방법은 두 가지가 있습니다. 첫 번째는 컨테이너 셸에서 exit를 입력하거나 Ctrl + D를 동시에 입력하는 것 입니다. 이 방법은 컨테이너 내부에서 빠져나오면서 동시에 컨테이서를 정지시킵니다. 두 번째는 Ctrl + P, Q를 입력하는 것 입니다. 이 방법은 컨테이너를 정지하지 않고 빠져나옵니다.</p><h2 id="컨테이너-확인"><a class="markdownIt-Anchor" href="#컨테이너-확인"></a> 컨테이너 확인</h2><p>정지되지 않은 컨테이너만 출력합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br></pre></td></tr></table></figure><p>정지된 컨테이너를 포함한 모든 컨테이너를 출력합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps -a</span></span><br></pre></td></tr></table></figure><p>출력 결과가 줄바꿈되어 알아보기 힘들 때 <code>--format</code> 옵션을 사용합니다/</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps --format <span class="string">"table &#123;&#123;.ID&#125;&#125;\&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Image&#125;&#125;"</span></span></span><br></pre></td></tr></table></figure><p>특정 컨테이너를 출력합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps | grep mycentos</span></span><br></pre></td></tr></table></figure><h2 id="컨테이너-이름-변경"><a class="markdownIt-Anchor" href="#컨테이너-이름-변경"></a> 컨테이너 이름 변경</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rename mycentos my_centos</span></span><br></pre></td></tr></table></figure><h2 id="컨테이너-삭제"><a class="markdownIt-Anchor" href="#컨테이너-삭제"></a> 컨테이너 삭제</h2><p>정지된 컨테이너만 삭제 가능합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm mycentos</span></span><br></pre></td></tr></table></figure><p>실행 중인 컨테이너도 삭제 가능합니다. (-f : 강제 삭제)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm -f mycentos</span></span><br></pre></td></tr></table></figure><p>모든 컨테이너 삭제 가능합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker container prune</span></span><br></pre></td></tr></table></figure><h2 id="이미지-목록"><a class="markdownIt-Anchor" href="#이미지-목록"></a> 이미지 목록</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br></pre></td></tr></table></figure><h2 id="이미지-삭제"><a class="markdownIt-Anchor" href="#이미지-삭제"></a> 이미지 삭제</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi &lt;이미지 식별자&gt;</span></span><br></pre></td></tr></table></figure><h2 id="이미지-빌드"><a class="markdownIt-Anchor" href="#이미지-빌드"></a> 이미지 빌드</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t hgko ./image/</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/06/docker-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[딥러닝] Preprocess 준비</title>
      <link>http://hgko1207.github.io/2020/09/01/ai-preprocess-1/</link>
      <guid>http://hgko1207.github.io/2020/09/01/ai-preprocess-1/</guid>
      <pubDate>Tue, 01 Sep 2020 14:10:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;로컬 데이터를 불러와 전처리시 필요한 내용이다.&lt;/p&gt;
&lt;h2 id=&quot;load-packages&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#load-packages&quot;&gt;&lt;/a&gt; Load Packages&lt;/h2&gt;
&lt;figure 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>로컬 데이터를 불러와 전처리시 필요한 내용이다.</p><h2 id="load-packages"><a class="markdownIt-Anchor" href="#load-packages"></a> Load Packages</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 현재 경로를 알려준다.</span></span><br><span class="line">os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 경로를 넣으면 경로의 파일명만 목록 형식으로 보여준다.</span></span><br><span class="line">os.listdir()</span><br><span class="line">os.listdir(<span class="string">'dataset/mnist_png/training/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 경로가 포함된 모든 파일들을 목록 형식으로 보여준다.</span></span><br><span class="line"><span class="comment"># 원하는 포맷의 파일만을 가져올 수 있습니다.(png, txt 등)</span></span><br><span class="line">glob(<span class="string">'dataset/mnist_png/training/*.png'</span>)</span><br></pre></td></tr></table></figure><h2 id="데이터-분석"><a class="markdownIt-Anchor" href="#데이터-분석"></a> 데이터 분석</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">label_nums = os.listdir(<span class="string">'dataset/mnist_png/training/'</span>)</span><br><span class="line">&gt; [<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Label 데이터 갯수 확인</span></span><br><span class="line">len(label_nums)</span><br><span class="line">&gt; <span class="number">10</span></span><br></pre></td></tr></table></figure><p>데이터 별 갯수 비교</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nums_dataset = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> lbl_n <span class="keyword">in</span> label_nums:</span><br><span class="line">    data_per_class = os.listdir(<span class="string">'../dataset/mnist_png/training/'</span> + lbl_n)</span><br><span class="line">    nums_dataset.append(len(data_per_class))</span><br><span class="line"></span><br><span class="line">&gt; [<span class="number">5923</span>, <span class="number">6742</span>, <span class="number">5958</span>, <span class="number">6131</span>, <span class="number">5842</span>, <span class="number">5421</span>, <span class="number">5918</span>, <span class="number">6265</span>, <span class="number">5851</span>, <span class="number">5949</span>]</span><br></pre></td></tr></table></figure><h2 id="tensorflow로-열기"><a class="markdownIt-Anchor" href="#tensorflow로-열기"></a> TensorFlow로 열기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gfile = tf.io.read_file(path)</span><br><span class="line">image = tf.io.decode_image(gfile)</span><br></pre></td></tr></table></figure><h2 id="데이터-이미지-사이즈-알기"><a class="markdownIt-Anchor" href="#데이터-이미지-사이즈-알기"></a> 데이터 이미지 사이즈 알기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm_notebook</span><br><span class="line"></span><br><span class="line">heights = []</span><br><span class="line">widths = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> tqdm_notebook(data_paths):</span><br><span class="line">    image_pil = Image.open(path)</span><br><span class="line">    image = np.array(image_pil)</span><br><span class="line">    h, w = image.shape</span><br><span class="line"></span><br><span class="line">    heights.append(h)</span><br><span class="line">    widths.append(w)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/01/ai-preprocess-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++] DLL 동적 로딩</title>
      <link>http://hgko1207.github.io/2020/09/01/cpp-coding-2/</link>
      <guid>http://hgko1207.github.io/2020/09/01/cpp-coding-2/</guid>
      <pubDate>Tue, 01 Sep 2020 09:46:17 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;dll-동적-로딩&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#dll-동적-로딩&quot;&gt;&lt;/a&gt; DLL 동적 로딩&lt;/h2&gt;
&lt;p&gt;특정 폴더 내에 다수의 DLL 라이브러리 파일들을 로딩하기 위한 코드다.&lt;/p&gt;
&lt;h3 id
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="dll-동적-로딩"><a class="markdownIt-Anchor" href="#dll-동적-로딩"></a> DLL 동적 로딩</h2><p>특정 폴더 내에 다수의 DLL 라이브러리 파일들을 로딩하기 위한 코드다.</p><h3 id="header-파일"><a class="markdownIt-Anchor" href="#header-파일"></a> Header 파일</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllload.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DLLLoad</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  DLLLoad() &#123;&#125;</span><br><span class="line">  ~DLLLoad() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">LoadLibrary</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">FreeLibrary</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// DLL 폴더 경로를 설정한다.</span></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> DLL_DIR;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 로딩된 DLL 파일 경로들을 저장하고 관리한다.</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; fileList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-파일"><a class="markdownIt-Anchor" href="#c-파일"></a> C++ 파일</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllload.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"dllload.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> DLLLoad::DLL_DIR = <span class="string">"C:\\dll\\"</span>;</span><br><span class="line"></span><br><span class="line">DLLLoad::DLLLoad() &#123;&#125;</span><br><span class="line">DLLLoad::~DLLLoad() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DLL 라이브러리들을 동적 로딩한다.</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DLLLoad::LoadLibrary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 처음 DLL 로드 이후에는 다시 로드하지 않는다.</span></span><br><span class="line">  <span class="keyword">if</span> (fileList.size() == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> input = DLL_DIR + <span class="string">"*.dll"</span>;</span><br><span class="line"></span><br><span class="line">    WIN32_FIND_DATA FindData;</span><br><span class="line">    HANDLE hFind = FindFirstFile(input.c_str(), &amp;FindData);</span><br><span class="line">    <span class="keyword">if</span> (hFind == INVALID_HANDLE_VALUE)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error - Can't find a file : "</span> &lt;&lt; FindData.cFileName &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (FindData.dwFileAttributes &amp; FILE_ATTRIBUTE_ARCHIVE) <span class="comment">// 파일만 검색</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> dir = CSM_DLL_DIR + FindData.cFileName;</span><br><span class="line">        HINSTANCE hmodule = LoadLibrary(dir.c_str());</span><br><span class="line">        <span class="keyword">if</span> (hmodule != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          fileList.push_back(dir);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (FindNextFile(hFind, &amp;FindData) != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    FindClose(hFind);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 로딩된 DLL 라이브러리들을 해제한다.</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DLLLoad::FreeLibrary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">string</span> file : fileList)</span><br><span class="line">  &#123;</span><br><span class="line">    HINSTANCE hmodule = GetModuleHandle(file.c_str());</span><br><span class="line">    <span class="keyword">if</span> (hmodule != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      FreeLibrary(hmodule);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-함수"><a class="markdownIt-Anchor" href="#main-함수"></a> Main 함수</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  DLLLoad dllLoad = <span class="keyword">new</span> DLLLoad();</span><br><span class="line">  dllLoad-&gt;LoadLibrary();</span><br><span class="line">  dllLoad-&gt;FreeLibrary();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/01/cpp-coding-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MSSQL] Geometry Query</title>
      <link>http://hgko1207.github.io/2020/09/01/mssql-1/</link>
      <guid>http://hgko1207.github.io/2020/09/01/mssql-1/</guid>
      <pubDate>Tue, 01 Sep 2020 08:38:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;geometry-데이터-형식-쿼리&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#geometry-데이터-형식-쿼리&quot;&gt;&lt;/a&gt; Geometry 데이터 형식 쿼리&lt;/h2&gt;
&lt;h3 id=&quot;stcontains&quot;&gt;&lt;a clas
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="geometry-데이터-형식-쿼리"><a class="markdownIt-Anchor" href="#geometry-데이터-형식-쿼리"></a> Geometry 데이터 형식 쿼리</h2><h3 id="stcontains"><a class="markdownIt-Anchor" href="#stcontains"></a> STContains</h3><ul><li><a href="https://docs.microsoft.com/ko-kr/sql/t-sql/spatial-geometry/stcontains-geometry-data-type?view=sql-server-ver15" target="_blank" rel="noopener">STContains(geometry 데이터 형식)</a></li></ul><p><strong>geometry</strong> 인스턴스에 다른 <strong>geometry</strong> 인스턴스가 완전히 포함되어 있으면 1을 반환합니다. 그렇지 않으면 0을 반환합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @g geometry;</span><br><span class="line"><span class="keyword">DECLARE</span> @h geometry;</span><br><span class="line"><span class="keyword">SET</span> @g = geometry::STGeomFromText(<span class="string">'POLYGON((-122.358 47.653, -122.348 47.649, -122.348 47.658, -122.358 47.658, -122.358 47.653))'</span>, <span class="number">4326</span>);</span><br><span class="line"><span class="keyword">SET</span> @h = geometry::STGeomFromText(<span class="string">'POINT(-122.358 47.656)'</span>, <span class="number">4326</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @g.STContains(@h);</span><br></pre></td></tr></table></figure><p>POINT 좌표가 POLYGON 좌표에 완전히 포함되어 있지 않기 때문에 결과는 0을 반환합니다.</p><h3 id="stintersects"><a class="markdownIt-Anchor" href="#stintersects"></a> STIntersects</h3><ul><li><a href="https://docs.microsoft.com/ko-kr/sql/t-sql/spatial-geometry/stintersects-geometry-data-type?view=sql-server-ver15" target="_blank" rel="noopener">STIntersects(geometry 데이터 형식)</a></li></ul><p>geometry 인스턴스가 다른 geometry 인스턴스와 교차하면 1을 반환합니다. 그렇지 않으면 0을 반환합니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @g geometry;</span><br><span class="line"><span class="keyword">DECLARE</span> @h geometry;</span><br><span class="line"><span class="keyword">SET</span> @g = geometry::STGeomFromText(<span class="string">'POLYGON((-122.358 47.653, -122.348 47.649, -122.348 47.658, -122.358 47.658, -122.358 47.653))'</span>, <span class="number">4326</span>);</span><br><span class="line"><span class="keyword">SET</span> @h = geometry::STGeomFromText(<span class="string">'POINT(-122.358 47.656)'</span>, <span class="number">4326</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @g.STIntersects(@h);</span><br></pre></td></tr></table></figure><p>POINT 좌표가 POLYGON 좌표와 교차하기 때문에 결과는 1을 반환합니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/09/01/mssql-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[딥러닝] 교육자료</title>
      <link>http://hgko1207.github.io/2020/08/21/ai-deep-1/</link>
      <guid>http://hgko1207.github.io/2020/08/21/ai-deep-1/</guid>
      <pubDate>Fri, 21 Aug 2020 08:24:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;딥러닝-교육자료&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#딥러닝-교육자료&quot;&gt;&lt;/a&gt; 딥러닝 교육자료&lt;/h2&gt;
&lt;p&gt;딥러닝을 배우기 위한 강의 사이트와 책을 정리하였다.&lt;/p&gt;
&lt;h3 id=&quot;교육-사이트&quot;&gt;&lt;a c
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="딥러닝-교육자료"><a class="markdownIt-Anchor" href="#딥러닝-교육자료"></a> 딥러닝 교육자료</h2><p>딥러닝을 배우기 위한 강의 사이트와 책을 정리하였다.</p><h3 id="교육-사이트"><a class="markdownIt-Anchor" href="#교육-사이트"></a> 교육 사이트</h3><ul><li>프로그래머스 - <a href="https://programmers.co.kr/" target="_blank" rel="noopener">https://programmers.co.kr/</a></li><li>에드윗 - <a href="https://www.edwith.org/" target="_blank" rel="noopener">https://www.edwith.org/</a></li></ul><h3 id="입문-강의"><a class="markdownIt-Anchor" href="#입문-강의"></a> 입문 강의</h3><ul><li>파이썬 입문 - <a href="https://programmers.co.kr/learn/courses/2" target="_blank" rel="noopener">https://programmers.co.kr/learn/courses/2</a></li><li>딥러닝 입문(Tensorflow) - <a href="https://www.edwith.org/others26" target="_blank" rel="noopener">https://www.edwith.org/others26</a></li></ul><h3 id="입문-블로그"><a class="markdownIt-Anchor" href="#입문-블로그"></a> 입문 블로그</h3><ul><li>딥러닝 입문(Keras) - <a href="https://tykimos.github.io/lecture/" target="_blank" rel="noopener">https://tykimos.github.io/lecture/</a></li></ul><h3 id="딥러닝-책"><a class="markdownIt-Anchor" href="#딥러닝-책"></a> 딥러닝 책</h3><ul><li>밑바닥부터 시작하는 딥러닝(기초)</li><li>DeepLearningBook(심화)</li></ul><h3 id="머신러닝-책"><a class="markdownIt-Anchor" href="#머신러닝-책"></a> 머신러닝 책</h3><ul><li>핸즈온 머신러닝(심화)</li><li>PRML(심화)</li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/08/21/ai-deep-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Web Design] Canvas</title>
      <link>http://hgko1207.github.io/2020/08/21/web-design-1/</link>
      <guid>http://hgko1207.github.io/2020/08/21/web-design-1/</guid>
      <pubDate>Fri, 21 Aug 2020 07:59:04 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;html-템플릿&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#html-템플릿&quot;&gt;&lt;/a&gt; HTML 템플릿&lt;/h2&gt;
&lt;p&gt;회사 홈페이지 및 블로그 형태의 사이트 제작 요청이 있어 디자인 템플릿을 찾아보던 중 심플하기도 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="html-템플릿"><a class="markdownIt-Anchor" href="#html-템플릿"></a> HTML 템플릿</h2><p>회사 홈페이지 및 블로그 형태의 사이트 제작 요청이 있어 디자인 템플릿을 찾아보던 중 심플하기도 하고 이쁜 HTML 템플릿을 찾게 되었다.</p><h3 id="canvas"><a class="markdownIt-Anchor" href="#canvas"></a> Canvas</h3><p>The Multi-Purpose HTML5 Template</p><p><a href="https://themeforest.net/item/canvas-the-multipurpose-html5-template/9228123" target="_blank" rel="noopener"><img src="/images/design/canvas.png" alt="Canvas" /></a></p><p>Canvas는 Mulit-Page 및 One-Page 사이트를 제공하고 반응형을 지원하는 다목적 HTML5 템플릿이다. 비즈니스, 의료, SEO, 여행, 건설, 부동산, 요가, 뷰티, 기사, 사진, 뉴스, 대여, 이력서, 블로그, 웨딩, 음악, 앱 쇼케이스, 애완 동물, 스토어 등 120개 이상의 즉시 사용 가능한 홈페이지 템플릿을 제공합니다. 유료 이지만 가격도 저렴해서 가성비가 좋다.</p><p>빠르게 개발을 해야 하거나 디자인 비용을 절감해야 할 때 사용하면 좋은 사이트를 제작할 수 있을 것이다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/08/21/web-design-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TensorFlow 2.0과 PyTorch 비교</title>
      <link>http://hgko1207.github.io/2020/08/13/ai-dev-8/</link>
      <guid>http://hgko1207.github.io/2020/08/13/ai-dev-8/</guid>
      <pubDate>Thu, 13 Aug 2020 07:36:58 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;tensorflow-20&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tensorflow-20&quot;&gt;&lt;/a&gt; TensorFlow 2.0&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="tensorflow-20"><a class="markdownIt-Anchor" href="#tensorflow-20"></a> TensorFlow 2.0</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> datasets</span><br></pre></td></tr></table></figure><h3 id="hyperparameter"><a class="markdownIt-Anchor" href="#hyperparameter"></a> Hyperparameter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">0.001</span></span><br><span class="line">dropout_rate = <span class="number">0.7</span></span><br><span class="line"></span><br><span class="line">input_shape = (<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">num_classes = <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="preprocess"><a class="markdownIt-Anchor" href="#preprocess"></a> Preprocess</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(train_x, train_y), (test_x, test_y) = datasets.mnist.load_data()</span><br><span class="line"></span><br><span class="line">train_x = train_x[..., tf.newaxis]</span><br><span class="line">test_x = test_x[..., tf.newaxis]</span><br><span class="line"></span><br><span class="line">train_x = train_x / <span class="number">255.</span></span><br><span class="line">test_x = test_x / <span class="number">255.</span></span><br></pre></td></tr></table></figure><h3 id="build-model"><a class="markdownIt-Anchor" href="#build-model"></a> Build Model</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">inputs = layers.Input(input_shape)</span><br><span class="line">net = layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(inputs)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))(net)</span><br><span class="line">net = layers.Dropout(dropout_rate)(net)</span><br><span class="line"></span><br><span class="line">net = layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))(net)</span><br><span class="line">net = layers.Dropout(dropout_rate)(net)</span><br><span class="line"></span><br><span class="line">net = layers.Flatten()(net)</span><br><span class="line">net = layers.Dense(<span class="number">512</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Dropout(dropout_rate)(net)</span><br><span class="line">net = layers.Dense(num_classes)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'softmax'</span>)(net)</span><br><span class="line"></span><br><span class="line">model = tf.keras.Model(inputs=inputs, outputs=net, name=<span class="string">'Basic_CNN'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Model is the full model w/o custom layers</span></span><br><span class="line">model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate),  <span class="comment"># Optimization</span></span><br><span class="line">              loss=<span class="string">'sparse_categorical_crossentropy'</span>,  <span class="comment"># Loss Function</span></span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])  <span class="comment"># Metrics / Accuracy</span></span><br></pre></td></tr></table></figure><h3 id="training"><a class="markdownIt-Anchor" href="#training"></a> Training</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model.fit(train_x, train_y,</span><br><span class="line">             batch_size=batch_size,</span><br><span class="line">             shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">Train on <span class="number">60000</span> samples</span><br><span class="line"><span class="number">60000</span>/<span class="number">60000</span> [==============================] - <span class="number">6</span>s <span class="number">103</span>us/sample - loss: <span class="number">0.3794</span> - accuracy: <span class="number">0.8767</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.evaluate(test_x, test_y, batch_size=batch_size)</span><br><span class="line">=&gt; [0.06760077927671373, 0.9776]</span><br></pre></td></tr></table></figure><h2 id="pytorch"><a class="markdownIt-Anchor" href="#pytorch"></a> PyTorch</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 이미지 데이터를 관리하기 위한 라이브러리</span></span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br></pre></td></tr></table></figure><h3 id="hyperparameter-2"><a class="markdownIt-Anchor" href="#hyperparameter-2"></a> Hyperparameter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 랜덤 값을 고정시키기 위해</span></span><br><span class="line">seed = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">lr = <span class="number">0.001</span></span><br><span class="line">momentum = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">test_batch_size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">epochs = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">no_cuda = <span class="literal">False</span></span><br><span class="line">log_interval = <span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="model"><a class="markdownIt-Anchor" href="#model"></a> Model</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">20</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">4</span> * <span class="number">4</span> * <span class="number">50</span>, <span class="number">500</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">500</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = F.relu(self.conv1(x))</span><br><span class="line">        x = F.max_pool2d(x, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        x = F.relu(self.conv2(x))</span><br><span class="line">        x = F.max_pool2d(x, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        x = x.view(<span class="number">-1</span>, <span class="number">4</span> * <span class="number">4</span> * <span class="number">50</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        <span class="keyword">return</span> F.log_softmax(x, dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="preprocess-2"><a class="markdownIt-Anchor" href="#preprocess-2"></a> Preprocess</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">torch.manual_seed(seed)</span><br><span class="line"></span><br><span class="line">use_cuda = <span class="keyword">not</span> no_cuda <span class="keyword">and</span> torch.cuda.is_available()</span><br><span class="line">device = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> use_cuda <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line"></span><br><span class="line">kwargs = &#123;<span class="string">'num_workers'</span>: <span class="number">1</span>, <span class="string">'pin_memory'</span>: <span class="literal">True</span>&#125; <span class="keyword">if</span> use_cuda <span class="keyword">else</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">train_loader = torch.utils.data.DataLoader(</span><br><span class="line">    datasets.MNIST(<span class="string">'../data'</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>,</span><br><span class="line">                transform=transforms.Compose([</span><br><span class="line">                  transforms.ToTensor(),</span><br><span class="line">                  transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">                ])),</span><br><span class="line">                batch_size=batch_size, shuffle=<span class="literal">True</span>, **kwargs)</span><br><span class="line"></span><br><span class="line">test_loader = torch.utils.data.DataLoader(</span><br><span class="line">    datasets.MNIST(<span class="string">'../data'</span>, train=<span class="literal">False</span>,</span><br><span class="line">                transform=transforms.Compose([</span><br><span class="line">                  transforms.ToTensor(),</span><br><span class="line">                  transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">                ])),</span><br><span class="line">                batch_size=test_batch_size, shuffle=<span class="literal">True</span>, **kwargs)</span><br></pre></td></tr></table></figure><h3 id="optimization"><a class="markdownIt-Anchor" href="#optimization"></a> Optimization</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = Net().to(device)</span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=lr, momentum=momentum)</span><br></pre></td></tr></table></figure><h3 id="training-2"><a class="markdownIt-Anchor" href="#training-2"></a> Training</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">1</span>, epochs + <span class="number">1</span>):</span><br><span class="line">    <span class="comment"># Train Mode</span></span><br><span class="line">    model.train()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> batch_idx, (data, target) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        data, target = data.to(device), target.to(device)</span><br><span class="line">        optimizer.zero_grad()  <span class="comment"># backpropagation 계산하기 전에 0으로 기울기 계산</span></span><br><span class="line">        output = model(data)</span><br><span class="line">        loss = F.nll_loss(output, target)  <span class="comment"># https://pytorch.org/docs/stable/nn.html#nll-loss</span></span><br><span class="line">        loss.backward()  <span class="comment"># 계산한 기울기를</span></span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> batch_idx % log_interval == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Train Epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\tLoss: &#123;:.6f&#125;'</span>.format(</span><br><span class="line">                epoch, batch_idx * len(data), len(train_loader.dataset),</span><br><span class="line">                <span class="number">100.</span> * batch_idx / len(train_loader), loss.item()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Test mode</span></span><br><span class="line">    model.eval()  <span class="comment"># batch norm이나 dropout 등을 train mode 변환</span></span><br><span class="line">    test_loss = <span class="number">0</span></span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():  <span class="comment"># autograd engine, 즉 backpropagatin이나 gradient 계산 등을 꺼서 memory usage를 줄이고 속도를 높임</span></span><br><span class="line">        <span class="keyword">for</span> data, target <span class="keyword">in</span> test_loader:</span><br><span class="line">            data, target = data.to(device), target.to(device)</span><br><span class="line">            output = model(data)</span><br><span class="line">            test_loss += F.nll_loss(output, target, reduction=<span class="string">'sum'</span>).item() <span class="comment"># sum up batch loss</span></span><br><span class="line">            pred = output.argmax(dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>) <span class="comment"># get the index of the max log-probability</span></span><br><span class="line">            correct += pred.eq(target.view_as(pred)).sum().item()  <span class="comment"># pred와 target과 같은지 확인</span></span><br><span class="line"></span><br><span class="line">    test_loss /= len(test_loader.dataset)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\nTest set: Average loss: &#123;:.4f&#125;, Accuracy: &#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)\n'</span>.format(</span><br><span class="line">        test_loss, correct, len(test_loader.dataset),</span><br><span class="line">        <span class="number">100.</span> * correct / len(test_loader.dataset)))</span><br></pre></td></tr></table></figure><p>결과</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">0</span>/<span class="number">60000</span> (<span class="number">0</span>%)] Loss: <span class="number">2.300039</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">6400</span>/<span class="number">60000</span> (<span class="number">11</span>%)] Loss: <span class="number">2.239658</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">12800</span>/<span class="number">60000</span> (<span class="number">21</span>%)]  Loss: <span class="number">2.133953</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">19200</span>/<span class="number">60000</span> (<span class="number">32</span>%)]  Loss: <span class="number">2.007281</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">25600</span>/<span class="number">60000</span> (<span class="number">43</span>%)]  Loss: <span class="number">1.656340</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">32000</span>/<span class="number">60000</span> (<span class="number">53</span>%)]  Loss: <span class="number">1.400340</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">38400</span>/<span class="number">60000</span> (<span class="number">64</span>%)]  Loss: <span class="number">0.864186</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">44800</span>/<span class="number">60000</span> (<span class="number">75</span>%)]  Loss: <span class="number">0.613089</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">51200</span>/<span class="number">60000</span> (<span class="number">85</span>%)]  Loss: <span class="number">0.615066</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">57600</span>/<span class="number">60000</span> (<span class="number">96</span>%)]  Loss: <span class="number">0.427881</span></span><br><span class="line"></span><br><span class="line">Test set: Average loss: <span class="number">0.4822</span>, Accuracy: <span class="number">8651</span>/<span class="number">10000</span> (<span class="number">87</span>%)</span><br><span class="line"></span><br><span class="line">Train Epoch: <span class="number">2</span> [<span class="number">0</span>/<span class="number">60000</span> (<span class="number">0</span>%)] Loss: <span class="number">0.635855</span></span><br><span class="line">Train Epoch: <span class="number">2</span> [<span class="number">6400</span>/<span class="number">60000</span> (<span class="number">11</span>%)] Loss: <span class="number">0.361398</span></span><br><span class="line">Train Epoch: <span class="number">2</span> [<span class="number">12800</span>/<span class="number">60000</span> (<span class="number">21</span>%)]  Loss: <span class="number">0.457372</span></span><br><span class="line">Train Epoch: <span class="number">2</span> [<span class="number">19200</span>/<span class="number">60000</span> (<span class="number">32</span>%)]  Loss: <span class="number">0.393982</span></span><br><span class="line">Train Epoch: <span class="number">2</span> [<span class="number">25600</span>/<span class="number">60000</span> (<span class="number">43</span>%)]  Loss: <span class="number">0.536390</span></span><br><span class="line">Train Epoch: <span class="number">2</span> [<span class="number">32000</span>/<span class="number">60000</span> (<span class="number">53</span>%)]  Loss: <span class="number">0.258121</span></span><br><span class="line">Train Epoch: <span class="number">2</span> [<span class="number">38400</span>/<span class="number">60000</span> (<span class="number">64</span>%)]  Loss: <span class="number">0.413061</span></span><br><span class="line">Train Epoch: <span class="number">2</span> [<span class="number">44800</span>/<span class="number">60000</span> (<span class="number">75</span>%)]  Loss: <span class="number">0.174248</span></span><br><span class="line">Train Epoch: <span class="number">2</span> [<span class="number">51200</span>/<span class="number">60000</span> (<span class="number">85</span>%)]  Loss: <span class="number">0.222638</span></span><br><span class="line">Train Epoch: <span class="number">2</span> [<span class="number">57600</span>/<span class="number">60000</span> (<span class="number">96</span>%)]  Loss: <span class="number">0.401988</span></span><br><span class="line"></span><br><span class="line">Test set: Average loss: <span class="number">0.2956</span>, Accuracy: <span class="number">9128</span>/<span class="number">10000</span> (<span class="number">91</span>%)</span><br><span class="line"></span><br><span class="line">Train Epoch: <span class="number">3</span> [<span class="number">0</span>/<span class="number">60000</span> (<span class="number">0</span>%)] Loss: <span class="number">0.425370</span></span><br><span class="line">Train Epoch: <span class="number">3</span> [<span class="number">6400</span>/<span class="number">60000</span> (<span class="number">11</span>%)] Loss: <span class="number">0.242881</span></span><br><span class="line">Train Epoch: <span class="number">3</span> [<span class="number">12800</span>/<span class="number">60000</span> (<span class="number">21</span>%)]  Loss: <span class="number">0.266271</span></span><br><span class="line">Train Epoch: <span class="number">3</span> [<span class="number">19200</span>/<span class="number">60000</span> (<span class="number">32</span>%)]  Loss: <span class="number">0.344442</span></span><br><span class="line">Train Epoch: <span class="number">3</span> [<span class="number">25600</span>/<span class="number">60000</span> (<span class="number">43</span>%)]  Loss: <span class="number">0.271553</span></span><br><span class="line">Train Epoch: <span class="number">3</span> [<span class="number">32000</span>/<span class="number">60000</span> (<span class="number">53</span>%)]  Loss: <span class="number">0.233463</span></span><br><span class="line">Train Epoch: <span class="number">3</span> [<span class="number">38400</span>/<span class="number">60000</span> (<span class="number">64</span>%)]  Loss: <span class="number">0.206387</span></span><br><span class="line">Train Epoch: <span class="number">3</span> [<span class="number">44800</span>/<span class="number">60000</span> (<span class="number">75</span>%)]  Loss: <span class="number">0.289864</span></span><br><span class="line">Train Epoch: <span class="number">3</span> [<span class="number">51200</span>/<span class="number">60000</span> (<span class="number">85</span>%)]  Loss: <span class="number">0.227708</span></span><br><span class="line">Train Epoch: <span class="number">3</span> [<span class="number">57600</span>/<span class="number">60000</span> (<span class="number">96</span>%)]  Loss: <span class="number">0.266247</span></span><br><span class="line"></span><br><span class="line">Test set: Average loss: <span class="number">0.2279</span>, Accuracy: <span class="number">9320</span>/<span class="number">10000</span> (<span class="number">93</span>%)</span><br><span class="line"></span><br><span class="line">Train Epoch: <span class="number">4</span> [<span class="number">0</span>/<span class="number">60000</span> (<span class="number">0</span>%)] Loss: <span class="number">0.197864</span></span><br><span class="line">Train Epoch: <span class="number">4</span> [<span class="number">6400</span>/<span class="number">60000</span> (<span class="number">11</span>%)] Loss: <span class="number">0.334545</span></span><br><span class="line">Train Epoch: <span class="number">4</span> [<span class="number">12800</span>/<span class="number">60000</span> (<span class="number">21</span>%)]  Loss: <span class="number">0.171417</span></span><br><span class="line">Train Epoch: <span class="number">4</span> [<span class="number">19200</span>/<span class="number">60000</span> (<span class="number">32</span>%)]  Loss: <span class="number">0.261458</span></span><br><span class="line">Train Epoch: <span class="number">4</span> [<span class="number">25600</span>/<span class="number">60000</span> (<span class="number">43</span>%)]  Loss: <span class="number">0.129152</span></span><br><span class="line">Train Epoch: <span class="number">4</span> [<span class="number">32000</span>/<span class="number">60000</span> (<span class="number">53</span>%)]  Loss: <span class="number">0.129057</span></span><br><span class="line">Train Epoch: <span class="number">4</span> [<span class="number">38400</span>/<span class="number">60000</span> (<span class="number">64</span>%)]  Loss: <span class="number">0.203361</span></span><br><span class="line">Train Epoch: <span class="number">4</span> [<span class="number">44800</span>/<span class="number">60000</span> (<span class="number">75</span>%)]  Loss: <span class="number">0.304724</span></span><br><span class="line">Train Epoch: <span class="number">4</span> [<span class="number">51200</span>/<span class="number">60000</span> (<span class="number">85</span>%)]  Loss: <span class="number">0.136878</span></span><br><span class="line">Train Epoch: <span class="number">4</span> [<span class="number">57600</span>/<span class="number">60000</span> (<span class="number">96</span>%)]  Loss: <span class="number">0.171525</span></span><br><span class="line"></span><br><span class="line">Test set: Average loss: <span class="number">0.1808</span>, Accuracy: <span class="number">9482</span>/<span class="number">10000</span> (<span class="number">95</span>%)</span><br><span class="line"></span><br><span class="line">Train Epoch: <span class="number">5</span> [<span class="number">0</span>/<span class="number">60000</span> (<span class="number">0</span>%)] Loss: <span class="number">0.199721</span></span><br><span class="line">Train Epoch: <span class="number">5</span> [<span class="number">6400</span>/<span class="number">60000</span> (<span class="number">11</span>%)] Loss: <span class="number">0.246554</span></span><br><span class="line">Train Epoch: <span class="number">5</span> [<span class="number">12800</span>/<span class="number">60000</span> (<span class="number">21</span>%)]  Loss: <span class="number">0.217517</span></span><br><span class="line">Train Epoch: <span class="number">5</span> [<span class="number">19200</span>/<span class="number">60000</span> (<span class="number">32</span>%)]  Loss: <span class="number">0.255912</span></span><br><span class="line">Train Epoch: <span class="number">5</span> [<span class="number">25600</span>/<span class="number">60000</span> (<span class="number">43</span>%)]  Loss: <span class="number">0.182075</span></span><br><span class="line">Train Epoch: <span class="number">5</span> [<span class="number">32000</span>/<span class="number">60000</span> (<span class="number">53</span>%)]  Loss: <span class="number">0.296272</span></span><br><span class="line">Train Epoch: <span class="number">5</span> [<span class="number">38400</span>/<span class="number">60000</span> (<span class="number">64</span>%)]  Loss: <span class="number">0.283726</span></span><br><span class="line">Train Epoch: <span class="number">5</span> [<span class="number">44800</span>/<span class="number">60000</span> (<span class="number">75</span>%)]  Loss: <span class="number">0.239351</span></span><br><span class="line">Train Epoch: <span class="number">5</span> [<span class="number">51200</span>/<span class="number">60000</span> (<span class="number">85</span>%)]  Loss: <span class="number">0.293096</span></span><br><span class="line">Train Epoch: <span class="number">5</span> [<span class="number">57600</span>/<span class="number">60000</span> (<span class="number">96</span>%)]  Loss: <span class="number">0.157650</span></span><br><span class="line"></span><br><span class="line">Test set: Average loss: <span class="number">0.1533</span>, Accuracy: <span class="number">9581</span>/<span class="number">10000</span> (<span class="number">96</span>%)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/08/13/ai-dev-8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[PyTorch] Evaluating 및 Predicting</title>
      <link>http://hgko1207.github.io/2020/08/13/ai-pytorch-5/</link>
      <guid>http://hgko1207.github.io/2020/08/13/ai-pytorch-5/</guid>
      <pubDate>Thu, 13 Aug 2020 07:11:54 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;이전 블로그를 이어서 진행해본다.&lt;/p&gt;
&lt;h2 id=&quot;evaluation&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#evaluation&quot;&gt;&lt;/a&gt; Evaluation&lt;/h2&gt;
&lt;p&gt;model.train() 모드로 변한 것
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>이전 블로그를 이어서 진행해본다.</p><h2 id="evaluation"><a class="markdownIt-Anchor" href="#evaluation"></a> Evaluation</h2><p>model.train() 모드로 변한 것 처럼 평가할 때는 model.eval() 으로 설정한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Test mode</span></span><br><span class="line"><span class="comment"># batch norm이나 dropout 등을 train mode 변환</span></span><br><span class="line">model.eval()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">Net(</span><br><span class="line">  (conv1): Conv2d(<span class="number">1</span>, <span class="number">20</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), stride=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">  (conv2): Conv2d(<span class="number">20</span>, <span class="number">50</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), stride=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">  (fc1): Linear(in_features=<span class="number">800</span>, out_features=<span class="number">500</span>, bias=<span class="literal">True</span>)</span><br><span class="line">  (fc2): Linear(in_features=<span class="number">500</span>, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>torch.no_grad() 함수는 autograd engine, 즉 backpropagatin 이나 기울기 계산 등을 꺼서 memory usage 를 줄이고 속도를 높인다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">test_loss = <span class="number">0</span></span><br><span class="line">correct = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    data, target = next(iter(test_loader))</span><br><span class="line">    data, target = data.to(device), target.to(device)</span><br><span class="line">    output = model(data)</span><br><span class="line"></span><br><span class="line">    test_loss += F.nll_loss(output, target, reduction=<span class="string">'sum'</span>).item()</span><br><span class="line"></span><br><span class="line">    pred = output.argmax(dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">    correct = pred.eq(target.view_as(pred)).sum().item()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">test_loss : <span class="number">29.74889373779297</span></span><br><span class="line">correct : <span class="number">54</span></span><br><span class="line"></span><br><span class="line">test_loss /= len(test_loader.dataset)</span><br><span class="line">=&gt; 0.0029748893737792967</span><br></pre></td></tr></table></figure><h3 id="정리"><a class="markdownIt-Anchor" href="#정리"></a> 정리</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">model.eval()</span><br><span class="line"></span><br><span class="line">test_loss = <span class="number">0</span></span><br><span class="line">correct = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    <span class="keyword">for</span> data, target <span class="keyword">in</span> test_loader:</span><br><span class="line">        data, target = data.to(device), target.to(device)</span><br><span class="line">        output = model(data)</span><br><span class="line">        test_loss += F.nll_loss(output, target, reduction=<span class="string">'sum'</span>).item()</span><br><span class="line">        pred = output.argmax(dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">        correct += pred.eq(target.view_as(pred)).sum().item()</span><br><span class="line"></span><br><span class="line">test0_loss /= len(test_loader.dataset)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\nTest set: Average Loss: &#123;:.4f&#125;, Accuracy: &#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)\n'</span>.format(</span><br><span class="line">    test_loss, correct, len(test_loader.dataset), <span class="number">100.</span> * correct / len(test_loader.dataset)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">Test set: Average Loss: <span class="number">0.4799</span>, Accuracy: <span class="number">8660</span>/<span class="number">10000</span> (<span class="number">87</span>%)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/08/13/ai-pytorch-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[PyTorch] Optimizer 및 Training</title>
      <link>http://hgko1207.github.io/2020/08/13/ai-pytorch-4/</link>
      <guid>http://hgko1207.github.io/2020/08/13/ai-pytorch-4/</guid>
      <pubDate>Thu, 13 Aug 2020 04:48:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;optimization-training&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#optimization-training&quot;&gt;&lt;/a&gt; Optimization &amp;amp; Training&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="optimization-training"><a class="markdownIt-Anchor" href="#optimization-training"></a> Optimization &amp; Training</h2><p><a href="https://github.com/pytorch/examples/tree/master/mnist" target="_blank" rel="noopener">https://github.com/pytorch/examples/tree/master/mnist</a></p><h3 id="load-packages"><a class="markdownIt-Anchor" href="#load-packages"></a> Load Packages</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">no_cuda = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cuda를 사용할지 안할지</span></span><br><span class="line">use_cuda = <span class="keyword">not</span> no_cuda <span class="keyword">and</span> torch.cuda.is_available()</span><br><span class="line">device = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> use_cuda <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line"></span><br><span class="line">=&gt; device(type='cuda')</span><br></pre></td></tr></table></figure><h3 id="preprocess"><a class="markdownIt-Anchor" href="#preprocess"></a> Preprocess</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">seed = <span class="number">1</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">test_batch_size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">torch.manual_seed(seed)</span><br><span class="line"></span><br><span class="line">train_loader = torch.utils.data.DataLoader(</span><br><span class="line">    datasets.MNIST(<span class="string">'dataset'</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>,</span><br><span class="line">                transform=transforms.Compose([</span><br><span class="line">                  transforms.ToTensor(),</span><br><span class="line">                  transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">                ])),</span><br><span class="line">                batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_loader = torch.utils.data.DataLoader(</span><br><span class="line">    datasets.MNIST(<span class="string">'dataset'</span>, train=<span class="literal">False</span>,</span><br><span class="line">                transform=transforms.Compose([</span><br><span class="line">                  transforms.ToTensor(),</span><br><span class="line">                  transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">                ])),</span><br><span class="line">                batch_size=test_batch_size, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="model"><a class="markdownIt-Anchor" href="#model"></a> Model</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">20</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">4</span> * <span class="number">4</span> * <span class="number">50</span>, <span class="number">500</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">500</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = F.relu(self.conv1(x))</span><br><span class="line">        x = F.max_pool2d(x, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        x = F.relu(self.conv2(x))</span><br><span class="line">        x = F.max_pool2d(x, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        x = x.view(<span class="number">-1</span>, <span class="number">4</span> * <span class="number">4</span> * <span class="number">50</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        <span class="keyword">return</span> F.log_softmax(x, dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="optimization"><a class="markdownIt-Anchor" href="#optimization"></a> Optimization</h3><p>Model과 Optimization를 설정한다.</p><p><strong>SGD 사용</strong></p><ul><li>확률적 경사 하강법(Stochastic Gradient Descent, SGD) 옵티마이저</li><li>Lr(learning Rate) : 0 보다 크거나 같은 float 값. 학습률</li><li>momentum: 0 보다 크거나 같은 float 값. SGD를 적절한 방향으로 가속화하며, 흔들림(진동)을 줄여주는 매개변수</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = Net().to(device)</span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>parameters를 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">params = list(model.parameters())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    print(params[i].size())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Weight, Bais를 순서대로 보여준다.</span></span><br><span class="line">torch.Size([<span class="number">20</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>])</span><br><span class="line">torch.Size([<span class="number">20</span>])</span><br><span class="line">torch.Size([<span class="number">50</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">5</span>])</span><br><span class="line">torch.Size([<span class="number">50</span>])</span><br><span class="line">torch.Size([<span class="number">500</span>, <span class="number">800</span>])</span><br><span class="line">torch.Size([<span class="number">500</span>])</span><br><span class="line">torch.Size([<span class="number">10</span>, <span class="number">500</span>])</span><br><span class="line">torch.Size([<span class="number">10</span>])</span><br></pre></td></tr></table></figure><h3 id="before-training"><a class="markdownIt-Anchor" href="#before-training"></a> Before Training</h3><p>학습하기 전에 Model이 Train할 수 있도록 Train Mode로 변환한다.<br />Convolution 또는 Linear 뿐만 아니라, DropOut과 Batch Normalization과 같이 parameter를 가진 Layer들도 학습하기 위해 준비한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># train mode</span></span><br><span class="line">model.train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">Net(</span><br><span class="line">  (conv1): Conv2d(<span class="number">1</span>, <span class="number">20</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), stride=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">  (conv2): Conv2d(<span class="number">20</span>, <span class="number">50</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), stride=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">  (fc1): Linear(in_features=<span class="number">800</span>, out_features=<span class="number">500</span>, bias=<span class="literal">True</span>)</span><br><span class="line">  (fc2): Linear(in_features=<span class="number">500</span>, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>모델에 넣기 위한 첫 Batch 데이터를 추출하고 cpu 또는 gpu device에 컴파일한다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data, target = next(iter(train_loader))</span><br><span class="line">data, target = data.to(device), target.to(device)</span><br><span class="line">data.shape, target.shape</span><br><span class="line"></span><br><span class="line">=&gt; (torch.Size([64, 1, 28, 28]), torch.Size([64]))</span><br></pre></td></tr></table></figure><p>기울기(gradients)를 clear해서 새로운 최적화 값을 찾기 위해 준비한다. 그리고 준비한 데이터를 model에 넣어 output을 얻습니다. Model에서 예측한 결과를 Loss Function에 넣는다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">optimizer.zero_grad()</span><br><span class="line">output = model(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Negative Log-Likelihood Loss 사용</span></span><br><span class="line">loss = F.nll_loss(output, target)</span><br></pre></td></tr></table></figure><p>Back Propagation을 통해 기울기를 계산한다. 계산된 기울기는 Parameter에 업데이트를 한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 기울기 계산</span></span><br><span class="line">loss.backward()</span><br><span class="line"><span class="comment"># Update</span></span><br><span class="line">optimizer.step()</span><br></pre></td></tr></table></figure><h3 id="start-training"><a class="markdownIt-Anchor" href="#start-training"></a> Start Training</h3><p>위의 최적화 과정을 반복하여 학습을 시작한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">epochs = <span class="number">1</span></span><br><span class="line">log_interval = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">1</span>, epochs + <span class="number">1</span>):</span><br><span class="line">    <span class="comment"># Train Mode</span></span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> batch_idx, (data, target) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        data, target = data.to(device), target.to(device)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        output = model(data)</span><br><span class="line">        loss = F.nll_loss(output, target)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> batch_idx % log_interval == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Train Epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\tLoss: &#123;:.6f&#125;'</span>.format(</span><br><span class="line">                epoch, batch_idx * len(data), len(train_loader.dataset),</span><br><span class="line">                <span class="number">100</span> * batch_idx / len(train_loader), loss.item()</span><br><span class="line">            ))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">0</span>/<span class="number">60000</span> (<span class="number">0</span>%)] Loss: <span class="number">2.290735</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">6400</span>/<span class="number">60000</span> (<span class="number">11</span>%)] Loss: <span class="number">2.228956</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">12800</span>/<span class="number">60000</span> (<span class="number">21</span>%)]  Loss: <span class="number">2.121080</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">19200</span>/<span class="number">60000</span> (<span class="number">32</span>%)]  Loss: <span class="number">1.893549</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">25600</span>/<span class="number">60000</span> (<span class="number">43</span>%)]  Loss: <span class="number">1.570034</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">32000</span>/<span class="number">60000</span> (<span class="number">53</span>%)]  Loss: <span class="number">1.213198</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">38400</span>/<span class="number">60000</span> (<span class="number">64</span>%)]  Loss: <span class="number">0.993993</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">44800</span>/<span class="number">60000</span> (<span class="number">75</span>%)]  Loss: <span class="number">0.778737</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">51200</span>/<span class="number">60000</span> (<span class="number">85</span>%)]  Loss: <span class="number">0.732925</span></span><br><span class="line">Train Epoch: <span class="number">1</span> [<span class="number">57600</span>/<span class="number">60000</span> (<span class="number">96</span>%)]  Loss: <span class="number">0.624502</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/08/13/ai-pytorch-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[PyTorch] 각 Layer별 역할 및 파라미터</title>
      <link>http://hgko1207.github.io/2020/08/13/ai-pytorch-3/</link>
      <guid>http://hgko1207.github.io/2020/08/13/ai-pytorch-3/</guid>
      <pubDate>Thu, 13 Aug 2020 02:31:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;pytorch-layer-이해하기&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pytorch-layer-이해하기&quot;&gt;&lt;/a&gt; PyTorch Layer 이해하기&lt;/h2&gt;
&lt;h3 id=&quot;load-packages&quot;&gt;&lt;a c
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="pytorch-layer-이해하기"><a class="markdownIt-Anchor" href="#pytorch-layer-이해하기"></a> PyTorch Layer 이해하기</h2><h3 id="load-packages"><a class="markdownIt-Anchor" href="#load-packages"></a> Load Packages</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h3 id="예제-불러오기"><a class="markdownIt-Anchor" href="#예제-불러오기"></a> 예제 불러오기</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">train_loader = torch.utils.data.DataLoader(</span><br><span class="line">    datasets.MNIST(<span class="string">'dataset'</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>,</span><br><span class="line">                transform=transforms.Compose([</span><br><span class="line">                  transforms.ToTensor()</span><br><span class="line">                ])),</span><br><span class="line">                batch_size=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">image, label = next(iter(train_loader))</span><br><span class="line">image.shape, label.shape</span><br><span class="line"></span><br><span class="line">=&gt; (torch.Size([1, 1, 28, 28]), torch.Size([1]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(image[<span class="number">0</span>, <span class="number">0</span>, :, :], <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/pytorch/2.png" alt="" /></p><h3 id="각-layer별-설명"><a class="markdownIt-Anchor" href="#각-layer별-설명"></a> 각 Layer별 설명</h3><p>Network 쌓기 위한 준비를 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br></pre></td></tr></table></figure><h4 id="convolution"><a class="markdownIt-Anchor" href="#convolution"></a> Convolution</h4><ul><li>in_channels : 받게 될 channel의 갯수</li><li>out_channels : 보내고 싶은 channel의 갯수</li><li>kernel_size : 만들고 싶은 kernel(weights)의 사이즈</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Device type : cpu, cuda, mkldnn, opengl, opencl, ideep, hip, msnpu</span></span><br><span class="line">layer = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">20</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>).to(torch.device(<span class="string">'cpu'</span>))</span><br><span class="line"></span><br><span class="line">=&gt; Conv2d(1, 20, kernel_size=(5, 5), stride=(1, 1))</span><br></pre></td></tr></table></figure><p>weight 시각화를 위해 slice하고 numpy화 합니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">weight = layer.weight</span><br><span class="line">weight.shape</span><br><span class="line"></span><br><span class="line">=&gt; torch.Size([20, 1, 5, 5])</span><br></pre></td></tr></table></figure><ul><li>여기서 weight는 학습 가능한 상태이기 때문에 바로 numpy로 뽑아낼 수 없다.</li><li>detach() method는 그래프에서 잠깐 꺼내서 gradient에 영향을 받지 않게 한다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">weight = weight.detach().numpy()</span><br><span class="line">weight.shape</span><br><span class="line"></span><br><span class="line">=&gt; (20, 1, 5, 5)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(weight[<span class="number">0</span>, <span class="number">0</span>, :, :], <span class="string">'jet'</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/pytorch/3.png" alt="" /></p><ul><li>output 시각화 준비를 위해 numpy화 합니다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output_data = layer(image)</span><br><span class="line">output_data = output_data.data</span><br><span class="line">output = output_data.cpu().numpy()</span><br><span class="line">output.shape</span><br><span class="line"></span><br><span class="line">=&gt; (1, 20, 24, 24)</span><br></pre></td></tr></table></figure><ul><li>input으로 들어간 이미지 numpy화 한다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">image_arr = image.numpy()</span><br><span class="line">image_arr.shape</span><br><span class="line"></span><br><span class="line">=&gt; (1, 1, 28, 28)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">30</span>))</span><br><span class="line">plt.subplot(<span class="number">131</span>)</span><br><span class="line">plt.title(<span class="string">'Input'</span>)</span><br><span class="line">plt.imshow(np.squeeze(image_arr), <span class="string">'gray'</span>)</span><br><span class="line">plt.subplot(<span class="number">132</span>)</span><br><span class="line">plt.title(<span class="string">'Weight'</span>)</span><br><span class="line">plt.imshow(weight[<span class="number">0</span>, <span class="number">0</span>, :, :], <span class="string">'jet'</span>)</span><br><span class="line">plt.subplot(<span class="number">133</span>)</span><br><span class="line">plt.title(<span class="string">'Output'</span>)</span><br><span class="line">plt.imshow(output[<span class="number">0</span>, <span class="number">0</span>, :, :], <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/pytorch/4.png" alt="" /></p><h4 id="pooling"><a class="markdownIt-Anchor" href="#pooling"></a> Pooling</h4><p>input을 먼저 앞에 넣고, 뒤어 kernel 사이즈와 stride를 순서대로 넣는다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool = F.max_pool2d(image, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">pool.shape</span><br><span class="line"></span><br><span class="line">=&gt; torch.Size([1, 1, 14, 14])</span><br></pre></td></tr></table></figure><p>MaxPool Layer는 weight가 없기 때문에 바로 numpy() 사용 가능하다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool_arr = pool.numpy()</span><br><span class="line">pool_arr.shape, image_arr.shape</span><br><span class="line"></span><br><span class="line">=&gt; ((1, 1, 14, 14), (1, 1, 28, 28))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">15</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.title(<span class="string">"Input"</span>)</span><br><span class="line">plt.imshow(np.squeeze(image_arr), <span class="string">'gray'</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.title(<span class="string">'Output'</span>)</span><br><span class="line">plt.imshow(np.squeeze(pool_arr), <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/pytorch/5.png" alt="" /></p><h4 id="linear"><a class="markdownIt-Anchor" href="#linear"></a> Linear</h4><p>nn.Linear는 2D가 아닌 1D만 들어가기 때문에 view() 함수를 사용하여 1D로 펼쳐줘야 한다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># image size가 28 이기 때문에 28 * 28을 넣는다.</span></span><br><span class="line">flatten = image.view(<span class="number">1</span>, <span class="number">28</span> * <span class="number">28</span>)</span><br><span class="line">flatten.shape</span><br><span class="line"></span><br><span class="line">=&gt; torch.Size([1, 784])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lin = nn.Linear(<span class="number">784</span>, <span class="number">10</span>)(flatten)</span><br><span class="line">lin.shape</span><br><span class="line"></span><br><span class="line">=&gt; torch.Size([1, 10])</span><br><span class="line"></span><br><span class="line">lin</span><br><span class="line"></span><br><span class="line">=&gt; tensor([[-0.1198,  0.2404, -0.0522, -0.3474, -0.3997, -0.0318, -0.0630,  0.2680,</span><br><span class="line">          <span class="number">0.1849</span>,  <span class="number">0.1000</span>]], grad_fn=&lt;AddmmBackward&gt;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(lin.detach().numpy(), <span class="string">'jet'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/pytorch/6.png" alt="" /></p><h4 id="softmax"><a class="markdownIt-Anchor" href="#softmax"></a> Softmax</h4><p>결과를 numpy로 꺼재기 위해선 weight가 담긴 Linear에 weight를 꺼줘야 한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    flatten = image.view(<span class="number">1</span>, <span class="number">28</span> * <span class="number">28</span>)</span><br><span class="line">    lin = nn.Linear(<span class="number">784</span>, <span class="number">10</span>)(flatten)</span><br><span class="line">    softmax = F.softmax(lin, dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">softmax</span><br><span class="line"></span><br><span class="line">=&gt; tensor([[0.0846, 0.1084, 0.0792, 0.1265, 0.1004, 0.0897, 0.0990, 0.1113, 0.1239,</span><br><span class="line">         <span class="number">0.0769</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.sum(softmax.numpy())</span><br><span class="line">=&gt; 0.99999994</span><br></pre></td></tr></table></figure><h3 id="layer-쌓기"><a class="markdownIt-Anchor" href="#layer-쌓기"></a> Layer 쌓기</h3><p>예제 출처 : <a href="https://pytorch.org/tutorials/beginner/pytorch_with_examples.html#id23" target="_blank" rel="noopener">https://pytorch.org/tutorials/beginner/pytorch_with_examples.html#id23</a></p><p>nn 과 nn.functional의 차이점</p><ul><li>nn은 학습 파라미터가 담긴 것</li><li>nn.functional은 학습 파라미터가 없는 것</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">20</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">4</span> * <span class="number">4</span> * <span class="number">50</span>, <span class="number">500</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">500</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># Feature Extraction</span></span><br><span class="line">        x = F.relu(self.conv1(x))</span><br><span class="line">        x = F.max_pool2d(x, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        x = F.relu(self.conv2(x))</span><br><span class="line">        x = F.max_pool2d(x, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Fully Connected (Classficiation)</span></span><br><span class="line">        x = x.view(<span class="number">-1</span>, <span class="number">4</span> * <span class="number">4</span> * <span class="number">50</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> F.log_softmax(x, dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>image를 Model에 넣어서 결과를 확인한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = Net()</span><br><span class="line">result = model.forward(image)</span><br><span class="line"></span><br><span class="line">=&gt; tensor([[-2.3262, -2.2901, -2.2722, -2.2262, -2.3148, -2.3693, -2.2773, -2.2977,</span><br><span class="line">         <span class="number">-2.3222</span>, <span class="number">-2.3371</span>]], grad_fn=&lt;LogSoftmaxBackward&gt;)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/08/13/ai-pytorch-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[PyTorch] 데이터 불러오기</title>
      <link>http://hgko1207.github.io/2020/08/13/ai-pytorch-2/</link>
      <guid>http://hgko1207.github.io/2020/08/13/ai-pytorch-2/</guid>
      <pubDate>Thu, 13 Aug 2020 01:14:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;pytorch-data-preprocess&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pytorch-data-preprocess&quot;&gt;&lt;/a&gt; PyTorch Data Preprocess&lt;/h2&gt;
&lt;figure clas
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="pytorch-data-preprocess"><a class="markdownIt-Anchor" href="#pytorch-data-preprocess"></a> PyTorch Data Preprocess</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br></pre></td></tr></table></figure><h3 id="import-error"><a class="markdownIt-Anchor" href="#import-error"></a> Import Error</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">'PILLOW_VERSION'</span> <span class="keyword">from</span> <span class="string">'PIL'</span></span><br></pre></td></tr></table></figure><p>pillow 버전이 7.0.0 이상 일경우 Import 에러 나는 경우가 있다.<br />아래 처럼 pillow 버전을 내려주면 해결이 된다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install pillow==6.2.2</span></span><br></pre></td></tr></table></figure><h3 id="data-loader-부르기"><a class="markdownIt-Anchor" href="#data-loader-부르기"></a> Data Loader 부르기</h3><p>Pytorch는 DataLoader를 불러 model에 넣는다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">train_loader = torch.utils.data.DataLoader(</span><br><span class="line">    datasets.MNIST(<span class="string">'dataset/'</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>,</span><br><span class="line">                transform=transforms.Compose([</span><br><span class="line">                  transforms.ToTensor(),</span><br><span class="line">                  transforms.Normalize(mean=(<span class="number">0.5</span>,), std=(<span class="number">0.5</span>,))</span><br><span class="line">                ])),</span><br><span class="line">                batch_size=batch_size,</span><br><span class="line">                shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test_batch_size = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">test_loader = torch.utils.data.DataLoader(</span><br><span class="line">    datasets.MNIST(<span class="string">'dataset'</span>, train=<span class="literal">False</span>,</span><br><span class="line">                transform=transforms.Compose([</span><br><span class="line">                  transforms.ToTensor(),</span><br><span class="line">                  transforms.Normalize((<span class="number">0.5</span>,), (<span class="number">0.5</span>))</span><br><span class="line">                ])),</span><br><span class="line">                batch_size=test_batch_size,</span><br><span class="line">                shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="첫번째-iteration에서-나오는-데이터-확인"><a class="markdownIt-Anchor" href="#첫번째-iteration에서-나오는-데이터-확인"></a> 첫번째 iteration에서 나오는 데이터 확인</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">images, labels = next(iter(train_loader))</span><br><span class="line">image.shape, label.shape</span><br><span class="line"></span><br><span class="line">=&gt; torch.Size([32, 1, 28, 28]),  torch.Size([32])</span><br></pre></td></tr></table></figure><h3 id="데이터-시각화"><a class="markdownIt-Anchor" href="#데이터-시각화"></a> 데이터 시각화</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># squeeze() 함수는 차원의 원소가 1인 차원을 없애준다.</span></span><br><span class="line">torch_image = torch.squeeze(images[<span class="number">0</span>])</span><br><span class="line">torch_image.shape</span><br><span class="line"></span><br><span class="line">=&gt; torch.Size([28, 28])</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">image = torch_image.numpy()</span><br><span class="line">image.shape</span><br><span class="line"></span><br><span class="line">=&gt; (28, 28)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.title(label)</span><br><span class="line">plt.imshow(image, <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/pytorch/1.png" alt="" /></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/08/13/ai-pytorch-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JavaScript] DataTables 사용</title>
      <link>http://hgko1207.github.io/2020/08/12/js-dev-1/</link>
      <guid>http://hgko1207.github.io/2020/08/12/js-dev-1/</guid>
      <pubDate>Wed, 12 Aug 2020 04:24:43 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;JQuery 용 테이블 라이브러리인 DataTables 플러그인을 사용하여 개발했을 경우 편리하게 사용하기 위해 구조를 설계하였다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DataTables는 데이터를 테이블로 쉽게 구현할 수 있도록 도와주는 라이브
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>JQuery 용 테이블 라이브러리인 DataTables 플러그인을 사용하여 개발했을 경우 편리하게 사용하기 위해 구조를 설계하였다.</p><blockquote><p>DataTables는 데이터를 테이블로 쉽게 구현할 수 있도록 도와주는 라이브러리입니다.</p></blockquote><p>설치와 사용법은 <a href="https://datatables.net/" target="_blank" rel="noopener">DataTables</a> 공식 사이트에 잘 설명되어 있기 때문에 생략하겠다.</p><h2 id="초기-설정"><a class="markdownIt-Anchor" href="#초기-설정"></a> 초기 설정</h2><p>여러 곳에서 DataTables로 작업할 때 유용하도록 초기 기본값으로 설정하였다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// table.js</span></span><br><span class="line">$.extend($.fn.dataTable.defaults, &#123;</span><br><span class="line">  autoWidth: <span class="literal">false</span>,</span><br><span class="line">  dom: <span class="string">`&lt;'row'&lt;'col-sm-12'tr&gt;&gt;&lt;'row'&lt;'col-sm-12 col-md-5'i&gt;`</span> + <span class="string">`&lt;'col-sm-12 col-md-7 dataTables_pager'lp&gt;&gt;`</span>,</span><br><span class="line">  language: &#123;</span><br><span class="line">    emptyTable: <span class="string">'데이터가 없습니다.'</span>,</span><br><span class="line">    infoEmpty: <span class="string">''</span>,</span><br><span class="line">    info: <span class="string">' _TOTAL_ 개의 데이터가 있습니다.'</span>,</span><br><span class="line">    search: <span class="string">'&lt;span&gt;검색 :&lt;/span&gt; _INPUT_'</span>,</span><br><span class="line">    searchPlaceholder: <span class="string">'내용 입력...'</span>,</span><br><span class="line">    lengthMenu: <span class="string">'Display _MENU_'</span>,</span><br><span class="line">    paginate: &#123;</span><br><span class="line">      first: <span class="string">'First'</span>,</span><br><span class="line">      last: <span class="string">'Last'</span>,</span><br><span class="line">      next: $(<span class="string">'html'</span>).attr(<span class="string">'dir'</span>) == <span class="string">'rtl'</span> ? <span class="string">'&amp;larr;'</span> : <span class="string">'&amp;rarr;'</span>,</span><br><span class="line">      previous: $(<span class="string">'html'</span>).attr(<span class="string">'dir'</span>) == <span class="string">'rtl'</span> ? <span class="string">'&amp;rarr;'</span> : <span class="string">'&amp;larr;'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 검색 기능 숨기기</span></span><br><span class="line">  searching: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 표시 건수기능 숨기기</span></span><br><span class="line">  lengthChange: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 한 페이지에 표시되는 Row 수</span></span><br><span class="line">  pageLength: <span class="number">10</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="기본-구조"><a class="markdownIt-Anchor" href="#기본-구조"></a> 기본 구조</h2><p>기본 구조를 설계하여 다른 파일에서 공통으로 사용할 수 있도록 하였다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// table.js</span></span><br><span class="line"><span class="keyword">const</span> Datatables = &#123;</span><br><span class="line">  <span class="comment">// 기본 테이블 구조</span></span><br><span class="line">  basic: <span class="function"><span class="keyword">function</span> (<span class="params">id, tableOption, info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> table = $(id).DataTable(&#123;</span><br><span class="line">      <span class="comment">// 반응형 테이블 설정</span></span><br><span class="line">      responsive: <span class="literal">true</span>,</span><br><span class="line">      language: &#123;</span><br><span class="line">        info: info ? info : <span class="string">' _TOTAL_ 개의 데이터가 있습니다.'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      columns: tableOption ? tableOption.columns : <span class="literal">null</span>,</span><br><span class="line">      order: [[<span class="number">0</span>, <span class="string">'asc'</span>]],</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> table;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 정렬하는 컬럼을 설정하도록</span></span><br><span class="line">  order: <span class="function"><span class="keyword">function</span> (<span class="params">id, tableOption, num, info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> table = $(id).DataTable(&#123;</span><br><span class="line">      responsive: <span class="literal">true</span>,</span><br><span class="line">      language: &#123;</span><br><span class="line">        info: info ? info : <span class="string">' _TOTAL_ 개의 데이터가 있습니다.'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      columns: tableOption ? tableOption.columns : <span class="literal">null</span>,</span><br><span class="line">      columnDefs: [</span><br><span class="line">        &#123; <span class="attr">orderable</span>: <span class="literal">true</span>, <span class="attr">className</span>: <span class="string">'reorder'</span>, <span class="attr">targets</span>: <span class="number">0</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">orderable</span>: <span class="literal">true</span>, <span class="attr">className</span>: <span class="string">'reorder'</span>, <span class="attr">targets</span>: num &#125;,</span><br><span class="line">        &#123; <span class="attr">orderable</span>: <span class="literal">false</span>, <span class="attr">targets</span>: <span class="string">'_all'</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">      order: [[num, <span class="string">'desc'</span>]],</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> table;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 데이터 추가</span></span><br><span class="line">  rowsAdd: <span class="function"><span class="keyword">function</span> (<span class="params">table, url, param</span>) </span>&#123;</span><br><span class="line">    table.clear();</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: url,</span><br><span class="line">      type: <span class="string">'POST'</span>,</span><br><span class="line">      data: <span class="built_in">JSON</span>.stringify(param),</span><br><span class="line">      contentType: <span class="string">'application/json'</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        table.rows.add(data).draw();</span><br><span class="line">        <span class="comment">// 반응형 테이블 사용</span></span><br><span class="line">        table.responsive.recalc();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 새로고침</span></span><br><span class="line">  refresh: <span class="function"><span class="keyword">function</span> (<span class="params">table, data</span>) </span>&#123;</span><br><span class="line">    table.clear();</span><br><span class="line">    table.rows.add(data).draw();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="사용-예제"><a class="markdownIt-Anchor" href="#사용-예제"></a> 사용 예제</h2><p>예를 들어 공지사항 테이블을 만들어 보겠다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- notice.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span> <span class="attr">id</span>=<span class="string">"noticeTable"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>제목<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>작성자<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>작성시간<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>조회수<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf 사용 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/table.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/notice.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>table 태그의 id를 설정하고 위에서 설정한 <strong>Datatables.order</strong> 함수를 통해 DataTables을 생성하였다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// notice.js</span></span><br><span class="line"><span class="keyword">const</span> dataTable = &#123;</span><br><span class="line">  ele: <span class="string">'#noticeTable'</span>,</span><br><span class="line">  table: <span class="literal">null</span>,</span><br><span class="line">  option: &#123;</span><br><span class="line">    columns: [</span><br><span class="line">      &#123;</span><br><span class="line">        data: <span class="literal">null</span>,</span><br><span class="line">        render: <span class="function"><span class="keyword">function</span> (<span class="params">data, type, row, meta</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> meta.row + <span class="number">1</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">data</span>: <span class="string">'title'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">data</span>: <span class="string">'userId'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">data</span>: <span class="string">'createDate'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">data</span>: <span class="string">'hit'</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// DataTables 생성</span></span><br><span class="line">    <span class="keyword">this</span>.table = Datatables.order(<span class="keyword">this</span>.ele, <span class="keyword">this</span>.option, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">this</span>.search();</span><br><span class="line">  &#125;,</span><br><span class="line">  search: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> param = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="comment">// 조회 조건에 따라 데이터를 조회해서 DataTables에 넣는다.</span></span><br><span class="line">    Datatables.rowsAdd(<span class="keyword">this</span>.table, contextPath + <span class="string">'/notice/search'</span>, param);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  dataTable.init();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h2><p><img src="/images/js/1.png" alt="" /></p><p>DataTables 라이브러리를 사용하여 구현해봤습니다. 여러 프로젝트에서 공통으로 사용하기 위해 정리를 하였는데 개선사항이 있으면 추가 할 예정이다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/08/12/js-dev-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MySQL] Packet for query is too large 에러 발생시</title>
      <link>http://hgko1207.github.io/2020/08/10/mysql-1/</link>
      <guid>http://hgko1207.github.io/2020/08/10/mysql-1/</guid>
      <pubDate>Mon, 10 Aug 2020 06:14:27 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt; 을 사용하여 개발 중 4MB가 넘는 파일을 업로드 시 다음과 같은 패킷 에러가 발생하였다.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>MySQL</strong> 을 사용하여 개발 중 4MB가 넘는 파일을 업로드 시 다음과 같은 패킷 에러가 발생하였다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.jdbc.PacketTooBigException: Packet for query is too large (9,523,277 &gt; 4,194,304). You can change this value on the server by setting the 'max_allowed_packet' variable</span><br></pre></td></tr></table></figure><p>기본적으로 할당된 패킷 사이즈 값이 너무 작기 때문에 에러가 발생했기 때문에 수정이 필요하다. MySQL 설정에서 <strong>max_allowed_packet</strong> 값을 변경하여 해결하였다.</p><blockquote><p><em>max_allowed_packet</em>은 서버로 질의하거나 받게되는 패킷의 최대 길이를 나타내는 시스템 변수</p></blockquote><p>다음은 해결방법에 대해 알아보겠다.</p><h2 id="1-mysql-커맨드-라인에서-변경"><a class="markdownIt-Anchor" href="#1-mysql-커맨드-라인에서-변경"></a> 1) MySQL 커맨드 라인에서 변경</h2><p>먼저 MySQL 에 접속한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root -p ****</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 1024 * 1024 * 32 -&gt; 32MB</span></span><br><span class="line">mysql&gt; SET GLOBAL max_allowed_packet = 33554432;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables where Variable_name = 'max_allowed_packet';</span><br><span class="line">+<span class="comment">--------------------+----------+</span></span><br><span class="line">| Variable_name      | Value    |</span><br><span class="line">+<span class="comment">--------------------+----------+</span></span><br><span class="line">| max_allowed_packet | 33554432 |</span><br><span class="line">+<span class="comment">--------------------+----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="2-설정파일-변경"><a class="markdownIt-Anchor" href="#2-설정파일-변경"></a> 2) 설정파일 변경</h2><p>/etc/my.cnf 설정파일 내의 값을 변경한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/my.cnf</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 없을 시 추가한다.</span></span><br><span class="line">max_allowed_packet=32M</span><br></pre></td></tr></table></figure><h2 id="3-mysql-재시작"><a class="markdownIt-Anchor" href="#3-mysql-재시작"></a> 3) MySQL 재시작</h2><p>다음 명령어를 사용여 MySQL 를 재시작한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 우분투</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service mysql restart</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS6</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service mysqld restart</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS7</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart mysqld</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/08/10/mysql-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JAVA] 동네예보 조회서비스 API</title>
      <link>http://hgko1207.github.io/2020/08/06/java-dev-5/</link>
      <guid>http://hgko1207.github.io/2020/08/06/java-dev-5/</guid>
      <pubDate>Thu, 06 Aug 2020 06:13:50 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;동네예보-조회서비스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#동네예보-조회서비스&quot;&gt;&lt;/a&gt; 동네예보 조회서비스&lt;/h1&gt;
&lt;p&gt;동네예보 정보를 조회하기 위해 &lt;a href=&quot;https://www.data.go.kr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="동네예보-조회서비스"><a class="markdownIt-Anchor" href="#동네예보-조회서비스"></a> 동네예보 조회서비스</h1><p>동네예보 정보를 조회하기 위해 <a href="https://www.data.go.kr/index.do" target="_blank" rel="noopener">공공데이터 포털</a> 사이트의 동네예보 조회서비스 API를 사용하였다.</p><h2 id="open-api-활용-방법"><a class="markdownIt-Anchor" href="#open-api-활용-방법"></a> Open API 활용 방법</h2><ul><li><a href="https://www.data.go.kr/data/15057682/openapi.do" target="_blank" rel="noopener">동네예보 조회서비스</a> 사이트에서 활용신청을 하고 Service Key를 발급받는다.</li><li>오픈 API 활용 가이드를 다운로드 하여 조회 조건 및 결과 데이터를 이해한다.</li></ul><h2 id="동네예보-데이터-조회"><a class="markdownIt-Anchor" href="#동네예보-데이터-조회"></a> 동네예보 데이터 조회</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://apis.data.go.kr/1360000/VilageFcstInfoService/getVilageFcst?ServiceKey=&#123;발급받은 Service Key&#125;&amp;pageNo=1&amp;numOfRows=10&amp;dataType=JSON&amp;base_date=&#123;현재날짜&#125;&amp;base_time=&#123;현재시간&#125;&amp;nx=&#123;지점 X 좌표값&#125;&amp;ny=&#123;지점 Y 좌표값&#125;</span><br></pre></td></tr></table></figure><h3 id="결과-데이터json-형식"><a class="markdownIt-Anchor" href="#결과-데이터json-형식"></a> 결과 데이터(JSON 형식)</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"response"</span>: &#123;</span><br><span class="line">    <span class="attr">"header"</span>: &#123;</span><br><span class="line">      <span class="attr">"resultCode"</span>: <span class="string">"00"</span>,</span><br><span class="line">      <span class="attr">"resultMsg"</span>: <span class="string">"NORMAL_SERVICE"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"body"</span>: &#123;</span><br><span class="line">      <span class="attr">"dataType"</span>: <span class="string">"JSON"</span>,</span><br><span class="line">      <span class="attr">"items"</span>: &#123;</span><br><span class="line">        <span class="attr">"item"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"baseDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"baseTime"</span>: <span class="string">"0800"</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="string">"POP"</span>,</span><br><span class="line">            <span class="attr">"fcstDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"fcstTime"</span>: <span class="string">"1200"</span>,</span><br><span class="line">            <span class="attr">"fcstValue"</span>: <span class="string">"80"</span>,</span><br><span class="line">            <span class="attr">"nx"</span>: <span class="number">76</span>,</span><br><span class="line">            <span class="attr">"ny"</span>: <span class="number">122</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"baseDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"baseTime"</span>: <span class="string">"0800"</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="string">"PTY"</span>,</span><br><span class="line">            <span class="attr">"fcstDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"fcstTime"</span>: <span class="string">"1200"</span>,</span><br><span class="line">            <span class="attr">"fcstValue"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"nx"</span>: <span class="number">76</span>,</span><br><span class="line">            <span class="attr">"ny"</span>: <span class="number">122</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"baseDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"baseTime"</span>: <span class="string">"0800"</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="string">"R06"</span>,</span><br><span class="line">            <span class="attr">"fcstDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"fcstTime"</span>: <span class="string">"1200"</span>,</span><br><span class="line">            <span class="attr">"fcstValue"</span>: <span class="string">"9"</span>,</span><br><span class="line">            <span class="attr">"nx"</span>: <span class="number">76</span>,</span><br><span class="line">            <span class="attr">"ny"</span>: <span class="number">122</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"baseDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"baseTime"</span>: <span class="string">"0800"</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="string">"REH"</span>,</span><br><span class="line">            <span class="attr">"fcstDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"fcstTime"</span>: <span class="string">"1200"</span>,</span><br><span class="line">            <span class="attr">"fcstValue"</span>: <span class="string">"85"</span>,</span><br><span class="line">            <span class="attr">"nx"</span>: <span class="number">76</span>,</span><br><span class="line">            <span class="attr">"ny"</span>: <span class="number">122</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"baseDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"baseTime"</span>: <span class="string">"0800"</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="string">"S06"</span>,</span><br><span class="line">            <span class="attr">"fcstDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"fcstTime"</span>: <span class="string">"1200"</span>,</span><br><span class="line">            <span class="attr">"fcstValue"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"nx"</span>: <span class="number">76</span>,</span><br><span class="line">            <span class="attr">"ny"</span>: <span class="number">122</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"baseDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"baseTime"</span>: <span class="string">"0800"</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="string">"SKY"</span>,</span><br><span class="line">            <span class="attr">"fcstDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"fcstTime"</span>: <span class="string">"1200"</span>,</span><br><span class="line">            <span class="attr">"fcstValue"</span>: <span class="string">"4"</span>,</span><br><span class="line">            <span class="attr">"nx"</span>: <span class="number">76</span>,</span><br><span class="line">            <span class="attr">"ny"</span>: <span class="number">122</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"baseDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"baseTime"</span>: <span class="string">"0800"</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="string">"T3H"</span>,</span><br><span class="line">            <span class="attr">"fcstDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"fcstTime"</span>: <span class="string">"1200"</span>,</span><br><span class="line">            <span class="attr">"fcstValue"</span>: <span class="string">"24"</span>,</span><br><span class="line">            <span class="attr">"nx"</span>: <span class="number">76</span>,</span><br><span class="line">            <span class="attr">"ny"</span>: <span class="number">122</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"baseDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"baseTime"</span>: <span class="string">"0800"</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="string">"UUU"</span>,</span><br><span class="line">            <span class="attr">"fcstDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"fcstTime"</span>: <span class="string">"1200"</span>,</span><br><span class="line">            <span class="attr">"fcstValue"</span>: <span class="string">"-1.1"</span>,</span><br><span class="line">            <span class="attr">"nx"</span>: <span class="number">76</span>,</span><br><span class="line">            <span class="attr">"ny"</span>: <span class="number">122</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"baseDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"baseTime"</span>: <span class="string">"0800"</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="string">"VEC"</span>,</span><br><span class="line">            <span class="attr">"fcstDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"fcstTime"</span>: <span class="string">"1200"</span>,</span><br><span class="line">            <span class="attr">"fcstValue"</span>: <span class="string">"127"</span>,</span><br><span class="line">            <span class="attr">"nx"</span>: <span class="number">76</span>,</span><br><span class="line">            <span class="attr">"ny"</span>: <span class="number">122</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"baseDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"baseTime"</span>: <span class="string">"0800"</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="string">"VVV"</span>,</span><br><span class="line">            <span class="attr">"fcstDate"</span>: <span class="string">"20200807"</span>,</span><br><span class="line">            <span class="attr">"fcstTime"</span>: <span class="string">"1200"</span>,</span><br><span class="line">            <span class="attr">"fcstValue"</span>: <span class="string">"0.9"</span>,</span><br><span class="line">            <span class="attr">"nx"</span>: <span class="number">76</span>,</span><br><span class="line">            <span class="attr">"ny"</span>: <span class="number">122</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"pageNo"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"numOfRows"</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">"totalCount"</span>: <span class="number">216</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-respone-domain-생성"><a class="markdownIt-Anchor" href="#1-respone-domain-생성"></a> 1) Respone Domain 생성</h3><p>기본적으로 결과가 JSON 형식이므로 그에 맞게 도메인을 생성하였다.<br />조회 서비스 마다 결과 데이터의 items 부분이 다르므로 기본 구조 도메인과 Item 도메인을 분리해서 생성하였다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Response response;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Header header;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Body body;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resultCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String resultMsg;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 데이터 타입 */</span></span><br><span class="line">    <span class="keyword">private</span> String dataType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 한 페이지 결과 수 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numOfRows;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 페이지 번호 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageNo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 전체 결과 수 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Items items;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Items</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;VilageFcst&gt; item;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 동네예보 서비스 도메인</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hgko</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VilageFcst</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 발표일자 */</span></span><br><span class="line">  <span class="keyword">private</span> String baseDate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 발표시각 */</span></span><br><span class="line">  <span class="keyword">private</span> String baseTime;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 예보일자 */</span></span><br><span class="line">  <span class="keyword">private</span> String fcstDate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 예보시각 */</span></span><br><span class="line">  <span class="keyword">private</span> String fcstTime;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 자료구분문자 */</span></span><br><span class="line">  <span class="keyword">private</span> CategoryType category;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 예보 값 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">float</span> fcstValue;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 예보지점 X 좌표 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">float</span> nx;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 예보지점 Y 좌표 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">float</span> ny;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 코드값 정보</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Getter</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> CategoryType &#123;</span><br><span class="line">    POP(<span class="string">"강수확률"</span>, <span class="string">"강수확률"</span>),</span><br><span class="line">    R06(<span class="string">"6시간 강수량"</span>, <span class="string">"범주 (1 mm)"</span>),</span><br><span class="line">    S06(<span class="string">"6시간 신적설"</span>, <span class="string">"범주 (1 cm)"</span>),</span><br><span class="line">    SKY(<span class="string">"하늘상태"</span>, <span class="string">"코드값"</span>),</span><br><span class="line">    T3H(<span class="string">"3시간 기온"</span>, <span class="string">"℃"</span>),</span><br><span class="line">    TMN(<span class="string">"아침 최저기온"</span>, <span class="string">"℃"</span>),</span><br><span class="line">    TMX(<span class="string">"낮 최저기온"</span>, <span class="string">"℃"</span>),</span><br><span class="line">    WAV(<span class="string">"파고"</span>, <span class="string">"M"</span>),</span><br><span class="line">    T1H(<span class="string">"기온"</span>, <span class="string">"℃"</span>),</span><br><span class="line">    RN1(<span class="string">"1시간 강수량"</span>, <span class="string">"mm"</span>),</span><br><span class="line">    UUU(<span class="string">"동서바람성분"</span>, <span class="string">"m/s"</span>),</span><br><span class="line">    VVV(<span class="string">"남북바람성분"</span>, <span class="string">"m/s"</span>),</span><br><span class="line">    REH(<span class="string">"습도"</span>, <span class="string">"%"</span>),</span><br><span class="line">    PTY(<span class="string">"강수형태"</span>, <span class="string">"코드값"</span>),</span><br><span class="line">    VEC(<span class="string">"풍향"</span>, <span class="string">"m/s"</span>),</span><br><span class="line">    WSD(<span class="string">"풍속"</span>, <span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String unit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CategoryType</span><span class="params">(String name, String unit)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.unit = unit;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-데이터-조회"><a class="markdownIt-Anchor" href="#2-데이터-조회"></a> 2) 데이터 조회</h3><p>데이터 조회 시 주의해야 할 점은 시간을 3시간 단위로 설정해야 한다. 오전 02시부터 3시간 단위로 증가해서 시간을 설정한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"http://apis.data.go.kr/1360000/VilageFcstInfoService/getVilageFcst"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String serviceKey = <span class="string">""</span>; <span class="comment">/*공공데이터포털에서 받은 인증키*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getVilageFcst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    StringBuilder urlBuilder = <span class="keyword">new</span> StringBuilder(BASE_URL);</span><br><span class="line">    urlBuilder.append(<span class="string">"?"</span> + URLEncoder.encode(<span class="string">"ServiceKey"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"="</span> + serviceKey);</span><br><span class="line">    urlBuilder.append(<span class="string">"&amp;"</span> + URLEncoder.encode(<span class="string">"pageNo"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"="</span> + URLEncoder.encode(<span class="string">"1"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line">    urlBuilder.append(<span class="string">"&amp;"</span> + URLEncoder.encode(<span class="string">"numOfRows"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"="</span> + URLEncoder.encode(<span class="string">"10"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line">    urlBuilder.append(<span class="string">"&amp;"</span> + URLEncoder.encode(<span class="string">"dataType"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"="</span> + URLEncoder.encode(<span class="string">"JSON"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line">    urlBuilder.append(<span class="string">"&amp;"</span> + URLEncoder.encode(<span class="string">"base_date"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"="</span> + URLEncoder.encode(<span class="string">"20200807"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line">    urlBuilder.append(<span class="string">"&amp;"</span> + URLEncoder.encode(<span class="string">"base_time"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"="</span> + URLEncoder.encode(<span class="string">"1100"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line">    urlBuilder.append(<span class="string">"&amp;"</span> + URLEncoder.encode(<span class="string">"nx"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"="</span> + URLEncoder.encode(<span class="string">"76"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line">    urlBuilder.append(<span class="string">"&amp;"</span> + URLEncoder.encode(<span class="string">"ny"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"="</span> + URLEncoder.encode(<span class="string">"122"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">    URL url = <span class="keyword">new</span> URL(urlBuilder.toString());</span><br><span class="line">    HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">    conn.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">    conn.setRequestProperty(<span class="string">"Content-type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"Response code: "</span> + conn.getResponseCode());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (conn.getResponseCode() &gt;= <span class="number">200</span> &amp;&amp; conn.getResponseCode() &lt;= <span class="number">300</span>) &#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream()));</span><br><span class="line">        in.lines().forEach(line -&gt; &#123;</span><br><span class="line">          sb.append(line);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        in.close();</span><br><span class="line">        conn.disconnect();</span><br><span class="line"></span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        setWeatherInfo(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 동네예보 데이터 파싱</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> json</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setWeatherInfo</span><span class="params">(String json)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    ApiData data = objectMapper.readValue(json, ApiData<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Items items = data.getResponse().getBody().getItems();</span><br><span class="line">    <span class="keyword">for</span> (VilageFcst item : items.getItem()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.getCategory() == CategoryType.T3H) &#123;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.getCategory() == CategoryType.REH) &#123;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.getCategory() == CategoryType.SKY) &#123;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.getCategory() == CategoryType.PTY) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (JsonMappingException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-결과-확인"><a class="markdownIt-Anchor" href="#3-결과-확인"></a> 3) 결과 확인</h3><p>정상적으로 동네예보 데이터들이 조회되면 데이터들을 가공해서 사용하도록 한다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/08/06/java-dev-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JAVA] 농업기상정보 서비스 API</title>
      <link>http://hgko1207.github.io/2020/07/31/java-dev-4/</link>
      <guid>http://hgko1207.github.io/2020/07/31/java-dev-4/</guid>
      <pubDate>Fri, 31 Jul 2020 06:07:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;농업기상정보-서비스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#농업기상정보-서비스&quot;&gt;&lt;/a&gt; 농업기상정보 서비스&lt;/h1&gt;
&lt;p&gt;농업 관련 기상 데이터가 필요하게 되어 &lt;a href=&quot;https://www.data.
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="농업기상정보-서비스"><a class="markdownIt-Anchor" href="#농업기상정보-서비스"></a> 농업기상정보 서비스</h1><p>농업 관련 기상 데이터가 필요하게 되어 <a href="https://www.data.go.kr/data/3061366/openapi.do" target="_blank" rel="noopener">공공데이터 포털</a> 사이트의 농업기상정보 API를 사용하여 조회하였다.</p><h2 id="open-api-활용-방법"><a class="markdownIt-Anchor" href="#open-api-활용-방법"></a> Open API 활용 방법</h2><ul><li><a href="http://weather.rda.go.kr/mber/openApiGuide.jsp" target="_blank" rel="noopener">농업기상정보서비스</a> 사이트에 접속한다.</li><li>이용방법에 따라 회원가입 후 Open API 신청을 하고 Service Key를 발급받는다.</li><li>활용 가이드를 다운로드하여 조회 조건 및 결과 데이터를 이해한다.</li></ul><h2 id="농업-기상-데이터-조회"><a class="markdownIt-Anchor" href="#농업-기상-데이터-조회"></a> 농업 기상 데이터 조회</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://weather.rda.go.kr/openapi/realtime_openapi_xml.jsp?mberid=&#123;id&#125;&amp;regist_ky=&#123;발급받은 Service Key&#125;</span><br></pre></td></tr></table></figure><h3 id="결과-데이터xml-형식"><a class="markdownIt-Anchor" href="#결과-데이터xml-형식"></a> 결과 데이터(XML 형식)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" standalone="yes"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Info</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stncode</span>&gt;</span>380959A001<span class="tag">&lt;/<span class="name">stncode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stnname</span>&gt;</span>충주시 달천동<span class="tag">&lt;/<span class="name">stnname</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">date</span>&gt;</span>2020/07/31 14:50<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">temp_150</span>&gt;</span>28.3℃<span class="tag">&lt;/<span class="name">temp_150</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tmprt_150Top</span>&gt;</span>29.7℃<span class="tag">&lt;/<span class="name">tmprt_150Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tmprt_150Lwet</span>&gt;</span>22.5℃<span class="tag">&lt;/<span class="name">tmprt_150Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tmprt_50</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">tmprt_50</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tmprt_50Top</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">tmprt_50Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tmprt_50Lwet</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">tmprt_50Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tmprt_400</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">tmprt_400</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tmprt_400Top</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">tmprt_400Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tmprt_400Lwet</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">tmprt_400Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hd_150</span>&gt;</span>86.2%<span class="tag">&lt;/<span class="name">hd_150</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hd_150Top</span>&gt;</span>100.0%<span class="tag">&lt;/<span class="name">hd_150Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hd_150Lwet</span>&gt;</span>75.6%<span class="tag">&lt;/<span class="name">hd_150Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hd_50</span>&gt;</span>-%<span class="tag">&lt;/<span class="name">hd_50</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hd_50Top</span>&gt;</span>-%<span class="tag">&lt;/<span class="name">hd_50Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hd_50Lwet</span>&gt;</span>-%<span class="tag">&lt;/<span class="name">hd_50Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hd_400</span>&gt;</span>-%<span class="tag">&lt;/<span class="name">hd_400</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hd_400Top</span>&gt;</span>-%<span class="tag">&lt;/<span class="name">hd_400Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hd_400Lwet</span>&gt;</span>-%<span class="tag">&lt;/<span class="name">hd_400Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wd_300</span>&gt;</span>남동<span class="tag">&lt;/<span class="name">wd_300</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wd_300Top</span>&gt;</span>남<span class="tag">&lt;/<span class="name">wd_300Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wd_300Lwet</span>&gt;</span>정온<span class="tag">&lt;/<span class="name">wd_300Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wd_150</span>&gt;</span>-<span class="tag">&lt;/<span class="name">wd_150</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wd_150Top</span>&gt;</span>-<span class="tag">&lt;/<span class="name">wd_150Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wd_150Lwet</span>&gt;</span>-<span class="tag">&lt;/<span class="name">wd_150Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wd_1000</span>&gt;</span>-<span class="tag">&lt;/<span class="name">wd_1000</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wd_1000Top</span>&gt;</span>-<span class="tag">&lt;/<span class="name">wd_1000Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wd_1000Lwet</span>&gt;</span>-<span class="tag">&lt;/<span class="name">wd_1000Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arvlty_300</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">arvlty_300</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arvlty_300Top</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">arvlty_300Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arvlty_300Lwet</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">arvlty_300Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arvlty_150</span>&gt;</span>-<span class="tag">&lt;/<span class="name">arvlty_150</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arvlty_150Top</span>&gt;</span>-<span class="tag">&lt;/<span class="name">arvlty_150Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arvlty_150Lwet</span>&gt;</span>-<span class="tag">&lt;/<span class="name">arvlty_150Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arvlty_1000</span>&gt;</span>-<span class="tag">&lt;/<span class="name">arvlty_1000</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arvlty_1000Top</span>&gt;</span>-<span class="tag">&lt;/<span class="name">arvlty_1000Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arvlty_1000Lwet</span>&gt;</span>-<span class="tag">&lt;/<span class="name">arvlty_1000Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">afp</span>&gt;</span>0.0mm<span class="tag">&lt;/<span class="name">afp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">afv</span>&gt;</span>-mm<span class="tag">&lt;/<span class="name">afv</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sunshnTime</span>&gt;</span>202.0hr<span class="tag">&lt;/<span class="name">sunshnTime</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solradQy</span>&gt;</span>10.4MJ/㎡<span class="tag">&lt;/<span class="name">solradQy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dwcnTime</span>&gt;</span>0.0hr<span class="tag">&lt;/<span class="name">dwcnTime</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pnwgTp</span>&gt;</span>-hr<span class="tag">&lt;/<span class="name">pnwgTp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pnwgTpTop</span>&gt;</span>-hr<span class="tag">&lt;/<span class="name">pnwgTpTop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pnwgTpLwet</span>&gt;</span>-hr<span class="tag">&lt;/<span class="name">pnwgTpLwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frfrTp</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">frfrTp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frfrTpTop</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">frfrTpTop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frfrTpLwet</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">frfrTpLwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">udgrHeattCndctvt</span>&gt;</span>-100.0℃<span class="tag">&lt;/<span class="name">udgrHeattCndctvt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">udgrHeattCndctvtTop</span>&gt;</span>-100.0℃<span class="tag">&lt;/<span class="name">udgrHeattCndctvtTop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">udgrHeattCndctvtLwet</span>&gt;</span>-100.0℃<span class="tag">&lt;/<span class="name">udgrHeattCndctvtLwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">udgrTp_10</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">udgrTp_10</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">udgrTp_10Top</span>&gt;</span>26.1℃<span class="tag">&lt;/<span class="name">udgrTp_10Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">udgrTp_10Lwet</span>&gt;</span>24.4℃<span class="tag">&lt;/<span class="name">udgrTp_10Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">udgrTp_5</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">udgrTp_5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">udgrTp_5Top</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">udgrTp_5Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">udgrTp_5Lwet</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">udgrTp_5Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">udgrTp_20</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">udgrTp_20</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">udgrTp_20Top</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">udgrTp_20Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">udgrTp_20Lwet</span>&gt;</span>-℃<span class="tag">&lt;/<span class="name">udgrTp_20Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_10</span>&gt;</span>32.5<span class="tag">&lt;/<span class="name">soilMitr_10</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_10Top</span>&gt;</span>36.3<span class="tag">&lt;/<span class="name">soilMitr_10Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_10Lwet</span>&gt;</span>27.3<span class="tag">&lt;/<span class="name">soilMitr_10Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_10Cmst</span>&gt;</span>23.4<span class="tag">&lt;/<span class="name">soilMitr_10Cmst</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_10CmstTop</span>&gt;</span>27.2<span class="tag">&lt;/<span class="name">soilMitr_10CmstTop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_10CmstLwet</span>&gt;</span>18.2<span class="tag">&lt;/<span class="name">soilMitr_10CmstLwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_20</span>&gt;</span>-<span class="tag">&lt;/<span class="name">soilMitr_20</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_20Top</span>&gt;</span>-<span class="tag">&lt;/<span class="name">soilMitr_20Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_20Lwet</span>&gt;</span>-<span class="tag">&lt;/<span class="name">soilMitr_20Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_20Cmst</span>&gt;</span>-<span class="tag">&lt;/<span class="name">soilMitr_20Cmst</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_20CmstTop</span>&gt;</span>-<span class="tag">&lt;/<span class="name">soilMitr_20CmstTop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_20CmstLwet</span>&gt;</span>-<span class="tag">&lt;/<span class="name">soilMitr_20CmstLwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_30</span>&gt;</span>-<span class="tag">&lt;/<span class="name">soilMitr_30</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_30Top</span>&gt;</span>-<span class="tag">&lt;/<span class="name">soilMitr_30Top</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_30Lwet</span>&gt;</span>-<span class="tag">&lt;/<span class="name">soilMitr_30Lwet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_30Cmst</span>&gt;</span>-<span class="tag">&lt;/<span class="name">soilMitr_30Cmst</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_30CmstTop</span>&gt;</span>-<span class="tag">&lt;/<span class="name">soilMitr_30CmstTop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">soilMitr_30CmstLwet</span>&gt;</span>-<span class="tag">&lt;/<span class="name">soilMitr_30CmstLwet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Info</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-respone-domain-생성"><a class="markdownIt-Anchor" href="#1-respone-domain-생성"></a> 1) Respone Domain 생성</h3><p>기본적으로 결과가 XML 형식이므로 javax.xml를 사용하여 도메인을 생성하였다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlAccessType;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlAccessorType;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlElement;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 기상청 API로 기상정보 조회할 때 쓰이는 도메인</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hgko</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@XmlRootElement</span>(name = <span class="string">"Root"</span>)</span><br><span class="line"><span class="meta">@XmlAccessorType</span>(value = XmlAccessType.FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseXml</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@XmlElement</span>(name = <span class="string">"Info"</span>)</span><br><span class="line">  <span class="keyword">private</span> Info info;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 지역 코드 */</span></span><br><span class="line">    <span class="keyword">private</span> String stncode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 지역 이름 */</span></span><br><span class="line">    <span class="keyword">private</span> String stnname;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 일시 */</span></span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 온도(150CM) */</span></span><br><span class="line">    <span class="keyword">private</span> String temp_150;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 습도(150CM) */</span></span><br><span class="line">    <span class="keyword">private</span> String hd_150;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 풍향(300CM) */</span></span><br><span class="line">    <span class="keyword">private</span> String wd_300;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 풍속(300CM) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> arvlty_300;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 강수량 */</span></span><br><span class="line">    <span class="keyword">private</span> String afp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 증발량 */</span></span><br><span class="line">    <span class="keyword">private</span> String afv;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 일사량 */</span></span><br><span class="line">    <span class="keyword">private</span> String solradQy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 일조시간 */</span></span><br><span class="line">    <span class="keyword">private</span> String sunshnTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 토양수분(10CM) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> soilMitr_10;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-데이터-조회"><a class="markdownIt-Anchor" href="#2-데이터-조회"></a> 2) 데이터 조회</h3><p>SpringFramework에서 지원하는 RestTemplate를 사용하여 조회한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"http://weather.rda.go.kr/openapi/realtime_openapi_xml.jsp"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String userId = <span class="string">""</span>; <span class="comment">// Login Id</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String serviceKey = <span class="string">""</span>; <span class="comment">// 발급받은 Service Key</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  StringBuilder urlBuilder = <span class="keyword">new</span> StringBuilder(BASE_URL);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    urlBuilder.append(<span class="string">"?"</span> + URLEncoder.encode(<span class="string">"mberid"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"="</span> + userId);</span><br><span class="line">    urlBuilder.append(<span class="string">"&amp;"</span> + URLEncoder.encode(<span class="string">"regist_ky"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"="</span> + serviceKey);</span><br><span class="line"></span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    ResponseXml response = restTemplate.getForObject(urlBuilder.toString(), ResponseXml<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(response);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/31/java-dev-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JAVA] OpenWeather API</title>
      <link>http://hgko1207.github.io/2020/07/31/java-dev-3/</link>
      <guid>http://hgko1207.github.io/2020/07/31/java-dev-3/</guid>
      <pubDate>Fri, 31 Jul 2020 05:12:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;openweather-api&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#openweather-api&quot;&gt;&lt;/a&gt; OpenWeather API&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;200,000 개가 넘는 도시를 포함
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="openweather-api"><a class="markdownIt-Anchor" href="#openweather-api"></a> OpenWeather API</h1><blockquote><p>200,000 개가 넘는 도시를 포함하여 지구상의 모든 위치에 대한 현재 날씨 데이터에 액세스 할 수 있습니다. 현재 날씨는 글로벌 모델과 4 만 개가 넘는 기상 관측소의 데이터를 기반으로 자주 업데이트됩니다. 데이터는 JSON, XML 또는 HTML 형식으로 제공됩니다.<br />출처 : OpenWeather</p></blockquote><p>OpenWeather API를 사용하여 현재 날씨 데이터를 조회하였다.</p><h2 id="현재-날씨-데이터-조회"><a class="markdownIt-Anchor" href="#현재-날씨-데이터-조회"></a> 현재 날씨 데이터 조회</h2><ul><li><a href="https://openweathermap.org/" target="_blank" rel="noopener">OpenWeather</a> 사이트에 접속해서 API Key를 발급받는다.</li><li>메인에서 <a href="https://openweathermap.org/current" target="_blank" rel="noopener">Current Weather Data</a>를 선택받는다.</li><li>조회 조건 및 결과 정보와 다른 기능들에 대해 잘 설명되어 있다.</li><li>우리나라 전체에 대한 날씨 데이터를 조회할 것이기 때문에 조회 조건은 다음과 같다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://api.openweathermap.org/data/2.5/weather?q=Koesan&amp;appid=&#123;발급받은 API Key&#125;&amp;lang=kr&amp;units=metric</span><br></pre></td></tr></table></figure><h3 id="결과-데이터json-형식"><a class="markdownIt-Anchor" href="#결과-데이터json-형식"></a> 결과 데이터(JSON 형식)</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"coord"</span>: &#123;</span><br><span class="line">    <span class="attr">"lon"</span>: <span class="number">127.79</span>,</span><br><span class="line">    <span class="attr">"lat"</span>: <span class="number">36.81</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"weather"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">803</span>,</span><br><span class="line">      <span class="attr">"main"</span>: <span class="string">"Clouds"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"튼구름"</span>,</span><br><span class="line">      <span class="attr">"icon"</span>: <span class="string">"04d"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"base"</span>: <span class="string">"stations"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: &#123;</span><br><span class="line">    <span class="attr">"temp"</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">"feels_like"</span>: <span class="number">32.65</span>,</span><br><span class="line">    <span class="attr">"temp_min"</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">"temp_max"</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">"pressure"</span>: <span class="number">1014</span>,</span><br><span class="line">    <span class="attr">"humidity"</span>: <span class="number">78</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"visibility"</span>: <span class="number">10000</span>,</span><br><span class="line">  <span class="attr">"wind"</span>: &#123;</span><br><span class="line">    <span class="attr">"speed"</span>: <span class="number">1.5</span>,</span><br><span class="line">    <span class="attr">"deg"</span>: <span class="number">270</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"clouds"</span>: &#123;</span><br><span class="line">    <span class="attr">"all"</span>: <span class="number">75</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dt"</span>: <span class="number">1596171614</span>,</span><br><span class="line">  <span class="attr">"sys"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">8131</span>,</span><br><span class="line">    <span class="attr">"country"</span>: <span class="string">"KR"</span>,</span><br><span class="line">    <span class="attr">"sunrise"</span>: <span class="number">1596141211</span>,</span><br><span class="line">    <span class="attr">"sunset"</span>: <span class="number">1596191806</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"timezone"</span>: <span class="number">32400</span>,</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1842800</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Koesan"</span>,</span><br><span class="line">  <span class="attr">"cod"</span>: <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-respone-domain-생성"><a class="markdownIt-Anchor" href="#1-respone-domain-생성"></a> 1) Respone Domain 생성</h3><p>기본적으로 결과가 JSON 형식이므로 그에 맞게 도메인을 생성하였다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OpenWeath API - 현재 날씨 데이터</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hgko</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpenWeather</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;Weather&gt; weather;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 내부 매개 변수 */</span></span><br><span class="line">  <span class="keyword">private</span> String base;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Main main;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Wind wind;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Clouds clouds;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Rain rain;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Snow snow;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 가시성 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> visibility;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 데이터 계산 시간, 유닉스, UTC */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> dt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** UTC에서 초 단위로 이동 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> timezone;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 도시 ID */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 도시 이름 */</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 내부 매개 변수 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> cod;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 기상 조건 ID */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 날씨 매개 변수 그룹 (비, 눈, 극한 등) */</span></span><br><span class="line">    <span class="keyword">private</span> String main;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 그룹 내 날씨 조건 */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 날씨 아이콘 ID */</span></span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 온도. 단위 기본값 : 켈빈, 미터법 : 섭씨, 임페리얼 : 화씨 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 온도. 단위 기본값 : 켈빈, 미터법 : 섭씨, 임페리얼 : 화씨 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> feels_like;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 현재 최저 온도.(대규모 대도시 및 도시 지역 내) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp_min;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 현재 최대 온도.(대규모 대도시 및 도시 지역 내)*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp_max;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 대기압 (해수면, 해수면 또는 grnd_level 데이터가 없는 경우), hPa */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 습도, % */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 해수면의 대기압, hPa */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> sea_level;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 지면에서의 대기압, hPa */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> grnd_level;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Wind</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 바람의 속도. 단위 기본값 : meter/sec, 미터법 : meter/sec, 임페리얼 : miles/hour */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> speed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 풍향,도 (기상) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> deg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  바람 돌풍. 단위 기본값 : meter/sec, 미터법 : meter/sec, 임페리얼 : miles/hour */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> gust;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Clouds</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 흐림, % */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> all;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Rain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 지난 1 시간 동안의 강우량, mm */</span></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"1h"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> rain1h;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 지난 3 시간 동안의 강우량, mm */</span></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"3h"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> rain3h;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Snow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 지난 1 시간 동안의 눈량, mm */</span></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"1h"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> snow1h;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 지난 3 시간 동안의 눈량, mm */</span></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"3h"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> snow3h;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sys</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 국가 코드 (GB, JP 등) */</span></span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 일출 시간, 유닉스, UTC */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sunrise;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 일몰 시간, 유닉스, UTC */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sunset;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-데이터-조회"><a class="markdownIt-Anchor" href="#2-데이터-조회"></a> 2) 데이터 조회</h3><p>SpringFramework에서 지원하는 RestTemplate를 사용하여 조회하였다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"http://api.openweathermap.org/data/2.5/weather"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String apiKey = <span class="string">""</span>; <span class="comment">// 발급받은 API key</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  StringBuilder urlBuilder = <span class="keyword">new</span> StringBuilder(BASE_URL);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    urlBuilder.append(<span class="string">"?"</span> + URLEncoder.encode(<span class="string">"q"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"=Koesan"</span>);</span><br><span class="line">    urlBuilder.append(<span class="string">"&amp;"</span> + URLEncoder.encode(<span class="string">"appid"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"="</span> + apiKey);</span><br><span class="line">    urlBuilder.append(<span class="string">"&amp;"</span> + URLEncoder.encode(<span class="string">"lang"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"=kr"</span>);</span><br><span class="line">    urlBuilder.append(<span class="string">"&amp;"</span> + URLEncoder.encode(<span class="string">"units"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"=metric"</span>);</span><br><span class="line"></span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    OpenWeather response = restTemplate.getForObject(urlBuilder.toString(), OpenWeather<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(response);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-결과-확인"><a class="markdownIt-Anchor" href="#3-결과-확인"></a> 3) 결과 확인</h3><p>정상적으로 결과가 출력되었는지 확인하고 정상이면 날씨 데이터들을 가공해서 사용하도록 한다.</p><h2 id="추가-내용"><a class="markdownIt-Anchor" href="#추가-내용"></a> 추가 내용</h2><h3 id="풍향-데이터-변환"><a class="markdownIt-Anchor" href="#풍향-데이터-변환"></a> 풍향 데이터 변환</h3><p>날씨 API에서 풍향 데이터는 대부분이 degree(integer) 형식으로 되어 있기 때문에 방향을 나타내는 String 형식으로 나타낼 필요가 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># Enum 정의</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> WindType &#123;</span><br><span class="line">  N0(<span class="number">0</span>, <span class="string">"북"</span>),</span><br><span class="line">  NNE(<span class="number">1</span>, <span class="string">"북북동"</span>),</span><br><span class="line">  NE(<span class="number">2</span>, <span class="string">"북동"</span>),</span><br><span class="line">  ENE(<span class="number">3</span>, <span class="string">"동북동"</span>),</span><br><span class="line">  E(<span class="number">4</span>, <span class="string">"동"</span>),</span><br><span class="line">  ESE(<span class="number">5</span>, <span class="string">"동남동"</span>),</span><br><span class="line">  SE(<span class="number">6</span>, <span class="string">"남동"</span>),</span><br><span class="line">  SSE(<span class="number">7</span>, <span class="string">"남남동"</span>),</span><br><span class="line">  S(<span class="number">8</span>, <span class="string">"남"</span>),</span><br><span class="line">  SSW(<span class="number">9</span>, <span class="string">"남남서"</span>),</span><br><span class="line">  SW(<span class="number">10</span>, <span class="string">"남서"</span>),</span><br><span class="line">  WSW(<span class="number">11</span>, <span class="string">"서남서"</span>),</span><br><span class="line">  W(<span class="number">12</span>, <span class="string">"서"</span>),</span><br><span class="line">  WNW(<span class="number">13</span>, <span class="string">"서북서"</span>),</span><br><span class="line">  NW(<span class="number">14</span>, <span class="string">"북서"</span>),</span><br><span class="line">  NNW(<span class="number">15</span>, <span class="string">"북북서"</span>),</span><br><span class="line">  N16(<span class="number">16</span>, <span class="string">"북"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">WindType</span><span class="params">(<span class="keyword">int</span> code, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.code = code;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WindType <span class="title">value</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (WindType type : WindType.values()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (type.getCode() == value) &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enum 을 사용하여 편리하게 변환한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getWindDirection</span><span class="params">(<span class="keyword">int</span> degree)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result = (<span class="keyword">int</span>)((degree + <span class="number">22.5</span> * <span class="number">0.5</span>) / <span class="number">22.5</span>);</span><br><span class="line">  WindType windType = WindType.value(result);</span><br><span class="line">  <span class="keyword">return</span> windType.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  String wd = getWindDirection(<span class="number">270</span>);</span><br><span class="line">  System.out.println(<span class="string">"풍향 : "</span> : wd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">풍향 : 서</span><br></pre></td></tr></table></figure><h3 id="날씨-정보-변환"><a class="markdownIt-Anchor" href="#날씨-정보-변환"></a> 날씨 정보 변환</h3><ul><li>OpenWeatherMap API의 다국어에 한국어 지원을 위한 협업용 정보</li><li><a href="https://gist.github.com/choipd/e73201a4653a5e56e830#file-openweathermap_api_translation_ko" target="_blank" rel="noopener">openweathermap_api_translation_ko</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/31/java-dev-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[CSS] 그라데이션 효과</title>
      <link>http://hgko1207.github.io/2020/07/31/css-dev-1/</link>
      <guid>http://hgko1207.github.io/2020/07/31/css-dev-1/</guid>
      <pubDate>Fri, 31 Jul 2020 01:20:38 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;linear-gradient : CSS3에서 추가된 것으로, 선형 그라데이션 효과를 만들 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>linear-gradient : CSS3에서 추가된 것으로, 선형 그라데이션 효과를 만들 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">linear-gradient</span>( <span class="selector-tag">direction</span>, <span class="selector-tag">color1</span>, <span class="selector-tag">color2</span>, …, <span class="selector-tag">color3</span> );</span><br></pre></td></tr></table></figure><p><code>direction</code>에는 그라데이션 방향을 입력한다.</p><ul><li><code>to bottom</code> : 위에서 아래로 그라데이션을 만든다. (기본값)</li><li><code>to top</code> : 아래에서 위로 그라데이션을 만든다.</li><li><code>to left</code> : 오른쪽에서 왼쪽으로 그라데이션을 만든다.</li><li><code>to right</code> : 왼쪽에서 오른쪽으로 그라데이션을 만든다.</li><li><code>ndeg</code> : n 도의 방향으로 그라데이션을 만든다.</li></ul><h3 id="예시"><a class="markdownIt-Anchor" href="#예시"></a> 예시</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.gradation_bar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, #ff0000, orange, yellow, #<span class="number">00</span>ff00, #<span class="number">0000</span>ff, indigo, violet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h3><p><img src="/images/css/1.png" alt="" /></p><h3 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h3><ul><li><a href="https://www.colorzilla.com/gradient-editor/" target="_blank" rel="noopener">Ultimate CSS Gradient Generator</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/31/css-dev-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JAVA] proj4 투형변환</title>
      <link>http://hgko1207.github.io/2020/07/31/java-dev-2/</link>
      <guid>http://hgko1207.github.io/2020/07/31/java-dev-2/</guid>
      <pubDate>Fri, 31 Jul 2020 01:04:39 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;투형변환&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#투형변환&quot;&gt;&lt;/a&gt; 투형변환&lt;/h2&gt;
&lt;p&gt;TM(미국좌표) 좌표와 WGS84(한국좌표) 좌표를 서로 변환한다.&lt;/p&gt;
&lt;h2 id=&quot;다운로드&quot;&gt;&lt;a class=&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="투형변환"><a class="markdownIt-Anchor" href="#투형변환"></a> 투형변환</h2><p>TM(미국좌표) 좌표와 WGS84(한국좌표) 좌표를 서로 변환한다.</p><h2 id="다운로드"><a class="markdownIt-Anchor" href="#다운로드"></a> 다운로드</h2><p><a href="http://www.jhlabs.com/java/maps/proj/" target="_blank" rel="noopener">Java Map Projection Library</a> 사이트에 접속하여 다음의 Download 에서 소스 및 jar 파일을 다운받는다. 다운받은 jar 파일은 프로젝트의 classpath 경로에 추가한다.</p><h2 id="샘플"><a class="markdownIt-Anchor" href="#샘플"></a> 샘플</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 투형 정보 입력(중부원점 직각좌표 투형정보)</span></span><br><span class="line">String[] proj4 = <span class="keyword">new</span> String[] &#123;</span><br><span class="line">        <span class="string">"+proj=tmerc"</span>,</span><br><span class="line">        <span class="string">"+lat_0=38N"</span>,</span><br><span class="line">        <span class="string">"+lon_0=127.00289027777777777776E"</span>,</span><br><span class="line">        <span class="string">"+ellps=bessel"</span>,</span><br><span class="line">        <span class="string">"+units=m"</span>,</span><br><span class="line">        <span class="string">"+x_0=200000"</span>,</span><br><span class="line">        <span class="string">"+y_0=500000"</span>,</span><br><span class="line">        <span class="string">"+k=1.0"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Projection proj = ProjectionFactory.fromPROJ4Specification(proj4);</span><br><span class="line"></span><br><span class="line">Point2D.Double srcProject = <span class="keyword">new</span> Point2D.Double(<span class="number">132</span>, <span class="number">37</span>);</span><br><span class="line">Point2D.Double dstProject = proj.transform(srcProject, <span class="keyword">new</span> Point2D.Double());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"TM : "</span> + dstProject);</span><br><span class="line"></span><br><span class="line">srcProject = <span class="keyword">new</span> Point2D.Double(<span class="number">644904.399587292</span>, <span class="number">400717.8948938238</span>);</span><br><span class="line">dstProject = proj.inverseTransForm(srcProject, <span class="keyword">new</span> Point2D.Double());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"WGS84 : "</span> + dstProjec);</span><br></pre></td></tr></table></figure><h2 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TM : Point2D.Double[<span class="number">644904.399587292</span>, <span class="number">400717.8948938238</span>]</span><br><span class="line">WGS84 : Point2D.Double[<span class="number">132.00000000065793</span>, <span class="number">36.999999999128526</span>]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/31/java-dev-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JAVA] Julian Date Conversion</title>
      <link>http://hgko1207.github.io/2020/07/31/java-dev-1/</link>
      <guid>http://hgko1207.github.io/2020/07/31/java-dev-1/</guid>
      <pubDate>Fri, 31 Jul 2020 00:59:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;율리우스력-변환하기&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#율리우스력-변환하기&quot;&gt;&lt;/a&gt; 율리우스력 변환하기&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;율리우스력은 고대 로마의 정치가 율리우스 카이사르가 기원전 46
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="율리우스력-변환하기"><a class="markdownIt-Anchor" href="#율리우스력-변환하기"></a> 율리우스력 변환하기</h2><blockquote><p>율리우스력은 고대 로마의 정치가 율리우스 카이사르가 기원전 46년에 제정해 기원전 45년부터 시행한 양력(陽曆) 역법이다. 율리우스력의 1년은 365일 또는 366일(4년에 한번)이다.</p><p>기원전 46년 이전까지 고대 로마에서는 태음력을 사용하였으며, 점차 계절의 변화(즉, 태양의 일주)를 고려해 태음력과 태양력을 섞어서 년(年)과 월(月)을 계산하였다. 이에 따라 특히 달을 계산하는 데 적지 않은 혼란과 계산의 착오가 생겼으며, 이러한 착오는 제사장이 임의로 수정하였다.</p><p>율리우스 카이사르가 채택한 달력은 태양력을 기준으로 2월을 제외한 달은 모두 30일 또는 31일로 정함으로써 이전에 있던 번거로움을 한꺼번에 해소하였다.</p><p>출처 : 위키백과</p></blockquote><h3 id="1-joda-time-library-사용"><a class="markdownIt-Anchor" href="#1-joda-time-library-사용"></a> 1. Joda-Time Library 사용</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String dateStr = <span class="string">"2009218"</span>;</span><br><span class="line">MutableDateTime mdt = <span class="keyword">new</span> MutableDateTime();</span><br><span class="line">mdt.setYear(Integer.parseInt(dateStr.subString(<span class="number">0</span>, <span class="number">3</span>)));</span><br><span class="line">mdt.setDayOfYear(Integer.parseInt(dateStr.subString(<span class="number">4</span>)));</span><br><span class="line">Date parsedDate  = mdt.toDate();</span><br></pre></td></tr></table></figure><h3 id="2-java-api-사용"><a class="markdownIt-Anchor" href="#2-java-api-사용"></a> 2. Java Api 사용</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String dateStr = <span class="string">"2009218"</span>;</span><br><span class="line">Calendar cal  = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">cal.set(Calendar.YEAR,Integer.parseInt(dateStr.subString(<span class="number">0</span>, <span class="number">3</span>)));</span><br><span class="line">cal.set(Calendar.DAY_OF_YEAR,Integer.parseInt(dateStr.subString(<span class="number">4</span>)));</span><br><span class="line">Date parsedDate  = cal.getTime();</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/31/java-dev-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Eclipse RCP] 폴더안의 파일 리스트 읽기</title>
      <link>http://hgko1207.github.io/2020/07/31/rcp-dev-4/</link>
      <guid>http://hgko1207.github.io/2020/07/31/rcp-dev-4/</guid>
      <pubDate>Fri, 31 Jul 2020 00:53:37 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;SWT 의 DirectoryDialog 를 이용하여 폴더를 읽고 폴더의 파일들을 읽어서 원하는 List 의 형식으로 만든다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>SWT 의 DirectoryDialog 를 이용하여 폴더를 읽고 폴더의 파일들을 읽어서 원하는 List 의 형식으로 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Shell shell = GUIUtil.getShell();</span><br><span class="line">shell.getDisplay().asyncExec(() -&gt; &#123;</span><br><span class="line">    DirectoryDialog dialog = <span class="keyword">new</span> DirectoryDialog(shell);</span><br><span class="line">    dialog.setMessage(<span class="string">"Please select a directory and click OK"</span>);</span><br><span class="line">    String dir = dialog.open();</span><br><span class="line">    <span class="keyword">if</span> (dir != <span class="keyword">null</span>) &#123;</span><br><span class="line">      List&lt;MapImage&gt; mapImages = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          mapImages = Files.list(<span class="keyword">new</span> File(dir).toPath())</span><br><span class="line">                  .filter(file -&gt; file.toFile().isFile())</span><br><span class="line">                  .filter(file -&gt; !file.toFile().getName().endsWith(<span class="string">".txt"</span>))</span><br><span class="line">                  .map(file -&gt; &#123;</span><br><span class="line">                      <span class="keyword">return</span> <span class="keyword">new</span> MapImage(shell, file.toFile());</span><br><span class="line">                  &#125;).collect(Collectors.toList());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      System.err.println(mapImages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/31/rcp-dev-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Eclipse RCP] SWT에서의 GC, Drawable, Canvas 사용</title>
      <link>http://hgko1207.github.io/2020/07/31/rcp-dev-3/</link>
      <guid>http://hgko1207.github.io/2020/07/31/rcp-dev-3/</guid>
      <pubDate>Fri, 31 Jul 2020 00:38:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;addpaintlistener&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#addpaintlistener&quot;&gt;&lt;/a&gt; addPaintListener()&lt;/h3&gt;
&lt;p&gt;Control 객체가 그 객체의 paintEvent
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="addpaintlistener"><a class="markdownIt-Anchor" href="#addpaintlistener"></a> addPaintListener()</h3><p>Control 객체가 그 객체의 paintEvent를 통하여 그림을 그릴 수 있지만, 이보다는 Control 클래스를 상속받아 그래픽 작업을 위해 설계된 특별한 클래스인 Canvas 클래스를 사용하여 그림을 그리는 것이 더욱 좋습니다. Canvas 클래스를 생성한 후 <code>addPaintListener()</code>를 통하여 paintListener를 추가하거나, 사용자가 직접 정의한 Control을 상속받음으로서 그림을 그릴 수 있습니다. Canvas 클래스는 그림을 그릴때 사용할 수 있는 다양한 종류의 스타일 비트를 가지고 있습니다.</p><h3 id="swtno_background"><a class="markdownIt-Anchor" href="#swtno_background"></a> SWT.NO_BACKGROUND</h3><p>Canvas의 기본적인 동작은 다음과 같습니다. 객체의 할당영역을 그리기 앞서, 객체에 할당된 전체 영역을 현재 배경색으로 칠합니다. 이때 화면이 깜박이는 현상을 볼 수 있는데 이는 paintEvent가 배경색을 칠하고, 그 위에 Canvas의 요소들을 덧칠하는 순간을 우리가 보는 것입니다. 이 현상을 방지하기 위한 방법 중 하나는, Canvas를 생성할 때 <code>SWT.NO_BACKGROUND</code> 스타일 비트를 사용하여 배경이 그려지지 않게 하는것입니다. 단, 이 비트를 사용할 경우, 프로그램은 영역 전체에 대하여 모든 픽셀을 직접 그려야 합니다.</p><h3 id="swtno_redraw_resize"><a class="markdownIt-Anchor" href="#swtno_redraw_resize"></a> SWT.NO_REDRAW_RESIZE</h3><p>위젯의 사이즈가 변경될 때에도 paintEvent가 발생합니다. 이 역시 화면을 깜박거리게 할 수 있는데, 왜냐하면 사이즈가 변경될 때마다 해당 영역에 대해 모든 요소들을 다시 그려야 하기 때문입니다. 이는 <code>SWT.NO_REDRAW_RESIZE</code> 스타일 비트를 사용하여 완화시킬 수 있으며, 이는 컨트롤의 사이즈가 변경되더라도 paintEvent가 발생하지 않는다는 것을 의미합니다. 이는 컨트롤이 불필요하게 다시 그려지는것을 방지한다는 의미를 갖으며, 만약 크기가 증가된다고 한다면, paintEvent의 GC는 이 영역을 제외한 부분만을 다시 그리게 됩니다. 단 사각형 모양이 Canvas가 존재할 경우 사각형의 오른쪽 하단에 L이 거꾸로 된 형태로 그려질 수 있습니다.</p><p><code>SWT.NO_REDRAW_RESIZE</code> 스타일 비트는 새로 그려지는 부분에 대해서 적절히 처리해줄 경우, 고정사이즈의 그림이 GC에 그려질 때 나타나는 깜박임을 감소시킬 수 있습니다. 하지만 잘못 쓰였을 경우, <code>SWT.NO_REDRAW_RESIZE</code>는 치즈(cheese)라는 효과를 불러올 수 있습니다. 치즈는 다시 그려야 할 상황에 제대로 다시 그려지지 않는 부분이 있는 경우를 지칭합니다. paintEvent가 클라이언트 전 영역을 다시 그려야 하는 다음의 예시를 확인해보세요. 화면이 작아질 때에는 paintEvent가 발생하지 않기 때문에 그림이 다시 그려지지 않습니다. <code>SWT.NO_REDRAW_RESIZE</code> 상태에서 화면이 커질 경우, paintEvent는 새로 그려야 하는 부분에 대해서만 영역을 다시 그립니다. 그래서 기존에 그려졌던 부분이 지워지지 않았기 때문에 치즈 현상이 발생하게 됩니다. 또한 Canvas 사이즈가 증가할 때 GC는 필요한 부분만 다시 그리기 때문에 치즈 현상이 발생하게 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">shell.setLayout(<span class="keyword">new</span> FillLayout());</span><br><span class="line"><span class="keyword">final</span> Canvas canvas = <span class="keyword">new</span> Canvas(shell,SWT.NO_REDRAW_RESIZE);</span><br><span class="line"></span><br><span class="line">canvas.addPaintListener(<span class="keyword">new</span> PaintListener() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paintControl</span><span class="params">(PaintEvent e)</span> </span>&#123;</span><br><span class="line">        Rectangle clientArea = canvas.getClientArea();</span><br><span class="line">        e.gc.setBackground(display.getSystemColor(SWT.COLOR_CYAN));</span><br><span class="line">        e.gc.fillOval(<span class="number">0</span>,<span class="number">0</span>,clientArea.width,clientArea.height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="swtnone"><a class="markdownIt-Anchor" href="#swtnone"></a> SWT.NONE</h3><p>이 문제를 해결하는 방법은 <code>SWT.NONE</code> 스타일 비트를 사용하여 GC가 크기가 커질 때 커진 부분만 새로 그리는것이 아닌, 모든 부분을 새로 그리도록 하고, 동시에 paintEvent가 셸 사이즈가 작아졌을 때에도 발생하게 하여, Canvas의 전체 부분이 다시 그려지게 하는 것입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Canvas canvas = <span class="keyword">new</span> Canvas(shell,SWT.NONE);</span><br></pre></td></tr></table></figure><h3 id="swtno_merge_paints"><a class="markdownIt-Anchor" href="#swtno_merge_paints"></a> SWT.NO_MERGE_PAINTS</h3><p>각각의 SWT 위젯에 대해, 만약 하나이상의 영역이 다시 그려져야 할 경우, 운영체제는 다시 그려야 할 영역을 하나의 영역으로 묶어서 paintEvent를 발생하여 효율적인 처리를 가능하게 합니다. Canvas의 <code>SWT.NO_MERGE_PAINTS</code> 스타일 비트는 각각의 위젯에서 다시 그릴 영역을 하나로 묶지 않고, 각각의 영역에 대해 일일히 paintEvent를 호출하는 방식으로 변경합니다.</p><h3 id="정리"><a class="markdownIt-Anchor" href="#정리"></a> 정리</h3><p>NO_BACKGROUND, NO_REDRAW_RESIZE, NO_MERGE_PAINTS 스타일 비트는 Composite와 이 하부 클래스인 Canvas, Shell, Group등에서 사용할 수 있습니다, SWT에서 허용하긴 하지만, Composite 클래스의 Javadoc에서는 스타일 비트에 대해서 다음과 같이 기술합니다. <strong>Canvas 이외의 Composite의 하위클래스에서의 사용은 정의되지 않았다.</strong> 그러므로 Canvas 클래스가 그림 그리는데에 가장 적합한 컨트롤이라 할 수 있습니다.</p><p>깜박임을 방지하는 또 다른 방법은 더블 버퍼링을 사용하여 그림 그리기를 한번에 처리하는 것입니다. 더블 버퍼링은 paintEvent에서 제공하는 GC기 아닌 GC에 그림을 미리 그린 후, 이것을 제공되는 GC에 복사하는 기술입니다. 이를 위하여, Canvas의 영역과 동일한 사이즈의 Image 객체를 만들고, GC(Image)를 통하여 이 객체에 그림을 그립니다. 그려진 그림(Image)은 drawImage(Image, int, int) 메소드를 호출함으로서 paintEvent의 GC로 그려지게 됩니다. 이 기술을 사용할 때 주의할 점은 몇몇 운영체제는 이미 더블 버퍼링을 자체적으로 구현하고 있으므로, 결국 트리플 버퍼링이 이루어질 수 있다는 점입니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/31/rcp-dev-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[PyTorch] 기초 사용법</title>
      <link>http://hgko1207.github.io/2020/07/30/ai-pytorch-1/</link>
      <guid>http://hgko1207.github.io/2020/07/30/ai-pytorch-1/</guid>
      <pubDate>Thu, 30 Jul 2020 06:04:07 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;load-packages&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#load-packages&quot;&gt;&lt;/a&gt; Load Packages&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="load-packages"><a class="markdownIt-Anchor" href="#load-packages"></a> Load Packages</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure><h2 id="basic"><a class="markdownIt-Anchor" href="#basic"></a> Basic</h2><p>PyTorch 기초 사용법</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums = torch.arange(<span class="number">9</span>)</span><br><span class="line">nums.shape</span><br><span class="line">nums.numpy()</span><br><span class="line">nums.reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">randoms = torch.rand((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">zeros = torch.zeros((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">ones = torch.ones((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">torch.zeros_like(ones)</span><br></pre></td></tr></table></figure><h2 id="operations"><a class="markdownIt-Anchor" href="#operations"></a> Operations</h2><p>PyTorch로 수학연산 하기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nums * <span class="number">3</span></span><br><span class="line">nums = nums.reshape((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">nums + nums</span><br><span class="line"></span><br><span class="line">result = torch.add(nums, <span class="number">10</span>)</span><br><span class="line">result.numpy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>],</span><br><span class="line">       [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">       [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>]], dtype=int64)</span><br></pre></td></tr></table></figure><h2 id="view"><a class="markdownIt-Anchor" href="#view"></a> View</h2><p>reshape와 같다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">range_nums = torch.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">range_nums.view(<span class="number">-1</span>)</span><br><span class="line">range_nums.view(<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure><h2 id="compile"><a class="markdownIt-Anchor" href="#compile"></a> Compile</h2><p>numpy를 torch tensor로 불러오기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">arr_torch = torch.from_numpy(arr)</span><br><span class="line">arr_torch.float()</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([1., 1., 1.])</span></span><br></pre></td></tr></table></figure><p>Device 설정</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">device = <span class="string">'cuda'</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">'cpu'</span></span><br><span class="line">arr_torch.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out - GPU 사용 가능</span></span><br><span class="line">tensor([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], device=<span class="string">'cuda:0'</span>, dtype=torch.int32)</span><br></pre></td></tr></table></figure><h2 id="autograd"><a class="markdownIt-Anchor" href="#autograd"></a> AutoGrad</h2><p>기울기 구하기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.ones(<span class="number">2</span>, <span class="number">2</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = x + <span class="number">2</span></span><br><span class="line">print(x.grad_fn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">&lt;AddBackward0 object at <span class="number">0x000001FFE2A04148</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">z = y * y * <span class="number">3</span></span><br><span class="line">out = z.mean()</span><br><span class="line">print(z, out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">tensor([[<span class="number">27.</span>, <span class="number">27.</span>],</span><br><span class="line">        [<span class="number">27.</span>, <span class="number">27.</span>]], grad_fn=&lt;MulBackward0&gt;) tensor(<span class="number">27.</span>, grad_fn=&lt;MeanBackward0&gt;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">out.backward()</span><br><span class="line">print(x.grad)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">tensor([[<span class="number">4.5000</span>, <span class="number">4.5000</span>],</span><br><span class="line">        [<span class="number">4.5000</span>, <span class="number">4.5000</span>]])</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/30/ai-pytorch-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[TensorFlow 2.0] Evaluating &amp; Prediction</title>
      <link>http://hgko1207.github.io/2020/07/29/ai-dev-7/</link>
      <guid>http://hgko1207.github.io/2020/07/29/ai-dev-7/</guid>
      <pubDate>Wed, 29 Jul 2020 02:29:29 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;load-packages&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#load-packages&quot;&gt;&lt;/a&gt; Load Packages&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="load-packages"><a class="markdownIt-Anchor" href="#load-packages"></a> Load Packages</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> datasets</span><br></pre></td></tr></table></figure><h2 id="build-model"><a class="markdownIt-Anchor" href="#build-model"></a> Build Model</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">input_shape = (<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">num_classes = <span class="number">10</span></span><br><span class="line">learning_rate = <span class="number">0.001</span></span><br><span class="line"></span><br><span class="line">inputs = layers.Input(input_shape, dtype=tf.float64)</span><br><span class="line">net = layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(inputs)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))(net)</span><br><span class="line">net = layers.Dropout(<span class="number">0.5</span>)(net)</span><br><span class="line"></span><br><span class="line">net = layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))(net)</span><br><span class="line">net = layers.Dropout(<span class="number">0.5</span>)(net)</span><br><span class="line"></span><br><span class="line">net = layers.Flatten()(net)</span><br><span class="line">net = layers.Dense(<span class="number">512</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Dropout(<span class="number">0.5</span>)(net)</span><br><span class="line">net = layers.Dense(num_classes)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'softmax'</span>)(net)</span><br><span class="line"></span><br><span class="line">model = tf.keras.Model(inputs=inputs, outputs=net, name=<span class="string">'Basic_CNN'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Model is the full model w/o custom layers</span></span><br><span class="line">model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate),</span><br><span class="line">              loss=<span class="string">'sparse_categorical_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br></pre></td></tr></table></figure><h2 id="preprocess"><a class="markdownIt-Anchor" href="#preprocess"></a> Preprocess</h2><p>데이터셋 불러오기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(train_x, train_y), (test_x, test_y) = datasets.mnist.load_data()</span><br><span class="line"></span><br><span class="line">train_x = train_x[..., tf.newaxis]</span><br><span class="line">test_x = test_x[..., tf.newaxis]</span><br><span class="line"></span><br><span class="line">train_x = train_x / <span class="number">255.</span></span><br><span class="line">test_x = test_x / <span class="number">255.</span></span><br></pre></td></tr></table></figure><h2 id="training"><a class="markdownIt-Anchor" href="#training"></a> Training</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num_epochs = <span class="number">1</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">hist = model.fit(train_x, train_y,</span><br><span class="line">                 batch_size=batch_size,</span><br><span class="line">                 shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과</span></span><br><span class="line">Train on <span class="number">60000</span> samples</span><br><span class="line"><span class="number">60000</span>/<span class="number">60000</span> [==============================] - <span class="number">6</span>s <span class="number">94</span>us/sample - loss: <span class="number">0.0798</span> - accuracy: <span class="number">0.9755</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hist.history</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과</span></span><br><span class="line">&#123;<span class="string">'loss'</span>: [<span class="number">0.07980264157739779</span>], <span class="string">'accuracy'</span>: [<span class="number">0.9755</span>]&#125;</span><br></pre></td></tr></table></figure><h2 id="evaluating"><a class="markdownIt-Anchor" href="#evaluating"></a> Evaluating</h2><p>학습한 모델을 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model.evaluate(test_x, test_y, batch_size=batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과</span></span><br><span class="line">[<span class="number">0.03286817007374484</span>, <span class="number">0.9888</span>]</span><br></pre></td></tr></table></figure><h2 id="결과-확인"><a class="markdownIt-Anchor" href="#결과-확인"></a> 결과 확인</h2><p>Input으로 들어갈 이미지 데이터를 확인한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">test_image = text_x[<span class="number">0</span>, :, :, <span class="number">0</span>]</span><br><span class="line">test_image.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과</span></span><br><span class="line">(<span class="number">28</span>, <span class="number">28</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.title(test_y[<span class="number">0</span>])</span><br><span class="line">plt.imshow(test_image, <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/dev/21.png" alt="" /></p><p>모델에 Input Data로 확인 할 이미지 데이터를 넣는다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 이미지를 보기위해 shape를 바꿨었는데 다시 reshape로 차원을 변경합니다.</span></span><br><span class="line">pred = model.predict(test_image.reshape(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과</span></span><br><span class="line">array([[<span class="number">2.4227038e-09</span>, <span class="number">2.3278629e-08</span>, <span class="number">5.8909092e-07</span>, <span class="number">1.0298673e-07</span>,</span><br><span class="line">        <span class="number">9.4029007e-10</span>, <span class="number">6.1998517e-11</span>, <span class="number">1.4364351e-12</span>, <span class="number">9.9999928e-01</span>,</span><br><span class="line">        <span class="number">4.7319365e-10</span>, <span class="number">4.7449920e-08</span>]], dtype=float32)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 배열에서 가장 높은 값의 인덱스를 찾을 때 np.argmax를 사용한다.</span></span><br><span class="line">np.argmax(pred)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><h2 id="test-batch"><a class="markdownIt-Anchor" href="#test-batch"></a> Test Batch</h2><p>Batch Test Dataset 모델에 넣는다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_batch = test_x[:<span class="number">32</span>]</span><br><span class="line">test_batch.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과</span></span><br><span class="line">(<span class="number">32</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">preds = model.predict(test_batch)</span><br><span class="line">preds.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과</span></span><br><span class="line">(<span class="number">32</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -1을 넣으면 하나의 값이 아니라 앞의 32개의 결과를 보여줍니다.</span></span><br><span class="line">np.argmax(preds, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과</span></span><br><span class="line">array([<span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">6</span>,</span><br><span class="line">       <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>], dtype=int64)</span><br><span class="line"></span><br><span class="line">plt.imshow(test_batch[<span class="number">5</span>, :, :, <span class="number">0</span>], <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/dev/22.png" alt="" /></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/29/ai-dev-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[TensorFlow 2.0] Optimizer 및 Training (Expert)</title>
      <link>http://hgko1207.github.io/2020/07/28/ai-dev-6/</link>
      <guid>http://hgko1207.github.io/2020/07/28/ai-dev-6/</guid>
      <pubDate>Tue, 28 Jul 2020 08:38:22 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TensorFlow&lt;/a&gt; 공식 홈페이지에서 설명하는 Expert 버전을 사용해본다.&lt;/p&gt;
&lt;h2 id=&quot;load-pac
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><a href="https://www.tensorflow.org/" target="_blank" rel="noopener">TensorFlow</a> 공식 홈페이지에서 설명하는 Expert 버전을 사용해본다.</p><h2 id="load-packages"><a class="markdownIt-Anchor" href="#load-packages"></a> Load Packages</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> datasets</span><br></pre></td></tr></table></figure><h2 id="학습-과정-돌아보기"><a class="markdownIt-Anchor" href="#학습-과정-돌아보기"></a> 학습 과정 돌아보기</h2><p><img src="/images/ai/dev/18.png" alt="" /></p><h2 id="build-model"><a class="markdownIt-Anchor" href="#build-model"></a> Build Model</h2><p><img src="/images/ai/dev/17.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">input_shape = (<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">num_classes = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">inputs = layers.Input(input_shape, dtype=tf.float64)</span><br><span class="line">net = layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(inputs)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))(net)</span><br><span class="line">net = layers.Dropout(<span class="number">0.5</span>)(net)</span><br><span class="line"></span><br><span class="line">net = layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))(net)</span><br><span class="line">net = layers.Dropout(<span class="number">0.5</span>)(net)</span><br><span class="line"></span><br><span class="line">net = layers.Flatten()(net)</span><br><span class="line">net = layers.Dense(<span class="number">512</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Dropout(<span class="number">0.5</span>)(net)</span><br><span class="line">net = layers.Dense(num_classes)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'softmax'</span>)(net)</span><br><span class="line"></span><br><span class="line">model = tf.keras.Model(inputs=inputs, outputs=net, name=<span class="string">'Basic_CNN'</span>)</span><br></pre></td></tr></table></figure><h2 id="preprocess"><a class="markdownIt-Anchor" href="#preprocess"></a> Preprocess</h2><p>TensorFlow 공식 홈페이지에서 말한 expert 방법을 사용한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load Data from MNIST</span></span><br><span class="line">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Channel 차원 추가</span></span><br><span class="line">x_train = x_train[..., tf.newaxis]</span><br><span class="line">x_test = x_test[..., tf.newaxis]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Data Normailzation</span></span><br><span class="line">x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br></pre></td></tr></table></figure><h3 id="tfdata-사용"><a class="markdownIt-Anchor" href="#tfdata-사용"></a> tf.data 사용</h3><ul><li>from_tensor_slices()</li><li>shuffle()</li><li>batch()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">train_ds = tf.data.Dataset.from_tensor_slices((x_train, y_train))</span><br><span class="line">train_ds = train_ds.shuffle(<span class="number">1000</span>)</span><br><span class="line">train_ds = train_ds.batch(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test))</span><br><span class="line">test_ds = test_ds.batch(<span class="number">32</span>)</span><br></pre></td></tr></table></figure><h2 id="visualize-data"><a class="markdownIt-Anchor" href="#visualize-data"></a> Visualize Data</h2><p>matplotlib 불러와서 데이터를 시각화한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image, label <span class="keyword">in</span> train_ds.take(<span class="number">2</span>):</span><br><span class="line">    plt.title(label[<span class="number">0</span>].shape)</span><br><span class="line">    plt.imshow(image[<span class="number">0</span>, :, :, <span class="number">0</span>], <span class="string">'gray'</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/dev/19.png" alt="" /></p><p><img src="/images/ai/dev/20.png" alt="" /></p><h2 id="training-keras"><a class="markdownIt-Anchor" href="#training-keras"></a> Training (Keras)</h2><p>Keras로 학습 할 때는 기존과 같지만, train_ds는 generator라서 그래도 넣을 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.compile(optimizer=<span class="string">'adam'</span>, loss=<span class="string">'sparse_categorical_crossentropy'</span>)</span><br><span class="line">model.fit(train_ds, epochs=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="optimization"><a class="markdownIt-Anchor" href="#optimization"></a> Optimization</h2><ul><li>Loss Function</li><li>Optimizer</li><li>Metrics</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">loss_object = tf.keras.losses.SparseCategoricalCrossentropy()</span><br><span class="line">optimizer = tf.keras.optimizers.Adam()</span><br><span class="line"></span><br><span class="line">train_loss = tf.keras.metrics.Mean(name=<span class="string">'train_loss'</span>)</span><br><span class="line">train_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name=<span class="string">'train_accuracy'</span>)</span><br><span class="line"></span><br><span class="line">test_loss = tf.keras.metrics.Mean(name=<span class="string">'test_loss'</span>)</span><br><span class="line">test_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name=<span class="string">'test_accuracy'</span>)</span><br></pre></td></tr></table></figure><h2 id="training"><a class="markdownIt-Anchor" href="#training"></a> Training</h2><p>@tf.function : 기존 session 열었던 것 처럼 바로 작동 안 하고, 그래프만 만들고 학습이 시작되면 돌아가도록 한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_step</span><span class="params">(images, labels)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        predictions = model(images)</span><br><span class="line">        loss = loss_object(labels, predictions)</span><br><span class="line">    gradients = tape.gradient(loss, model.trainable_variables)</span><br><span class="line">    optimizer.apply_gradients(zip(gradients, model.trainable_variables))</span><br><span class="line"></span><br><span class="line">    train_loss(loss)</span><br><span class="line">    train_accuracy(labels, predictions)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_step</span><span class="params">(images, lebels)</span>:</span></span><br><span class="line">    predictions = model(images)</span><br><span class="line">    t_loss = loss_object(labels, predictions)</span><br><span class="line"></span><br><span class="line">    test_loss(t_loss)</span><br><span class="line">    test_accuracy(labels, predictions)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> images, labels <span class="keyword">in</span> train_ds:</span><br><span class="line">        train_step(images, labels)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> test_images, test_labels <span class="keyword">in</span> test_ds:</span><br><span class="line">        test_step(test_images, test_labels)</span><br><span class="line"></span><br><span class="line">    template = <span class="string">'Epoch &#123;&#125;, Loss: &#123;&#125;, Accuracy: &#123;&#125;, Test Loss &#123;&#125;, Test Accuracy: &#123;&#125;'</span></span><br><span class="line">    print(template.format(epoch+<span class="number">1</span>,</span><br><span class="line">                          train_loss.result(),</span><br><span class="line">                          train_accuracy.result() * <span class="number">100</span>,</span><br><span class="line">                          test_loss.result(),</span><br><span class="line">                          test_accuracy.result() * <span class="number">100</span>))</span><br></pre></td></tr></table></figure><h3 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Start Training</span><br><span class="line">Epoch <span class="number">1</span>, Loss: <span class="number">0.04196552559733391</span>, Accuracy: <span class="number">98.74666595458984</span>, Test Loss <span class="number">0.043360475450754166</span>, Test Accuracy: <span class="number">98.72000122070312</span></span><br><span class="line">Start Training</span><br><span class="line">Epoch <span class="number">2</span>, Loss: <span class="number">0.033374134451150894</span>, Accuracy: <span class="number">99.0050048828125</span>, Test Loss <span class="number">0.03336939960718155</span>, Test Accuracy: <span class="number">98.95500183105469</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/28/ai-dev-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[TensorFlow 2.0] Optimizer 및 Training (Keras)</title>
      <link>http://hgko1207.github.io/2020/07/24/ai-dev-5/</link>
      <guid>http://hgko1207.github.io/2020/07/24/ai-dev-5/</guid>
      <pubDate>Fri, 24 Jul 2020 08:35:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;load-packages&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#load-packages&quot;&gt;&lt;/a&gt; Load Packages&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="load-packages"><a class="markdownIt-Anchor" href="#load-packages"></a> Load Packages</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> datasets</span><br></pre></td></tr></table></figure><h2 id="학습-과정-돌아보기"><a class="markdownIt-Anchor" href="#학습-과정-돌아보기"></a> 학습 과정 돌아보기</h2><p><img src="/images/ai/dev/18.png" alt="" /></p><h2 id="prepare-mnist-datset"><a class="markdownIt-Anchor" href="#prepare-mnist-datset"></a> Prepare MNIST Datset</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(train_x, train_y), (test_x, test_y) = datasets.mnist.load_data()</span><br></pre></td></tr></table></figure><h2 id="build-model"><a class="markdownIt-Anchor" href="#build-model"></a> Build Model</h2><p><img src="/images/ai/dev/17.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">inputs = layers.Input((<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))</span><br><span class="line">net = layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(inputs)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))(net)</span><br><span class="line">net = layers.Dropout(<span class="number">0.25</span>)(net)</span><br><span class="line"></span><br><span class="line">net = layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))(net)</span><br><span class="line">net = layers.Dropout(<span class="number">0.25</span>)(net)</span><br><span class="line"></span><br><span class="line">net = layers.Flatten()(net)</span><br><span class="line">net = layers.Dense(<span class="number">512</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Dropout(<span class="number">0.5</span>)(net)</span><br><span class="line">net = layers.Dense(<span class="number">10</span>)(net)  <span class="comment"># num_classes</span></span><br><span class="line">net = layers.Activation(<span class="string">'softmax'</span>)(net)</span><br><span class="line"></span><br><span class="line">model = tf.keras.Model(inputs=inputs, outputs=net, name=<span class="string">'Basic_CNN'</span>)</span><br></pre></td></tr></table></figure><h2 id="optimization"><a class="markdownIt-Anchor" href="#optimization"></a> Optimization</h2><p>모델을 학습하기 전에 설정을 한다.</p><ul><li>Loss Function</li><li>Metrics</li><li>Optimizer</li></ul><h3 id="loss-function"><a class="markdownIt-Anchor" href="#loss-function"></a> Loss Function</h3><h4 id="categorical-vs-binary"><a class="markdownIt-Anchor" href="#categorical-vs-binary"></a> Categorical vs Binary</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loss = <span class="string">'binary_crossentropy'</span></span><br><span class="line">loss = <span class="string">'categorical_crossentropy'</span></span><br></pre></td></tr></table></figure><h4 id="sparse_categorical_crossentropy-vs-categorical_crossentropy"><a class="markdownIt-Anchor" href="#sparse_categorical_crossentropy-vs-categorical_crossentropy"></a> sparse_categorical_crossentropy vs categorical_crossentropy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">loss_fun = tf.keras.losses.sparse_categorical_crossentropy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 또는</span></span><br><span class="line">tf.keras.losses.categorical_crossentropy</span><br><span class="line">tf.keras.losses.binary_crossentropy</span><br></pre></td></tr></table></figure><h3 id="metrics"><a class="markdownIt-Anchor" href="#metrics"></a> Metrics</h3><p>모델을 평가하는 방법이다.(정확도 측정)</p><ul><li>Accuracy : 예측이 레이블과 일치하는 빈도를 계산</li><li>BinaryAccuracy: 예측이 이진 레이블과 일치하는 빈도를 계산</li><li>CategoricalAccuracy : 예측이 one-hot 레이블과 일치하는 빈도를 계산</li><li>TopKCategoricalAccuracy : 상위 K 예측에서 대상이 얼마나 자주 나타되는지 계산</li><li>SparseTopKCategoricalAccuracy : 상위 K 예측에서 정수 대상이 얼마나 자주 나타하는지 계산</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># accurany를 이름으로 넣는 방법</span></span><br><span class="line">metrics = [<span class="string">'accuracy'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># tf.keras.metrics</span></span><br><span class="line">metrics = [tf.keras.metrics.CategoricalAccuracy()]</span><br></pre></td></tr></table></figure><h3 id="optimizer"><a class="markdownIt-Anchor" href="#optimizer"></a> Optimizer</h3><ul><li>‘sgd’</li><li>‘rmsprop’</li><li>‘adam’</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">optm = tf.keras.optimizers.Adam()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">tf.keras.optimizers.SGD()</span><br><span class="line">tf.keras.optimizers.RMSprop()</span><br><span class="line">tf.keras.optimizers.Adam()</span><br></pre></td></tr></table></figure><h3 id="compile"><a class="markdownIt-Anchor" href="#compile"></a> Compile</h3><p>Optimizer 적용을 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model.compile(optimizer=optm,</span><br><span class="line">              loss=loss_fun,</span><br><span class="line">              metrics=metrics)</span><br></pre></td></tr></table></figure><h2 id="prepaer-dataset"><a class="markdownIt-Anchor" href="#prepaer-dataset"></a> Prepaer Dataset</h2><p>학습에 사용할 데이터셋을 준비한다.</p><p>데이터셋 확인</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train_x.shape, train_y.shape</span><br><span class="line">&gt; ((<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>), (<span class="number">60000</span>,))</span><br><span class="line"></span><br><span class="line">test_x.shape, test_y.shape</span><br><span class="line">&gt; ((<span class="number">10000</span>, <span class="number">28</span>, <span class="number">28</span>), (<span class="number">10000</span>,))</span><br></pre></td></tr></table></figure><p>차원 수 늘리기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.expand_dims(train_x, <span class="number">-1</span>).shape</span><br><span class="line">&gt; (<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">tf.expand_dims(train_x, <span class="number">-1</span>).shape</span><br><span class="line">&gt; TensorShape([<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 최신 버전</span></span><br><span class="line">train_x = train_x[..., tf.newaxis]</span><br><span class="line">test_x = test_x[..., tf.newaxis]</span><br></pre></td></tr></table></figure><p>Rescaling</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">np.min(train_x), np.max(train_x)</span><br><span class="line">&gt; (<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">train_x = train_x / <span class="number">255.</span></span><br><span class="line">test_x = test_x / <span class="number">255.</span></span><br><span class="line"></span><br><span class="line">np.min(train_x), np.max(train_x)</span><br><span class="line">&gt; (<span class="number">0.0</span>, <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure><h2 id="training"><a class="markdownIt-Anchor" href="#training"></a> Training</h2><p>본격적으로 학습을 해봅니다. 그 전에 학습용 Hyperparameter 설정한다.</p><p>num_epochs, batch_size</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 전체 sample 데이터를 이용하여 한 바퀴 돌며 학습하는 것을 1회 epoch이라 부른다.</span></span><br><span class="line">num_epochs = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 모델에 한번에 들어가는 데이터 수를 조절하여 메모리 사용 효율을 향상시킨다.</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br></pre></td></tr></table></figure><p>실행!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">model.fit(train_x, train_y,</span><br><span class="line">          batch_size=batch_size,</span><br><span class="line">          shuffle=<span class="literal">True</span>,</span><br><span class="line">          epochs=num_epochs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Result</span></span><br><span class="line">Train on <span class="number">60000</span> samples</span><br><span class="line"><span class="number">60000</span>/<span class="number">60000</span> [==============================] - <span class="number">99</span>s <span class="number">2</span>ms/sample - loss: <span class="number">0.1414</span> - categorical_accuracy: <span class="number">0.0992</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/24/ai-dev-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[TensorFlow 2.0] 각 Layer별 역할 및 파라미터</title>
      <link>http://hgko1207.github.io/2020/07/20/ai-dev-4/</link>
      <guid>http://hgko1207.github.io/2020/07/20/ai-dev-4/</guid>
      <pubDate>Mon, 20 Jul 2020 07:39:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;load-packages&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#load-packages&quot;&gt;&lt;/a&gt; Load Packages&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="load-packages"><a class="markdownIt-Anchor" href="#load-packages"></a> Load Packages</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h2 id="input-image"><a class="markdownIt-Anchor" href="#input-image"></a> Input Image</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">(train_x, train_y), (test_x, test_y) = datasets.mnist.load_data()</span><br><span class="line">image = train_x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 차원 수 높이기</span></span><br><span class="line">image = image[tf.newaxis, ..., tf.newaxis]</span><br><span class="line">image.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="feature-extraction"><a class="markdownIt-Anchor" href="#feature-extraction"></a> Feature Extraction</h2><p><img src="/images/ai/dev/4.png" alt="" /></p><h3 id="convolution"><a class="markdownIt-Anchor" href="#convolution"></a> Convolution</h3><p><img src="/images/ai/dev/5.png" alt="" /></p><ul><li>filters: layer에서 나갈 때 몇 개의 filter를 만들 것인지</li><li>kernel_size: filter(Weight)의 크기</li><li>strides: 몇 개의 pixel을 skip 하면서 훑어지나갈 것인지 (크기에도 영향을 준다.)</li><li>padding: zero padding을 만들 것인지. VALID는 padding이 없고, SAME은 padding이 있습니다. (크기에도 영향을 준다.)</li><li>activation: Activation Function을 만들 것인지. 당장 설정 안해도 Layer 층을 따로 만들 수 있습니다. (Default: None)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.layers.Conv2D(filters=<span class="number">3</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">'VALID'</span>, activation=<span class="string">'relu'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (3, 3) 대신에 3으로도 대체 가능</span></span><br><span class="line">tf.keras.layers.Conv2D(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'VALID'</span>)</span><br></pre></td></tr></table></figure><h3 id="visualization"><a class="markdownIt-Anchor" href="#visualization"></a> Visualization</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">image = tf.cast(image, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">layer = tf.keras.layers.Conv2D(<span class="number">3</span>, <span class="number">3</span>, strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">'SAME'</span>)</span><br><span class="line">output = layer(image)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.imshow(image[<span class="number">0</span>, :, :, <span class="number">0</span>], <span class="string">'gray'</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.imshow(output[<span class="number">0</span>, :, :, <span class="number">0</span>], <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/dev/6.png" alt="" /></p><p>weight 불러오기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">weight = layer.get_weights()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">5</span>))</span><br><span class="line">plt.subplot(<span class="number">131</span>)</span><br><span class="line">plt.hist(output.numpy().ravel(), range=[<span class="number">-2</span>, <span class="number">2</span>])</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">plt.subplot(<span class="number">132</span>)</span><br><span class="line">plt.title(weight.shape)</span><br><span class="line">plt.imshow(weight[:, :, <span class="number">0</span>, <span class="number">0</span>], <span class="string">'gray'</span>)</span><br><span class="line">plt.subplot(<span class="number">133</span>)</span><br><span class="line">plt.title(output.shape)</span><br><span class="line">plt.imshow(output[<span class="number">0</span>, :, :, <span class="number">0</span>], <span class="string">'gray'</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/dev/7.png" alt="" /></p><h3 id="activation-function"><a class="markdownIt-Anchor" href="#activation-function"></a> Activation Function</h3><p>0 미만의 값들을 0으로 바꿔준다.<br /><img src="/images/ai/dev/8.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">act_layer = tf.keras.layers.ReLU()</span><br><span class="line">act_output = act_layer(output)</span><br><span class="line">np.min(act_output), np.max(act_output)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">0.0</span>, <span class="number">244.73064</span>) <span class="comment"># 0미만 값들이 0으로 바뀜</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">5</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.hist(act_output.numpy().ravel(), range=[<span class="number">-2</span>, <span class="number">2</span>])</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.title(act_output.shape)</span><br><span class="line">plt.imshow(act_output[<span class="number">0</span>, :, :, <span class="number">0</span>], <span class="string">'gray'</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/dev/9.png" alt="" /></p><h3 id="pooling"><a class="markdownIt-Anchor" href="#pooling"></a> Pooling</h3><p>강조되는 것들만 압축합니다.</p><p><img src="/images/ai/dev/10.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pool_layer = tf.keras.layers.MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>), padding=<span class="string">'SAME'</span>)</span><br><span class="line">pool_output = pool_layer(act_output)</span><br><span class="line">pool_output.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">TensorShape([<span class="number">1</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">5</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.hist(pool_output.numpy().ravel(), range=[<span class="number">-2</span>, <span class="number">2</span>])</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.title(pool_output.shape)</span><br><span class="line">plt.imshow(pool_output[<span class="number">0</span>, :, :, <span class="number">0</span>], <span class="string">'gray'</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/dev/11.png" alt="" /></p><h3 id="fully-connected"><a class="markdownIt-Anchor" href="#fully-connected"></a> Fully Connected</h3><p><img src="/images/ai/dev/12.png" alt="" /></p><h4 id="flatten"><a class="markdownIt-Anchor" href="#flatten"></a> Flatten</h4><p><img src="/images/ai/dev/13.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">layer = tf.keras.layers.Flatten()</span><br><span class="line">flatten = layer(output)</span><br><span class="line">flatten.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">TensorShape([<span class="number">1</span>, <span class="number">2352</span>]) <span class="comment"># 28 * 28 * 3</span></span><br><span class="line"></span><br><span class="line">output.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">TensorShape([<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.hist(flatten.numpy().ravel())</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.imshow(flatten[:, :<span class="number">100</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/dev/14.png" alt="" /></p><h4 id="dense"><a class="markdownIt-Anchor" href="#dense"></a> Dense</h4><p>하나씩 연결하겠다는 의미다.</p><p><img src="/images/ai/dev/15.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">layer = tf.keras.layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>)</span><br><span class="line">output = layer(flatten)</span><br><span class="line">output.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">TensorShape([<span class="number">1</span>, <span class="number">32</span>]) <span class="comment"># 32로 줄어들었습니다.</span></span><br></pre></td></tr></table></figure><h4 id="dropout"><a class="markdownIt-Anchor" href="#dropout"></a> DropOut</h4><p>학습할 때만 랜덤하게 끊어준다. 학습이 끝나면 다시 복구시킨다.</p><p><img src="/images/ai/dev/16.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0.7은 비율입니다. 얼마나 끊을 것인지 살릴 것인지</span></span><br><span class="line">layer = tf.keras.layers.Dropout(<span class="number">0.7</span>)</span><br><span class="line">output = layer(output)</span><br><span class="line">output.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">TensorShape([<span class="number">1</span>, <span class="number">32</span>])</span><br></pre></td></tr></table></figure><h3 id="build-model"><a class="markdownIt-Anchor" href="#build-model"></a> Build Model</h3><p><img src="/images/ai/dev/17.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line">input_shape = (<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">num_classes = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">inputs = layers.Input(shape=input_shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Feature Extraction</span></span><br><span class="line">net = layers.Conv2D(<span class="number">32</span>, <span class="number">3</span>, padding=<span class="string">'SAME'</span>)(inputs)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Conv2D(<span class="number">32</span>, <span class="number">3</span>, padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.MaxPool2D(<span class="number">2</span>, <span class="number">2</span>)(net)</span><br><span class="line">net = layers.Dropout(<span class="number">0.25</span>)(net)</span><br><span class="line"></span><br><span class="line">net = layers.Conv2D(<span class="number">64</span>, <span class="number">3</span>, padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Conv2D(<span class="number">64</span>, <span class="number">3</span>, padding=<span class="string">'SAME'</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.MaxPool2D(<span class="number">2</span>, <span class="number">2</span>)(net)</span><br><span class="line">net = layers.Dropout(<span class="number">0.25</span>)(net)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fully Connected</span></span><br><span class="line">net = layers.Flatten()(net)</span><br><span class="line">net = layers.Dense(<span class="number">512</span>)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'relu'</span>)(net)</span><br><span class="line">net = layers.Dropout(<span class="number">0.25</span>)(net)</span><br><span class="line">net = layers.Dense(num_classes)(net)</span><br><span class="line">net = layers.Activation(<span class="string">'softmax'</span>)(net)</span><br><span class="line"></span><br><span class="line">model = tf.keras.Model(inputs=inputs, outputs=net, name=<span class="string">'Basic-CNN'</span>)</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Out</span></span><br><span class="line">Model: <span class="string">"Basic-CNN"</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param <span class="comment">#</span></span><br><span class="line">=================================================================</span><br><span class="line">input_1 (InputLayer)         [(<span class="literal">None</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)]       <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_25 (Conv2D)           (<span class="literal">None</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">32</span>)        <span class="number">320</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">activation_8 (Activation)    (<span class="literal">None</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">32</span>)        <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_26 (Conv2D)           (<span class="literal">None</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">32</span>)        <span class="number">9248</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">activation_9 (Activation)    (<span class="literal">None</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">32</span>)        <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_8 (MaxPooling2 (<span class="literal">None</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">32</span>)        <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout_5 (Dropout)          (<span class="literal">None</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">32</span>)        <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_27 (Conv2D)           (<span class="literal">None</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">64</span>)        <span class="number">18496</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">activation_10 (Activation)   (<span class="literal">None</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">64</span>)        <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_28 (Conv2D)           (<span class="literal">None</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">64</span>)        <span class="number">36928</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">activation_11 (Activation)   (<span class="literal">None</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">64</span>)        <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_9 (MaxPooling2 (<span class="literal">None</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">64</span>)          <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout_6 (Dropout)          (<span class="literal">None</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">64</span>)          <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">flatten_4 (Flatten)          (<span class="literal">None</span>, <span class="number">3136</span>)              <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_3 (Dense)              (<span class="literal">None</span>, <span class="number">512</span>)               <span class="number">1606144</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">activation_12 (Activation)   (<span class="literal">None</span>, <span class="number">512</span>)               <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout_7 (Dropout)          (<span class="literal">None</span>, <span class="number">512</span>)               <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_4 (Dense)              (<span class="literal">None</span>, <span class="number">10</span>)                <span class="number">5130</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">activation_13 (Activation)   (<span class="literal">None</span>, <span class="number">10</span>)                <span class="number">0</span></span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">1</span>,<span class="number">676</span>,<span class="number">266</span></span><br><span class="line">Trainable params: <span class="number">1</span>,<span class="number">676</span>,<span class="number">266</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/20/ai-dev-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[TensorFlow 2.0] 예제 데이터셋 (MNIST) 사용</title>
      <link>http://hgko1207.github.io/2020/07/20/ai-dev-3/</link>
      <guid>http://hgko1207.github.io/2020/07/20/ai-dev-3/</guid>
      <pubDate>Mon, 20 Jul 2020 04:02:24 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;load-packages&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#load-packages&quot;&gt;&lt;/a&gt; Load Packages&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="load-packages"><a class="markdownIt-Anchor" href="#load-packages"></a> Load Packages</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h2 id="데이터-불러오기"><a class="markdownIt-Anchor" href="#데이터-불러오기"></a> 데이터 불러오기</h2><p>TensorFlow 에서 제공해주는 데이터셋(MNIST) 예제 불러오기다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">mnist = datasets.mnist</span><br><span class="line">(train_x, train_y), (test_x, test_y) = mnist.load_data()</span><br><span class="line">train_x.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br></pre></td></tr></table></figure><h2 id="image-dataset-들여다보기"><a class="markdownIt-Anchor" href="#image-dataset-들여다보기"></a> Image Dataset 들여다보기</h2><p>불러온 데이터셋에서 이미지 데이터 하나만 뽑아서 시각화한다.</p><p>데이터 하나만 뽑기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">image = train_x[<span class="number">0</span>]</span><br><span class="line">image.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">28</span>, <span class="number">28</span>)</span><br></pre></td></tr></table></figure><p>시각화 하기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(image, <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/dev/1.png" alt="" /></p><h2 id="channel-관련"><a class="markdownIt-Anchor" href="#channel-관련"></a> Channel 관련</h2><p>[Batch Size, Height, Width, Channel]<br />Gray Scale 이면 1, RGB 이면 3으로 만들어줘야 한다.</p><p>데이터 차원수 늘리기(numpy)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -1 인 경우 마지막에 차원을 늘린다는 의미입니다.</span></span><br><span class="line">train_x = np.expand_dims(train_x, <span class="number">-1</span>)</span><br><span class="line">train_x.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>데이터 차원수 늘리기 (tensorflow)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new_train_x = tf.expand_dims(train_x, <span class="number">-1</span>)</span><br><span class="line">new_train_x.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">TensorShape([<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>TensorFlow 공식홈페이지에 나온 방법이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new_train_x =train_x[..., tf.newaxis]</span><br><span class="line">new_train_x.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>다시 시각화 하기</p><p><strong>주의사항:</strong> matplotlib로 이미지 시각화 할 때 gray scale의 이미지는 3번째 dimension이 없으므로, 2개의 dimension으로 차원 조절해서 넣어줘야 한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">display = new_train_x[<span class="number">0</span>, :, :, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">display = np.squeeze(new_train_x[<span class="number">0</span>])</span><br><span class="line">display.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">28</span>, <span class="number">28</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(display, <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/dev/1.png" alt="" /></p><h2 id="label-dataset-들여다보기"><a class="markdownIt-Anchor" href="#label-dataset-들여다보기"></a> Label Dataset 들여다보기</h2><p>Label 하나를 열어서 Image와 비교하여 제대로 들어갔는지, 어떤 식으로 저장 되어 있는지 확인한다.</p><p>Label 하나만 뽑아보기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_y[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>Lebel 시각화 하기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.title(train_y[<span class="number">0</span>])</span><br><span class="line">plt.imshow(train_x[<span class="number">0</span>], <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/dev/2.png" alt="" /></p><h2 id="onehot-encoding"><a class="markdownIt-Anchor" href="#onehot-encoding"></a> OneHot Encoding</h2><p>컴퓨터가 이해할 수 있는 형태로 변환해서 Label을 주도록 한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>1을 예시로 one hot encoding 하기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line"></span><br><span class="line">to_categorical(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>], dtype=float32)</span><br></pre></td></tr></table></figure><p>Label 확인해서 to_categorical 사용</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">label = train_y[<span class="number">0</span>]</span><br><span class="line">label_onehot = to_categorical(label, num_classes=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>], dtype=float32)</span><br></pre></td></tr></table></figure><p>one hot encoding으로 바꾼 것과 이미지 확인</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.title(label_onehot)</span><br><span class="line">plt.imshow(train_x[<span class="number">0</span>], <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/dev/3.png" alt="" /></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/20/ai-dev-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Tensorflow 2.0] 기초 사용법</title>
      <link>http://hgko1207.github.io/2020/07/20/ai-dev-2/</link>
      <guid>http://hgko1207.github.io/2020/07/20/ai-dev-2/</guid>
      <pubDate>Mon, 20 Jul 2020 02:30:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;load-packages&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#load-packages&quot;&gt;&lt;/a&gt; Load Packages&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="load-packages"><a class="markdownIt-Anchor" href="#load-packages"></a> Load Packages</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure><h2 id="tensor-생성"><a class="markdownIt-Anchor" href="#tensor-생성"></a> Tensor 생성</h2><p>list -&gt; Tensor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tf.constant([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">3</span>,), dtype=int32, numpy=array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])&gt;</span><br></pre></td></tr></table></figure><p>tuple -&gt; Tensor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tf.constant(((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">2</span>, <span class="number">3</span>), dtype=int32, numpy=</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])&gt;</span><br></pre></td></tr></table></figure><p>Array -&gt; Tensor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">tf.constant(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">3</span>,), dtype=int32, numpy=array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])&gt;</span><br></pre></td></tr></table></figure><h2 id="tensor에-담긴-정보-확인"><a class="markdownIt-Anchor" href="#tensor에-담긴-정보-확인"></a> Tensor에 담긴 정보 확인</h2><p>shape 확인</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor = tf.constant(arr)</span><br><span class="line">tensor.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">TensorShape([<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>Data Type 확인</p><ul><li>주의: Tensor를 생성 할 때 Data Type을 정해주지 않기 때문에 혼동이 올 수 있다.</li><li>Data Type에 따라 모델의 무게나 성능 차이에 영향을 줄 수 있다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor.dtype</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">tf.int32</span><br></pre></td></tr></table></figure><p>Data Type 정의</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tf.constant([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=tf.uint8)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">3</span>,), dtype=uint8, numpy=array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=uint8)&gt;</span><br></pre></td></tr></table></figure><p>Data Type 변환</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tf.cast(tensor, dtype=tf.uint8)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">3</span>,), dtype=uint8, numpy=array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=uint8)&gt;</span><br></pre></td></tr></table></figure><p>Tensor에서 Numpy 불러오기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor.numpy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>Numpy로 변환된 것 확인</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type(tensor.numpy())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">numpy.ndarray</span><br></pre></td></tr></table></figure><h2 id="난수-생성"><a class="markdownIt-Anchor" href="#난수-생성"></a> 난수 생성</h2><p>Numpy에서는 난수 생성 시 기본적으로 Normal Distribution을 생성한다.</p><ul><li>Normal Distribution은 중심 극한 이론에 의한 연속적인 모양</li><li>Uniform Distribution은 중심 극한 이론과는 무관하며 불연속적이며 일정한 분포</li></ul><p>Numpy에서 사용법</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">np.random.randn(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([ <span class="number">0.53020669</span>,  <span class="number">0.65508422</span>, <span class="number">-0.59177912</span>,  <span class="number">1.16459962</span>, <span class="number">-1.05122869</span>,</span><br><span class="line">        <span class="number">0.08080872</span>,  <span class="number">0.17245994</span>,  <span class="number">0.08721459</span>, <span class="number">-0.69788519</span>])</span><br></pre></td></tr></table></figure><p>TensorFlow에서 사용법</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tf.random.normal([<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">3</span>, <span class="number">3</span>), dtype=float32, numpy=</span><br><span class="line">array([[ <span class="number">0.46394104</span>, <span class="number">-0.8973731</span> , <span class="number">-0.1977468</span> ],</span><br><span class="line">       [<span class="number">-1.6685097</span> , <span class="number">-0.8181516</span> , <span class="number">-1.8963411</span> ],</span><br><span class="line">       [ <span class="number">0.5654544</span> ,  <span class="number">0.13616897</span>, <span class="number">-1.7370273</span> ]], dtype=float32)&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tf.random.uniform([<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">3</span>, <span class="number">3</span>), dtype=float32, numpy=</span><br><span class="line">array([[<span class="number">0.7996844</span> , <span class="number">0.05048668</span>, <span class="number">0.7060809</span> ],</span><br><span class="line">       [<span class="number">0.9390234</span> , <span class="number">0.29056323</span>, <span class="number">0.33341527</span>],</span><br><span class="line">       [<span class="number">0.4387114</span> , <span class="number">0.13688791</span>, <span class="number">0.12659645</span>]], dtype=float32)&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/20/ai-dev-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Tensorflow 2.0과 PyTorch 소개</title>
      <link>http://hgko1207.github.io/2020/07/17/ai-dev-1/</link>
      <guid>http://hgko1207.github.io/2020/07/17/ai-dev-1/</guid>
      <pubDate>Fri, 17 Jul 2020 10:02:44 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;tensorflow-20&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tensorflow-20&quot;&gt;&lt;/a&gt; TensorFlow 2.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.x에 비해 정말 쉬워졌다.&lt;/li&gt;
&lt;li&gt;Numpy 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="tensorflow-20"><a class="markdownIt-Anchor" href="#tensorflow-20"></a> TensorFlow 2.0</h2><ul><li>1.x에 비해 정말 쉬워졌다.</li><li>Numpy Array와 호환이 쉽다.</li><li>TensorBorad, TFLite, TPU</li><li>여전히 많은 사용자들이 사용한다.</li><li>상용 목적으로 주로 사용한다.</li></ul><h2 id="pytorch"><a class="markdownIt-Anchor" href="#pytorch"></a> PyTorch</h2><ul><li>Dynamic Graph &amp; Define by Run</li><li>쉽고 빠르며 코드가 간결하다.</li><li>빠르게 성장하고 있다.</li><li>커뮤니티가 많이 활성화 되고 있다.</li><li>연구 목적으로 주로 사용한다.</li></ul><p>둘 다 때에 따라 환경에 맞게 사용하면 될 것 같다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/17/ai-dev-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Python] 시각화 기초(이미지)</title>
      <link>http://hgko1207.github.io/2020/07/17/ai-development-6/</link>
      <guid>http://hgko1207.github.io/2020/07/17/ai-development-6/</guid>
      <pubDate>Fri, 17 Jul 2020 09:20:17 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;load-packages&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#load-packages&quot;&gt;&lt;/a&gt; Load Packages&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="load-packages"><a class="markdownIt-Anchor" href="#load-packages"></a> Load Packages</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h2 id="이미지-불러오기"><a class="markdownIt-Anchor" href="#이미지-불러오기"></a> 이미지 불러오기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">'images/dog.jpg'</span></span><br><span class="line"></span><br><span class="line">image_pil = Image.open(path)</span><br><span class="line">image = np.array(image_pil)</span><br><span class="line"></span><br><span class="line">image.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">300</span>, <span class="number">400</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="이미지-들여다-보기"><a class="markdownIt-Anchor" href="#이미지-들여다-보기"></a> 이미지 들여다 보기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.min(image), np.max(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">255</span>)</span><br></pre></td></tr></table></figure><h2 id="그래프로-시각화-하기"><a class="markdownIt-Anchor" href="#그래프로-시각화-하기"></a> 그래프로 시각화 하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(image.ravel(), <span class="number">256</span>, [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/image/1.png" alt="" /></p><h2 id="그림-나타내기"><a class="markdownIt-Anchor" href="#그림-나타내기"></a> 그림 나타내기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(image)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/image/2.png" alt="" /></p><h2 id="이미지-흑백으로-열기"><a class="markdownIt-Anchor" href="#이미지-흑백으로-열기"></a> 이미지 흑백으로 열기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">image_pil = Image.open(path).convert(<span class="string">"L"</span>)</span><br><span class="line">image_bw = np.array(image_pil)</span><br><span class="line"></span><br><span class="line">image_bw.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">300</span>, <span class="number">400</span>)</span><br></pre></td></tr></table></figure><h2 id="흑백-이미지-열기"><a class="markdownIt-Anchor" href="#흑백-이미지-열기"></a> 흑백 이미지 열기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(image_bw, <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/image/3.png" alt="" /></p><h3 id="다른-색상으로-cmap-표현하기"><a class="markdownIt-Anchor" href="#다른-색상으로-cmap-표현하기"></a> 다른 색상으로 cmap 표현하기</h3><h3 id="gray-scale"><a class="markdownIt-Anchor" href="#gray-scale"></a> gray scale</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(image_bw, <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/image/3.png" alt="" /></p><h3 id="rdbured-and-blue"><a class="markdownIt-Anchor" href="#rdbured-and-blue"></a> RdBu(Red and Blue)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(image_bw, <span class="string">'RdBu'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/image/4.png" alt="" /></p><h3 id="jet"><a class="markdownIt-Anchor" href="#jet"></a> jet</h3><p>색상 값이 높을수록 빨간색, 낮을수록 파란색으로 표현한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(image_bw, <span class="string">'jet'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/image/5.png" alt="" /></p><h2 id="colorbar-추가하기"><a class="markdownIt-Anchor" href="#colorbar-추가하기"></a> Colorbar 추가하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(image_bw, <span class="string">'jet'</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/image/6.png" alt="" /></p><h2 id="이미지-설정"><a class="markdownIt-Anchor" href="#이미지-설정"></a> 이미지 설정</h2><p>이미지 보기 사이즈를 조절한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">plt.imshow(image)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/image/7.png" alt="" /></p><h2 id="이미지에-제목-추가"><a class="markdownIt-Anchor" href="#이미지에-제목-추가"></a> 이미지에 제목 추가</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.title(<span class="string">'Dog'</span>)</span><br><span class="line">plt.imshow(image)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/image/8.png" alt="" /></p><h2 id="두-번째-이미지-열기"><a class="markdownIt-Anchor" href="#두-번째-이미지-열기"></a> 두 번째 이미지 열기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat_path = <span class="string">'images/cat.jpg'</span></span><br><span class="line"></span><br><span class="line">cat_pil = Image.open(cat_path)</span><br><span class="line">cat_image = np.array(cat_pil)</span><br><span class="line"></span><br><span class="line">plt.imshow(cat_image)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/image/9.png" alt="" /></p><h2 id="두-번째-이미지를-첫-번째-이미지-모양에-맞추기"><a class="markdownIt-Anchor" href="#두-번째-이미지를-첫-번째-이미지-모양에-맞추기"></a> 두 번째 이미지를 첫 번째 이미지 모양에 맞추기</h2><h3 id="준비"><a class="markdownIt-Anchor" href="#준비"></a> 준비</h3><p>먼저 opencv 패키지를 설치한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install opencv-python</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">dog_image = cv2.resize(image, (<span class="number">400</span>, <span class="number">300</span>))</span><br><span class="line">dog_image.shape, cat_image.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">((<span class="number">300</span>, <span class="number">400</span>, <span class="number">3</span>), (<span class="number">300</span>, <span class="number">400</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="이미지-합치기"><a class="markdownIt-Anchor" href="#이미지-합치기"></a> 이미지 합치기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(dog_image)</span><br><span class="line">plt.imshow(cat_image, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/image/10.png" alt="" /></p><h2 id="subplot"><a class="markdownIt-Anchor" href="#subplot"></a> Subplot</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.imshow(dog_image)</span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.imshow(image_bw, <span class="string">'gray'</span>)</span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.imshow(cat_image)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/image/11.png" alt="" /></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/17/ai-development-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Python] 시각화 기초(그래프)</title>
      <link>http://hgko1207.github.io/2020/07/16/ai-development-5/</link>
      <guid>http://hgko1207.github.io/2020/07/16/ai-development-5/</guid>
      <pubDate>Thu, 16 Jul 2020 09:08:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Python 에서 &lt;strong&gt;matplotlib&lt;/strong&gt; 를 사용하여 시각화하는 방법에 대해 알아보겠다.&lt;/p&gt;
&lt;h2 id=&quot;load-packages&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#load-pack
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Python 에서 <strong>matplotlib</strong> 를 사용하여 시각화하는 방법에 대해 알아보겠다.</p><h2 id="load-packages"><a class="markdownIt-Anchor" href="#load-packages"></a> Load Packages</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h2 id="basic-attributes"><a class="markdownIt-Anchor" href="#basic-attributes"></a> Basic Attributes</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">alpha : 투명도</span><br><span class="line">king : 그래프 종류 <span class="string">'line'</span>, <span class="string">'bar'</span>, <span class="string">'barh'</span>, <span class="string">'kde'</span></span><br><span class="line">logy : Y축에 대해 Log scaling</span><br><span class="line">use_index : 객체의 색인을 눈금 이름으로 사용할지 여부</span><br><span class="line">rot : 눈금 이름 돌리기 (rotating) <span class="number">0</span> ~ <span class="number">360</span></span><br><span class="line">xticks, yticks : X, Y축으로 사용할 값</span><br><span class="line">xlim, ylim : X, Y축의 한계</span><br><span class="line">grid : 축의 그리드를 표현할지 여부</span><br><span class="line"></span><br><span class="line">subplots : 각 column에 독립된 subplot 그리기</span><br><span class="line">sharex, sharey : subplots=<span class="literal">True</span> 이면 같은 X, Y축을 공유하고 눈금과 한계를 연결</span><br><span class="line">figsize : 생성될 그래프의 크기를 tuple로 지정</span><br><span class="line">title : 그래프의 제목 지정</span><br><span class="line">legend : subplot의 범례 지정</span><br><span class="line">sort_columns : column을 알파벳 순서로 그린다.</span><br></pre></td></tr></table></figure><h2 id="matplotlib-사용하기"><a class="markdownIt-Anchor" href="#matplotlib-사용하기"></a> Matplotlib 사용하기</h2><h3 id="점선-그래프-그리기"><a class="markdownIt-Anchor" href="#점선-그래프-그리기"></a> 점선 그래프 그리기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = np.random.randn(<span class="number">50</span>).cumsum()</span><br><span class="line">plt.plot(data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/graph/1.png" alt="" /></p><h3 id="여러-그래프-그릴-준비-하기"><a class="markdownIt-Anchor" href="#여러-그래프-그릴-준비-하기"></a> 여러 그래프 그릴 준비 하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/graph/2.png" alt="" /></p><h3 id="multi-graph-그리기"><a class="markdownIt-Anchor" href="#multi-graph-그리기"></a> Multi Graph 그리기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hist_data = np.random.randn(<span class="number">100</span>)</span><br><span class="line">scat_data = np.arange(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(data)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.hist(hist_data, bins=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">plt.scatter(scat_data, np.arange(<span class="number">30</span>) + <span class="number">3</span> * np.random.randn(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/graph/3.png" alt="" /></p><h3 id="그래프-옵션"><a class="markdownIt-Anchor" href="#그래프-옵션"></a> 그래프 옵션</h3><p>그래프를 그릴 때 표시 되는 색이나 마커 패턴을 바꾸는 것을 확인한다.</p><ul><li>색상: r(빨간색), g(초록색), b(파란색), C(청록색), y(노란색), k(검은색), w(흰색)</li><li>마커: o(원), v(역삼각형), ^(삼각형), s(네모), +(플러스), .(점)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(data, <span class="string">'go'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/graph/4.png" alt="" /></p><h3 id="그래프-사이즈-조절"><a class="markdownIt-Anchor" href="#그래프-사이즈-조절"></a> 그래프 사이즈 조절</h3><p>plt.figure 안에 figsize를 이용하여 가로, 세로 길이 조절 가능하다. (inch 단위)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">plt.plot(data, <span class="string">'k+'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/graph/5.png" alt="" /></p><p>여러 그래프 그리고 그에 대한 크기 조절을 한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 맨 위에 있어야 한다.</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(data)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.hist(hist_data, bins=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">plt.scatter(scat_data, np.arange(<span class="number">30</span>) + <span class="number">3</span> * np.random.randn(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/graph/6.png" alt="" /></p><h3 id="그래프-겹치기와-legend-표시"><a class="markdownIt-Anchor" href="#그래프-겹치기와-legend-표시"></a> 그래프 겹치기와 legend 표시</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = np.random.randn(<span class="number">30</span>).cumsum()</span><br><span class="line"></span><br><span class="line">plt.plot(data, <span class="string">'k--'</span>, label=<span class="string">'Default'</span>)</span><br><span class="line">plt.plot(data, <span class="string">'k-'</span>, drawstyle=<span class="string">'steps-post'</span>, label=<span class="string">'steps-post'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/graph/7.png" alt="" /></p><h3 id="이름-달기"><a class="markdownIt-Anchor" href="#이름-달기"></a> 이름 달기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(np.random.randn(<span class="number">1000</span>).cumsum())</span><br><span class="line">plt.title(<span class="string">'Random Graph'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Stages'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Values'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/graph/8.png" alt="" /></p><h3 id="종합"><a class="markdownIt-Anchor" href="#종합"></a> 종합</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.title(<span class="string">'Graph'</span>)</span><br><span class="line">plt.plot(np.random.randn(<span class="number">500</span>).cumsum(), <span class="string">'k^'</span>, label=<span class="string">'one'</span>)</span><br><span class="line">plt.plot(np.random.randn(<span class="number">500</span>).cumsum(), <span class="string">'b.'</span>, label=<span class="string">'two'</span>)</span><br><span class="line">plt.plot(np.random.randn(<span class="number">500</span>).cumsum(), <span class="string">'r'</span>, label=<span class="string">'three'</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ai/graph/9.png" alt="" /></p><h3 id="그래프-저장하기"><a class="markdownIt-Anchor" href="#그래프-저장하기"></a> 그래프 저장하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 현재 작업 위치로 저장한다.</span></span><br><span class="line">plt.savefig(<span class="string">'saved_graph.svg'</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/16/ai-development-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Python] Numpy 기초(3)</title>
      <link>http://hgko1207.github.io/2020/07/09/ai-development-4/</link>
      <guid>http://hgko1207.github.io/2020/07/09/ai-development-4/</guid>
      <pubDate>Thu, 09 Jul 2020 07:16:50 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;zeros&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#zeros&quot;&gt;&lt;/a&gt; zeros&lt;/h2&gt;
&lt;p&gt;0으로 채워진 numpy 배열을 만든다.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;ta
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="zeros"><a class="markdownIt-Anchor" href="#zeros"></a> zeros</h2><p>0으로 채워진 numpy 배열을 만든다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">np.zeros([<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]])</span><br></pre></td></tr></table></figure><h2 id="ones"><a class="markdownIt-Anchor" href="#ones"></a> ones</h2><p>1로 채워진 numpy 배열을 만든다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">np.ones([<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure><h2 id="arange"><a class="markdownIt-Anchor" href="#arange"></a> arange</h2><p>하나의 값만 입력하면 1씩 증가하는 1차원 배열을 만든다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><p>두 개의 인자를 넣으면 입력한 값의 범위만큼 배열을 만든다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">4</span>, <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br></pre></td></tr></table></figure><h3 id="reshape"><a class="markdownIt-Anchor" href="#reshape"></a> reshape</h3><p>1차원 배열의 차원 수를 바꿀때 사용된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure><h2 id="index"><a class="markdownIt-Anchor" href="#index"></a> Index</h2><p>기본적으로 python 에서 쓰는 방식과 동일하다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">arr[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><h2 id="slicing"><a class="markdownIt-Anchor" href="#slicing"></a> Slicing</h2><p>다차원 배열의 원소 중 복수 개를 접근하기 위해 사용한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">arr[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">1</span>:, <span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure><h3 id="boolean-indexing"><a class="markdownIt-Anchor" href="#boolean-indexing"></a> Boolean Indexing</h3><p>원하는 행 또는 열의 값만 얻을 수 있고, 값들을 변경할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data = np.random.randn(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">data &lt;= <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[<span class="number">-0.43152818</span>, <span class="number">-2.40848595</span>, <span class="number">-0.00309727</span>],</span><br><span class="line">       [ <span class="number">0.74972847</span>,  <span class="number">0.18525482</span>, <span class="number">-0.39854904</span>],</span><br><span class="line">       [ <span class="number">1.09053126</span>,  <span class="number">0.32096086</span>,  <span class="number">0.31703319</span>]])</span><br><span class="line"></span><br><span class="line">array([[ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">       [<span class="literal">False</span>, <span class="literal">False</span>,  <span class="literal">True</span>],</span><br><span class="line">       [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data[data &lt;= <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([<span class="number">-0.43152818</span>, <span class="number">-2.40848595</span>, <span class="number">-0.00309727</span>, <span class="number">-0.39854904</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data[data &lt;= <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[<span class="number">1.</span>        , <span class="number">1.</span>        , <span class="number">1.</span>        ],</span><br><span class="line">       [<span class="number">0.74972847</span>, <span class="number">0.18525482</span>, <span class="number">1.</span>        ],</span><br><span class="line">       [<span class="number">1.09053126</span>, <span class="number">0.32096086</span>, <span class="number">0.31703319</span>]])</span><br></pre></td></tr></table></figure><h2 id="broadcast"><a class="markdownIt-Anchor" href="#broadcast"></a> Broadcast</h2><p>연산 하려는 서로 다른 두 개의 행렬의 shape가 같지 않고, 한쪽의 차원이라도 같거나 또는 값의 갯수가 한 개 일 때 이를 여러 복사를 하여 연산한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">arr + <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],</span><br><span class="line">       [ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],</span><br><span class="line">       [ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr * <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">3</span>,  <span class="number">6</span>],</span><br><span class="line">       [ <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>],</span><br><span class="line">       [<span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr + np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[ <span class="number">1</span>,  <span class="number">3</span>,  <span class="number">5</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">6</span>,  <span class="number">8</span>],</span><br><span class="line">       [ <span class="number">7</span>,  <span class="number">9</span>, <span class="number">11</span>]])</span><br></pre></td></tr></table></figure><h2 id="math-function"><a class="markdownIt-Anchor" href="#math-function"></a> Math Function</h2><p>배열 연산에 대해 여러가지 예제다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr + <span class="number">5</span></span><br><span class="line">arr * <span class="number">5</span></span><br><span class="line">arr + arr</span><br><span class="line"></span><br><span class="line">np.add(arr, <span class="number">1</span>)</span><br><span class="line">np.multiply(arr, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">np.sum(arr)</span><br><span class="line">np.sum(arr + arr_2)</span><br><span class="line">np.sum(arr, <span class="number">0</span>) <span class="comment"># 0차원 기준으로 더해서 배열을 만든다.</span></span><br><span class="line"></span><br><span class="line">np.max(arr)</span><br><span class="line">np.max(arr, <span class="number">0</span>) <span class="comment"># 0차원에서 가장 큰 값들을 배열로 만든다.</span></span><br><span class="line"></span><br><span class="line">np.min(arr)</span><br><span class="line"></span><br><span class="line">np.mean(arr)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line">np.argmax(arr) <span class="comment"># 가장 큰 수의 index값을 리턴한다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line">np.argmin(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>])</span><br><span class="line">np.unique(arr) <span class="comment"># 유니크한 값들을 리턴한다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/09/ai-development-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Python] Numpy 기초(2)</title>
      <link>http://hgko1207.github.io/2020/07/02/ai-development-3/</link>
      <guid>http://hgko1207.github.io/2020/07/02/ai-development-3/</guid>
      <pubDate>Thu, 02 Jul 2020 01:36:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Numpy&lt;/strong&gt; 기초에 대해 다뤄보겠다.&lt;/p&gt;
&lt;h2 id=&quot;load-package&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#load-package&quot;&gt;&lt;/a&gt; Load Package&lt;/h2&gt;
&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Numpy</strong> 기초에 대해 다뤄보겠다.</p><h2 id="load-package"><a class="markdownIt-Anchor" href="#load-package"></a> Load Package</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h2 id="data-type"><a class="markdownIt-Anchor" href="#data-type"></a> data type</h2><p>배열의 dtype 을 봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line">arr.dtype</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">dtype(<span class="string">'int32'</span>)</span><br></pre></td></tr></table></figure><p><code>.astype()</code> 으로 datatype 을 변환 가능하다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr = arr.astype(<span class="string">'float32'</span>)</span><br><span class="line">arr = arr.astype(np.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>]], dtype=float32)</span><br></pre></td></tr></table></figure><p>len(arr.shape) 를 통해서 차원이 갯수를 확인할 수 있지만, 다음과 같이 ndim 을 통해 차원 수를 확인하다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">len(arr.shape)</span><br><span class="line">arr.ndim</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="reshape"><a class="markdownIt-Anchor" href="#reshape"></a> Reshape</h2><p>차원을 바꾼다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = arr.reshape([<span class="number">1</span>, <span class="number">6</span>])</span><br><span class="line">arr.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>차원을 몇 개로 나눠야할지 모를 경우 -1 을 활용하다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = arr.reshape(<span class="number">-1</span>)</span><br><span class="line">arr.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">6</span>,)</span><br></pre></td></tr></table></figure><p>3차원으로 늘리는 방법이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr = np.random.randn(<span class="number">8</span>, <span class="number">8</span>) <span class="comment"># (8, 8)</span></span><br><span class="line">arr = arr.reshape([<span class="number">32</span>, <span class="number">2</span>]) <span class="comment"># (32, 2)</span></span><br><span class="line">arr = arr.reshape([<span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">32</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="ravel"><a class="markdownIt-Anchor" href="#ravel"></a> Ravel</h2><p>배열을 1차원으로 바꿔준다. 나중에 배열 layer를 flatten 할 때 같은 기능이라 생각하면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = arr.ravel()</span><br><span class="line">arr.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">64</span>,)</span><br></pre></td></tr></table></figure><h2 id="npexpand_dims"><a class="markdownIt-Anchor" href="#npexpand_dims"></a> np.expand_dims()</h2><p>안의 값은 유지하되 차원 수를 늘리고 싶을 때 사용한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.expand_dims(arr, <span class="number">0</span>)</span><br><span class="line">arr.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">64</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/02/ai-development-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Python] Numpy 기초(1)</title>
      <link>http://hgko1207.github.io/2020/07/01/ai-development-2/</link>
      <guid>http://hgko1207.github.io/2020/07/01/ai-development-2/</guid>
      <pubDate>Wed, 01 Jul 2020 08:11:52 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;numpy-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#numpy-란&quot;&gt;&lt;/a&gt; Numpy 란&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Numpy는 C언어로 구현된 파이썬 라이브러리로써, 고성능의 수치계산을 위해 제
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="numpy-란"><a class="markdownIt-Anchor" href="#numpy-란"></a> Numpy 란</h2><blockquote><p>Numpy는 C언어로 구현된 파이썬 라이브러리로써, 고성능의 수치계산을 위해 제작되었습니다. Numerical Python의 줄임말이기도 한 Numpy는 벡터 및 행렬 연산에 있어서 매우 편리한 기능을 제공합니다.<br />출처: <a href="https://doorbw.tistory.com/171" target="_blank" rel="noopener">Tigercow.Door</a></p></blockquote><p><strong>Numpy</strong>는 고차원적인 데이터를 다루기 쉽게 만들어져 있어 딥러닝을 하게 되면 많이 접하게 됩니다.<br />이제 Numpy 사용방법에 대해 알아보겠습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Numpy 사용하기</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="0차원"><a class="markdownIt-Anchor" href="#0차원"></a> 0차원</h3><p>numpy array는 1 또는 5, 10와 같이 숫자 데이터를 array화 해줄 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array(<span class="number">5</span>);</span><br><span class="line">arr.shape <span class="comment"># 배열의 형태(크기)를 나타냅니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">() <span class="comment"># shape가 아무것도 없는 것으로 나옵니다.</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.ndim <span class="comment"># 배열의 차원을 나타냅니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="number">0</span> <span class="comment"># 0차원을 의미합니다.</span></span><br></pre></td></tr></table></figure><h3 id="1차원"><a class="markdownIt-Anchor" href="#1차원"></a> 1차원</h3><ul><li>숫자가 10과 같이 하나만 들어간다고 해도 [] 리스트를 한번 씌우게 되면 차원이 생깁니다.</li><li>이때는 1차원이 되는데 numpy 에서 shape를 표현할 때 (1)이 아닌 (1,) 형식으로 표현하게 됩니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([<span class="number">5</span>])</span><br><span class="line">arr.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><p>(3,)에서 3은 3이라는 값이 들어간 것이 아닌 1차원에 3개의 값이 들어갔다는 의미입니다.</p><h3 id="2차원"><a class="markdownIt-Anchor" href="#2차원"></a> 2차원</h3><p>대괄호를 추가적으로 씌우면 차원이 추가적으로 하나 생깁니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line">arr.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>다음의 shape를 보면 차원이 2개 있고, 각 차원 마다 각각 3개의 값이 들어있다는 의미입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line">arr.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>참고로 0차원 숫자에 대괄호를 2번 씌우면 두 개의 차원이 됩니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">10</span>]])</span><br><span class="line">arr.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="다차원"><a class="markdownIt-Anchor" href="#다차원"></a> 다차원</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]], [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]], [[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]], [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">         [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">         [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">         [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">         [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       [[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">         [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">         [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">         [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">         [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]]])</span><br></pre></td></tr></table></figure><p>4차원의 배열을 나타냅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/07/01/ai-development-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>인공지능 개발준비 - 개발환경 구축(Windows)</title>
      <link>http://hgko1207.github.io/2020/06/30/ai-development-1/</link>
      <guid>http://hgko1207.github.io/2020/06/30/ai-development-1/</guid>
      <pubDate>Tue, 30 Jun 2020 02:34:28 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;인공지능(AI)을 통해 개발을 하기 위해 개발 도구들을 설치한다.&lt;/p&gt;
&lt;h2 id=&quot;1-anaconda-설치&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-anaconda-설치&quot;&gt;&lt;/a&gt; 1. Anaconda 설치&lt;/h
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>인공지능(AI)을 통해 개발을 하기 위해 개발 도구들을 설치한다.</p><h2 id="1-anaconda-설치"><a class="markdownIt-Anchor" href="#1-anaconda-설치"></a> 1. Anaconda 설치</h2><p>Anaconda는 여러가지 수학 및 과학 패키지들을 기본적으로 포함하고 있는 Python 배포판이다. 그래서 머신러닝, 딥러닝, 데이터 분석에서 사용을 하려고 한다면 Anaconda를 통해 설치하는 것이 좋다.</p><p><a href="https://www.anaconda.com/products/individual" target="_blank" rel="noopener">Anaconda Download</a> 사이트에 접속하여 아래로 내려가 보면 다운로드 화면이 보인다.<br />현재 Windows 운영체제에 맞게 선택하여 다운로드를 한다.</p><p><img src="/images/ai/1.PNG" alt="" /></p><p>다운로드가 완료되면 설치를 진행한다.</p><p><code>Next</code> 버튼을 클릭하다가 아래 그림처럼 <code>All Users</code>를 선택한다.<br />간혹 Windows에서 사용자의 계정을 한글로 만들었을 경우 설치할 때 또는 개발할 때 에러가 날 수 있기 때문에 선택한다.</p><p><img src="/images/ai/2.png" alt="" /></p><p>아래 그림처럼 체크박스도 선택을 하여 환경변수 설정이 되도록 한다.</p><p><img src="/images/ai/3.png" alt="" /></p><p><code>Install</code> 버튼을 클릭하면 설치가 된다.</p><p>설치가 잘 되었나 확인하려면 <strong>workspace</strong> 폴더에서 커맨드 창을 열고 다음 명령어를 실행한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> c:\workspace&gt; jupyter notebook</span></span><br></pre></td></tr></table></figure><p>Jupyter Notebook 페이지가 실행되고 Python 코드를 작성할 수 있다.</p><p><img src="/images/ai/4.png" alt="" /></p><h2 id="2-tensorflow-설치"><a class="markdownIt-Anchor" href="#2-tensorflow-설치"></a> 2. TensorFlow 설치</h2><blockquote><p>TensorFlow는 머신러닝을 위한 엔드 투 엔드 오픈소스 플랫폼입니다. 도구, 라이브러리, 커뮤니티 리소스로 구성된 포괄적이고 유연한 생태계를 통해 연구원들은 ML에서 첨단 기술을 구현할 수 있고 개발자들은 ML이 접목된 애플리케이션을 손쉽게 빌드 및 배포할 수 있습니다.<br />출처 : <a href="https://www.tensorflow.org/?hl=ko" target="_blank" rel="noopener">https://www.tensorflow.org/?hl=ko</a></p></blockquote><p><a href="https://www.tensorflow.org/install" target="_blank" rel="noopener">TensorFlow 2 설치</a> 사이트에 접속한다.<br />설치 가이드에 따라 설치를 한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install tensorflow</span></span><br></pre></td></tr></table></figure><p>설치가 완료되면 Jupyter Notebook에서 import를 하여 확인한다.</p><p><img src="/images/ai/5.png" alt="" /></p><h2 id="3-pytorch-설치"><a class="markdownIt-Anchor" href="#3-pytorch-설치"></a> 3. Pytorch 설치</h2><blockquote><p>PyTorch는 Python을 위한 오픈소스 머신 러닝 라이브러리입니다. Torch를 기반으로 하며, 자연어 처리와 같은 애플리케이션을 위해 사용됩니다.<br />출처 : <a href="https://ko.wikipedia.org/wiki/PyTorch" target="_blank" rel="noopener">위키백과</a></p></blockquote><p><a href="https://pytorch.org/" target="_blank" rel="noopener">Pytorch</a> 사이트에 접속합니다. 아래로 내려가 보면 여러가지 설정을 하여 설치하는 방법을 안내해준다.</p><p>Windows 버전이기 때문에 아래 그림 처럼 설정을 한다.<br />만약에 GPU를 사용할 수 있으면 CUDA 버전에 맞게 설정하면 된다.</p><p><img src="/images/ai/6.png" alt="" /></p><p>설정이 완료되었으면 <strong>Run this Command</strong> 칸의 내용을 복사하여 Command 창에 붙여넣기 하고 실행을 한다.</p><p><img src="/images/ai/7.png" alt="" /></p><p>TensorFlow와 마찬가지로 Jupyter Notebook에서 import를 하여 설치가 완료되었는지 확인한다.</p><p><img src="/images/ai/8.png" alt="" /></p><p><strong>AI 개발 준비가 모두 완료 되었습니다.</strong></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/06/30/ai-development-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++] string을 이용한 File Path 분리 방법</title>
      <link>http://hgko1207.github.io/2020/06/30/cpp-coding-1/</link>
      <guid>http://hgko1207.github.io/2020/06/30/cpp-coding-1/</guid>
      <pubDate>Tue, 30 Jun 2020 02:05:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;개요&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#개요&quot;&gt;&lt;/a&gt; 개요&lt;/h2&gt;
&lt;p&gt;string 형식의 파일 경로를 이용하여 File Path와 Name을 분리한다.&lt;/p&gt;
&lt;h2 id=&quot;1-file-path와-f
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="개요"><a class="markdownIt-Anchor" href="#개요"></a> 개요</h2><p>string 형식의 파일 경로를 이용하여 File Path와 Name을 분리한다.</p><h2 id="1-file-path와-file-name-분리"><a class="markdownIt-Anchor" href="#1-file-path와-file-name-분리"></a> 1) File Path와 File Name 분리</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> <span class="keyword">using</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> pullPath = <span class="string">"c:\\test\\test.tif"</span>;</span><br><span class="line">  <span class="keyword">int</span> find = pullPath.rfind(<span class="string">"\\"</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">string</span> filePath = pullPath.substr(<span class="number">0</span>, find);</span><br><span class="line">  <span class="built_in">string</span> fileName = pullPath.substr(find, pullPath.length() - find);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Folder Path : "</span> &lt;&lt; filePath &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"File Name : "</span> &lt;&lt; fileName &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Folder Path : c:\\test</span><br><span class="line">File Name : test.tif</span><br></pre></td></tr></table></figure><h2 id="2-파일-확장자-바꾸기"><a class="markdownIt-Anchor" href="#2-파일-확장자-바꾸기"></a> 2) 파일 확장자 바꾸기</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> <span class="keyword">using</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> filePath = <span class="string">"c:\\test\\test.tif"</span>;</span><br><span class="line">  <span class="built_in">string</span> modExt = <span class="string">"ntf"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> ext = filePath.rfind(<span class="string">"tif"</span>);</span><br><span class="line">  <span class="keyword">int</span> name = filePath.rfind(<span class="string">"\\"</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">string</span> dstPath = filePath.substr(<span class="number">0</span>, name);</span><br><span class="line">  dstPath += filePath.substr(name, ext - name);</span><br><span class="line">  dstPath += modExt;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Input Path : "</span> &lt;&lt; filePath &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Output Path : "</span> &lt;&lt; dstPath &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="결과-2"><a class="markdownIt-Anchor" href="#결과-2"></a> 결과</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input Path : c:\\test\\test.tif</span><br><span class="line">Output Path : c:\\test\\test.ntf</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/06/30/cpp-coding-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo Quick Start</title>
      <link>http://hgko1207.github.io/2020/06/29/hello-world/</link>
      <guid>http://hgko1207.github.io/2020/06/29/hello-world/</guid>
      <pubDate>Mon, 29 Jun 2020 06:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new <span class="string">"My New Post"</span></span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/06/29/hello-world/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Git] 이클립스에서 Git Repository 연동</title>
      <link>http://hgko1207.github.io/2020/05/18/eclipse-git-clone/</link>
      <guid>http://hgko1207.github.io/2020/05/18/eclipse-git-clone/</guid>
      <pubDate>Mon, 18 May 2020 01:48:33 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;이클립스와 Git 원격저장소 연동하는 방법과 프로젝트를 내려받는 방법에 대해 알아보도록 하겠다.&lt;/p&gt;
&lt;h2 id=&quot;1-원격저장소-주소-복사&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-원격저장소-주소-복사&quot;&gt;&lt;/a&gt; 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>이클립스와 Git 원격저장소 연동하는 방법과 프로젝트를 내려받는 방법에 대해 알아보도록 하겠다.</p><h2 id="1-원격저장소-주소-복사"><a class="markdownIt-Anchor" href="#1-원격저장소-주소-복사"></a> 1. 원격저장소 주소 복사</h2><p>먼저 github 사이트에서 생성한 저장소의 주소를 복사한다.</p><img width="100%" src="/images/git/clone/1.png" alt="" title="" ><h2 id="2-이클립스-실행"><a class="markdownIt-Anchor" href="#2-이클립스-실행"></a> 2. 이클립스 실행</h2><p>이클립스를 실행하고 오른쪽 위에 퍼스펙티브 버튼을 클릭하면 창이 보인다.</p><img width="100%" src="/images/git/clone/2.png" alt="" title="" ><p>Git을 선택하고 <strong>[OK]</strong> 버튼을 눌러 활성화 시킨다. Git 퍼스펙티브가 추가된 것을 볼 수 있으며 아이콘을 클릭하면 아래 그림처럼 기본화면이 변경된다.</p><img width="100%" src="/images/git/clone/3.png" alt="" title="" ><h2 id="3-원격저장소-연동"><a class="markdownIt-Anchor" href="#3-원격저장소-연동"></a> 3. 원격저장소 연동</h2><p>Git 퍼스펙티브 화면에서 <strong>[Clone a Git repository]</strong> 를 클릭한다.</p><img width="100%" src="/images/git/clone/4.png" alt="" title="" ><p>Clone Git Repository 창의 첫 번째 빨간 박스에 앞에서 복사해둔 Git 원격 저장소 주소를 URI 칸에 복사하면 Host, Repository path 칸에 자동으로 입력된다. 그 밑의 빨간 박스에는 깃허브 아이디와 패스워드를 입력하고 <strong>[Next]</strong> 버튼을 클릭한다.</p><img width="75%" src="/images/git/clone/5.png" alt="" title="" ><p>Branch 를 선택하는 화면이 보이는데 Branch를 만들지 않았으므로 그냥 <strong>[Next]</strong> 버튼을 클릭한다.</p><img width="75%" src="/images/git/clone/6.png" alt="" title="" ><p>원격 저장소와 연결할 로컬 저장소를 설정한 뒤 <strong>[Finish]</strong> 버튼을 클릭한다.</p><img width="75%" src="/images/git/clone/7.png" alt="" title="" ><p>원격저장소가 연동되면 아래 그림과 같이 프로젝트를 확인할 수 있다.</p><img width="100%" src="/images/git/clone/8.png" alt="" title="" ><h2 id="4-프로젝트-내려받기"><a class="markdownIt-Anchor" href="#4-프로젝트-내려받기"></a> 4. 프로젝트 내려받기</h2><p>연동된 원격저장소에서 <strong>Working Tree -&gt; 프로젝트 선택 -&gt; 우클릭 -&gt; Import Projects 선택</strong>을 한다.</p><img width="100%" src="/images/git/clone/9.png" alt="" title="" ><p>Import Projects 창에서 내려받아지는 경로를 확인 후 <strong>[Finish]</strong> 버튼을 클릭한다.</p><img width="100%" src="/images/git/clone/10.png" alt="" title="" ><p>내려받기가 완료되면 프로젝트가 생성된다.</p><img width="100%" src="/images/git/clone/11.png" alt="" title="" >]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/05/18/eclipse-git-clone/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hyperspectral(초분광) 센서</title>
      <link>http://hgko1207.github.io/2020/05/11/satellite-hyperspectral/</link>
      <guid>http://hgko1207.github.io/2020/05/11/satellite-hyperspectral/</guid>
      <pubDate>Mon, 11 May 2020 01:17:10 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;hyperspectral-특징&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hyperspectral-특징&quot;&gt;&lt;/a&gt; Hyperspectral 특징&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/hyperspectra
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="hyperspectral-특징"><a class="markdownIt-Anchor" href="#hyperspectral-특징"></a> Hyperspectral 특징</h2><p><img src="/images/hyperspectral/1.png" alt="" /></p><ul><li>초분광 영상의 픽셀 분광은 하나의 표면에 대한 다중분광픽셀 스펙트럼에서 이용할 수 있는 것보다 훨씬 많은 정보 제공 가능하다.</li></ul><h2 id="hyperspectral-원격탐사-특징"><a class="markdownIt-Anchor" href="#hyperspectral-원격탐사-특징"></a> Hyperspectral 원격탐사 특징</h2><ul><li>입사되는 빛을 분광시켜 영상의 각 화소에 해당하는 지표물의 수십에서 수백 개의 분광 정보를 취득하고 그 <span style="color:#5B9BD5">개체의 정보를 이미지 형태로 확보 가능</span></li><li>물질 고유의 광학적 성질과 물질의 흡수 및 반사 특징을 분석함으로써 <span style="color:#5B9BD5">토지피복, 식생, 그리고 수질 등의 식별</span>에 주로 이용된다.</li><li>스펙트럼 영상은 두 개의 공간적 차원과 하나의 스펙트럼 크기로 구성된 <span style="color:#5B9BD5">3차원 (x, y, λ)으로 나타남</span>(x, y : 공간적 2차원 / λ : 스펙트럼 크기)</li><li>2차원 (2-D) 검출기에서 각 화소에 스펙트럼 정보를 수집하여 초분광 큐브로 알려진 공간 및 스펙트럼 정보인 3차원(3-D) 데이터를 형성</li></ul><p><img src="/images/hyperspectral/2.png" alt="" /></p><h2 id="hyperspectral-활용-위성"><a class="markdownIt-Anchor" href="#hyperspectral-활용-위성"></a> Hyperspectral 활용 위성</h2><p><img src="/images/hyperspectral/3.png" alt="" /></p><h3 id="terraaquamodis"><a class="markdownIt-Anchor" href="#terraaquamodis"></a> Terra/Aqua(MODIS)</h3><p><img src="/images/hyperspectral/4.png" alt="" /><br /><img src="/images/hyperspectral/5.png" alt="" /></p><h3 id="stsat-3comis"><a class="markdownIt-Anchor" href="#stsat-3comis"></a> STSat-3(COMIS)</h3><p><img src="/images/hyperspectral/6.png" alt="" /></p><h3 id="nmp-eo-1hyperion"><a class="markdownIt-Anchor" href="#nmp-eo-1hyperion"></a> NMP-EO-1(Hyperion)</h3><p><img src="/images/hyperspectral/7.png" alt="" /></p><h3 id="nmp-eo-1hyperion-2"><a class="markdownIt-Anchor" href="#nmp-eo-1hyperion-2"></a> NMP-EO-1(Hyperion)</h3><p><img src="/images/hyperspectral/8.png" alt="" /></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/05/11/satellite-hyperspectral/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[MySQL] Query</title>
      <link>http://hgko1207.github.io/2020/05/07/mysql-query/</link>
      <guid>http://hgko1207.github.io/2020/05/07/mysql-query/</guid>
      <pubDate>Thu, 07 May 2020 02:17:14 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;select&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#select&quot;&gt;&lt;/a&gt; SELECT&lt;/h2&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="select"><a class="markdownIt-Anchor" href="#select"></a> SELECT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 테이블명</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 테이블명 <span class="keyword">WHERE</span> 조건</span><br><span class="line"><span class="keyword">SELECT</span> 필드명<span class="number">1</span>, 필드명<span class="number">2</span>, ... <span class="keyword">FROM</span> 테이블명 <span class="keyword">WHERE</span> 조건</span><br></pre></td></tr></table></figure><h2 id="insert"><a class="markdownIt-Anchor" href="#insert"></a> INSERT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 테이블명(필드명<span class="number">1</span>, 필드명<span class="number">2</span>, 필드명<span class="number">3</span>, ...) <span class="keyword">VALUES</span> (데이터값<span class="number">1</span>, 데이터값<span class="number">2</span>, 데이터값<span class="number">3</span>, ...)</span><br><span class="line">또는</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 테이블명 <span class="keyword">VALUES</span> (데이터값<span class="number">1</span>, 데이터값<span class="number">2</span>, 데이터값<span class="number">3</span>, ...)</span><br></pre></td></tr></table></figure><h2 id="update"><a class="markdownIt-Anchor" href="#update"></a> UPDATE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 테이블명 <span class="keyword">SET</span> 필드명<span class="number">1</span>=데이터값<span class="number">1</span>, 필드명<span class="number">2</span>=데이터값<span class="number">2</span>, ... <span class="keyword">WHERE</span> 필드명=데이터값</span><br></pre></td></tr></table></figure><h2 id="delete"><a class="markdownIt-Anchor" href="#delete"></a> DELETE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 테이블명 <span class="keyword">WHERE</span> 필드명=데이터값</span><br></pre></td></tr></table></figure><h2 id="중복-데이터-조회"><a class="markdownIt-Anchor" href="#중복-데이터-조회"></a> 중복 데이터 조회</h2><p>중복된 것 모두 조회</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 필드명, <span class="keyword">count</span>(*) <span class="keyword">FROM</span> 테이블명 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 필드명</span><br></pre></td></tr></table></figure><p>중복된 갯수가 n개 이상인 것</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 필드명, <span class="keyword">count</span>(*) <span class="keyword">as</span> 변수명 <span class="keyword">FROM</span> 테이블명 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 필드명 <span class="keyword">HAVING</span> 변수명 &gt; n;</span><br><span class="line">또는</span><br><span class="line"><span class="keyword">SELECT</span> 필드명, <span class="keyword">count</span>(*) <span class="keyword">FROM</span> 테이블명 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 필드명 <span class="keyword">HAVING</span> <span class="keyword">count</span>(*) &gt; n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> 필드명, <span class="keyword">count</span>(*) <span class="keyword">as</span> 변수명 <span class="keyword">FROM</span> 테이블명 <span class="keyword">WHERE</span> 조건 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 필드명 <span class="keyword">HAVING</span> 변수명 &gt; n;</span><br></pre></td></tr></table></figure><p>중복 데이터 추출(WHERE 절의 IN 사용)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 테이블명 <span class="keyword">WHERE</span> column1 <span class="keyword">IN</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> column1 <span class="keyword">FROM</span> 테이블명 <span class="keyword">WHERE</span> 조건 <span class="keyword">GROUP</span> <span class="keyword">BY</span> column1 <span class="keyword">HAVING</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="auto_increment-초기화"><a class="markdownIt-Anchor" href="#auto_increment-초기화"></a> AUTO_INCREMENT 초기화</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 테이블명 AUTO_INCREMENT = 시작할 값;</span><br></pre></td></tr></table></figure><h2 id="날짜"><a class="markdownIt-Anchor" href="#날짜"></a> 날짜</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 테이블명 <span class="keyword">WHERE</span> 필드명 &gt;= 시작날짜</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 테이블명 <span class="keyword">WHERE</span> 필드명 <span class="keyword">BETWEEN</span> 시작날짜 <span class="keyword">and</span> 종료날짜</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/05/07/mysql-query/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Clean Code</title>
      <link>http://hgko1207.github.io/2020/04/28/book-cleancode/</link>
      <guid>http://hgko1207.github.io/2020/04/28/book-cleancode/</guid>
      <pubDate>Tue, 28 Apr 2020 00:50:27 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;책-정보&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#책-정보&quot;&gt;&lt;/a&gt; 책 정보&lt;/h3&gt;
&lt;img width=&quot;100%&quot; src=&quot;/images/book/clean-code.png&quot; alt=&quot;&quot; title=&quot;클린 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="책-정보"><a class="markdownIt-Anchor" href="#책-정보"></a> 책 정보</h3><img width="100%" src="/images/book/clean-code.png" alt="" title="클린 코드" ><h3 id="책-소개"><a class="markdownIt-Anchor" href="#책-소개"></a> 책 소개</h3><p>애자일 소프트웨어의 혁명적인 패러다임을 제시하는 책이다. 저자 로버트 마틴은 오브젝트 멘토(Object Mentor)의 동료들과 힘을 모아 ‘개발하며’ 클린 코드를 만드는 최상의 애자일 기법을 정제하여『Clean Code 클린 코드』에 담았다. 아주 많은 코드를 읽고 그 코드의 무엇이 옳은지, 그른지 생각하며 전문가로서 자신이 지니는 가치를 돌아보기 위해 꾸준히 노력한다면, 이 책을 통해 여러분의 프로그래밍 실력은 한층 더 높아질 것이다.</p><h3 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h3><p>전부 다 읽어보진 못하였지만 읽다보면 얼마나 잘못하고 있었는지 반성하게 된다. 의미 있는 이름, 좋은 주석 다는 법, 객체와 자료 구조 등 어떻게 깨끗하고 아름다운 코드를 작성할 수 있는지 알려준다. 잘못된 점과 좋은 점을 짚어주기 때문에 내가 짰던 코드와 비교 할 수 있고 17장에는 사례 연구를 만들면서 수집한 휴리스틱과 냄새를 열거한다. 협업을 할 때 필요한 내용들이며, 지금은 중간 개발자로서 신입 개발자를 교육할 때에도 정말 좋은 추천서라고 느껴진다. 책 내용이 많고 글자 수도 많아서 끈기 있게 읽어야 할 것 같다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/28/book-cleancode/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Microwave(극초단파) 센서</title>
      <link>http://hgko1207.github.io/2020/04/27/satellite-microwave/</link>
      <guid>http://hgko1207.github.io/2020/04/27/satellite-microwave/</guid>
      <pubDate>Mon, 27 Apr 2020 00:42:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;microwave-특징&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#microwave-특징&quot;&gt;&lt;/a&gt; Microwave 특징&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;물체들이 방출하는 마이크로웨이브 파를 위성에서 감지하여 원격탐사에
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="microwave-특징"><a class="markdownIt-Anchor" href="#microwave-특징"></a> Microwave 특징</h2><ul><li>물체들이 방출하는 마이크로웨이브 파를 위성에서 감지하여 원격탐사에 활용하는 기술이다.</li><li>마이크로파의 파장 영역은 보통 1mm ~ 1m 이다.</li><li>자연방사 에너지를 관측하는지, 위성에서 Microwave를 쏘아서 되돌아오는 신호를 관측하는지에 따라 <span style="color:#5B9BD5">Passive microwave와 Active microwave</span>로 나눌 수 있다.</li><li>대표적으로 <span style="color:#5B9BD5">SAR, 산란계, 고도계, 복사계</span>로 나눠진다.</li></ul><p><img src="/images/microwave/1.png" alt="" /></p><p><img src="/images/microwave/2.png" alt="" /></p><h2 id="microwave-원격탐사-특징"><a class="markdownIt-Anchor" href="#microwave-원격탐사-특징"></a> Microwave 원격탐사 특징</h2><h3 id="1-passive-vs-active"><a class="markdownIt-Anchor" href="#1-passive-vs-active"></a> 1. Passive vs Active</h3><p><img src="/images/microwave/3.png" alt="" /></p><h3 id="2-센서-특징"><a class="markdownIt-Anchor" href="#2-센서-특징"></a> 2. 센서 특징</h3><p><img src="/images/microwave/4.png" alt="" /></p><h2 id="microwave-활용-위성"><a class="markdownIt-Anchor" href="#microwave-활용-위성"></a> Microwave 활용 위성</h2><p><img src="/images/microwave/5.png" alt="" /></p><h3 id="gcom-w1amsr-2"><a class="markdownIt-Anchor" href="#gcom-w1amsr-2"></a> GCOM-W1(AMSR-2)</h3><p><img src="/images/microwave/6.png" alt="" /></p><h3 id="smapsmap"><a class="markdownIt-Anchor" href="#smapsmap"></a> SMAP(SMAP)</h3><p><img src="/images/microwave/7.png" alt="" /></p><h3 id="noaa-aqua-metopamsu-a"><a class="markdownIt-Anchor" href="#noaa-aqua-metopamsu-a"></a> NOAA, AQUA, Metop(AMSU-A)</h3><p><img src="/images/microwave/8.png" alt="" /></p><h3 id="gpmgmi-gpm-microwave-imager"><a class="markdownIt-Anchor" href="#gpmgmi-gpm-microwave-imager"></a> GPM(GMI, GPM Microwave Imager)</h3><p><img src="/images/microwave/9.png" alt="" /></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/27/satellite-microwave/#disqus_thread</comments>
    </item>
    
    <item>
      <title>IR(적외선) 센서</title>
      <link>http://hgko1207.github.io/2020/04/24/satellite-ir-sensor/</link>
      <guid>http://hgko1207.github.io/2020/04/24/satellite-ir-sensor/</guid>
      <pubDate>Fri, 24 Apr 2020 00:50:14 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;irinfrared-정의&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#irinfrared-정의&quot;&gt;&lt;/a&gt; IR(Infrared) 정의&lt;/h2&gt;
&lt;p&gt;가시광선대의 적색 끝부분에서부터 마이크로파전까지의 전자기파, 가시광
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="irinfrared-정의"><a class="markdownIt-Anchor" href="#irinfrared-정의"></a> IR(Infrared) 정의</h2><p>가시광선대의 적색 끝부분에서부터 마이크로파전까지의 전자기파, 가시광선이나 자외선에 비해 강한 열작용을 가지고 있다.</p><ul><li>파장 대역 : 0.7-1000㎛</li><li>활용 분야 : 소독/멸균, 외과수술 및 종양 제거, 군사적(야간 투시경), 야간 촬영용 카메라</li></ul><h2 id="ir-특징"><a class="markdownIt-Anchor" href="#ir-특징"></a> IR 특징</h2><ul><li>태양빛을 프리즘을 이용하여 스펙트럼으로 분산시킬 때 <span style="color:#5B9BD5">붉은색보다 더 바깥쪽에 위치함</span></li><li>열을 가지는 모든 물체에서 방출 또는 반사되는 특징이 있기 때문에 <span style="color:#5B9BD5">강한 열작용을 가짐</span>(열선이라고도 불림)</li><li><span style="color:#5B9BD5">파장에 따라 지구 대기를 투과하지 못하는 특성이 있어 대기 환경에 민감</span></li></ul><p><img src="/images/ir/1.png" alt="" /></p><p><img src="/images/ir/2.png" alt="" /></p><h2 id="ir-원격탐사의-특징"><a class="markdownIt-Anchor" href="#ir-원격탐사의-특징"></a> IR 원격탐사의 특징</h2><ul><li><span style="color:#5B9BD5">장파장으로 갈수록 물체 고유의 특성이 잘 관측될 수 있음</span></li><li><span style="color:#5B9BD5">야간이나 해무(바다 안개), 옅은 구름이 낀 상황에서도 촬영 가능</span></li><li>해양 및 구름의 온도를 측정하여 <span style="color:#5B9BD5">지구의 열 balance를 측정</span>하고, 해수표면으로부터 방사되어 나오는 <span style="color:#5B9BD5">원적외선을 감지</span>함</li><li><span style="color:#5B9BD5">인접한 물체간의 열적 특성 차이나 잠열 분석이 가능한 정보 제공</span>(공간 분해능 + 열적 분해능)</li><li>센서의 발달과 더불어 온도 해상도는 1K에서 0.3K 정도로 높아짐</li><li>공간 해상도 역시 250m의 해상도를 갖는 것이 개발됨에 따라 large scale에서 small scale의 연구가 가능해짐</li></ul><p><img src="/images/ir/3.png" alt="" /></p><h2 id="ir-활용-위성"><a class="markdownIt-Anchor" href="#ir-활용-위성"></a> IR 활용 위성</h2><p><img src="/images/ir/4.png" alt="" /></p><h3 id="terraaster"><a class="markdownIt-Anchor" href="#terraaster"></a> Terra(ASTER)</h3><p><img src="/images/ir/5.png" alt="" /></p><h3 id="terraaquamodis"><a class="markdownIt-Anchor" href="#terraaquamodis"></a> Terra/Aqua(MODIS)</h3><p><img src="/images/ir/6.png" alt="" /></p><h3 id="landsat-7etm"><a class="markdownIt-Anchor" href="#landsat-7etm"></a> Landsat-7(ETM+)</h3><p><img src="/images/ir/7.png" alt="" /></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/24/satellite-ir-sensor/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Android Studio] 설치 및 주요 기능</title>
      <link>http://hgko1207.github.io/2020/04/21/android-studio/</link>
      <guid>http://hgko1207.github.io/2020/04/21/android-studio/</guid>
      <pubDate>Tue, 21 Apr 2020 00:49:50 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;1-android-studio-다운로드-및-설치&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-android-studio-다운로드-및-설치&quot;&gt;&lt;/a&gt; 1. Android Studio 다운로드 및 설치&lt;/h2&gt;
&lt;p
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="1-android-studio-다운로드-및-설치"><a class="markdownIt-Anchor" href="#1-android-studio-다운로드-및-설치"></a> 1. Android Studio 다운로드 및 설치</h2><p>다운로드 사이트에서 최신 버전의 Android Studio를 다운받아 설치합니다. 현재 최신은 3.6.3 버전이다.</p><p><a href="https://developer.android.com/studio" target="_blank" rel="noopener"><img src="/images/studio/download.png" alt="" /></a></p><p>설치를 완료하고 다음 화면이 오픈되면 이제 개발을 시작할 수 있다.</p><p><img src="/images/studio/start.png" alt="" /></p><h2 id="2-프로젝트-생성"><a class="markdownIt-Anchor" href="#2-프로젝트-생성"></a> 2. 프로젝트 생성</h2><ol><li><strong>Start a new Android Studio Project</strong> 선택</li><li>Slelect a Project Templat<ul><li>Empty Activity 선택</li></ul></li><li>Configure Your Project<ul><li>Name: HelloApp</li><li>Package: com.hgko.helloapp</li><li>Language: Java or Kotlin</li><li>Minimum SDK: API 26: Android 8.0(Oreo)</li></ul></li><li><strong>Finish</strong> 버튼 클릭하면 다음과 같이 프로젝트가 생성된다.</li></ol><p><img src="/images/studio/project.png" alt="" /></p><h2 id="3-실행"><a class="markdownIt-Anchor" href="#3-실행"></a> 3. 실행</h2><h3 id="1-스마트폰-연결-시"><a class="markdownIt-Anchor" href="#1-스마트폰-연결-시"></a> 1) 스마트폰 연결 시</h3><ol><li>스마트폰에서 USB 디버깅 설정<br />설정 &gt; 빌드 번호 6번 터치 -&gt; 개발자 옵션 화성화(메뉴가 보임) &gt; USB 디버깅 활성화 선택</li><li>스마트폰 케이블 연결</li><li>logcat에서 디바이스 연결 확인</li></ol><h3 id="2-가상-디바이스-사용-시"><a class="markdownIt-Anchor" href="#2-가상-디바이스-사용-시"></a> 2) 가상 디바이스 사용 시</h3><ol><li><strong>Tools &gt; AVD Manager</strong></li><li>Create Virtual Device… 클릭</li><li>Select Hardware<ul><li>적당한 디바이스를 선택한다.</li><li>예) Phone &gt; Pixel XL</li></ul></li><li>System Image<ul><li>Android 버전을 선택</li></ul></li><li><strong>Finish</strong> 버튼 클릭</li></ol><p>스마트폰 또는 가상 디바이스를 연결 후 상단 툴바에서 장비를 선택 후 <code>Run</code>을 클릭하면 컴파일이 되며, 앱이 설치되고 구동된다.</p><img width="95%" src="/images/studio/run.png" alt="" title="" ><h2 id="4-sdk-설치"><a class="markdownIt-Anchor" href="#4-sdk-설치"></a> 4. SDK 설치</h2><p><strong>Tools &gt; SDK Manager</strong> 에서 설치 현황 및 안드로이드 버젼별 SDK 설치/삭제/업데이트 등을 수행할 수 있다.</p><img width="100%" src="/images/studio/sdk.png" alt="" title="" ><h2 id="5-device-file-explorer"><a class="markdownIt-Anchor" href="#5-device-file-explorer"></a> 5. Device File Explorer</h2><p>연결된 장비(스마트폰 or 가상 디바이스)의 파일 시스템을 탐색하는 뷰를 제공한다.<br /><strong>View &gt; Tool Windows &gt; Device File Explorer</strong> 메뉴를 클릭하여 다음과 같이 Device File Explorer 뷰를 오픈한다.</p><img width="90%" src="/images/studio/deviceFile.png" alt="View > Tool Windows > Device File Explorer 메뉴" title="" ><img width="90%" src="/images/studio/deviceExplorer.png" alt="Device File Explorer 뷰" title="" ><p>디바이스 파일 중에 특히 다음과 같은 경로들이 유용하다.</p><p><strong>1) data/data/app_name/</strong><br />내부 저장소에 저장괸 입의 데이터 파일 경로</p><p><strong>2) sdcard/</strong><br />외부 사용자 SD 카드에 저장된 파일(사진 등) 경로</p><h2 id="6-주요-단축키"><a class="markdownIt-Anchor" href="#6-주요-단축키"></a> 6. 주요 단축키</h2><p>참고 : <a href="https://developer.android.com/studio/intro/keyboard-shortcuts?authuser=1&amp;hl=ko" target="_blank" rel="noopener">Android 스튜디오 단축키</a></p><table><thead><tr><th>설명</th><th>단축키</th></tr></thead><tbody><tr><td>기본 코드 완성</td><td>Ctrl+Space</td></tr><tr><td>스마트 코드 완성</td><td>Ctrl+Shift+Enter, Ctrl+Enter</td></tr><tr><td>자동 Import</td><td>Alt+Enter</td></tr><tr><td>주석</td><td>Ctrl+/</td></tr><tr><td>블록 주석</td><td>Ctrl+Shift+/</td></tr><tr><td>빌드</td><td>Ctrl+F9</td></tr><tr><td>복사</td><td>F5</td></tr><tr><td>코드 서식 자동 지정</td><td>Ctrl+Alt+L</td></tr><tr><td>자동 들여 쓰기</td><td>Ctrl+Alt+I</td></tr></tbody></table><h2 id="7-자동-import-설정"><a class="markdownIt-Anchor" href="#7-자동-import-설정"></a> 7. 자동 import 설정</h2><p><strong>Alt + Enter</strong>를 입력하지 않아도 클래스 사용시 자동으로 import 문을 추가해 주는 기능이다.<br /><strong>File &gt; Settings &gt; Editor &gt; General &gt; Auto Import</strong> 에서 다음과 같이 “Add unambiguous…” 와 “Optimize imports…” 를 체크한다.</p><img width="100%" src="/images/studio/import.png" alt="" title="" ><h2 id="8-새로운-개념기능"><a class="markdownIt-Anchor" href="#8-새로운-개념기능"></a> 8. 새로운 개념/기능</h2><h3 id="1-art-vm"><a class="markdownIt-Anchor" href="#1-art-vm"></a> 1) ART VM</h3><p>안드로이드는 이전 가지는 DVT에서 구동되었으나 현재는 ART라는 VM을 이용한다. ART는 JIT(Just In Time, 실행 시 컴파일 방식으로 2.2 버젼부터 지원)을 지원하는 VM들과 달리 앱이 설치 시 전체 바이트 코드가 기계어로 컴파일되는 AOT(Ahead Of Time)를 이용하므로 획기적으로 성능이 개선되었다.</p><h3 id="2-app-bundle"><a class="markdownIt-Anchor" href="#2-app-bundle"></a> 2) App Bundle</h3><p>안드로이드 앱 내보내기에 기존 APK 파일 외에 앱 번들이 추가되었다. Google Play의 새로운 앱 제공 모델인 Dynamic Delivery는 App Bundle을 사용하여 각 사용자의 기기 설정에 최적화된 APK를 생성하고 제공하므로, 사용자는 앱 실행에 필요한 최소한의 코드와 리소스만 다운로드하면 된다.</p><p>개발자가 더 이상 다양한 기기를 지원하기 위해 여러 개의 APK를 빌드하고 서명하고 관리할 필요가 없으며 사용자는 더 작고 최적화된 앱을 다운로드할 수 있다.</p><p>또한 앱 프로젝트에 동적 기능 모듈을 추가하여 App Bundle에 포함할 수 있다.<br />모듈의 일부 기능과 자원(동영상, 이미지 등)들은 사용자가 처음 앱을 다운로드하고 설치할 때 포함되지 않도록 할 수 있다.</p><p>나중에 앱에서 Play Core 라이브러리를 사용하여 이러한 모듈을 동적 기능 APK로 다운로드하도록 요청할 수 있다.</p><p>정리하면 App Bundle로 내보내기를 추천한다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/21/android-studio/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JavaScript] IE에서 작동하지 않는 BLOB 다운로드</title>
      <link>http://hgko1207.github.io/2020/04/20/javascript-blob/</link>
      <guid>http://hgko1207.github.io/2020/04/20/javascript-blob/</guid>
      <pubDate>Mon, 20 Apr 2020 00:56:01 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;이미지를 Jcrop 라이브러리를 사용하여 자르고 &lt;strong&gt;Canvas&lt;/strong&gt; 영역을 blob 형식으로 바꿔서 &lt;code&gt;a&lt;/code&gt; Tag 를 생성하여 다운로드를 시도하였다. 크롬에서는 잘 동작하였지만 IE 에서는 동작하지 않고
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>이미지를 Jcrop 라이브러리를 사용하여 자르고 <strong>Canvas</strong> 영역을 blob 형식으로 바꿔서 <code>a</code> Tag 를 생성하여 다운로드를 시도하였다. 크롬에서는 잘 동작하였지만 IE 에서는 동작하지 않고 에러를 발생하였다.</p><p>아래 코드처럼 작성하였더니 둘 다 동작하였다.</p><h2 id="소스-코드"><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadURI</span>(<span class="params">blob, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.navigator &amp;&amp; <span class="built_in">window</span>.navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">    <span class="comment">// IE에서 동작</span></span><br><span class="line">    <span class="built_in">window</span>.navigator.msSaveBlob(blob, name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 크롬에서 동작</span></span><br><span class="line">    <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    link.download = name;</span><br><span class="line">    link.href = URL.createObjectURL(blob);</span><br><span class="line">    link.click();</span><br><span class="line">    <span class="keyword">delete</span> link;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/20/javascript-blob/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SAR 위성 활용</title>
      <link>http://hgko1207.github.io/2020/04/20/satellite-sar/</link>
      <guid>http://hgko1207.github.io/2020/04/20/satellite-sar/</guid>
      <pubDate>Mon, 20 Apr 2020 00:31:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;sar-위성-소개&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sar-위성-소개&quot;&gt;&lt;/a&gt; SAR 위성 소개&lt;/h2&gt;
&lt;h4 id=&quot;span-stylecolorff6e57sar-위성이란span&quot;&gt;&lt;a class=&quot;m
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="sar-위성-소개"><a class="markdownIt-Anchor" href="#sar-위성-소개"></a> SAR 위성 소개</h2><h4 id="span-stylecolorff6e57sar-위성이란span"><a class="markdownIt-Anchor" href="#span-stylecolorff6e57sar-위성이란span"></a> <span style="color:#FF6E57">SAR 위성이란?</span></h4><p>SAR(Synthetic Aperture Radar)란 각 Band의 다양한 파장대의 신호를 이용 <span style="color:#5B9BD5"><strong>지표면의 특성을 영상화 함</strong></span></p><h4 id="bans-별-소개"><a class="markdownIt-Anchor" href="#bans-별-소개"></a> BANS 별 소개</h4><img width="100%" src="/images/sar/1.png" alt="" title="" ><h4 id="sar파장-and-편파"><a class="markdownIt-Anchor" href="#sar파장-and-편파"></a> SAR(파장 and 편파)</h4><img width="100%" src="/images/sar/2.png" alt="" title="" ><h2 id="span-stylecolor0054ff1-kompsat-5한국의-위성span"><a class="markdownIt-Anchor" href="#span-stylecolor0054ff1-kompsat-5한국의-위성span"></a> <span style="color:#0054FF">1. KOMPSAT-5(한국의 위성)</span></h2><h5 id="위성의-본체-및-탑재체-제원"><a class="markdownIt-Anchor" href="#위성의-본체-및-탑재체-제원"></a> 위성의 본체 및 탑재체 제원</h5><img width="100%" src="/images/sar/3.png" alt="" title="본체 제원" ><img width="100%" src="/images/sar/4.png" alt="" title="탑재체 제원" ><h5 id="촬영모드-및-배포자료"><a class="markdownIt-Anchor" href="#촬영모드-및-배포자료"></a> 촬영모드 및 배포자료</h5><img width="100%" src="/images/sar/5.png" alt="" title="촬영 모드" ><img width="100%" src="/images/sar/6.png" alt="" title="배포 자료" ><h5 id="활용-분야"><a class="markdownIt-Anchor" href="#활용-분야"></a> 활용 분야</h5><img width="100%" src="/images/sar/7.png" alt="" title="활용 분야" ><h2 id="span-stylecolor0054ff2-terrasar-x독일의-위성span"><a class="markdownIt-Anchor" href="#span-stylecolor0054ff2-terrasar-x독일의-위성span"></a> <span style="color:#0054FF">2. TerraSAR-X(독일의 위성)</span></h2><h5 id="위성의-본체-및-탑재체-제원-2"><a class="markdownIt-Anchor" href="#위성의-본체-및-탑재체-제원-2"></a> 위성의 본체 및 탑재체 제원</h5><img width="100%" src="/images/sar/8.png" alt="" title="본체 제원" ><img width="100%" src="/images/sar/9.png" alt="" title="탑재체 제원" ><h5 id="촬영모드-및-배포자료-2"><a class="markdownIt-Anchor" href="#촬영모드-및-배포자료-2"></a> 촬영모드 및 배포자료</h5><img width="100%" src="/images/sar/10.png" alt="" title="촬영 모드" ><img width="100%" src="/images/sar/11.png" alt="" title="배포 자료" ><h5 id="활용-분야-2"><a class="markdownIt-Anchor" href="#활용-분야-2"></a> 활용 분야</h5><img width="100%" src="/images/sar/12.png" alt="" title="활용 분야" ><h2 id="span-stylecolor0054ff3-alos-2일본의-위성span"><a class="markdownIt-Anchor" href="#span-stylecolor0054ff3-alos-2일본의-위성span"></a> <span style="color:#0054FF">3. ALOS-2(일본의 위성)</span></h2><h5 id="위성의-본체-및-탑재체-제원-3"><a class="markdownIt-Anchor" href="#위성의-본체-및-탑재체-제원-3"></a> 위성의 본체 및 탑재체 제원</h5><img width="100%" src="/images/sar/13.png" alt="" title="본체 제원" ><img width="100%" src="/images/sar/14.png" alt="" title="탑재체 제원" ><h5 id="촬영모드-및-배포자료-3"><a class="markdownIt-Anchor" href="#촬영모드-및-배포자료-3"></a> 촬영모드 및 배포자료</h5><img width="100%" src="/images/sar/15.png" alt="" title="촬영 모드" ><img width="100%" src="/images/sar/16.png" alt="" title="배포 자료" ><h5 id="활용-분야-3"><a class="markdownIt-Anchor" href="#활용-분야-3"></a> 활용 분야</h5><img width="100%" src="/images/sar/17.png" alt="" title="활용 분야" ><h2 id="span-stylecolor0054ff4-radarsat-2캐나다의-위성span"><a class="markdownIt-Anchor" href="#span-stylecolor0054ff4-radarsat-2캐나다의-위성span"></a> <span style="color:#0054FF">4. RADARSAT-2(캐나다의 위성)</span></h2><h5 id="위성의-본체-및-탑재체-제원-4"><a class="markdownIt-Anchor" href="#위성의-본체-및-탑재체-제원-4"></a> 위성의 본체 및 탑재체 제원</h5><img width="100%" src="/images/sar/18.png" alt="" title="본체 제원" ><img width="100%" src="/images/sar/19.png" alt="" title="탑재체 제원" ><h5 id="촬영모드"><a class="markdownIt-Anchor" href="#촬영모드"></a> 촬영모드</h5><img width="100%" src="/images/sar/20.png" alt="" title="촬영 모드" ><h5 id="활용-분야-별-촬영-모드개념도"><a class="markdownIt-Anchor" href="#활용-분야-별-촬영-모드개념도"></a> 활용 분야 별 촬영 모드(개념도)</h5><img width="100%" src="/images/sar/21.png" alt="" title="활용 분야 별 촬영 모드(개념도)" ><h5 id="활용-분야-별-촬영-모드지상"><a class="markdownIt-Anchor" href="#활용-분야-별-촬영-모드지상"></a> 활용 분야 별 촬영 모드(지상)</h5><img width="100%" src="/images/sar/22.png" alt="" title="활용 분야 별 촬영 모드(지상)" ><h5 id="활용-분야-별-촬영-모드해양"><a class="markdownIt-Anchor" href="#활용-분야-별-촬영-모드해양"></a> 활용 분야 별 촬영 모드(해양)</h5><img width="100%" src="/images/sar/23.png" alt="" title="활용 분야 별 촬영 모드(해양)" >]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/20/satellite-sar/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Android Studio] lombok 사용 방법</title>
      <link>http://hgko1207.github.io/2020/04/18/android-lombok/</link>
      <guid>http://hgko1207.github.io/2020/04/18/android-lombok/</guid>
      <pubDate>Sat, 18 Apr 2020 11:14:23 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;자바에서 코드를 작성 시 모델을 만들다 보면 constructor 와 기본 getter/setter 그리고 상황에 따라서 builder를 만들어 사용해야 한다.&lt;br /&gt;
그런데 이런 일들을 모두 타이핑 하다 보니 보일러플레이트 같은 코드들이 많
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>자바에서 코드를 작성 시 모델을 만들다 보면 constructor 와 기본 getter/setter 그리고 상황에 따라서 builder를 만들어 사용해야 한다.<br />그런데 이런 일들을 모두 타이핑 하다 보니 보일러플레이트 같은 코드들이 많이도 써야한다.<br />lombok 를 사용하면 모델 객체들의 불필요한 보일러플레이트 코드들을 줄일 수 있다.<br />annotation 방법으로 사용하기 때문에 사용 방법도 간단하다.</p><h4 id="lombok-annotation"><a class="markdownIt-Anchor" href="#lombok-annotation"></a> lombok annotation</h4><ol><li><strong>@Getter / @Setter</strong><br />기본적으로 멤버 필드들에 대한 getter/setter 메소드들을 만들어 준다.<br /><br/></li><li><strong>@AllArgsConstructor / @NoArgsConstructor</strong><br />멤버필드들이 모두 파라미터로 지정된 생성자와 빈 생성자를 만들어 준다.<br /><br/></li><li><strong>@Builder</strong><br />모델을 빌더 패턴으로 만들어 준다.<br /><br/></li><li><strong>@ToString</strong><br />toString의 override된 메소드를 만들어 준다.<br /><br/></li><li><strong>@Data</strong><br />@ToString, @EqualsAndHashCode, @Getter, @Setter, @RequiredArgsConstructor를 합쳐 둔 어노테이션이다.<br /><br/></li><li><strong>@EqualsAndHashCode</strong><br />해당 객체의 equals()와 hashCode() 메소드를 생성한다.</li></ol><p>그 외에도 여러가지가 있다.</p><p>그럼 AndroidStudio 에 적용하는 방법을 알아보자.</p><h4 id="적용-방법"><a class="markdownIt-Anchor" href="#적용-방법"></a> 적용 방법</h4><ol><li><p>우선 lombok plugin을 설치해야 합니다.</p><p><code>File -&gt; Settings -&gt; Plugins -&gt; Browse repositories lombok</code>을 검색하여 Lombok Plugin을 설치한다.</p></li></ol><img width="100%" src="/images/lombok/lombok1.png" alt="" title="" ><ol start="2"><li>gradle에 lombok 적용하기<br />Gradle Scripts -&gt; build.gradle 파일을 연다.<br /><br/></li><li>dependencies 아래에 추가해 준다.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compileOnly <span class="string">'org.projectlombok:lombok:1.18.12'</span></span><br><span class="line">annotationProcessor <span class="string">'org.projectlombok:lombok:1.18.12'</span></span><br></pre></td></tr></table></figure><p>이와 같은 과정 후에 다음과 같은 결과를 볼 수 있다.</p><h3 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h3><img width="100%" src="/images/lombok/lombok2.png" alt="" title="" >]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/18/android-lombok/#disqus_thread</comments>
    </item>
    
    <item>
      <title>광학 위성 활용</title>
      <link>http://hgko1207.github.io/2020/04/17/satellite-optical/</link>
      <guid>http://hgko1207.github.io/2020/04/17/satellite-optical/</guid>
      <pubDate>Fri, 17 Apr 2020 04:04:26 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;위성영상-활용-목적&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#위성영상-활용-목적&quot;&gt;&lt;/a&gt; 위성영상 활용 목적&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;원격탐사&lt;/strong&gt; : 기록장치에 의해 물리적인 접속이 없이 관심 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="위성영상-활용-목적"><a class="markdownIt-Anchor" href="#위성영상-활용-목적"></a> 위성영상 활용 목적</h2><p><strong>원격탐사</strong> : 기록장치에 의해 물리적인 접속이 없이 관심 대상이 되는 목표물이나 현상에 대한 정보를 획득하는 방법</p><ul><li><strong>원격</strong> : 관찰자와 관찰 대상이 분리되어 간격이 있는 것</li><li><strong>탐사</strong> : 감지하거나 특징을 지음</li><li><strong><em>= 원거리에서 관찰 대상을 감지하거나 특징을 찾는 것</em></strong></li></ul><h2 id="광학-위성-소개"><a class="markdownIt-Anchor" href="#광학-위성-소개"></a> 광학 위성 소개</h2><p>고성능 광학 카메라를 탑재한 지구 관측 위성</p><ol><li><p><strong>해상도</strong> : 위성의 해상도는 10m 급에서 0.4m 에 이르기까지 다양함</p><ul><li><span style="color:#ED7D31"><strong>저해상도 활용</strong></span> : 주로 광범위한 지역의 탐사나 지속적 관찰이 필요한 부분에 사용</li><li><span style="color:#5B9BD5"><strong>고해상도 활용</strong></span> : 고해상도로 갈수록 군사용이나 특수목적으로 사용<br /><br/></li></ul></li><li><p><strong>촬영 방식</strong> : 전자광학카메라를 이용한 촬영(광학 신호를 전자신호로 변환하여 영상을 제공하는 방식)</p><ul><li><strong>장점</strong> : 눈에 익숙한 영상이 촬영 됨</li><li><strong>단점</strong> : 촬영 지역에 구름이 심하게 끼거나 밤이 되면 사진을 찍지 못함</li></ul></li></ol><img width="100%" src="/images/optical/1.png" alt="광학 위성 영상 취득 과정" title="" ><h2 id="span-stylecolor0054ff1-kompsat-3한국의-위성span"><a class="markdownIt-Anchor" href="#span-stylecolor0054ff1-kompsat-3한국의-위성span"></a> <span style="color:#0054FF">1. KOMPSAT-3(한국의 위성)</span></h2><h5 id="위성의-본체-및-탑재체-제원"><a class="markdownIt-Anchor" href="#위성의-본체-및-탑재체-제원"></a> 위성의 본체 및 탑재체 제원</h5><img width="100%" src="/images/optical/2.png" alt="" title="본체 제원" ><img width="100%" src="/images/optical/3.png" alt="" title="탑재체 제원" ><h5 id="촬영모드-및-배포자료"><a class="markdownIt-Anchor" href="#촬영모드-및-배포자료"></a> 촬영모드 및 배포자료</h5><img width="100%" src="/images/optical/4.png" alt="" title="촬영 모드" ><img width="100%" src="/images/optical/5.png" alt="" title="배포 자료" ><h5 id="활용-분야"><a class="markdownIt-Anchor" href="#활용-분야"></a> 활용 분야</h5><img width="100%" src="/images/optical/6.png" alt="" title="활용 분야" ><h2 id="span-stylecolor0054ff2-world-view-3미국의-상용-위성span"><a class="markdownIt-Anchor" href="#span-stylecolor0054ff2-world-view-3미국의-상용-위성span"></a> <span style="color:#0054FF">2. World View-3(미국의 상용 위성)</span></h2><h5 id="위성의-본체-및-탑재체-제원-2"><a class="markdownIt-Anchor" href="#위성의-본체-및-탑재체-제원-2"></a> 위성의 본체 및 탑재체 제원</h5><img width="100%" src="/images/optical/7.png" alt="" title="본체 제원" ><img width="100%" src="/images/optical/8.png" alt="" title="탑재체 제원(1)" ><img width="100%" src="/images/optical/9.png" alt="" title="탑재체 제원(2)" ><h5 id="촬영모드-및-배포자료-2"><a class="markdownIt-Anchor" href="#촬영모드-및-배포자료-2"></a> 촬영모드 및 배포자료</h5><img width="100%" src="/images/optical/10.png" alt="" title="촬영 모드" ><img width="100%" src="/images/optical/11.png" alt="" title="배포 자료" ><h5 id="활용-분야-2"><a class="markdownIt-Anchor" href="#활용-분야-2"></a> 활용 분야</h5><img width="100%" src="/images/optical/12.png" alt="" title="활용 분야" ><h2 id="span-stylecolor0054ff3-skysat-2미국의-상용-위성-googlespan"><a class="markdownIt-Anchor" href="#span-stylecolor0054ff3-skysat-2미국의-상용-위성-googlespan"></a> <span style="color:#0054FF">3. SkySat-2(미국의 상용 위성 + Google)</span></h2><h5 id="위성의-본체-및-탑재체-제원-3"><a class="markdownIt-Anchor" href="#위성의-본체-및-탑재체-제원-3"></a> 위성의 본체 및 탑재체 제원</h5><img width="100%" src="/images/optical/13.png" alt="" title="본체 제원" ><img width="100%" src="/images/optical/14.png" alt="" title="탑재체 제원" ><h5 id="배포자료"><a class="markdownIt-Anchor" href="#배포자료"></a> 배포자료</h5><img width="100%" src="/images/optical/15.png" alt="" title="배포 자료" ><h5 id="활용-분야-3"><a class="markdownIt-Anchor" href="#활용-분야-3"></a> 활용 분야</h5><img width="100%" src="/images/optical/16.png" alt="" title="활용 분야" ><h2 id="span-stylecolor0054ff4-stop-7프랑스의-상용-위성span"><a class="markdownIt-Anchor" href="#span-stylecolor0054ff4-stop-7프랑스의-상용-위성span"></a> <span style="color:#0054FF">4. STOP-7(프랑스의 상용 위성)</span></h2><h5 id="위성의-본체-및-탑재체-제원-4"><a class="markdownIt-Anchor" href="#위성의-본체-및-탑재체-제원-4"></a> 위성의 본체 및 탑재체 제원</h5><img width="100%" src="/images/optical/17.png" alt="" title="본체 제원" ><img width="100%" src="/images/optical/18.png" alt="" title="탑재체 제원" ><h5 id="촬영모드-및-배포자료-3"><a class="markdownIt-Anchor" href="#촬영모드-및-배포자료-3"></a> 촬영모드 및 배포자료</h5><img width="100%" src="/images/optical/19.png" alt="" title="촬영 모드" ><img width="100%" src="/images/optical/20.png" alt="" title="배포 자료" ><h5 id="활용-분야-4"><a class="markdownIt-Anchor" href="#활용-분야-4"></a> 활용 분야</h5><img width="100%" src="/images/optical/21.png" alt="" title="활용 분야" >]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/17/satellite-optical/#disqus_thread</comments>
    </item>
    
    <item>
      <title>리팩토링</title>
      <link>http://hgko1207.github.io/2020/04/16/book-refactoring/</link>
      <guid>http://hgko1207.github.io/2020/04/16/book-refactoring/</guid>
      <pubDate>Thu, 16 Apr 2020 04:43:08 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;책-정보&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#책-정보&quot;&gt;&lt;/a&gt; 책 정보&lt;/h3&gt;
&lt;img width=&quot;100%&quot; src=&quot;/images/book/refactoring.png&quot; alt=&quot;&quot; title=&quot;리팩
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="책-정보"><a class="markdownIt-Anchor" href="#책-정보"></a> 책 정보</h3><img width="100%" src="/images/book/refactoring.png" alt="" title="리팩토링" ><h3 id="책-소개"><a class="markdownIt-Anchor" href="#책-소개"></a> 책 소개</h3><p><strong><span style="color:#5D5D5D">코드 품질을 개선하는 객체지향 사고법을 정리한 참고서</span></strong></p><p>프로그램이 돌아가기면 하면 객체지향인가? 객체지향이라는 도구를 제대로 활용하지 못하고 마구잡이로 작성한 코드에는 악취가 진동한다. 리팩토링은 코드의 동작이나 의도는 유지하면서 코드의 구조, 재사용성, 가독성을 개선해 코드의 악취를 제거하고 전체 디자인을 개선하는 방법이다. 독자는 72가지 리팩토링 기법을 통해 코드를 점진적으로 개선하는 방법을 학습할 수 있으며, 이 책을 마쳤을 때는 객체지향 프로그래밍 능력이 한 단계 향상될 것이다.</p><p>객체지향 언어의 문법을 익혔다고 저절로 객체지향 프로그래밍을 할 수 있는 게 아니다. 리팩토링 카탈로그를 통해 어떤 코드를 고쳐야 하는지, 왜 고쳐야 하는지, 고친 코드가 왜 좋은지 이해할 수 있다. 이런 과정을 통해 객체지향에 어울리는 코드 디자인을 배우게 되고, 자신의 코딩 스타일도 바뀌게 된다. 이 책을 읽기 전과 후는 코드의 품질에 결정적인 차이를 가져오게 된다.</p><h3 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h3><p>3년차 개발을 하던 중 팀장님에게 추천 받았던 책이다. 여러가지 프로젝트를 개발하면서 고민했던 부분이 개발을 하고 있을 때 또는 유지보수 시 코드를 다시 보게 되면 너무 지저분해 보이고 가독성도 떨어지며 수정 작업이 오래걸리는 것을 느끼게 되었다. 그래서 중복 코드를 제거하고 코딩 규칙을 검색하면서 개선해보려고 노력을 하였지만 지식이 없어 힘들었다. 이 책을 읽으면서 리팩토링에 대해 알게 되고 필요성을 더욱 느끼게 되고 개발자로서 조금 더 성장할 수 있는 계기가 된 것 같다. 다만 번역서이기도 하고 글이 많아 읽기가 힘든 부분이 있다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/16/book-refactoring/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Openlayers] getGetFeatureInfoUrl 함수 사용</title>
      <link>http://hgko1207.github.io/2020/04/16/openlayers-dev-1/</link>
      <guid>http://hgko1207.github.io/2020/04/16/openlayers-dev-1/</guid>
      <pubDate>Thu, 16 Apr 2020 01:02:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Geoserver 에서 필요한 정보를 가져오기 위해 &lt;strong&gt;OpenLayers&lt;/strong&gt; 의 &lt;code&gt;getGetFeatureInfoUrl&lt;/code&gt; 함수를 사용하였다.&lt;/p&gt;
&lt;p&gt;feature 의 정보 중에 GRAY_INDEX
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Geoserver 에서 필요한 정보를 가져오기 위해 <strong>OpenLayers</strong> 의 <code>getGetFeatureInfoUrl</code> 함수를 사용하였다.</p><p>feature 의 정보 중에 GRAY_INDEX 라는 컬럼의 정보를 가져와야 한다.<br />아래 방식으로 image 형태인 layer 를 구성하였다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wmsLayer = <span class="keyword">new</span> ol.layer.Image(&#123;</span><br><span class="line">  source: <span class="keyword">new</span> ol.source.ImageWMS(&#123;</span><br><span class="line">    ratio: <span class="number">1</span>,</span><br><span class="line">    url: <span class="string">'http://localhost:8080/geoserver/img/wms'</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">      FORMAT: <span class="string">'image/png'</span>,</span><br><span class="line">      VERSION: <span class="string">'1.1.1'</span>,</span><br><span class="line">      STYLES: <span class="string">''</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>getGetFeatureInfoUrl</code> 함수를 사용하여 feature 정보를 불러와 표출하였다.<br />url 에 요청할 때 Cross-Origin Read Blocking(CORN) 문제가 있어 ajax 대신 XMLHttpRequest 를 사용하였다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = wmsLayer.getSource().getGetFeatureInfoUrl([longitude, latitude], view.getResolution(), view.getProjection(), &#123;</span><br><span class="line">  INFO_FORMAT: <span class="string">'application/json'</span>,</span><br><span class="line">  FEATURE_COUNT: <span class="number">10</span>,</span><br><span class="line">  QUERY_LAYERS: imageLayers,</span><br><span class="line">  LAYERS: imageLayers,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (url) &#123;</span><br><span class="line">  <span class="keyword">var</span> parser = <span class="keyword">new</span> ol.format.GeoJSON();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === xhr.DONE) &#123;</span><br><span class="line">      <span class="comment">// 요청이 완료되면</span></span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">201</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = parser.readFeatures(xhr.responseText);</span><br><span class="line">        <span class="keyword">if</span> (result.length) &#123;</span><br><span class="line">          <span class="keyword">var</span> info = result[<span class="number">0</span>].get(<span class="string">'GRAY_INDEX'</span>);</span><br><span class="line">          $(<span class="string">'#measurement_text'</span>).text(</span><br><span class="line">            <span class="string">'Val: '</span> + info + <span class="string">', Lon: '</span> + longitude.toFixed(<span class="number">3</span>) + <span class="string">', Lat: '</span> + latitude.toFixed(<span class="number">3</span>)</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.open(<span class="string">'GET'</span>, url);</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/16/openlayers-dev-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Cesium] 개발 팁</title>
      <link>http://hgko1207.github.io/2020/04/15/cesium-tip/</link>
      <guid>http://hgko1207.github.io/2020/04/15/cesium-tip/</guid>
      <pubDate>Wed, 15 Apr 2020 13:04:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;영상-레이어-추가&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#영상-레이어-추가&quot;&gt;&lt;/a&gt; 영상 레이어 추가&lt;/h2&gt;
&lt;p&gt;Geoserver 에 추가된 영상 레이어를 Cesium 지도에 표출 하는 코드다.&lt;br /&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="영상-레이어-추가"><a class="markdownIt-Anchor" href="#영상-레이어-추가"></a> 영상 레이어 추가</h2><p>Geoserver 에 추가된 영상 레이어를 Cesium 지도에 표출 하는 코드다.<br />layers 에는 Geoserver 에 있는 레이어의 이름을 넣으면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imageryLayer = viewer.imageryLayers.addImageryProvider(</span><br><span class="line">  <span class="keyword">new</span> Cesium.WebMapServiceImageryProvider(&#123;</span><br><span class="line">    url: <span class="string">'http://localhost:8080/geoserver/img/wms'</span>,</span><br><span class="line">    layers: <span class="string">'img:GCOMW1_L2_SMC_20120703'</span>,</span><br><span class="line">    parameters: &#123;</span><br><span class="line">      service: <span class="string">'WMS'</span>,</span><br><span class="line">      version: <span class="string">'1.1.0'</span>,</span><br><span class="line">      request: <span class="string">'GetMap'</span>,</span><br><span class="line">      styles: <span class="string">''</span>,</span><br><span class="line">      srs: <span class="string">'EPSG:4326'</span>,</span><br><span class="line">      format: <span class="string">'image/png'</span>,</span><br><span class="line">      transparent: <span class="string">'true'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="cesiumjs-포인트-그리기"><a class="markdownIt-Anchor" href="#cesiumjs-포인트-그리기"></a> CesiumJS 포인트 그리기</h2><p>마우스 왼쪽 버튼을 누를 때 포인트 그리기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ellipsoid = viewer.scene.globe.ellipsoid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handler = <span class="keyword">new</span> Cesium.ScreenSpaceEventHandler(viewer.canvas);</span><br><span class="line"></span><br><span class="line">handler.setInputAction(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.position != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> cartesian = scene.camera.pickEllipsoid(event.position, ellipsoid);</span><br><span class="line">    <span class="keyword">if</span> (cartesian) &#123;</span><br><span class="line">      <span class="keyword">var</span> cartographic = Cesium.Cartographic.fromCartesian(cartesian);</span><br><span class="line">      <span class="keyword">var</span> longitude = Cesium.Math.toDegrees(cartographic.longitude);</span><br><span class="line">      <span class="keyword">var</span> latitude = Cesium.Math.toDegrees(cartographic.latitude);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> point = scene.primitives.add(<span class="keyword">new</span> Cesium.PointPrimitiveCollection());</span><br><span class="line">      point.add(&#123;</span><br><span class="line">        position: Cesium.Cartesian3.fromDegrees(longitude, latitude),</span><br><span class="line">        color: Cesium.Color.RED, <span class="comment">// default: WHITE</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, Cesium.ScreenSpaceEventType.LEFT_CLICK);</span><br></pre></td></tr></table></figure><h2 id="영상-레이어-추가-시-스타일-지정"><a class="markdownIt-Anchor" href="#영상-레이어-추가-시-스타일-지정"></a> 영상 레이어 추가 시 스타일 지정</h2><p>영상 레이어 추가와 거의 같지만 styles와 COLORSCALERANGE 파라미터가 추가되었다.<br />styles 에는 Geoserver 에 추가된 스타일 이름을 지정하고, COLORSCALERANGE 에는 min, max 값을 지정한다. (COLORSCALERANGE 파라미터는 없어도 된다.)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imageryLayer = viewer.imageryLayers.addImageryProvider(</span><br><span class="line">  <span class="keyword">new</span> Cesium.WebMapServiceImageryProvider(&#123;</span><br><span class="line">    url: <span class="string">'http://localhost:8080/geoserver/img/wms'</span>,</span><br><span class="line">    layers: <span class="string">'img:GCOMW1_L2_SMC_20120703'</span>,</span><br><span class="line">    parameters: &#123;</span><br><span class="line">      service: <span class="string">'WMS'</span>,</span><br><span class="line">      version: <span class="string">'1.1.0'</span>,</span><br><span class="line">      request: <span class="string">'GetMap'</span>,</span><br><span class="line">      styles: <span class="string">'lut_redblue'</span>,</span><br><span class="line">      srs: <span class="string">'EPSG:4326'</span>,</span><br><span class="line">      format: <span class="string">'image/png'</span>,</span><br><span class="line">      transparent: <span class="string">'true'</span>,</span><br><span class="line">      COLORSCALERANGE: <span class="string">'0,100'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/15/cesium-tip/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Eclipse RCP] 개발 팁</title>
      <link>http://hgko1207.github.io/2020/04/14/rcp-tip/</link>
      <guid>http://hgko1207.github.io/2020/04/14/rcp-tip/</guid>
      <pubDate>Tue, 14 Apr 2020 04:14:58 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;1-rcp-배포시-필수사항&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-rcp-배포시-필수사항&quot;&gt;&lt;/a&gt; 1) RCP 배포시 필수사항&lt;/h2&gt;
&lt;p&gt;build.properties 에 &lt;strong&gt;javacDef
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="1-rcp-배포시-필수사항"><a class="markdownIt-Anchor" href="#1-rcp-배포시-필수사항"></a> 1) RCP 배포시 필수사항</h2><p>build.properties 에 <strong>javacDefaultEncoding…=UTF-8</strong> 추가하기</p><p>추가하지 않을 시 한글이 깨지거나 다른 클래스를 참조할 수 없는 문제로 인해 배포된 프로그램이 실행이 되지 않을 수 있다.</p><h2 id="2-spring-bean-사용-방법"><a class="markdownIt-Anchor" href="#2-spring-bean-사용-방법"></a> 2) Spring Bean 사용 방법</h2><ol><li><p>RCP에서 Spring 빈 생성 방법</p><ol><li><p>서비스 인터페이스 설정 파일의 Runtime에 관련 라이브러리 Export 한다.</p><ul><li>String : core, beans, cglib, scheduling</li><li>Log : slf4f, logback</li></ul></li><li><p>빈 설정 정보를 담고 있는 클래스 인 AppConfig를 생성하고, AppConfig 클래스에 서비스 빈등록을 하고, SpringBeanFinder 클래스를 생성하여, 애플리케이션 컨텍스트를 로딩하고, getBean 메소드를 이용하여 해당 빈을 룩업 시킨다.</p></li></ol></li><li><p>RCP에서 DL(Dependency Lookup) 방법</p><ol><li>SpringBeanFinder를 Activator를 이용하여 사용한다.<ul><li>getSpringBean(Class<T> beanClass)</li></ul></li><li>Service를 사용하는 클래스에서<br/>private final XXXService = Activator.getSpringBean(XXXService.class); <br/>형식으로 최상단에 멤버변수 선언을 한다.</li></ol></li><li><p>서비스 인터페이스 설계</p><ol><li>GUI에서 요구되는 서비스를 리스트업 한다.</li><li>리스트한 서비스를 인터페이스로 생성한다.</li><li>DummyXXXService를 먼저 생성하고 GUI에서 테스트 및 구현한다.</li><li>ConnectionManager를 이용해서 서비스 구현한다.<ul><li>RequestMessage, ResponseMessage 생성</li><li>RequestMessage 생성시 Service 정의</li></ul></li></ol></li></ol><h2 id="3-rcp-카페"><a class="markdownIt-Anchor" href="#3-rcp-카페"></a> 3) RCP 카페</h2><ul><li><a href="https://cafe.naver.com/eclipseplugin" target="_blank" rel="noopener">https://cafe.naver.com/eclipseplugin</a></li></ul><h2 id="4-rcp-tutorial"><a class="markdownIt-Anchor" href="#4-rcp-tutorial"></a> 4) RCP Tutorial</h2><ul><li><p>SWT : <a href="http://www.java2s.com/Tutorial/Java/0280__SWT/Catalog0280__SWT.htm" target="_blank" rel="noopener">http://www.java2s.com/Tutorial/Java/0280__SWT/Catalog0280__SWT.htm</a></p></li><li><p>SWT JFace Eclipse : <a href="http://java2s.com/Code/Java/SWT-JFace-Eclipse/CatalogSWT-JFace-Eclipse.htm" target="_blank" rel="noopener">http://java2s.com/Code/Java/SWT-JFace-Eclipse/CatalogSWT-JFace-Eclipse.htm</a></p></li><li><p>Eclipse JFace Table : <a href="http://www.vogella.com/articles/EclipseJFaceTable/article.html" target="_blank" rel="noopener">http://www.vogella.com/articles/EclipseJFaceTable/article.html</a></p></li><li><p>Eclipse 4 RCP : <a href="http://www.vogella.com/articles/EclipseRCP/article.html" target="_blank" rel="noopener">http://www.vogella.com/articles/EclipseRCP/article.html</a></p></li><li><p>Eclipse Commands : <a href="http://www.vogella.com/articles/EclipseCommands/article.html" target="_blank" rel="noopener">http://www.vogella.com/articles/EclipseCommands/article.html</a></p></li><li><p>Eclipse RCP : <a href="http://www.vogella.com/articles/Eclipse3RCP/article.html#tips_loadimages" target="_blank" rel="noopener">http://www.vogella.com/articles/Eclipse3RCP/article.html#tips_loadimages</a></p></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/14/rcp-tip/#disqus_thread</comments>
    </item>
    
    <item>
      <title>개발자의 성장</title>
      <link>http://hgko1207.github.io/2020/04/14/info-developer/</link>
      <guid>http://hgko1207.github.io/2020/04/14/info-developer/</guid>
      <pubDate>Tue, 14 Apr 2020 01:55:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;회사에서-성장하기&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#회사에서-성장하기&quot;&gt;&lt;/a&gt; 회사에서 성장하기&lt;/h1&gt;
&lt;h2 id=&quot;1-업무를-소비하지-말자&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="회사에서-성장하기"><a class="markdownIt-Anchor" href="#회사에서-성장하기"></a> 회사에서 성장하기</h1><h2 id="1-업무를-소비하지-말자"><a class="markdownIt-Anchor" href="#1-업무를-소비하지-말자"></a> 1. 업무를 소비하지 말자</h2><ul><li>그냥 시키는 것을</li><li>그냥 하던대로</li><li>그냥 빨리 해치워 버려야한다는 생각으로</li><li>그냥 일단 돌아가면 되도록</li><li>그냥 개발을 하는 것</li><li>그냥 아무생각 없이</li><li>누군지는 해주겠지(위험)</li></ul><p>이렇게 업무를 개발을 하지 말자 책임감을 가지고 하자</p><h2 id="2-질문을-잘하자"><a class="markdownIt-Anchor" href="#2-질문을-잘하자"></a> 2. 질문을 잘하자</h2><ul><li>배울 점이 많은 동료가 있는 것은 정말 큰 메리트</li><li>하지만 이것을 활용하지 못한다면 아무 의미 없음</li><li>회사의 업무는 혼자하는 것이 아님</li><li>이 점을 최대한 활용</li></ul><h3 id="질문하는-법"><a class="markdownIt-Anchor" href="#질문하는-법"></a> 질문하는 법</h3><ul><li><p>충분한 구글링(검색)을 먼저 하자</p></li><li><p>사전 준비(질문 정리)</p><ol><li>현재 발생한 상황 정리</li><li>자신의 시도들을 정리</li><li>최종적으로 Yes / No로 대답할 수 있도록 정리</li><li>그럴 수 없다면 자신의 결론에 대한 의견을 답할 수 있도록 정리</li></ol></li><li><p><strong>자신의 수준을 아는 사람에게 질문하자(중요)</strong></p></li></ul><h2 id="3-문서화를-잘하자"><a class="markdownIt-Anchor" href="#3-문서화를-잘하자"></a> 3. 문서화를 잘하자</h2><ul><li><p>트러블 슈팅</p><ol><li>나는 어쩌다 이 버그를 마주했는가</li><li>그 원인은 무엇이 있는가</li><li>그래서 어떤 시도를 해보았나</li><li>그래서 최종적으로 어떻게 해결을 했나</li></ol></li><li><p>개발에 대한 팁 또는 유틸을 정리</p></li></ul><h2 id="4-변화-무쌍한-스펙-변경에-맞서는-경험"><a class="markdownIt-Anchor" href="#4-변화-무쌍한-스펙-변경에-맞서는-경험"></a> 4. 변화 무쌍한 스펙 변경에 맞서는 경험</h2><ul><li>초기에 결정된 스펙은 무조건 변경된다.</li><li>나는 이에 어떻게 대응할 것인가</li><li>변경될 수 있는 요소들을 어떻게 제어할 것인가</li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/14/info-developer/#disqus_thread</comments>
    </item>
    
    <item>
      <title>자바 ORM 표준 JPA 프로그래밍</title>
      <link>http://hgko1207.github.io/2020/04/10/book-jpa/</link>
      <guid>http://hgko1207.github.io/2020/04/10/book-jpa/</guid>
      <pubDate>Fri, 10 Apr 2020 01:58:49 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;책-정보&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#책-정보&quot;&gt;&lt;/a&gt; 책 정보&lt;/h3&gt;
&lt;img width=&quot;100%&quot; src=&quot;/images/book/jpa.png&quot; alt=&quot;&quot; title=&quot;자바 ORM 표준 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="책-정보"><a class="markdownIt-Anchor" href="#책-정보"></a> 책 정보</h3><img width="100%" src="/images/book/jpa.png" alt="" title="자바 ORM 표준 JPA 프로그래밍" ><h3 id="책-소개"><a class="markdownIt-Anchor" href="#책-소개"></a> 책 소개</h3><p>자바 ORM 표준 JPA는 SQL 작성 없이 객체를 데이터베이스에 직접 저장할 수 있게 도와주고, 객체와 관계형 데이터베이스의 차이도 중간에서 해결해줍니다. 이 책은 JPA 기초 이론과 핵심 원리, 그리고 실무에 필요한 성능 최적화 방법까지 JPA에 대한 모든 것을 다룹니다. 또한, 스프링 프레임워크와 JPA를 함께 사용하는 방법을 설명하고, 스프링 데이터 JPA, QueryDSL 같은 혁신적인 오픈 소스를 활용해서 자바 웹 애플리케이션을 효과적으로 개발하는 방법을 다룹니다.</p><h3 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h3><p>스프링 프레임워크로 웹 개발할 때 JPA를 사용하기 전에는 MyBatis를 많이 사용하였다. JPA를 알고 난 후 책을 바로 구매하여 공부를 시작하게 되었다. 4년 전에 구매한 책이지만 지금까지도 가끔 보고 있고 설명이 잘 되어있어 실무에 바로 반영할 수 있었다. JPA를 사용하면서 더욱 데이터베이스 사용에 대해 편리해졌고, QueryDSL까지 사용하면서 웹 개발이 재미있어졌다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/10/book-jpa/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] UI 추천</title>
      <link>http://hgko1207.github.io/2020/04/08/react-design/</link>
      <guid>http://hgko1207.github.io/2020/04/08/react-design/</guid>
      <pubDate>Wed, 08 Apr 2020 08:36:55 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; 로 개발 시 기본적인 디자인을 적용하기 위해 고민이 많이 됩니다. 유료 템플릿 프로젝트를 구매해서 사용할 수 있지만 매번 사는게 부담이기 때문에 디자인을 하기 무척 힘들다.&lt;br /&gt;
검색하던 중에 편리하
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>React</strong> 로 개발 시 기본적인 디자인을 적용하기 위해 고민이 많이 됩니다. 유료 템플릿 프로젝트를 구매해서 사용할 수 있지만 매번 사는게 부담이기 때문에 디자인을 하기 무척 힘들다.<br />검색하던 중에 편리하게 디자인 할 수 있도록 지원해주는 것들을 몇가지 찾을 수 있었다.</p><h2 id="1-ant-design"><a class="markdownIt-Anchor" href="#1-ant-design"></a> 1) Ant Design</h2><p><a href="https://ant.design/" target="_blank" rel="noopener"><img src="/images/react/ui/ant.png" alt="" /></a></p><ul><li>리액트와 타입스크립트(Typescript) 기반으로 제작된 UI 라이브러리</li><li>중국 회사에서 오픈소스화한 라이브러리</li><li>코드가 리액트 기반이기 때문에 사용하기 편리함</li></ul><p>앤트 디자인의 <a href="https://ant.design/docs/spec/proximity" target="_blank" rel="noopener">10가지 디자인 원칙</a></p><ol><li>Proximity (근접성)</li><li>Alignment (정렬)</li><li>Contrast (대조)</li><li>Repetition (반복)</li><li>Make it Direct (직관적으로 만들어라)</li><li>Stay on the Page (화면에 머물러라)</li><li>Keep it Lightweight (가볍게 유지하라)</li><li>Provide an Invitation (가이드를 제공해라)</li><li>Use Transition (트랜지션을 사용하라)</li><li>React Immediately (즉각적인 반응)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i antd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm i --save @ant-design/icons</span></span><br></pre></td></tr></table></figure><h2 id="2-material-ui"><a class="markdownIt-Anchor" href="#2-material-ui"></a> 2) Material UI</h2><p><a href="https://material-ui.com/" target="_blank" rel="noopener"><img src="/images/react/ui/material.png" alt="" /></a></p><ul><li>리액트 기반 UI 라이브러리 중에 가장 인기 있고, 성숙한 라이브러리</li><li>구글 머테리얼 디자인 기반으로 제작</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install @material-ui/core</span></span><br></pre></td></tr></table></figure><h2 id="3-react-bootstrap"><a class="markdownIt-Anchor" href="#3-react-bootstrap"></a> 3) React Bootstrap</h2><p><a href="https://react-bootstrap.github.io/" target="_blank" rel="noopener"><img src="/images/react/ui/bootstrap.png" alt="" /></a></p><ul><li>웹 UI 라이브러리로 전세계에서 가장 많이 사용되는 Bootstrap을 리액트 기반으로 변경한 라이브러리</li><li>Bootstrap 3.x 버전을 기반으로 제작된 라이브러리</li><li>Bootstrap 4.x 버전으로 마이그레이션 할 수 있음</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install react-bootstrap bootstrap</span></span><br></pre></td></tr></table></figure><h2 id="4-reactstrap"><a class="markdownIt-Anchor" href="#4-reactstrap"></a> 4) reactstrap</h2><p><a href="https://reactstrap.github.io/" target="_blank" rel="noopener"><img src="/images/react/ui/reactstrap.png" alt="" /></a></p><ul><li>Bootstrap 4.x 버전을 기반으로 제작된 라이브러리</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save reactstrap react react-dom</span></span><br></pre></td></tr></table></figure><h2 id="5-semantic-ui-react"><a class="markdownIt-Anchor" href="#5-semantic-ui-react"></a> 5) Semantic UI React</h2><p><a href="https://react.semantic-ui.com/" target="_blank" rel="noopener"><img src="/images/react/ui/semantic.png" alt="" /></a></p><ul><li>부트스트랩 만큼이나 인기 있는 Semantic UI의 리액트 버전</li><li>Semantic UI에 jQuery 의존성을 제거하고 순수하게 리액트로만 개발 된 버전</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add semantic-ui-react</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/04/08/react-design/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PROJ.4 란?</title>
      <link>http://hgko1207.github.io/2020/03/27/satellite-proj4/</link>
      <guid>http://hgko1207.github.io/2020/03/27/satellite-proj4/</guid>
      <pubDate>Fri, 27 Mar 2020 00:38:26 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;proj4-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#proj4-란&quot;&gt;&lt;/a&gt; PROJ.4 란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;​다양한 좌표계 변환을 제공하는 라이브러리&lt;/li&gt;
&lt;li&gt;자유롭게 인자를 지정하여 표준
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="proj4-란"><a class="markdownIt-Anchor" href="#proj4-란"></a> PROJ.4 란?</h2><ul><li>​다양한 좌표계 변환을 제공하는 라이브러리</li><li>자유롭게 인자를 지정하여 표준이 아닌 좌표계 간도 변환 가능</li><li>USGS의 Gerald Evenden에 의해 만들어진 오픈소스 라이브러리</li><li>현재 OSGeo 프로젝트 중 하나이며 MIT 라이센스</li><li>GeoServer, OpenLayers, PostGIS, QGIS, GDAL, OGR, GeoTools 등 엄청나게 많은 프로그램에서 사용 중</li><li>C, C++, JAVA, Javascript 등 다양한 언어로 포팅 되어 있음​</li></ul><h2 id="경위도-좌표계wgs84"><a class="markdownIt-Anchor" href="#경위도-좌표계wgs84"></a> 경위도 좌표계(WGS84)</h2><ul><li>GPS가 사용하는 좌표계</li><li>EPSG:4326</li><li>+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs</li><li><a href="https://epsg.io/4326" target="_blank" rel="noopener">https://epsg.io/4326</a></li></ul><h2 id="구글-좌표계mercator"><a class="markdownIt-Anchor" href="#구글-좌표계mercator"></a> 구글 좌표계(Mercator)</h2><ul><li>EPSG:3857, EPSG:900913</li><li>+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs</li><li><a href="https://epsg.io/3857" target="_blank" rel="noopener">https://epsg.io/3857</a></li></ul><h2 id="tmtransverse-mercator"><a class="markdownIt-Anchor" href="#tmtransverse-mercator"></a> TM(Transverse Mercator)</h2><ul><li>국토지리정보원 기준 좌표계</li><li>+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=600000 +ellps=GRS80 +units=m +no_defs</li></ul><h2 id="utmuniversal-transverse-mercator"><a class="markdownIt-Anchor" href="#utmuniversal-transverse-mercator"></a> UTM(Universal Transverse Mercator)</h2><ul><li>전세계를 6도 단위로 나누는 표준적인 TM으로 군사지도에서 많이 사용</li></ul><ol><li><p>UTM52N: 경도 120 ~ 126도 사이에서 사용</p><ul><li>EPSG:32652</li><li>+proj=utm +zone=52 +ellps=WGS84 +datum=WGS84 +units=m +no_defs</li><li><a href="https://epsg.io/32652" target="_blank" rel="noopener">https://epsg.io/32652</a></li></ul></li><li><p>UTM51N: 경도 126 ~ 132도 사이에서 사용</p><ul><li>EPSG:32651</li><li>+proj=utm +zone=51 +ellps=WGS84 +datum=WGS84 +units=m +no_defs</li><li><a href="https://epsg.io/32651" target="_blank" rel="noopener">https://epsg.io/32651</a></li></ul></li></ol><h2 id="polar-stereographic"><a class="markdownIt-Anchor" href="#polar-stereographic"></a> Polar Stereographic</h2><ul><li>기상청 북반구 표현에 사용</li><li>+proj=stere +lat_0=90 +lat_ts=90 +lon_0=0 +k=0.994 +x_0=2000000 +y_0=2000000 +ellps=WGS84 +datum=WGS84 +units=m +no_defs</li><li><a href="https://spatialreference.org/ref/epsg/wgs-84-ups-north/" target="_blank" rel="noopener">https://spatialreference.org/ref/epsg/wgs-84-ups-north/</a></li></ul><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="http://epsg.io/" target="_blank" rel="noopener">epsg.io</a></li><li><a href="https://www.osgeo.kr/17" target="_blank" rel="noopener">한국 주요 좌표계 EPSG코드 및 proj4 인자 정리</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/03/27/satellite-proj4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Gdal 사용법</title>
      <link>http://hgko1207.github.io/2020/03/26/satellite-gdal/</link>
      <guid>http://hgko1207.github.io/2020/03/26/satellite-gdal/</guid>
      <pubDate>Thu, 26 Mar 2020 02:07:02 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;GDAL&lt;/strong&gt; 은 래스터 및 벡터 지리 공간 데이터를 조작 할 수 있는 오픈 소스 라이브러리다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;라이브러리로서 지원되는 모든 형식의 호출 응용 프로그램에 단일 추상 데이터 모델을 제공한다.&lt;/li&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>GDAL</strong> 은 래스터 및 벡터 지리 공간 데이터를 조작 할 수 있는 오픈 소스 라이브러리다.</p><ul><li>라이브러리로서 지원되는 모든 형식의 호출 응용 프로그램에 단일 추상 데이터 모델을 제공한다.</li><li>데이터 변환 및 처리를 위한 다양한 명령 행 인터페이스 유틸리티가 제공된다.</li><li>Windows, Linux 및 MacOS 에서 사용 가능하다.</li></ul><h2 id="1-gdalinfo-httpwwwgdalorggdalinfohtml"><a class="markdownIt-Anchor" href="#1-gdalinfo-httpwwwgdalorggdalinfohtml"></a> 1. gdalinfo (<a href="http://www.gdal.org/gdalinfo.html" target="_blank" rel="noopener">http://www.gdal.org/gdalinfo.html</a>)</h2><ul><li>GDAL 이 지원하는 영상 정보를 확인한다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdalinfo test.tif</span><br></pre></td></tr></table></figure><h2 id="2-gdal_translate-httpwwwgdalorggdal_translatehtml"><a class="markdownIt-Anchor" href="#2-gdal_translate-httpwwwgdalorggdal_translatehtml"></a> 2. gdal_translate (<a href="http://www.gdal.org/gdal_translate.html" target="_blank" rel="noopener">http://www.gdal.org/gdal_translate.html</a>)</h2><ul><li>다른 형식으로 래스터 데이터를 변환</li><li>영상 resize 및 포멧 변경</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdal_translate -of GTiff -outsize 50% 50% src_dataset dst_dataset</span><br></pre></td></tr></table></figure><h2 id="3-gdalwarp-httpwwwgdalorggdal_utilitieshtml"><a class="markdownIt-Anchor" href="#3-gdalwarp-httpwwwgdalorggdal_utilitieshtml"></a> 3. gdalwarp (<a href="http://www.gdal.org/gdal_utilities.html" target="_blank" rel="noopener">http://www.gdal.org/gdal_utilities.html</a>)</h2><ul><li>image reprojection and warping utility</li><li>좌표변환, resampling, image mosaicing</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdalwarp -t_srs EPSG:4326 input.tif output.tif</span><br></pre></td></tr></table></figure><h2 id="4-gdal_merge-httpsgdalorgprogramsgdal_mergehtml"><a class="markdownIt-Anchor" href="#4-gdal_merge-httpsgdalorgprogramsgdal_mergehtml"></a> 4. gdal_merge (<a href="https://gdal.org/programs/gdal_merge.html" target="_blank" rel="noopener">https://gdal.org/programs/gdal_merge.html</a>)</h2><ul><li>일련의 이미지를 자동으로 모자이크한다.</li><li>모든 이미지는 동일한 좌표계에 밴드 수가 일치해야 한다.</li><li>겹치는 영역에서는 마지막 이미지가 이전 이미지에 복사된다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdal_merge.py -init 255 -o out.tif in1.tif in2.tif</span><br></pre></td></tr></table></figure><h2 id="5-gdalmanage-httpwwwgdalorggdalmanagehtml"><a class="markdownIt-Anchor" href="#5-gdalmanage-httpwwwgdalorggdalmanagehtml"></a> 5. gdalmanage (<a href="http://www.gdal.org/gdalmanage.html" target="_blank" rel="noopener">http://www.gdal.org/gdalmanage.html</a>)</h2><p>Mode:</p><ol><li>identify datasetname : List data format of file. 데이터 포맷 정보 보기</li><li>copy datasetname newdatasetname : 파일 복사</li><li>rename datasetname newdatasetname : 이름 수정</li><li>delete datasetname : 이미지 삭제</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 파일일 때</span></span><br><span class="line">gdalmanage identify test.tif</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 폴더일 때</span></span><br><span class="line">gdalmanage identify –r test/</span><br></pre></td></tr></table></figure><h2 id="6-gdal_contour-httpwwwgdalorggdal_contourhtml"><a class="markdownIt-Anchor" href="#6-gdal_contour-httpwwwgdalorggdal_contourhtml"></a> 6. gdal_contour (<a href="http://www.gdal.org/gdal_contour.html" target="_blank" rel="noopener">http://www.gdal.org/gdal_contour.html</a>)</h2><ul><li>입력 래스터 표고 모델(DEM)로부터 벡터 등고선 파일을 생성한다.</li></ul><h2 id="7-gdal_polygonizepy-httpwwwgdalorggdal_polygonizehtml"><a class="markdownIt-Anchor" href="#7-gdal_polygonizepy-httpwwwgdalorggdal_polygonizehtml"></a> 7. gdal_polygonize.py (<a href="http://www.gdal.org/gdal_polygonize.html" target="_blank" rel="noopener">http://www.gdal.org/gdal_polygonize.html</a>)</h2><ul><li>Produces a polygon feature layer from a raster.</li><li>ERS -&gt; Shape 파일로 변환</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python gdal_polygonize.py inputFile -f ”ESRI Shapefile” outputFile</span><br></pre></td></tr></table></figure><h2 id="8-ogr2ogr-httpwwwgdalorgogr2ogrhtml"><a class="markdownIt-Anchor" href="#8-ogr2ogr-httpwwwgdalorgogr2ogrhtml"></a> 8. ogr2ogr (<a href="http://www.gdal.org/ogr2ogr.html" target="_blank" rel="noopener">http://www.gdal.org/ogr2ogr.html</a>)</h2><p>Shape 파일 좌표 변환</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ogr2ogr -f "ESRI Shapefile" out.shp wgs84.shp -s_srs EPSG:32616 -t_srs EPSG:4326</span><br></pre></td></tr></table></figure><p>Shape -&gt; GeoJSON 변환</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ogr2ogr -f GeoJSON -t_srs crs:84 [name].geojson [name].shp</span><br></pre></td></tr></table></figure><ol start="3"><li><a href="http://www.mercatorgeosystems.com/blog-articles/2008/05/30/using-ogr2ogr-to-re-project-a-shape-file/" target="_blank" rel="noopener">http://www.mercatorgeosystems.com/blog-articles/2008/05/30/using-ogr2ogr-to-re-project-a-shape-file/</a></li></ol><h2 id="9-gdaldem-httpsgdalorgprogramsgdaldemhtml"><a class="markdownIt-Anchor" href="#9-gdaldem-httpsgdalorgprogramsgdaldemhtml"></a> 9. gdaldem (<a href="https://gdal.org/programs/gdaldem.html" target="_blank" rel="noopener">https://gdal.org/programs/gdaldem.html</a>)</h2><p>ERS -&gt; GTiff 파일로 변환한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdaldem color-relief -of GTiff -co "TILED=YES" K220100502_22131215_ref_med_union.ers color_file.txt color.tif</span><br></pre></td></tr></table></figure><p><strong>※ GDAL 에서 .py 파일은 .exe로 만들어서 붙입니다.</strong></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/03/26/satellite-gdal/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[java] Geocoder을 이용해 주소를 위도/경도로 변환하기</title>
      <link>http://hgko1207.github.io/2020/03/25/java-geocoder/</link>
      <guid>http://hgko1207.github.io/2020/03/25/java-geocoder/</guid>
      <pubDate>Wed, 25 Mar 2020 01:18:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Geocoding 이란 주소를 위도, 경도로 변환해주는 Google 에서 제공하는 API 이다.&lt;/p&gt;
&lt;p&gt;링크 : &lt;a href=&quot;https://developers.google.com/maps/documentation/geocoding/sta
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Geocoding 이란 주소를 위도, 경도로 변환해주는 Google 에서 제공하는 API 이다.</p><p>링크 : <a href="https://developers.google.com/maps/documentation/geocoding/start#Geocoding" target="_blank" rel="noopener">지오코딩이란?</a></p><p>처음엔 <code>HttpURLConnection</code> 으로 접속해서 <code>InputStreamReader</code> 로 읽은 후 JSON 으로 파싱하게 만들었는데 해외 사이트에 geocoder 라이브러리를 이용하여 받아오는 예제가 있다. 어쨌든 더 편리하고 깔끔하게 해결되었다.</p><h3 id="geocoder-maven-dependency"><a class="markdownIt-Anchor" href="#geocoder-maven-dependency"></a> Geocoder Maven dependency</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.google.code.geocoder-java&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;geocoder-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.16&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="method"><a class="markdownIt-Anchor" href="#method"></a> Method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Float[] findGeoPoint(String location) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (location == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setAddress : 변환하려는 주소 (경기도 성남시 분당구 등)</span></span><br><span class="line">    <span class="comment">// setLanguate : 인코딩 설정</span></span><br><span class="line">    GeocoderRequest geocoderRequest = newGeocoderRequestBuilder().setAddress(location).setLanguage(<span class="string">"ko"</span>).getGeocoderRequest();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Geocoder geocoder = <span class="keyword">new</span> Geocoder();</span><br><span class="line">        GeocodeResponse geocoderResponse = geocoder.geocode(geocoderRequest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (geocoderResponse.getStatus() == GeocoderStatus.OK &amp; !geocoderResponse.getResults().isEmpty()) &#123;</span><br><span class="line">            GeocoderResult geocoderResult=geocoderResponse.getResults().iterator().next();</span><br><span class="line">            LatLng latitudeLongitude = geocoderResult.getGeometry().getLocation();</span><br><span class="line"></span><br><span class="line">            Float[] coords = <span class="keyword">new</span> Float[<span class="number">2</span>];</span><br><span class="line">            coords[<span class="number">0</span>] = latitudeLongitude.getLat().floatValue();</span><br><span class="line">            coords[<span class="number">1</span>] = latitudeLongitude.getLng().floatValue();</span><br><span class="line">            ​<span class="keyword">return</span> coords;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>latitudeLongitude.getLat().floatValue();</code> 이 부분은 floart 형이 아닌 toString() 으로도 가능하다.</p><h3 id="테스트"><a class="markdownIt-Anchor" href="#테스트"></a> 테스트</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String location = <span class="string">"대전광역시 유성구 궁동"</span>;</span><br><span class="line">Float[] coords = CommonUtil.findGeoPoint(location);</span><br><span class="line"></span><br><span class="line">System.out.println(location + <span class="string">": "</span> + coords[<span class="number">0</span>] + <span class="string">", "</span> + coords[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h3 id="결과"><a class="markdownIt-Anchor" href="#결과"></a> 결과</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">대전광역시 유성구 궁동 : <span class="number">36.366701</span>, <span class="number">127.344510</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/03/25/java-geocoder/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring AOP</title>
      <link>http://hgko1207.github.io/2020/03/25/spring-aop/</link>
      <guid>http://hgko1207.github.io/2020/03/25/spring-aop/</guid>
      <pubDate>Wed, 25 Mar 2020 01:04:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;AOP(Aspect Oriented Programming)&lt;/strong&gt; 는 공통관심사항을 분리하여 반복되는 부분을 추출해 핵심 로직에 영향을 미치지 않고 소스의 중복을 줄이는 방법으로 기존 &lt;strong&gt;OOP(Object-Or
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>AOP(Aspect Oriented Programming)</strong> 는 공통관심사항을 분리하여 반복되는 부분을 추출해 핵심 로직에 영향을 미치지 않고 소스의 중복을 줄이는 방법으로 기존 <strong>OOP(Object-Oriented Programming)</strong> 에서 공통관심사항을 여러 모듈에서 적용하며 발생하는 중복된 코드 양산의 한계를 극복하기 위해 나오게 되었다.</p><h2 id="spring-aop의-장점"><a class="markdownIt-Anchor" href="#spring-aop의-장점"></a> Spring AOP의 장점</h2><p>예를 들어 어떠한 홈페이지에 로그인 처리를 해야할 때 AOP 를 사용하지 않는다면 모든 페이지마다 로그인 상태인지 확인하는 소스코드를 넣어야 할테고 혹시나 그 로직이 변경되게 된다면 또 그 모든페이지의 소스를 수정해야하는 일이 생길 것아다. 하지만 AOP 를 적용한다면 단 하나의 로그인 로직만 바꿔도 모든 소스에 적용시킬수 있는 장점이 있다.</p><h2 id="스프링-aop-용어"><a class="markdownIt-Anchor" href="#스프링-aop-용어"></a> 스프링 AOP 용어</h2><p>스프링 AOP 를 이해하기 위해선 5가지 용어에 대한 이해가 필요하다.</p><ul><li>Aspect : 여러객체에서 공통으로 적용되는 공통 관심사항(ex:트랜잭션, 로깅, 보안)</li><li>JoinPoint : Aspect가 적용될수있는지점(ex:메소드, 필드)</li><li>Pointcut : 공통 관심사항이 적용될 Joinpoint</li><li>Advice : 어느시점(ex: 메소드수행전/후, 예외발생후등)에 어떤 공통관심기능(Aspect)을 적용할지 정의한것</li><li>Weaving : 어떤 Advice 를 어떤 Pointcut(핵심사항)에 적용시킬 것 인지에 대한 설정(Advisor)</li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/03/25/spring-aop/#disqus_thread</comments>
    </item>
    
    <item>
      <title>com, net, co.kr의 차이는?</title>
      <link>http://hgko1207.github.io/2020/03/25/info-domain/</link>
      <guid>http://hgko1207.github.io/2020/03/25/info-domain/</guid>
      <pubDate>Wed, 25 Mar 2020 01:01:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;사용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#사용&quot;&gt;&lt;/a&gt; 사용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;com(company)&lt;/strong&gt; : 회사의 도메인에 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ne
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="사용"><a class="markdownIt-Anchor" href="#사용"></a> 사용</h2><ul><li><strong>com(company)</strong> : 회사의 도메인에 사용한다.</li><li><strong>net(network)</strong> : 네트워크를 관리하는 기관의 도메인에 사용한다.</li><li><strong><a href="http://co.kr" target="_blank" rel="noopener">co.kr</a>(company korea)</strong> : 회사의 도메인에 사용한다.(한국)</li></ul><p>인터넷이 미국에서 시작했기 때문에 도메인도 미국이 먼저 선점했다. 그래서 다른 국가들은 .kr 처럼 국가고유 도메인을 추가하여 쓰게 되었다.<br />일본은 jp, 영국은 uk, 중국은 cn 등이 다 그런 것이다.</p><h2 id="원래의-의미는"><a class="markdownIt-Anchor" href="#원래의-의미는"></a> 원래의 의미는</h2><ul><li><strong><a href="http://co.kr" target="_blank" rel="noopener">co.kr</a>, com</strong> : 영리목적으로 설립된 회사의 홈페이지를 나타내는 말</li><li><strong><a href="http://or.kr" target="_blank" rel="noopener">or.kr</a>, org</strong> : 비영리기구</li><li><strong><a href="http://ne.kr" target="_blank" rel="noopener">ne.kr</a>, net</strong> : 네트워크 관련 회사, 혹은 통신 관련 회사를 나타내는 말</li></ul><p>하지만 or,org 를 제외하고는 모두 동일한 의미를 나타낸다고 보면 된다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/03/25/info-domain/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Git] 커맨드 명령어</title>
      <link>http://hgko1207.github.io/2020/03/24/git-use/</link>
      <guid>http://hgko1207.github.io/2020/03/24/git-use/</guid>
      <pubDate>Tue, 24 Mar 2020 01:45:42 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;설정-확인&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#설정-확인&quot;&gt;&lt;/a&gt; 설정 확인&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="설정-확인"><a class="markdownIt-Anchor" href="#설정-확인"></a> 설정 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --list</span></span><br></pre></td></tr></table></figure><h2 id="계정-확인"><a class="markdownIt-Anchor" href="#계정-확인"></a> 계정 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config user.name</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config user.email</span></span><br></pre></td></tr></table></figure><h2 id="계정-변경"><a class="markdownIt-Anchor" href="#계정-변경"></a> 계정 변경</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"user name"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"user email"</span></span></span><br></pre></td></tr></table></figure><h2 id="git-create"><a class="markdownIt-Anchor" href="#git-create"></a> Git Create</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add README.md</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"first commit"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin https://github.com/username/repositoryName</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure><p>현재 master 브랜치를 push 할 때 origin의 master 브랜치로 푸쉬하는 명령어다. 처음 push 할 때 사용한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push --<span class="built_in">set</span>-upstream origin master</span></span><br></pre></td></tr></table></figure><h2 id="git-update"><a class="markdownIt-Anchor" href="#git-update"></a> Git Update</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"update"</span></span></span><br></pre></td></tr></table></figure><p>commit 내용을 확인한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br></pre></td></tr></table></figure><p>원격 저장소에 반영한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push</span></span><br></pre></td></tr></table></figure><h2 id="git-pull"><a class="markdownIt-Anchor" href="#git-pull"></a> Git Pull</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin https://github.com/username/repositoryName</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull origin master</span></span><br></pre></td></tr></table></figure><p>독립적인 두 프로젝트를 병합할 경우 <code>--allow-unrelated-histories</code> 옵션을 사용한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull origin master --allow-unrelated-histories</span></span><br></pre></td></tr></table></figure><h2 id="git-repository-download"><a class="markdownIt-Anchor" href="#git-repository-download"></a> Git Repository Download</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/username/repositoryName</span></span><br></pre></td></tr></table></figure><p>서브 모듈 포함에서 받을 경우 다음 명령어를 참고한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/username/repositoryName</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule init</span></span><br><span class="line">or</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> --recurse-submodules https://github.com/username/repositoryName</span></span><br></pre></td></tr></table></figure><h2 id="git-ignore"><a class="markdownIt-Anchor" href="#git-ignore"></a> Git Ignore</h2><p>.gitignore 파일을 생성한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch .gitignore</span></span><br></pre></td></tr></table></figure><h2 id="git에-이미-올라가-있는-파일을-삭제하고-gitignore-적용"><a class="markdownIt-Anchor" href="#git에-이미-올라가-있는-파일을-삭제하고-gitignore-적용"></a> Git에 이미 올라가 있는 파일을 삭제하고 .gitignore 적용</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 원격 저장소와 로컬 저장소에 있는 파일을 삭제한다.</span></span><br><span class="line">git rm [File Name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원격 저장소에 있는 파일을 삭제한다.(로컬 저장소에 있는 파일은 삭제하지 않는다.)</span></span><br><span class="line">git rm --cached [File Name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 폴더 하위의 모든 파일을 삭제한다.</span></span><br><span class="line">git rm -r --cached [Directory]</span><br><span class="line">git rm -r --cached example/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원격 저장소의 파일을 모두 삭제한다.</span></span><br><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure><h2 id="git-branch"><a class="markdownIt-Anchor" href="#git-branch"></a> Git branch</h2><p>branch 를 만들고 관리하는 명령어다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># branch 만들기</span></span><br><span class="line">git branch [branch name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># branch 목록 보기</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 지정한 branch 삭제</span></span><br><span class="line">git branch -d [branch name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># branch 선택하기</span></span><br><span class="line">git checkout [branch name]</span><br></pre></td></tr></table></figure><h2 id="git-remote"><a class="markdownIt-Anchor" href="#git-remote"></a> Git Remote</h2><p>원격 저장소를 관리할 수 있는 명령어다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 원격 저장소의 이름 목록</span></span><br><span class="line">git remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원격 저장소에 대한 자세한 목록보기</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원격 저장소 추가</span></span><br><span class="line">git remote add [name] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원격 저장소를 삭제</span></span><br><span class="line">git remote rm [name]</span><br></pre></td></tr></table></figure><h2 id="git-clean"><a class="markdownIt-Anchor" href="#git-clean"></a> Git Clean</h2><p>작업 디렉토리에서 추적되지 않는 파일을 삭제하는 명령어다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># untracked 파일 모두 삭제</span></span><br><span class="line">git clean -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 디렉토리까지 삭제</span></span><br><span class="line">git clean -fd</span><br><span class="line"></span><br><span class="line"><span class="comment"># .gitignore로 무시되는 파일 삭제</span></span><br><span class="line">git clean -d -x</span><br></pre></td></tr></table></figure><h2 id="git-stash"><a class="markdownIt-Anchor" href="#git-stash"></a> Git Stash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 트래킹 된 파일을 stash 영역에 임시 저장하고 수정 내용은 제거</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># stash 한 기록을 리스트 형태로 확인</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 가장 최근에 저장한 stash 복원</span></span><br><span class="line">git stash apply</span><br><span class="line"></span><br><span class="line"><span class="comment"># 가장 최근에 저장한 stash 삭제</span></span><br><span class="line">git stash drop</span><br><span class="line"></span><br><span class="line"><span class="comment"># stash 기록 모두 삭제</span></span><br><span class="line">git stash clear</span><br><span class="line"></span><br><span class="line"><span class="comment"># stash를 복원하고 삭제</span></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="http://www.devkuma.com/books/pages/422" target="_blank" rel="noopener">Git 개요</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/03/24/git-use/#disqus_thread</comments>
    </item>
    
    <item>
      <title>React Study(2)</title>
      <link>http://hgko1207.github.io/2020/03/24/react-study-2/</link>
      <guid>http://hgko1207.github.io/2020/03/24/react-study-2/</guid>
      <pubDate>Tue, 24 Mar 2020 01:41:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;react-세미나2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#react-세미나2&quot;&gt;&lt;/a&gt; React 세미나😊(2)&lt;/h1&gt;
&lt;h3 id=&quot;2-project-setup&quot;&gt;&lt;a class=&quot;markdownIt-A
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="react-세미나2"><a class="markdownIt-Anchor" href="#react-세미나2"></a> React 세미나😊(2)</h1><h3 id="2-project-setup"><a class="markdownIt-Anchor" href="#2-project-setup"></a> 2. Project Setup</h3><h4 id="21-requirements"><a class="markdownIt-Anchor" href="#21-requirements"></a> 2.1. Requirements</h4><p>먼저 Node.js 가 설치되어 있어야 한다.<br />Node.js 공식 다운로드 페이지(<a href="https://nodejs.org/ko/download/" target="_blank" rel="noopener">https://nodejs.org/ko/download/</a>)에서 Window Installer 를 다운로드하고 설치한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm -v</span></span><br></pre></td></tr></table></figure><p>에디터로는 MS에서 제공하는 Visual Studio Code(VS Code)를 사용한다. vscode 는 크로스 플랫폼 에디터로 다양한 언어를 서포트 하며, IntelliSense 와 Git 기능, 그리고 Extension 을 이용한 확장 기능을 제공하고 있다.<br />설치 방법은 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a> 에 접속하여 다운로드 후 설치하면 된다.</p><blockquote><p>React 개발에 좋은 Extension는 <strong>ESLint</strong>, <strong>Prettier</strong>, <strong>vscode-styled-components</strong>, <strong>Auto Close Tag</strong>, <strong>React-Native/React/Redux snippets for es6/es7</strong> 등 다양하게 있어 설치하고 사용하면 됩니다.</p></blockquote><h4 id="22-creating-react-app"><a class="markdownIt-Anchor" href="#22-creating-react-app"></a> 2.2. Creating React App</h4><p>기존에는 Webpack, Babel 등 필요한 모듈들을 직접 설치하고 설정하느라 상당한 시간이 소요가 되었다. 2016년에 React 작업 환경을 명령어 하나로 설정 할 수 있는 공식 도구가 나오면서 개발자들과 입문자들에게 많은 도움이 되었다.</p><p>먼저 프로젝트 생성을 한다.</p><p>주의사항은 npm 5.2.0 이상 버전을 설치해야 합니다. 최신 npm 버전에는 npx 가 설치되어 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install npx -global</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npx create-react-app <span class="built_in">test</span>-project</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="built_in">test</span>-project</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> code .</span></span><br></pre></td></tr></table></figure><p>설치가 완료되면 Visual Studio Code 편집기로 프로젝트를 연다.<br /><img src="https://hgko1207.github.io/images/react/react-open.png" alt="프로젝트 구조" title="프로젝트 구조" /><br />처음 프로젝트가 설치되면 여러가지 파일이 생성되는데 초기 세팅을 위해 불필요한 파일을 제거하는 것이 좋다. <code>src</code> 폴더에서 App.js, index.js 파일을 제외한 파일을 제거하고 import 된 코드를 제거한다.</p><h3 id="3-react-개발"><a class="markdownIt-Anchor" href="#3-react-개발"></a> 3. React 개발</h3><h4 id="31-jsx"><a class="markdownIt-Anchor" href="#31-jsx"></a> 3.1. JSX</h4><p>JSX (JavaScript eXtension) 는 자바스크립트 언어 문법의 확장입니다. 자바스크립트 안에서 HTML 문법을 사용해서 화면을 구성할 수 있게 도와주는 문법으로, React 개발에 엄청난 도움을 줍니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">// JSX 문법</span></span><br><span class="line">      &lt;div&gt;Hello &#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default HelloMessage;</span></span><br></pre></td></tr></table></figure><p>아래는 스타일링의 여러가지 방법이다.</p><ol><li>class 대신 className 을 사용한다.</li><li>스타일 속성은 중괄호 ({}) 안에 객체 형태로 표시하며 단어 사이의 '-'를 없애는 대신 카멜케이스(Camel Case)를 사용해 CSS 프로퍼티는 나타낸다.</li><li><code>styled-components</code>는 리액트 CSS-in-JS 관련 라이브러리 중에서 가장 잘나가는 라이브러리로써 자바스크립트 파일 안에 CSS 를 작성하는 형태다.</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Content = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  background-color: 'blue';</span></span><br><span class="line"><span class="string">  font-size: 16px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div style=&#123;&#123; backgroundColor: 'black', fontSize: '12px', color: 'white' &#125;&#125;&gt;&lt;/</span>div&gt;</span><br><span class="line">      &lt;Content /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// App.css</span><br><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSX 는 꼭 지켜야 할 몇몇 제한이 있다.</p><ol><li>JSX 를 사용하는 스크립트 파일은 상단에 React 라이브러리를 꼭 불러와야 한다.<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br></pre></td></tr></table></figure></li><li>열어 놓은 태그는 꼭 닫아야 한다.<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 에러</span><br><span class="line">&lt;hello&gt;</span><br><span class="line"># 정상 동작</span><br><span class="line">&lt;hello&gt;&lt;<span class="regexp">/hello&gt; or &lt;hello /</span>&gt;</span><br></pre></td></tr></table></figure></li><li>최상위 태그는 꼭 1개여야 한다.<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Fragment&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;h1&gt;header&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;h1&gt;main&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/m</span>ain&gt;</span><br><span class="line">&lt;<span class="regexp">/Fragment&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="32-component-기반-구조"><a class="markdownIt-Anchor" href="#32-component-기반-구조"></a> 3.2. Component 기반 구조</h4><p>React 는 Component 기반 라이브러리다. 하나의 코드로 작성하는 것이 아니라 여러 부분을 분할해서 만들기 때문에 코드의 재사용성과 유지보수성이 증가 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>홈페이지<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 헤더 내용 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-list"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 콘텐츠 리스트 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 푸터 내용 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같은 html 코드가 있다고 해보자. 이를 React 로 만들게 되면 다음과 같다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./component/Header'</span>;</span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./component/Footer'</span>;</span><br><span class="line"><span class="keyword">import</span> ContentList <span class="keyword">from</span> <span class="string">'./component/ContentList'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Header /&gt;</span><br><span class="line">        &lt;ContentList /&gt;</span><br><span class="line">        &lt;Footer /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>Header 나 Footer, ContentList 등은 컴포넌트로 만들고, 이를 조립해서 루트 컴포넌트를 만드는 방식이다. 컴포넌트의 종류로는 <code>클래스형(stateful)</code>과 <code>함수형(stateless)</code>으로 나누어진다.</p><h4 id="33-props"><a class="markdownIt-Anchor" href="#33-props"></a> 3.3. Props</h4><p><code>props</code>란 부모 컴포넌트에서 자식 컴포넌트로 전달해 주는 데이터를 말한다.<br /><code>props</code>는 읽기 전용 데이터라고 생각하면 된다. 자식 컴포넌트에서 전달 받은 <code>props</code>를 변경이 불가능하고 <code>props</code>를 전달해준 최상위 부모 컴포넌트만 <code>props</code>를 변경할 수 있다.</p><h4 id="34-state"><a class="markdownIt-Anchor" href="#34-state"></a> 3.4. State</h4><p><code>state</code>는 동적인 데이터를 다룰 때 사용한다. 사용자와의 상호작용을 통해 데이터를 동적으로 변경을 해야 할 때 사용한다.<br /><code>state</code>는 <code>클래스형 컴포넌트</code>에서만 사용할 수 있는데 각각의 <code>state</code>는 독립적이라 다른 컴포넌트의 직접적인 접근은 불가능하다.</p><h4 id="35-lifecycle-api"><a class="markdownIt-Anchor" href="#35-lifecycle-api"></a> 3.5 LifeCycle API</h4><p>LifeCycle API는 컴포넌트가 DOM 위에 생성되기 전 후 및 데이터가 변경되어 상태를 업데이트하기 전 후로 실행되는 메소드들이다. 자원낭비를 줄이기 위하여 코드를 최적화 할 때 사용된다. 많이 사용하는 LifeCycle 메소드들은 <code>constructor</code>, <code>componentDidMount</code>, <code>render</code>, <code>shouldComponentUpdate</code> 이다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://gomcine.tistory.com/entry/VS-Code-%EA%B8%B0%EB%B3%B8-%EC%84%B8%ED%8C%85?category=624630" target="_blank" rel="noopener">VS Code 기본 세팅</a></li><li><a href="https://caesiumy.github.io/2019/04/02/vscode-recommended-extensions/" target="_blank" rel="noopener">vscode 추천 익스텐션(Extensions)과 세팅</a></li><li><a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">craete-react-app github</a></li><li><a href="https://reactjs-kr.firebaseapp.com/docs/installation.html" target="_blank" rel="noopener">React 시작하기</a></li><li><a href="https://geonlee.tistory.com/32" target="_blank" rel="noopener">[npm] 🤔npx란 무엇인가?</a></li><li><a href="https://reactjs-kr.firebaseapp.com/docs/introducing-jsx.html" target="_blank" rel="noopener">JSX 소개 - React</a></li><li><a href="https://velopert.com/3626" target="_blank" rel="noopener">누구든지 하는 리액트 3편: JSX</a></li><li><a href="https://velog.io/@taewo/%EB%A6%AC%EC%95%A1%ED%8A%B8-Styled-Components-76jsolbaf8" target="_blank" rel="noopener">리액트 Styled Components - 1편</a></li></ul><h2 id="강의"><a class="markdownIt-Anchor" href="#강의"></a> 강의</h2><ul><li><a href="https://academy.nomadcoders.co/" target="_blank" rel="noopener">https://academy.nomadcoders.co/</a></li><li><a href="https://www.opentutorials.org/module/4058" target="_blank" rel="noopener">https://www.opentutorials.org/module/4058</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/03/24/react-study-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>React Study(1)</title>
      <link>http://hgko1207.github.io/2020/03/24/react-study-1/</link>
      <guid>http://hgko1207.github.io/2020/03/24/react-study-1/</guid>
      <pubDate>Tue, 24 Mar 2020 01:39:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;react-세미나1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#react-세미나1&quot;&gt;&lt;/a&gt; React 세미나😊(1)&lt;/h1&gt;
&lt;p&gt;최근 React를 다시 공부하게 되면서 올해 초에 회사에서 세미나를 하게 되었다
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="react-세미나1"><a class="markdownIt-Anchor" href="#react-세미나1"></a> React 세미나😊(1)</h1><p>최근 React를 다시 공부하게 되면서 올해 초에 회사에서 세미나를 하게 되었다. 물론 기초이지만 React 에 관심을 다시 가지게 되는 계기가 되었다.</p><h2 id="react란"><a class="markdownIt-Anchor" href="#react란"></a> React란?</h2><p><a href="https://ko.reactjs.org/" target="_blank" rel="noopener">React</a>는 페이스북에서 제공해주는 프론트엔드 라이브러리다. 사용자 인터페이스(User Interface)에 집중하며, Virtual DOM을 통해 속도와 편의를 높이고, 단방향 데이터 플로우를 지원하여 <a href="http://web-front-end.tistory.com/27" target="_blank" rel="noopener">보일러플레이트 코드</a>를 감소 시켜준다. React 는 싱글 페이지 애플리케이션(SPA)이나 모바일 애플리케이션을 개발할 때 사용할 수 있다.</p><h4 id="특징"><a class="markdownIt-Anchor" href="#특징"></a> 특징</h4><ul><li>컴포넌트 기반 아키텍처<ul><li>템플릿 언어가 아닌 자바스크립트로 컴포넌트 작성</li><li>특정 관심사에 집중된 기능 블록 (관심사의 분리)</li></ul></li><li>One Way Data flow(단방향 데이터 흐름 지향)</li><li>React 는 데이터의 흐름이 한 방향으로만 흐흔다.</li><li>데이터가 내려가기만 하고 밑에서 데이터를 올릴 수 없다.</li><li>그래서 부모의 데이터를 바꿔주기 위해서는 <code>state</code>를 이용해야 한다.</li><li>Virtual DOM - React는 가상의 DOM을 만들어서 진짜 DOM 과 비교하여 변경 사항이 있을 경우 전체를 새롭게 만드는 것이 아니라 변경된 부분만 진짜 DOM 에 반영하는 방식으로 작업을 수행한다. 그럼으로써 애플리케이션의 효율성과 속도를 높일 수 있게 된다.</li><li>JSX 문법</li></ul><h4 id="리액트-js를-하기-위해-알아야-할-것"><a class="markdownIt-Anchor" href="#리액트-js를-하기-위해-알아야-할-것"></a> 리액트 JS를 하기 위해 알아야 할 것</h4><ul><li>Javascript(ES6)</li><li>HTML</li><li>CSS</li></ul><h3 id="1-fundamentals기초"><a class="markdownIt-Anchor" href="#1-fundamentals기초"></a> 1. Fundamentals(기초)</h3><p><strong>React</strong>에서 많이 사용되는 자바스크립트 ES6 문법 기초를 먼저 알아보자.</p><ul><li>기존에 우리가 웹 개발에서 많이 보던 자바스크립트는 2009년 12월에 나온 <strong>ECMAScript5(ES5)</strong> 버전이다. 최근 Node.js, react에서는 2015년 6월에 업데이트 된 <strong>ECMAScript6(ES6)</strong> 문법의 자바스크립트를 사용하고 있다.</li><li>ES6 문법을 사용하면서 처음에는 익숙해지기 어려웠지만 사용할 수록 코드가 간결해지고 깔끔해지면서 가독성이 좋아졌고, 모듈 별로 개발하면서 코드 관리가 쉬워졌다.</li><li>현재는 ES8까지 업데이트 되었지만 몇 가지 걸림돌이 있어 넘어가지 않고 있다.</li></ul><p>아래에는 바뀐 ES6 문법과 많이 사용되는 기능들이다.</p><h4 id="11-var-let-const"><a class="markdownIt-Anchor" href="#11-var-let-const"></a> 1.1. var -&gt; let &amp; const</h4><p><em>const</em> 는 블록 범위이며 값이 지정되면 나중에 바꿀 수 없다. 또한, 재 선언 될 수도 없다.<br /><em>let</em> 은 블록 범위이며 값이 지정되어도 값을 바꿀 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'eden'</span>;</span><br><span class="line"><span class="keyword">let</span> tel = <span class="string">'010-0000-0000'</span>;</span><br></pre></td></tr></table></figure><h4 id="12-arrow-functions"><a class="markdownIt-Anchor" href="#12-arrow-functions"></a> 1.2. Arrow Functions</h4><p>함수는 간결해지고 코드는 짧아졌다.<br />Argument가 하나 일 때는 괄호가 필요 없다.(유일한 규칙)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">reutn <span class="string">"Hello "</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> sayHello = <span class="function"><span class="params">name</span> =&gt;</span> <span class="string">"Hello "</span> + name;</span><br><span class="line"><span class="keyword">const</span> sayHello = <span class="function">(<span class="params">name, something</span>) =&gt;</span> <span class="string">"Hello "</span> + name + something;</span><br></pre></td></tr></table></figure><h4 id="13-template-literals"><a class="markdownIt-Anchor" href="#13-template-literals"></a> 1.3. <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noopener">Template Literals</a></h4><p>``(backticks) 사용</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'eden'</span>;</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name);</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h4 id="14-object-destructuring-비구조화"><a class="markdownIt-Anchor" href="#14-object-destructuring-비구조화"></a> 1.4. Object Destructuring (비구조화)</h4><p>적은 코드를 사용해서 더 깔끔하게 보이도록 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> human = &#123;</span><br><span class="line">  name: <span class="string">'Ko'</span>,</span><br><span class="line">  lastName: <span class="string">'HyeongGyun'</span>,</span><br><span class="line">  nationality: <span class="string">'Korea'</span>,</span><br><span class="line">  favFood: &#123;</span><br><span class="line">    dinner: <span class="string">'Samgyupsal'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">const</span> name = human.name;</span><br><span class="line"><span class="keyword">const</span> lastName = human.lastName;</span><br><span class="line"><span class="keyword">const</span> difName = human.nationality;</span><br><span class="line"><span class="keyword">const</span> dinner = human.favFood.dinner;</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  name,</span><br><span class="line">  lastName,</span><br><span class="line">  nationality: difName,</span><br><span class="line">  favFood: &#123; dinner &#125;,</span><br><span class="line">&#125; = human;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name, lastName, difName, dinner);</span><br></pre></td></tr></table></figure><h4 id="15-spread-operator"><a class="markdownIt-Anchor" href="#15-spread-operator"></a> 1.5. Spread Operator</h4><p>Iterable Object(열거 가능한 오브젝트)를 하나씩 전개한다.<br />표현방식 […iterable], 변수 앞에 ‘…’ 찍어서 선언한다.<br />변수 뿐만 아니라 Argument, Function에서도 쓰인다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> days = [<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>];</span><br><span class="line"><span class="keyword">const</span> otherDays = [<span class="string">'Thu'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>];</span><br><span class="line"><span class="keyword">const</span> allDays = [...days, ...otherDays, <span class="string">'Sun'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(allDays);</span><br><span class="line"></span><br><span class="line">결과: [<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thu'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>];</span><br></pre></td></tr></table></figure><h4 id="16-classes"><a class="markdownIt-Anchor" href="#16-classes"></a> 1.6. Classes</h4><p>constructor 메소드도 사용할 수 있고 extends를 통해서 클래스 상속도 가능하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, lastName) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baby</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">  cry() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'cry'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myBaby = <span class="keyword">new</span> Baby(<span class="string">'mini'</span>, <span class="string">'me'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myBaby.cry(), myBaby.sayName());</span><br></pre></td></tr></table></figure><h4 id="17-arraymap"><a class="markdownIt-Anchor" href="#17-arraymap"></a> 1.7. <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">Array.map</a></h4><p>요소를 일괄적으로 변경한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> days = [<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thu'</span>, <span class="string">'Fri'</span>];</span><br><span class="line"><span class="keyword">const</span> smilingDays = days.map(<span class="function">(<span class="params">day</span>) =&gt;</span> <span class="string">`😂 <span class="subst">$&#123;day&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(smilingDays);</span><br><span class="line"></span><br><span class="line">결과: [<span class="string">'😂 Mon'</span>, <span class="string">'😂 Tues'</span>, <span class="string">'😂 Wed'</span>, <span class="string">'😂 Thu'</span>, <span class="string">'😂 Fri'</span>];</span><br></pre></td></tr></table></figure><h4 id="18-arrayfilter"><a class="markdownIt-Anchor" href="#18-arrayfilter"></a> 1.8. <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">Array.filter</a></h4><p>요소를 걸러내어 배열로 true/false 반환, 없으면 빈 배열을 반환한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">123</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">67</span>, <span class="number">241</span>, <span class="number">54</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">90</span>];</span><br><span class="line"><span class="keyword">const</span> otherNumbers = numbers.filter(<span class="function">(<span class="params">number</span>) =&gt;</span> number &gt; <span class="number">15</span>);</span><br><span class="line"><span class="built_in">console</span>.log(otherNumbers);</span><br></pre></td></tr></table></figure><h4 id="19-foreach-includes-push"><a class="markdownIt-Anchor" href="#19-foreach-includes-push"></a> 1.9. forEach, includes, push</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> posts = [<span class="string">'Hi'</span>, <span class="string">'Hello'</span>, <span class="string">'Bye'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!posts.includes(<span class="string">'new'</span>)) &#123;</span><br><span class="line">  posts.push(<span class="string">'new'</span>);</span><br><span class="line">&#125;</span><br><span class="line">posts.forEach(<span class="function">(<span class="params">post</span>) =&gt;</span> <span class="built_in">console</span>.log(post));</span><br></pre></td></tr></table></figure><h2 id="codesandbox"><a class="markdownIt-Anchor" href="#codesandbox"></a> CodeSandbox</h2><ul><li>웹 기반 자바스크립트 에디터 서비스를 제공하는 사이트</li><li>간단한 소스 코드 테스트를 할 때 사용하면 편리하다.</li><li><a href="https://codesandbox.io/s/es6-fundamentals-d4i70" target="_blank" rel="noopener">codesandbox.io</a></li></ul><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://velog.io/@stampid/React%EB%9E%80" target="_blank" rel="noopener">https://velog.io/@stampid/React란</a></li><li><a href="https://velog.io/@kyusung/react-summary" target="_blank" rel="noopener">https://velog.io/@kyusung/react-summary</a></li><li><a href="https://hgko1207.github.io/2019/01/09/react-start/">https://hgko1207.github.io/2019/01/09/react-start/</a></li><li><a href="https://sanghaklee.tistory.com/54" target="_blank" rel="noopener">https://sanghaklee.tistory.com/54</a></li><li><a href="http://woowabros.github.io/experience/2017/12/01/es6-experience.html" target="_blank" rel="noopener">http://woowabros.github.io/experience/2017/12/01/es6-experience.html</a></li><li><a href="https://blog.asamaru.net/2017/08/14/top-10-es6-features/" target="_blank" rel="noopener">https://blog.asamaru.net/2017/08/14/top-10-es6-features/</a></li><li><a href="https://velog.io/@decody/map-%EC%A0%95%EB%A6%AC" target="_blank" rel="noopener">https://velog.io/@decody/map-정리</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2020/03/24/react-study-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Node.js 교과서</title>
      <link>http://hgko1207.github.io/2019/06/19/book-nodejs/</link>
      <guid>http://hgko1207.github.io/2019/06/19/book-nodejs/</guid>
      <pubDate>Wed, 19 Jun 2019 07:31:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;책-정보&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#책-정보&quot;&gt;&lt;/a&gt; 책 정보&lt;/h3&gt;
&lt;img width=&quot;100%&quot; src=&quot;/images/book/nodejs.png&quot; alt=&quot;&quot; title=&quot;Node.js
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="책-정보"><a class="markdownIt-Anchor" href="#책-정보"></a> 책 정보</h3><img width="100%" src="/images/book/nodejs.png" alt="" title="Node.js 교과서" ><h3 id="책-소개"><a class="markdownIt-Anchor" href="#책-소개"></a> 책 소개</h3><blockquote><p>노드의 기본부터 실무까지, 전 과정을 한 권에 담았다!<br />다양한 서비스를 직접 만드는, 실무에 가장 가까운 강의!<br />Node.js 10 + 자바스크립트 ES2018, 최신 문법으로 배우자.</p></blockquote><p>서버와 데이터베이스 개념을 시작으로 노드의 기본 개념을 차근차근 설명해나간다. 군더더기 없는 직관적인 설명, 풍부한 그림으로 기본 개념을 확실히 이해하고, 노드의 기능과 생태계를 사용해보며 실제로 동작하는 서버를 만들어보자. 웹 서버, 웹 API 서버, SNS 서비스, 실시간 GIF 채팅방, 경매 시스템, 위치 기반 장소 검색 서비스, 커맨드라인 인터페이스를 모두 만들어 볼 수 있다. 실무에 당장 적용할 수 있고, 참고할 수 있는 예제와 코드를 최신 문법으로 다뤄보자.</p><h3 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h3><p>최근 Node.js 에 관심이 생겨 공부를 해볼까 하다가 지인의 추천으로 이 책을 사게 되었다. 노드의 기본부터 실무까지 꼼꼼하게 설명되어 있고 무엇보다 예제 소스가 잘 되어 있어 힘들게 코드를 안봐도 되고 이해도 빨라 금방 익숙해졌다. 아직은 걸음마 단계이지만 차근차근 공부하고 프로젝트도 진행해 볼 예정이다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/06/19/book-nodejs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[WPF] Prism Library 사용</title>
      <link>http://hgko1207.github.io/2019/06/19/wpf-prism/</link>
      <guid>http://hgko1207.github.io/2019/06/19/wpf-prism/</guid>
      <pubDate>Wed, 19 Jun 2019 07:26:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;최근 WPF 기반으로 응용 어플리케이션을 개발하고 있다. C#을 처음하는 거라 처음에는 익숙하지 않았지만 자바와 비슷한 면이 많아 금방 적응하였다. WPF 개발을 하는데 Prism Library를 적용하였다. Prism 은 WPF 를 통해 풍부하
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>최근 WPF 기반으로 응용 어플리케이션을 개발하고 있다. C#을 처음하는 거라 처음에는 익숙하지 않았지만 자바와 비슷한 면이 많아 금방 적응하였다. WPF 개발을 하는데 Prism Library를 적용하였다. Prism 은 WPF 를 통해 풍부하고 유연하고 유지보수가 쉬운 설계를 할수 있게 도와준다고 한다. 그리고 MVVM 패턴, Dependency Inejction, CompositeView, Event Aggregator 들을 이용하여 독립적인 컴포넌트들 간의 느슨한 결합들을 이용한 설계 중심의 어플리케이션 제작에도 도움을 준다고 한다.</p><p>즉, WPF 어플리케이션을 만들 시 MVVM 디자인 패턴으로 개발하고 이에 추가적으로 Prism이 제공하는 CompositeView 제작방식과 Event Aggregator 기능들을 사용할 수 있는 것이다.</p><h4 id="prism-설계-목표prism-design-goals"><a class="markdownIt-Anchor" href="#prism-설계-목표prism-design-goals"></a> Prism 설계 목표(Prism Design Goals)</h4><ul><li>재사용성(Reuse)</li><li>확장성(Extensibility)</li><li>유연성(Flexibility)</li><li>협업(Team Development)</li><li>품질(Quality)</li></ul><h4 id="prism-key-concepts"><a class="markdownIt-Anchor" href="#prism-key-concepts"></a> Prism Key Concepts</h4><p>Prism 의 설계 목표와 핵심 개념들이다.</p><ul><li>Modules</li><li>Module catalog</li><li>Shell</li><li>Views</li><li>View models</li><li>Models</li><li>Commands</li><li>Regions</li><li>Navigation</li><li>EventAggregator</li><li>Dependency injection container</li><li>Services</li><li>Controllers</li><li>Bootstrapper</li></ul><h4 id="prism-아키텍쳐"><a class="markdownIt-Anchor" href="#prism-아키텍쳐"></a> Prism 아키텍쳐</h4><img width="100%" src="/images/wpf/prism.png" alt="" title="Prism 아키텍쳐" >]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/06/19/wpf-prism/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo 시작 및 기본 사용법</title>
      <link>http://hgko1207.github.io/2019/02/13/hexo-basic-usage/</link>
      <guid>http://hgko1207.github.io/2019/02/13/hexo-basic-usage/</guid>
      <pubDate>Wed, 13 Feb 2019 01:38:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;hexo&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hexo&quot;&gt;&lt;/a&gt; Hexo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> Hexo</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener"><img src="/images/hexo/hexo.png" alt="https://hexo.io/" /></a></p><p><strong>Hexo</strong> 라는 블로그 프레임워크를 사용하여 블로그를 작성하던 중에 시간이 지나면 생성하는 법이나 작성하는 법 등 사용법들을 자꾸 잊어버리게 되어 기존에 자주 보곤 했던 Hexo 사용법이 잘 정리되어있던 블로그 링크를 모아놨다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://futurecreator.github.io/2016/06/14/get-started-with-hexo/" target="_blank" rel="noopener">워드프레스보다 쉬운 Hexo 블로그 시작하기</a></li><li><a href="https://futurecreator.github.io/2016/06/21/hexo-basic-usage/" target="_blank" rel="noopener">Hexo 기본 사용법</a></li><li><a href="https://hyunseob.github.io/2016/02/23/start-hexo/" target="_blank" rel="noopener">Hexo 시작하기</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/02/13/hexo-basic-usage/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JavaScript] Daum 우편번호 서비스 사용 방법</title>
      <link>http://hgko1207.github.io/2019/01/18/javascript-postcode/</link>
      <guid>http://hgko1207.github.io/2019/01/18/javascript-postcode/</guid>
      <pubDate>Fri, 18 Jan 2019 06:52:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;웹 프로젝트를 하면서 사용자 등록을 하게 될 때 주소를 입력을 하게 되는데, 우편번호 주소 조회가 되도록 처리해달라는 요청이 있었다. 그래서 우편번호 서비스를 검색해 봤을 때 여러가지가 있었지만 개인적으로 좋아보이는 &lt;strong&gt;Daum 우편번
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>웹 프로젝트를 하면서 사용자 등록을 하게 될 때 주소를 입력을 하게 되는데, 우편번호 주소 조회가 되도록 처리해달라는 요청이 있었다. 그래서 우편번호 서비스를 검색해 봤을 때 여러가지가 있었지만 개인적으로 좋아보이는 <strong>Daum 우편번호 서비스</strong>를 사용하게 되었다.</p><h2 id="Daum-우편번호-서비스"><a class="header-anchor" href="#Daum-우편번호-서비스">¶</a>Daum 우편번호 서비스</h2><ul><li>쉽고 간편하게 우편번호 검색, 도로명 주소 입력 기능을 만들 수 있다.</li><li>Key 를 발급받을 필요가 없다.</li><li>사용량에 대한 제한이 전혀 없다.</li><li>기업용이든 상업적 용도이든 상관없이 무조건 무료로 사용 가능하다.</li><li>도로명 주소, 지번 주소, 영문 주소까지 모두 확인 가능하다.</li></ul><p>이 것 말고도 여러 가지 장점이 더 있지만 사용하기 쉽고 무료이며 사용량에 대한 제한이 없고, 특히나 기본 사용법이 정말 쉽게 잘 설명되어 있어서 사용하게 되었다.</p><p><a href="https://postcode.map.daum.net/guide#usage" target="_blank" rel="noopener"><img src="/images/javascript/postcode-1.png" alt="Daum 우편번호 서비스"></a></p><h3 id="예제"><a class="header-anchor" href="#예제">¶</a>예제</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    new daum.Postcode(&#123;</span></span><br><span class="line"><span class="regexp">        oncomplete: function(data) &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분입니다.</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 예제를 참고하여 다양한 활용법을 확인해 보세요.</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;).open();</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="적용"><a class="header-anchor" href="#적용">¶</a>적용</h2><p>다음은 적용한 코드다.</p><h3 id="HTML"><a class="header-anchor" href="#HTML">¶</a>HTML</h3><p>HTML 코드는 다음과 같다. <strong>우편번호</strong>, <strong>도로명 주소</strong>, <strong>상세 주소</strong> 입력 란이 있고 <strong>우편번호 찾기</strong> 버튼이 있다. 버튼을 클릭하게 되면 <strong>execDaumPostcode()</strong> 함수를 호출하게 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-md-2 offset-md-3 form-label"</span>&gt;</span> 주 소 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-danger"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"postcode"</span> <span class="attr">id</span>=<span class="string">"postcode"</span> <span class="attr">placeholder</span>=<span class="string">"우편번호"</span> <span class="attr">readonly</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2 postcode-btn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span> <span class="attr">onclick</span>=<span class="string">"execDaumPostcode()"</span>&gt;</span>우편번호 찾기<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"offset-md-5 col-md-4 mt-2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">placeholder</span>=<span class="string">"도로명 주소"</span> <span class="attr">readonly</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"offset-md-5 col-md-4 mt-2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"detailA_address"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"detailAddress"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">"상세 주소"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">required</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>결과 화면이다.</p><img width="100%" src="/images/javascript/postcode-2.png" alt="우편번호 찾기 화면" title="" ><h3 id="JavaScript"><a class="header-anchor" href="#JavaScript">¶</a>JavaScript</h3><p>버튼을 클릭하여 <code>execDaumPostcode()</code> 함수가 호출되면서 주소 검색 팝업창이 보여지게 한다. 팝업팡에서 주소 검색 결과 항목을 클릭했을 때 우편번호와 도로명주소 입력란에 값을 채워넣게 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">/</span>** 우편번호 찾기 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">function execDaumPostcode() &#123;</span></span><br><span class="line"><span class="regexp">      new daum.Postcode(&#123;</span></span><br><span class="line"><span class="regexp">          oncomplete: function(data) &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분입니다.</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 각 주소의 노출 규칙에 따라 주소를 조합한다.</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.</span></span><br><span class="line"><span class="regexp">            let addr = ''; /</span><span class="regexp">/ 주소 변수</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.</span></span><br><span class="line"><span class="regexp">            if (data.userSelectedType === 'R') &#123; /</span><span class="regexp">/ 사용자가 도로명 주소를 선택했을 경우</span></span><br><span class="line"><span class="regexp">                addr = data.roadAddress;</span></span><br><span class="line"><span class="regexp">            &#125; else &#123; /</span><span class="regexp">/ 사용자가 지번 주소를 선택했을 경우(J)</span></span><br><span class="line"><span class="regexp">                addr = data.jibunAddress;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            $("#postcode").val(data.zonecode);</span></span><br><span class="line"><span class="regexp">            $("#address").val(addr);</span></span><br><span class="line"><span class="regexp">            $("#address").focus();</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">      &#125;).open();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>Daum 우편번호 서비스를 사용하여 주소를 검색하고 우편번호와 도로명 주소를 받아 입력란에 넣어줬다. Daum 우편번호 서비스 사이트 가시면 예제와 속성, 함수에 대한 부분도 잘 설명 되어 있기 때문에 다양하게 개발할 수 있다.</p><h2 id="참고"><a class="header-anchor" href="#참고">¶</a>참고</h2><ul><li><a href="http://postcode.map.daum.net/guide" target="_blank" rel="noopener">Daum 우편번호 서비스</a></li><li><a href="http://chongmoa.com/javascript/28679" target="_blank" rel="noopener">Daum 우편번호 서비스 사용 가이드 - 우편번호 검색, 적용법 및 사용예제</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/18/javascript-postcode/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JavaScript] 전화번호 하이픈(-) 자동입력</title>
      <link>http://hgko1207.github.io/2019/01/18/javascript-autoHypenTel/</link>
      <guid>http://hgko1207.github.io/2019/01/18/javascript-autoHypenTel/</guid>
      <pubDate>Fri, 18 Jan 2019 06:22:36 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;사용자 등록 시 전화번호를 입력하게 되는데 아래 그림처럼 세 개의 입력을 받아 합치는 형식으로 많이 개발한다.&lt;/p&gt;
&lt;img width=&quot;65%&quot; src=&quot;/images/javascript/hypen-1.png&quot; alt=&quot;연락처 입력&quot; titl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>사용자 등록 시 전화번호를 입력하게 되는데 아래 그림처럼 세 개의 입력을 받아 합치는 형식으로 많이 개발한다.</p><img width="65%" src="/images/javascript/hypen-1.png" alt="연락처 입력" title="" ><p>이렇게 개발해도 괜찮지만 좀 더 쉽게 하기 위해서 전화번호 입력 시 자동으로 하이픈(-)이 입력되도록 하는 형식으로 바꾸면 좋겠다 싶어 구현해봤다.<br />개발 된 화면은 다음과 같다.</p><img width="75%" src="/images/javascript/hypen-2.png" alt="" title="" ><h2 id="1-html"><a class="markdownIt-Anchor" href="#1-html"></a> 1) HTML</h2><p>먼저 HTML 소스 코드다. <strong>input</strong> 태그를 사용하고 <strong>pattern</strong>과 <strong>maxlength</strong>, <strong>required</strong>, <strong>placeholder</strong>를 사용하였다. 속성에 대한 설명은 참고 사이트를 보시면 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"tel"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"form-control m-input"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"tel"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"telInput"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">required</span></span></span><br><span class="line"><span class="tag">  <span class="attr">pattern</span>=<span class="string">"[0-9]&#123;2,3&#125;-[0-9]&#123;3,4&#125;-[0-9]&#123;4&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxlength</span>=<span class="string">"13"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">"예) 010-1234-5678"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-javascript"><a class="markdownIt-Anchor" href="#2-javascript"></a> 2) JavaScript</h2><p>먼저 전화번호 크기에 따라 나눴다. 서울 전화번호는 02 로 두자리로 시작하고 핸드폰은 010, 011… 이고 다른 지역 전화번호는 031, 041, 051 등 세자리로 시작하여 {2}-{3 or 4}-{4} 또는 {3}-{3 or 4}-{4} 형태가 되도록 문자열을 잘라내는 방식으로 하였다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoHypenTel</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  str = str.replace(<span class="regexp">/[^0-9]/g</span>, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">var</span> tmp = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (str.substring(<span class="number">0</span>, <span class="number">2</span>) == <span class="number">02</span>) &#123;</span><br><span class="line">    <span class="comment">// 서울 전화번호일 경우 10자리까지만 나타나고 그 이상의 자리수는 자동삭제</span></span><br><span class="line">    <span class="keyword">if</span> (str.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> str;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.length &lt; <span class="number">6</span>) &#123;</span><br><span class="line">      tmp += str.substr(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">      tmp += <span class="string">'-'</span>;</span><br><span class="line">      tmp += str.substr(<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.length &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      tmp += str.substr(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">      tmp += <span class="string">'-'</span>;</span><br><span class="line">      tmp += str.substr(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">      tmp += <span class="string">'-'</span>;</span><br><span class="line">      tmp += str.substr(<span class="number">5</span>);</span><br><span class="line">      <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tmp += str.substr(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">      tmp += <span class="string">'-'</span>;</span><br><span class="line">      tmp += str.substr(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">      tmp += <span class="string">'-'</span>;</span><br><span class="line">      tmp += str.substr(<span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line">      <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 핸드폰 및 다른 지역 전화번호 일 경우</span></span><br><span class="line">    <span class="keyword">if</span> (str.length &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> str;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.length &lt; <span class="number">7</span>) &#123;</span><br><span class="line">      tmp += str.substr(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">      tmp += <span class="string">'-'</span>;</span><br><span class="line">      tmp += str.substr(<span class="number">3</span>);</span><br><span class="line">      <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.length &lt; <span class="number">11</span>) &#123;</span><br><span class="line">      tmp += str.substr(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">      tmp += <span class="string">'-'</span>;</span><br><span class="line">      tmp += str.substr(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">      tmp += <span class="string">'-'</span>;</span><br><span class="line">      tmp += str.substr(<span class="number">6</span>);</span><br><span class="line">      <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tmp += str.substr(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">      tmp += <span class="string">'-'</span>;</span><br><span class="line">      tmp += str.substr(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">      tmp += <span class="string">'-'</span>;</span><br><span class="line">      tmp += str.substr(<span class="number">7</span>);</span><br><span class="line">      <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>호출 부분 코드다. 키가 입력될 때마다 검사를 진행한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#telInput'</span>).keyup(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = event || <span class="built_in">window</span>.event;</span><br><span class="line">  <span class="keyword">var</span> _val = <span class="keyword">this</span>.value.trim();</span><br><span class="line">  <span class="keyword">this</span>.value = autoHypenTel(_val);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>전화번호 시작이 1588, 1668 등과 같은 번호 일 경우에 대해서는 작성하지 않았다. 보다시피 완벽하게 최적화가 되지 않았기 때문에 추후에 수정이 될 것 같다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="http://jun.hansung.ac.kr/CWP/htmls/HTML%20Input%20Attributes.html" target="_blank" rel="noopener">HTML Input 속성들(Attributes)</a></li><li><a href="https://mulder21c.github.io/2014/11/03/automatically-enter-cell-phone-number-hyphen/" target="_blank" rel="noopener">핸드폰 번호 하이픈(-) 자동입력</a></li><li><a href="http://www.blueb.co.kr/?c=1/9&amp;cat=Form+Check&amp;uid=2077" target="_blank" rel="noopener">전화번호 입력시 하이픈(-) 자동 입력</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/18/javascript-autoHypenTel/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Git] 이클립스에서 Git 사용법</title>
      <link>http://hgko1207.github.io/2019/01/18/eclipse-git/</link>
      <guid>http://hgko1207.github.io/2019/01/18/eclipse-git/</guid>
      <pubDate>Fri, 18 Jan 2019 02:17:07 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;기존에는 사내에서 개발할 때 SVN으로 형상관리를 하였는데, 이번에 개인 공부도 하고 프로젝트로 만들다 보니 GitHub를 사용하게 되었다. GitHub는 원격 저장소를 제공하며 여러가지 프로젝트 진행을 원활하게 하는 도구를 함께 제공하는 이점이
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>기존에는 사내에서 개발할 때 SVN으로 형상관리를 하였는데, 이번에 개인 공부도 하고 프로젝트로 만들다 보니 GitHub를 사용하게 되었다. GitHub는 원격 저장소를 제공하며 여러가지 프로젝트 진행을 원활하게 하는 도구를 함께 제공하는 이점이 있어서 사용하였다.</p><p>스프링 프레임워크 기반 웹 프로젝트를 이클립스로 개발하고 있어 이클립스와 GitHub 를 연동하였다. 이제 연동 방법을 설명한다.</p><h3 id="1-원격-저장소-생성"><a class="markdownIt-Anchor" href="#1-원격-저장소-생성"></a> 1. 원격 저장소 생성</h3><p>먼저 공식 사이트인 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> 에서 회원가입을 한다. 회원가입 후 로그인을 하고 <strong><em>“Start a project”</em></strong> 버튼을 클릭한다. 다음 그림처럼 화면이 나온다.</p><img width="100%" src="/images/git/git-repository.png" alt="원격 저장소 생성" title="원격 저장소 생성"><p>원격 저장소 이름을 입력하고 다른 것은 수정하지 말고 <strong><em>“Create repository”</em></strong> 버튼을 클릭하면 다음과 같은 원격저장소가 생성된다. 빨간 네모 박스의 경로를 복사해둔다.</p><img width="100%" src="/images/git/git-success.png" alt="원격 저장소 생성 완료" title="원격 저장소 생성 완료"><h3 id="2-egit-설치"><a class="markdownIt-Anchor" href="#2-egit-설치"></a> 2. EGit 설치</h3><p>이클립스를 실행하고 <strong>Help -&gt; Eclipse Marketplace</strong> 를 클릭한다.</p><img width="80%" src="/images/git/eclipse-git-1.png" alt="Eclipse Marketplace" title=""><p>Marketplace 에서 Egit 를 검색한다. 다음 그림 처럼 <strong>EGit - Git Integration for Eclipse</strong> 를 찾아 설치한다. 설치가 완료되면 이클립스를 다시 실행하게 된다.</p><img width="50%" src="/images/git/eclipse-git-2.png" alt="EGit 설치" title=""><p>재실행 후에 이클립스의 오른쪽 위에 퍼스펙티브 버튼을 클릭하면 창이 보인다.</p><img width="45%" src="/images/git/eclipse-git-3.png" alt="퍼스펙티브 추가" title=""><p>Git 을 선택하고 <strong>[OK]</strong> 버튼을 눌러 활성화 시킨다. Git 퍼스펙티브가 추가된 것을 볼 수 있으며 아이콘을 클릭하면 아래 그림처럼 기본화면이 변경된다.</p><img width="100%" src="/images/git/eclipse-git-4.png" alt="퍼스펙티브 변경" title=""><h3 id="3-원격-저장소-연동"><a class="markdownIt-Anchor" href="#3-원격-저장소-연동"></a> 3. 원격 저장소 연동</h3><p>Git 퍼스펙티브 화면에서 <strong>[Clone a Git repository]</strong> 를 클릭한다.</p><img width="100%" src="/images/git/eclipse-git-5.png" alt="" title="" ><p>Clone Git Repository 창이 보이면 <strong>Clone URL</strong> 를 선택하고 <strong>[Next]</strong> 버튼을 클릭하면 다음의 그림처럼 화면이 보인다.(이클립스 버전마다 조금씩 다른 것 같다.)</p><p>첫 번째 빨간 박스에서 앞에서 복사해둔 Git 원격 저장소 주소를 <strong>URI</strong> 칸에 복사하면 <strong>Host</strong>, <strong>Repository path</strong> 칸에 자동으로 입력된다. 그 밑의 빨간 박스에는 깃허브 아이디와 패스워드를 입력하고 <strong>[Next]</strong> 버튼을 클릭한다.</p><img width="60%" src="/images/git/eclipse-git-6.png" alt="" title="" ><p>Branch 를 선택하는 화면이 보이는데 Branch를 만들지 않았으므로 그냥 <strong>[Next]</strong> 버튼을 클릭한다.</p><img width="60%" src="/images/git/eclipse-git-7.png" alt="" title="" ><p>원격 저장소와 연결할 로컬 저장소를 설정한 뒤 <strong>[Finish]</strong> 버튼을 클릭한다.</p><img width="60%" src="/images/git/eclipse-git-8.png" alt="" title="" ><h3 id="4-프로젝트-연동"><a class="markdownIt-Anchor" href="#4-프로젝트-연동"></a> 4. 프로젝트 연동</h3><p>개발하고 있는 프로젝트와 연동하기 위해 작업을 한다. 프로젝트를 마우스 우클릭 후 그림 처럼 <strong>[Team] -&gt; [Share Project]</strong> 를 클릭한다.</p><img width="70%" src="/images/git/eclipse-git-9.png" alt="" title="" ><p><strong>Git</strong> 을 선택하고 <strong>[Next]</strong> 버튼을 클릭한다. 그런 다음 Repository 란에서 앞에서 생성한 저장소를 설정해주고 <strong>[Finish]</strong> 버튼을 클릭한다.</p><img width="100%" src="/images/git/eclipse-git-10.png" alt="" title="" ><h3 id="4-첫-번째-커밋"><a class="markdownIt-Anchor" href="#4-첫-번째-커밋"></a> 4. 첫 번째 커밋</h3><p>원격 저장소에 첫 번째로 커밋한다. 프로젝트를 마우스 우클릭 후 <strong>[Team] -&gt; [Commit]</strong> 을 클릭한다.</p><img width="70%" src="/images/git/eclipse-git-11.png" alt="" title="" ><p>다음과 같은 화면이 뜨면 <strong><em>Commit Message</em></strong> 항목에 메시지를 작성 한 후 프로젝트 파일 전체를 <strong><em>Staged Changes</em></strong> 로 옮긴다. 그런 후에 마지막으로 <strong>[Commit and Push]</strong> 버튼을 클릭한다.</p><img width="100%" src="/images/git/eclipse-git-12.png" alt="" title="" ><p>Branch에 push 하기 과정인데 이 부분은 패스하겠습니다. <strong>[Next]</strong> 버튼을 클릭한다.</p><img width="65%" src="/images/git/eclipse-git-13.png" alt="" title="" ><p>그럼 로그인 창이 뜰텐데, GitHub의 아이디와 비밀번호를 입력하시고 <strong>[OK]</strong> 버튼을 클릭한다. Push 확인 화면이 보여지는데 확인하고 <strong>[Finish]</strong> 버튼을 클릭한다.</p><img width="65%" src="/images/git/eclipse-git-14.png" alt="" title="" ><p>다시 로그인 창이 뜹니다. 처음에만 2번 로그인하고 그 다음에는 한번만 로그인 하면 됩니다. 아이디 비밀번호를 입력하고 <strong>[OK]</strong> 버튼을 클릭한다. 완료가 되면 아래 그림 처럼 Push 결과 화면이 보여진다.</p><img width="65%" src="/images/git/eclipse-git-15.png" alt="" title="" ><h2 id="5-github에서-프로젝트-확인"><a class="markdownIt-Anchor" href="#5-github에서-프로젝트-확인"></a> 5. GitHub에서 프로젝트 확인</h2><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 홈페이지를 가서 Push 된 프로젝트를 확인 할 수 있다. 그림 처럼 프로젝트가 올라가있고 수정된 이력도 보여진다. 이클립스에서 소스 코드를 수정하고 위에서 본 <strong>Commit</strong> 과정과 같이 하면 프로젝트를 관리할 수 있다.</p><img width="100%" src="/images/git/eclipse-git-16.png" alt="" title="" ><br><p>이클립스와 GitHub의 원격 저장소와 연동하여 설정을 하였다. 아직은 깃을 많이 사용해보지 못하였고 조금씩 알아가며 사용하고 있고 Branch에 대해서도 알아가고 있다. 늦은 감이 있긴 한데 이제라도 얼른 써서 익숙해지려고 노력해야겠다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="http://eanastudy.tistory.com/66" target="_blank" rel="noopener">[Git] 이클립스에서 Git 사용하기</a></li><li><a href="http://gasaesososo.tistory.com/9?category=726951" target="_blank" rel="noopener">[Git] 이클릭스에서의 Git 사용법(egit) 1</a></li><li><a href="https://coding-factory.tistory.com/247" target="_blank" rel="noopener">[Git] 이클립스와 깃(GitHub) 연동하여 원격 저장소의 프로젝트 내려받기</a></li><li><a href="http://lee-mandu.tistory.com/317" target="_blank" rel="noopener">[git] 이클립스(eclipse) 연동하여 처음 사용하기</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/18/eclipse-git/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React Native] Expo 사용 방법</title>
      <link>http://hgko1207.github.io/2019/01/11/react-native-expo-start/</link>
      <guid>http://hgko1207.github.io/2019/01/11/react-native-expo-start/</guid>
      <pubDate>Fri, 11 Jan 2019 07:35:26 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;expo&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#expo&quot;&gt;&lt;/a&gt; Expo&lt;/h1&gt;
&lt;p&gt;리액트 네이티브는 리액트 아키텍처를 모바일에 적용한 것으로, ES6 문법과 리액트를 이용해 모바일 어플리케이션을 개발할
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="expo"><a class="markdownIt-Anchor" href="#expo"></a> Expo</h1><p>리액트 네이티브는 리액트 아키텍처를 모바일에 적용한 것으로, ES6 문법과 리액트를 이용해 모바일 어플리케이션을 개발할 수 있도록 해주는 프레임워크다. 리액트 네이티브 프로젝트 생성 시 <code>react-native init &lt;프로젝트 이름&gt;</code>을 입력하여 사용하였다. 이것만으로도 충분하다고 느껴졌는데 다른 강좌를 보던 중에 Expo 툴을 발견하게 되었다.</p><p><a href="https://expo.io/" target="_blank" rel="noopener">Expo</a> 는 리액트 네이티브 어플리케이션의 빌드를 돕는 툴이다. 네이티브 API에 접근하는 것도 쉽게 만들어주고, 안드로이드와 iOS 버전을 알아서 빌드해준다. 무엇보다 코드를 수정하면 바로 hot reloading 시켜주는 것이 가장 편하다.</p><p>작년 12월 쯤에 리액트 네이티브를 알게 되고 최근에 Expo도 접하게 되면서 찾던 중 처음에는 Expo Xde를 다운받아 사용하라고 하여서 Expo 홈페이지를 찾아봤지만 다운받지 못하였다. 그러던 중 xde 지원이 중단되고 대신 Expo dev tool(=expo cli 최신버전)을 설치해서 사용하라고 하는 내용을 보게 되었다.</p><h2 id="expo-cli-설치-및-실행"><a class="markdownIt-Anchor" href="#expo-cli-설치-및-실행"></a> Expo cli 설치 및 실행</h2><h3 id="1-nodejs-설치"><a class="markdownIt-Anchor" href="#1-nodejs-설치"></a> 1. node.js 설치</h3><p>이전 글인 <strong><em>리액트 시작하기</em></strong> 를 참고한다.<br /><a href="https://hgko1207.github.io/2019/01/09/react-start/">&gt; [Programming/React/리액트 시작하기] - Node.js 설치: Windows</a></p><h3 id="2-expo-cli-설치"><a class="markdownIt-Anchor" href="#2-expo-cli-설치"></a> 2. expo-cli 설치</h3><p>터미널(또는 명령프롬프트) 창을 열고, 다음 명령어를 실행한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g expo-cli</span></span><br></pre></td></tr></table></figure><h3 id="3-프로젝트-생성"><a class="markdownIt-Anchor" href="#3-프로젝트-생성"></a> 3. 프로젝트 생성</h3><p>프로젝트 생성할 때는 <code>expo init &lt;프로젝트 이름&gt;</code> 명령어를 사용한다.<br />init 입력 후 프로젝트 개발 목적에 맞게 선택한다. 그런 다음 <strong><em>Use Yarn to install dependencies?</em></strong> 하는 질문에 <strong>Y</strong> 를 입력하고 엔터를 입력한다. 그러면 설치가 시작되고 완료 후 프로젝트가 정상적으로 생성이 되었는지 확인한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> expo init react-native-project</span></span><br></pre></td></tr></table></figure><img width="100%" src="/images/react/react-expo-init.png" alt="프로젝트 생성 선택" title="" ><h3 id="4-프로젝트-실행"><a class="markdownIt-Anchor" href="#4-프로젝트-실행"></a> 4. 프로젝트 실행</h3><p>프로젝트를 실행하면 새 탭이 생성되면서 다음 그림처럼 보여진다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> react-native-project</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> expo start</span></span><br></pre></td></tr></table></figure><img width="100%" src="/images/react/react-expo-start.png" alt="프로젝트 실행 화면" title="" ><h3 id="5-모바일-디바이스-연결"><a class="markdownIt-Anchor" href="#5-모바일-디바이스-연결"></a> 5. 모바일 디바이스 연결</h3><ul><li><strong>실제 모바일 디바이스</strong><br />먼저 <a href="https://expo.io/" target="_blank" rel="noopener">Expo</a> 홈페이지에서 계정을 생성한다. 그런 다음 모바일에서 <strong>“Expo client”</strong> 앱을 설치한다. 그리고 프로젝트 실행 화면에서 <strong>Publish or republish project…</strong> 을 클릭하고 내용을 입력 후 <strong>Publish Project</strong> 버튼을 클릭한다.</li></ul><img width="100%" src="/images/react/react-expo-start-app.png" alt="모바일 디바이스 연결" title=""><p>클릭하는 순간 터미널(또는 명령프롬프트)에 계정 정보를 입력하라는 문구가 뜬다. 그럼 생성한 계정정보를 입력 후 엔터키를 누르고 프로젝트 실행 화면으로 넘어와서 성공했는지 확인한다.</p><img width="100%" src="/images/react/react-expo-start-app1.png" alt="모바일 디바이스 연결 성공 확인" title=""><p><strong>&quot;Expo client&quot;</strong> 앱을 실행하고 생성한 계정정보를 입력한다. 로그인 성공 후 하단에 있는 <strong><em>Projects</em></strong> 탭을 클릭한다. 그러면 Publish 성공한 프로젝트가 보인다. 프로젝트를 클릭하면 우리가 작업한 화면이 보일 것이다. 코드를 수정하면 바로 앱에서 변경되는 것을 확인할 수 있다.</p><img width="95%" src="/images/react/react-expo-start-app2.png" alt="Expo client 앱 화면" title="" ><p><strong>이슈사항</strong>은 모바일 디바이스와 연결 시 같은 망의 네트워크여야 하는 것 같다. QR Code로 하는 방법도 있는 것 같은데 아직 시도를 못 해봤다.</p><ul><li><strong>에뮬레이터</strong><br />iOS는 Xcode를 설치하고 Android는 Android Studio를 설치하고 AVD manager에서 디바이스를 생성 후 실행시켜준다. 그런 다음 프로젝트 실행 화면에서 <strong><em>“Run on Android device/emulator”</em></strong> 또는 <strong><em>“Run on iOS simulator”</em></strong> 를 클릭한다. 자동으로 에뮬레이터에 앱이 설치가 되고 실행이 된다. 그리고서 실행된 화면을 확인하고 코드를 변경한다. 라이브 리로드 설정이 되어있으면 바로 리로드가 되는 것을 확인할 수 있다.<br><br />에뮬레이터 연결은 Expo 뿐만 아니라 앱 개발할 때 자주 사용하기 때문에 따로 설명은 없고 아래 링크에서 가이드를 보면 나와있다.<br><br /><a href="https://docs.expo.io/versions/v32.0.0/introduction/installation" target="_blank" rel="noopener">&gt; 모바일 클라이언트 : iOS 및 Android 에뮬레이터</a></li></ul><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://docs.expo.io/versions/v32.0.0/" target="_blank" rel="noopener">Expo Quick Start</a></li><li><a href="http://codinghub.tistory.com/48" target="_blank" rel="noopener">Expo Xde 지원 중단에 따른 Expo dev tool(Expo cli) 설치 및 실행 방법</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/11/react-native-expo-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React Native] 시작하기</title>
      <link>http://hgko1207.github.io/2019/01/11/react-native-start/</link>
      <guid>http://hgko1207.github.io/2019/01/11/react-native-start/</guid>
      <pubDate>Fri, 11 Jan 2019 04:20:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;react-native-란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#react-native-란&quot;&gt;&lt;/a&gt; React Native 란&lt;/h2&gt;
&lt;p&gt;리액트는 페이스북이 웹 개발을 쉽게 하기 위해 만든 기술이다. 리
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="react-native-란"><a class="markdownIt-Anchor" href="#react-native-란"></a> React Native 란</h2><p>리액트는 페이스북이 웹 개발을 쉽게 하기 위해 만든 기술이다. 리액트 네이티브는 리액트의 접근 방법을 모바일로 확장하는 페이스북의 오픈소스 프로젝트다.</p><p>기존의 하이브리드 앱은 WebView에 화면을 만들어 놓고 모바일 앱에서 접근하는 것이었기 때문에 퍼포먼스가 떨어지고, 모바일 앱과의 괴리감이 있었다. 리액트 네이티브는 실제 네이티브 UI를 사용하여 모바일 앱을 구현한다. 퍼포먼스는 올라가고 괴리감도 사라지게 된다.</p><p>리액트 네이티브를 사용하면 JavaScript를 사용하여 모바일 앱을 제작할 수 있다. 리액트와 동일한 디자인을 사용하여 선언적 구성 요소에서 풍부한 모바일 UI를 구성 할 수 있다.</p><p>출처: <a href="http://starvinglion-rn.tistory.com/2" target="_blank" rel="noopener">배고픈사자의 React Native [리액트 네이티브]</a></p><h2 id="장점"><a class="markdownIt-Anchor" href="#장점"></a> 장점</h2><ul><li><p><strong>높은 생산성</strong><br />리액트를 사용하여 개발해 보신분이라면 처음부터 빠르게 개발을 시작할 수 있다. 아니라면 처음에 당연히 러닝커브(Learning Curve)는 필요하다. 그렇지만 Swift, Java 또는 Kotlin, Objective-C 를 배우는 것보다 자바스크립트 언어 하나로 작성하기 때문에 생산성이 당연히 좋다고 생각한다. 그리고 iOS 와 Android를 동시에 개발할 수 있다는 점이 매우 큰 장점이다.</p></li><li><p><strong>라이브 리로딩</strong><br />리액트 네이티브를 사용하면 앱을 더 빠르게 빌드할 수 있다. 기존 앱을 개발할 때는 변경되면 다시 빌드를 해야 했지만 리액트 네이티브로 개발할 때 다시 컴파일 하는 대신 즉시 앱을 다시 로드 할 수 있다. 코드를 수정해서 저장만 하면 변경된 내용을 바로 확인 할 수 있어 실제 개발시간을 확신히 단축시킬 수 있다.</p></li><li><p><strong>필요한 경우 원시 코드 사용</strong><br />리액트 네이티브는 Swift, Java 또는 Objective-C 로 작성된 구성 요소와 원활하게 결합한다. 애플리케이션의 몇 가지 측면을 최적화해야하는 경우 네이티브 코드로 간단하게 작성 할 수 있다.</p></li></ul><h2 id="단점"><a class="markdownIt-Anchor" href="#단점"></a> 단점</h2><ul><li><p><strong>개발자료 부족</strong><br />시작된지 얼마 되지 않는 프로젝트라서 검색을 하였을 때 확실히 자료가 적은 것 같다. 더군다나 영어 자료는 있는데 한글로 된 자료는 더욱 없다고 느껴진다.</p></li><li><p><strong>힘든 유지보수</strong><br />플랫폼 기기에 대한 문제가 생기면 원인을 찾기가 힘든 것 같다. 그리고 국내에 리액트 네이티브 개발자가 많이 없다고 들었다. 만약에 리액트 네이티브로 개발을 완료하고 퇴사를 하게 되면 후임자나 유지보수를 해야하는 개발자를 구해야 하는데 특히 소규모 회사들은 더욱 어렵다고 느껴진다.</p></li></ul><h2 id="비고"><a class="markdownIt-Anchor" href="#비고"></a> 비고</h2><p>위의 단점이 있더라도 장점이 크다고 느껴지고 흥미가 있어 리액트 네이티브에 대해 공부하고 앞으로 있는 새로운 프로젝트에서 사용해 볼 예정이다.</p><p>리액트 네이티브 설치와 실행 및 환경설정은 워낙 정리가 잘 되어있는 블로그가 많아서 따로 정리를 하지 않았다. 아래 참고에 되어 있는 링크를 따라가면 window, macOS 환경에서의 설치와 ios, android 플랫폼에서 실행할 수 있도록 잘 설명되어 있다. 그리고 리액트 네이티브에 대한 내용과 장단점에 대해서도 참고 링크를 보면 자세하게 볼 수 있다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="http://yuddomack.tistory.com/entry/1React-Native-%EC%84%A4%EC%B9%98%EC%99%80-%EC%8B%A4%ED%96%89hello-world?category=754156" target="_blank" rel="noopener">React Native 설치와 실행(hello world)</a></li><li><a href="https://medium.com/@jang.wangsu/rn-react-native-%EC%8B%9C%EC%9E%91-3aab881f574f" target="_blank" rel="noopener">[RN] React-Native 시작하기</a></li><li><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">React Native</a></li><li><a href="https://facebook.github.io/react-native/docs/getting-started" target="_blank" rel="noopener">React Native Getting Started</a></li><li><a href="https://medium.com/@jang.wangsu/rn-react-native%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90%EC%9D%80-6e8a2396eea1" target="_blank" rel="noopener">[RN] React-Native의 장단점은?</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/11/react-native-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WPF MVVM 일주일 만에 배우기</title>
      <link>http://hgko1207.github.io/2019/01/11/book-wpf/</link>
      <guid>http://hgko1207.github.io/2019/01/11/book-wpf/</guid>
      <pubDate>Fri, 11 Jan 2019 02:00:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;책-정보&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#책-정보&quot;&gt;&lt;/a&gt; 책 정보&lt;/h3&gt;
&lt;img width=&quot;100%&quot; src=&quot;/images/book/wpf.png&quot; alt=&quot;&quot; title=&quot;WPF MVVM 일
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="책-정보"><a class="markdownIt-Anchor" href="#책-정보"></a> 책 정보</h3><img width="100%" src="/images/book/wpf.png" alt="" title="WPF MVVM 일주일 만에 배우기" ><h3 id="책-소개"><a class="markdownIt-Anchor" href="#책-소개"></a> 책 소개</h3><p>필자의 십 수년간의 강의 경험을 최적화하여 집필한 가장 얇은 WPF 개발 서적으로 군더더기 없이 WPF를 빨리 배울 수 있다. 간단한 연습 과제와 따라 하기 방식의 해당 풀이를 통해 컨트롤 및 레이아웃, 데이터 바인딩 등의 WPF 기본 사항들을 익히고 최종적으로는 MVVM 패턴을 사용한 WPF 응용 프로그램 예제를 만들어 본다. 한국어판에서는 좀 더 쉽게 이해할 수 있도록 스크린샷과 설명을 추가했다. 짧은 시간 내에 WPF 및 MVVM 패턴에 대한 내용을 익히고 실제 프로젝트에 적용하고자 한다면 WPF 개발 서적이 몇 없는 국내 현실에서 단비와 같은 이 책 한 권으로 의도한 바를 이룰 수 있을 것이다.</p><h3 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h3><p>WPF 기반 프로젝트를 하기 전에 WPF 에 대한 기본 개념을 잡기 위해 구매한 책이다. 기본 개념을 잡기 위해 구매한 책이라 그런지 입문하는 입장에서는 좋은 책 인 것 같지만 정말 기본만 배우게 되어 조금 아쉬웠다. 그래도 애플리케이션 생성과 데이터 바인딩, MVVM 패턴 등 중요한 용어에 대해 알려줘서 나중에 개발 시 구글 검색을 할 때 좋을 것 같았다. 코드 양은 얼마 없고 페이지 수도 짧아 일주일이 되지 않아 다 읽게 되었다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/11/book-wpf/#disqus_thread</comments>
    </item>
    
    <item>
      <title>이것이 C#이다</title>
      <link>http://hgko1207.github.io/2019/01/09/book-c/</link>
      <guid>http://hgko1207.github.io/2019/01/09/book-c/</guid>
      <pubDate>Wed, 09 Jan 2019 09:13:33 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;책-정보&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#책-정보&quot;&gt;&lt;/a&gt; 책 정보&lt;/h3&gt;
&lt;img width=&quot;100%&quot; src=&quot;/images/book/c.png&quot; alt=&quot;&quot; title=&quot;이것이 C#이다&quot; &gt;

        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="책-정보"><a class="markdownIt-Anchor" href="#책-정보"></a> 책 정보</h3><img width="100%" src="/images/book/c.png" alt="" title="이것이 C#이다" ><h3 id="책-소개"><a class="markdownIt-Anchor" href="#책-소개"></a> 책 소개</h3><blockquote><p>한 번 배울 때 제대로, 기본기부터 탄탄히 다지고 간다!</p></blockquote><p>이 책은 C# .NET 프레임워크 세계에 첫 발을 들이는 입문자를 위한 책이다. 따라서 딱딱하지 않은 대화식 표현으로 1:1 강의처럼 배울 수 있는 것이 이 책의 가장 큰 장점이다. 또한 C#의 핵심 문법은 물론, 프로그래밍 동작 원리까지도 입문자 입장에서 하나하나 꼼꼼히 설명하였다. 책을 덮을 때쯤이면 기초 문법부터, 고급 문법, 그리고 .NET 프레임워크의 활용까지 C#의 전반적인 큰 틀을 자연스레 익힐 수 있을 것이다.『이것이 C#이다』로 C# 프로그래밍을 시작한다면, 튼튼한 기본기가 갖춰져, 더 이상 실전과 응용도 두렵지 않습니다.</p><h3 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h3><p>개발 서적을 구매하고 공부하는 것을 좋아해서 찾아보다가 예전부터 알개발해 보고 싶었던 C# 책을 찾게 되었다. 마침 회사에서도 C#, WPF 기반 프로젝트를 수행하게 되어 급하게 알아보다가 이 책을 구매해서 역시나 코드를 보며 이해하였다. Java 개발을 몇년 간 한 경험으로 C# 코드를 봤을 때 정말 비슷한 점이 많고 오히려 더 쉽게 느껴졌다. 역시나 개발을 하면서 더 익숙해지겠지만 LINQ 나 람다식으로 인해 코드가 직관적이고 간결하게 표현되는 것을 보며 책을 구매하기 잘 했다고 생각하였다. 여러모로 만족이었다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/09/book-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React] 설치 및 설정 방법</title>
      <link>http://hgko1207.github.io/2019/01/09/react-start/</link>
      <guid>http://hgko1207.github.io/2019/01/09/react-start/</guid>
      <pubDate>Wed, 09 Jan 2019 05:10:34 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;리액트란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#리액트란&quot;&gt;&lt;/a&gt; 리액트란&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; 는 사용자 인터페이스를 만들기위해 페이스북과 인스타그램에서 개발한 오픈소스 자
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="리액트란"><a class="markdownIt-Anchor" href="#리액트란"></a> 리액트란</h2><p><strong>React</strong> 는 사용자 인터페이스를 만들기위해 페이스북과 인스타그램에서 개발한 오픈소스 자바스크립트 라이브러리로써, 사용자 인터페이스(User Interface)에 집중하며, Virtual DOM 을 통해 속도와 편의를 높이고, 단방향 데이터플로우를 지원하여 <a href="http://web-front-end.tistory.com/27" target="_blank" rel="noopener">보일러플레이트 코드</a>를 감소시켜, 많은 사람들이 React를 MVC의 V를 고려하여 선택한다. 즉, React는 지속해서 데이터가 변하는 대규모 어플리케이션의 구축이라는 하나의 문제를 풀기 위해서 만들어졌다. 아래는 React 에서 장점들이다.</p><ul><li><strong>단순함</strong> : 당신의 어플리케이션이 어떤 주어진 시점에 어떻게 보여야할지를 단순하게 표현함으로써, React 는 그 데이터들이 변할 때, 자동적으로 모든 UI 업데이트들을 관리할 것이다.</li><li><strong>선언적인 문법</strong> : 데이터가 변할 때, React 는 개념적으로 ‘새로고침’ 버튼을 눌러서, 변화된 부분을 알아채 업데이트하게 된다.</li><li><strong>구성적인 컴포넌트 개발</strong> : React 는 재사용가능한 컴포넌트들을 개발하기 위한 모든 것이다. 사실, React 로 당신이 할 수 있는 오직 한가지는 컴포넌트를 개발하는 것이다. 그것들은 캡슐화 되어있기 때문에, 컴포넌트들은 재사용될 수 있고, 테스트될 수 있으며, 관심의 분리(seperation of concerns)를 지키게 해준다.</li></ul><h2 id="설치하기"><a class="markdownIt-Anchor" href="#설치하기"></a> 설치하기</h2><p>리액트를 설치하고 프로젝트를 만들어 보자.<br />리액트 프로젝트를 만들 때는 Node.js 와 npm 을 반드시 먼저 설치해야 한다. Node.js 는 크롬 V8 자바스크립트 엔진으로 빌드한 자바스크립트 런타임이다. 2009년 Node.js 를 출시한 이후 자바스크립트는 웹 브라우저 영역 외에 웹 서버는 물론, 모바일 애플리케이션, 데스크톱 애플리케이션 영역에서도 엄청나게 활약할 수 있게 되었다.</p><h3 id="1-nodejs-설치-windows"><a class="markdownIt-Anchor" href="#1-nodejs-설치-windows"></a> 1. Node.js 설치: Windows</h3><p>Node.js 공식 다운로드 페이지(<a href="https://nodejs.org/ko/download/" target="_blank" rel="noopener">https://nodejs.org/ko/download/</a>) 에서 Windows Installer 를 다운로드하고 설치한다.</p><p><a href="https://nodejs.org/ko/download/" target="_blank" rel="noopener"><img src="/images/react/nodejs-download.png" alt="Windows Installer를 클릭하여 다운로드" /></a></p><p>설치가 끝나면 터미널(또는 명령프롬프트) 창을 열고, 다음 명령어를 실행하여 제대로 설치했는지 확인한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br><span class="line">v10.15.0</span><br></pre></td></tr></table></figure><h3 id="2-에디터-설치"><a class="markdownIt-Anchor" href="#2-에디터-설치"></a> 2. 에디터 설치</h3><p>리액트 애플리케이션을 만들면서 코드를 수정할 때는 코드 에디터를 설치하여 사용하는 것이 편하다. 브래킷(Bracket), 아톰, VS Code 를 써본 결과 모든 운영체제를 지원하는 <strong>VS Code</strong>를 사용하고 있다.</p><p>VS Code 공식 다운로드 페이지(<a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">https://code.visualstudio.com/Download</a>) 에서 운영체제에 맞는 버전을 설치한다. 여기서는 Windows 버전을 설치한다. 이 에디터는 macOS, Window, 리눅스를 모두 지원한다.</p><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener"><img src="/images/react/vscode-download.png" alt="Visual Studio Code 다운로드" /></a></p><h3 id="3-create-react-app-설치"><a class="markdownIt-Anchor" href="#3-create-react-app-설치"></a> 3. create-react-app 설치</h3><p><strong>create-react-app</strong> 도구는 npm 으로 설치 할 수 있다. 패키지를 설치하는 방법은 두 가지가 있는데, 첫 번째는 지역적으로 설치하는 것이고, 두 번째는 전역적으로 설치하는 것이다. create-react-app은 커맨드라인 도구라서 모든 디렉토리에서 필요하므로 전역적으로 설치한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g create-react-app</span></span><br></pre></td></tr></table></figure><h2 id="프로젝트-생성"><a class="markdownIt-Anchor" href="#프로젝트-생성"></a> 프로젝트 생성</h2><p>프로젝트 생성할 때는 <code>create-react-app &lt;프로젝트 이름&gt;</code> 명령어를 사용한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> create-react-app <span class="built_in">test</span>-react</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="built_in">test</span>-react</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm start</span></span><br></pre></td></tr></table></figure><p><code>npm start</code> 실행하여 완료했다면 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 로 접속하여 확인한다.</p><img width="75%" src="/images/react/react-run.png" alt="초기 프로젝트 페이지" title="" ><h2 id="프로젝트-구조"><a class="markdownIt-Anchor" href="#프로젝트-구조"></a> 프로젝트 구조</h2><p>VS Code 를 실행하여 만들어진 test-react 프로젝트를 열면 다음과 같은 구조로 만들어져 있다. 이미 modules 가 설치되어 있고, 의존성 패키지는 대부분 <code>node_modules/react-scripts</code> 모듈내에 선언되어 있다. <code>src</code> 폴더안 에 있는 파일들을 추가하고 수정하면서 개발을 하면 된다.</p><p><img src="/images/react/react-open.png" alt="프로젝트 구조" /></p><h2 id="정리"><a class="markdownIt-Anchor" href="#정리"></a> 정리</h2><p>리액트에 관심이 생겨 책을 읽고 검색한 내용들을 모아서 리액트에 대한 설명부터 설치, 프로젝트 실행까지 간략하게 설명하였다. 현재는 리액트를 공부하면서 정리하는 단계라서 현업에서 리액트 라이브러리를 사용하면서 겪는 이슈사항이나 팁은 추후에 정리 할 예정이다.</p><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="http://webframeworks.kr/getstarted/reactjs/" target="_blank" rel="noopener">React 시작하기</a></li><li><a href="https://blueshw.github.io/2017/06/20/create-react-app/" target="_blank" rel="noopener">[ReactJs] create-react-app으로 react 시작하기</a></li><li><a href="https://blog.sonim1.com/174" target="_blank" rel="noopener">[React] 1. 리액트 시작하기</a></li><li><a href="https://www.inflearn.com/" target="_blank" rel="noopener">개발 관련 강좌 사이트</a></li><li><a href="https://velopert.com/3697" target="_blank" rel="noopener">리액트를 다루는 기술 출간 / 집필후기</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/09/react-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[React Native] Live Reload</title>
      <link>http://hgko1207.github.io/2019/01/08/react-enable-reload/</link>
      <guid>http://hgko1207.github.io/2019/01/08/react-enable-reload/</guid>
      <pubDate>Tue, 08 Jan 2019 08:59:53 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;live-reload&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#live-reload&quot;&gt;&lt;/a&gt; Live Reload&lt;/h2&gt;
&lt;p&gt;리액트 네이티브 기반으로 안드로이드 앱 개발을 할 때 자동으로 리로드 되게 하려면
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="live-reload"><a class="markdownIt-Anchor" href="#live-reload"></a> Live Reload</h2><p>리액트 네이티브 기반으로 안드로이드 앱 개발을 할 때 자동으로 리로드 되게 하려면 어떻게 해야 할까. 리액트 기반으로 웹 개발을 할 때에는 코드를 수정 시 자동으로 리로드 되었는데 리액트 네이티브로 개발할 때에 자동으로 되지 않아 검색하던 중 아래 내용 처럼 옵션 설정을 하니까 잘 동작하였다.</p><ul><li>명령 프롬프트에서 다음을 입력하여 장치 또는 에뮬레이터에서 앱을 설치하고 실행한다.<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> react-native run-android</span></span><br></pre></td></tr></table></figure></li><li>에뮬레이터를 클릭하고 CTRL + M ( MacOS의 경우 CMD + M )을 누르거나 실행 중인 응용 프로그램이 있는 Android 장치를 흔들면 된다.</li><li>팝업 메뉴에서 <strong>Enable Live Reload</strong> 옵션을 선택한다.</li></ul><img width="40%" src="/images/react/enable-reload.png" alt="" title="" >]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/08/react-enable-reload/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Eclipse RCP] 이클립스 플러그인 추가</title>
      <link>http://hgko1207.github.io/2019/01/07/eclipse-rcp/</link>
      <guid>http://hgko1207.github.io/2019/01/07/eclipse-rcp/</guid>
      <pubDate>Mon, 07 Jan 2019 09:25:03 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;eclipse-piug-in-추가&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#eclipse-piug-in-추가&quot;&gt;&lt;/a&gt; Eclipse Piug-in 추가&lt;/h1&gt;
&lt;p&gt;Eclipse에 플러그인을 추가하는 방법에는
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="eclipse-piug-in-추가"><a class="markdownIt-Anchor" href="#eclipse-piug-in-추가"></a> Eclipse Piug-in 추가</h1><p>Eclipse에 플러그인을 추가하는 방법에는 두 가지가 있다. 첫 번째 방법은 플러그인을 직접 복사해서 설치하는 방법이고, 두 번째 방법은 Eclipse 에서 제공하는 Software Update Manager 를 활용하는 방법이다.</p><h3 id="직접-복사하는-방법"><a class="markdownIt-Anchor" href="#직접-복사하는-방법"></a> 직접 복사하는 방법</h3><p>설치하고자하는 플러그인을 Eclipse_home/plugin 디렉토리에 복사한 다음 Eclipse를 재시작하면 새롭게 설치된 Eclipse 플러그인 기능을 활용할 수 있다.</p><h3 id="software-update-manager를-활용하는-방법"><a class="markdownIt-Anchor" href="#software-update-manager를-활용하는-방법"></a> Software Update Manager를 활용하는 방법</h3><p>Eclipse 에서 제공하는 Software Update Manager 기능은 플러그인을 개발한 곳에서 이 기능을 사용할 수 있도록 지원하지 않으면 사용할 수 없다.</p><p>Eclipse 에서 <code>Help-&gt;Install New Software</code>로 이동 후 설치 할 플러그인 URL를 입력하여 다운받는다.</p><p>또 다른 방법은 <code>Help-&gt;Eclipse Marketplace</code>로 이동 후 설치 플러그인을 검색 후 다운받는다.</p><h1 id="이클립스-rcp"><a class="markdownIt-Anchor" href="#이클립스-rcp"></a> 이클립스 RCP</h1><h2 id="piug-in-구조"><a class="markdownIt-Anchor" href="#piug-in-구조"></a> Piug-in 구조</h2><p>모든 플러그인의 실제 동작에 대한 정의는 코드에 들어있지만, 플러그인의 종속성과 서비스는 <code>MANIFEST.MF</code>와 <code>plugin.xml</code> 파일에서 선다. 이런 구조 덕분에 플러그인 코드가 당장 필요한 순간이 되어서야 로딩되는 늦은 로딩(lazy loading)이 가능하며, 이에 따라 이클립스의 시동 시간과 메모리 사용량을 줄일 수 있습니다.</p><p>이클립스 시동될 때는 플러그인 로더가 각 플러그인에 대한 <code>MANIFEST.MF</code>와 <code>plugin.xml</code> 파일 전부를 훑어본 다음, 플러그인에 대한 정보를 포함하는 구조체를 구성한다.</p><h2 id="piug-in-선언manifestmf"><a class="markdownIt-Anchor" href="#piug-in-선언manifestmf"></a> Piug-in 선언(MANIFEST.MF)</h2><p>각 번들 내역서 내에는 이름, ID, 버전, 플러그인 클래스, 프로바이더에 대한 항목이 들어 있다.</p><h3 id="1-piug-in-id"><a class="markdownIt-Anchor" href="#1-piug-in-id"></a> 1. Piug-in ID</h3><p>플러그인 ID(Bundle-SymbolicName)는 단 하나의 플러그인을 식별하기 위해 설계된 것이며 일반적으로 자바 패키지 이름 규약(예: com.&lt;회사명&gt;.&lt;제품명&gt;)을 이용해 구성된다.</p><h3 id="2-piug-in-버전"><a class="markdownIt-Anchor" href="#2-piug-in-버전"></a> 2. Piug-in 버전</h3><p>플러그인에 지정된 버전(Bundle-version)은 항상 3개의 수를 점으로 구분해 나열한 것이다. 첫 번째 수는 주 버전(major version)을 의미하며 두 번째는 부 버전(minor version), 세 번째는 서비스 레벨을 의미한다.</p><h3 id="3-piug-in-이름과-제공자"><a class="markdownIt-Anchor" href="#3-piug-in-이름과-제공자"></a> 3. Piug-in 이름과 제공자</h3><p>이름과 제공자는 둘 다 사람이 읽기 위한 텍스트이므로 어떻게 입력하든지 상관없고 또한 유일할 것일 필요도 없다.</p><h3 id="4-piug-in-클래스-선언"><a class="markdownIt-Anchor" href="#4-piug-in-클래스-선언"></a> 4. Piug-in 클래스 선언</h3><p>모든 플러그인은 필요한 경우에 플러그인 클래스(Bundle-Activator)를 지정할 수 있다.</p><h3 id="5-piug-in-런타임"><a class="markdownIt-Anchor" href="#5-piug-in-런타임"></a> 5. Piug-in 런타임</h3><p><code>MANIFEST.MF</code> 파일의 Bundle-ClassPath 선언에는 플러그인 코드에 포함된 라이브러리(*.jar 파일) 를 콤마(‘ , ‘)로 구분해 나열한다. Bundle-ClassPath에서 정의한 라이브러리에 들어있는 패키지를 다른 플러그인에서 접근 할 수 있게 지정하려면 ExportPackage 선언을 써서 접근 가능하게 할 패키지를 콤마 구분 목록으로 지정한다.</p><h3 id="6-piug-in-종속성"><a class="markdownIt-Anchor" href="#6-piug-in-종속성"></a> 6. Piug-in 종속성</h3><p>플러그인 로더는 각 로딩된 플러그인마다 개별 클래스 로더의 인스턴스를 생성하며 내역서의 Require-Bundle 선언을 사용해 해당 플러그인이 실행 중 참조해야 할 플러그인이 어느 것인지를 지정한다.</p><h2 id="piug-in-모델"><a class="markdownIt-Anchor" href="#piug-in-모델"></a> Piug-in 모델</h2><p>이클립스는 처음 실행될 때 각 플러그인 디렉토리를 모두 돌아본 다음, 찾아낸 개별 플러그인을 표현하는 내부 모델을 구성한다. 개별 플러그인 전체를 로딩하지 않으며 플러그인 내역서만 검토한다.</p><h3 id="1-platform"><a class="markdownIt-Anchor" href="#1-platform"></a> 1. Platform</h3><p><code>org.eclipse.core.runtime.Platform</code> 클래스는 현재 실행 중인 이클립스 환경에 대한 정보를 제공한다. 이 클래스를 사용해 설치되어 있는 플러그인(번들), 확장, 확장점, 명령행 인자, 작업 관리자 등의 정보를 얻을 수 있다.</p><h3 id="2-piug-in-과-번들"><a class="markdownIt-Anchor" href="#2-piug-in-과-번들"></a> 2. Piug-in 과 번들</h3><p><code>Platform.getBundleGroupProviders()</code> 나 <code>Platform.getBundle(String)</code>을 사용해 현재 설치된 플러그 인(번들)에 대한 정보를 얻을 수 있다. 플러그인 클래스, 즉 번들 액티베이터에 접근하려면 해당 플러그인을 로드해야 하지만 Bundle 인터페이스에는 별도의 부담 없이 접근할 수 있다.</p><h3 id="3-piug-in-확장-레지스트리"><a class="markdownIt-Anchor" href="#3-piug-in-확장-레지스트리"></a> 3. Piug-in 확장 레지스트리</h3><p><code>Platform.getExtensionRegistry()</code> 메소드를 사용해서 플러그인 확장 레지스트리(extension registry)에 접근할 수 있다. 확장 레지스트리에는 각 플러그인을 표현하는 플러그인 디스크립터가 포함되어 있으며 플러그인을 로딩하지 않고도 다양한 플러그인 정보를 얻을 수 있는 메소드를 제공한다.</p><h1 id="piug-in-개발"><a class="markdownIt-Anchor" href="#piug-in-개발"></a> Piug-in 개발</h1><h2 id="piug-in-project-생성"><a class="markdownIt-Anchor" href="#piug-in-project-생성"></a> Piug-in Project 생성</h2><p>New -&gt; Plug-in Project 클릭한다.</p><img width="55%" src="/images/rcp/rcp1.png" alt="" title="" ><p><em>Project name</em> 입력 후 Next 클릭한다.</p><img width="55%" src="/images/rcp/rcp2.png" alt="" title="" ><ol><li>ID에 패키지명 입력</li><li>Activator 패키지 명을 1)번에 입력한 패키지명과 같도록 입력</li><li>No 버튼 클릭 후 Next 클릭</li></ol><img width="55%" src="/images/rcp/rcp3.png" alt="" title="" ><p>“Hello, World Command” 선택 후 Finish 클릭한다.</p><img width="100%" src="/images/rcp/rcp4.png" alt="" title="" ><p>위와 같이 플러그인 프로젝트가 생성되면 <strong>MANIFEST.MF 클릭 -&gt; Extensions</strong> 탭으로 이동 기본적으로 “Hello, World Command”를 선택하면 commands, handlers, bindings, menus 4개의 트리가 만들어진다.</p><p>Commands는 실제 동작으로부터 독립적이며 선언적이고, <code>org.eclipse.ui.commands</code> 확장점을 통하여 정의되어 있다. 그리고 단축키(Key Binding)가 정의될 수 있고, 커맨드의 행동은 핸들러를 통하여 정의된다.</p><p>Handlers는 commands로부터 명령을 받아 호출되고, 호출되자마자 클래스를 실행한다. 클래스를 정의할 때 <code>org.eclipse.core.commands.AbstractHandler</code> 클래스를 상속받는다.</p><img width="75%" src="/images/rcp/rcp5.png" alt="" title="" ><p><code>Execute()</code> 메소드는 핸들러가 실행되면 호출 되며, HandlerUtil 클래스를 통하여 서비스에 접근할 수 있다.</p><ul><li>Bindings는 메뉴에 단축키를 지정할 수 있다.</li><li>Menus는 애플리케이션 메인 메뉴, 툴바, 뷰 툴바, 팝업메뉴를 만들 수 있다.</li></ul><img width="65%" src="/images/rcp/rcp6.png" alt="" title="" ><p><code>org.eclipse.ui.menus</code> 에서 menuContribution는 사용자 인터페이스에서 메뉴가 표시되는 위치를 정의할 수 있는 locationURI 속성을 가지고 있다. locationURI 속성에는 기본적으로 menu:와 toolbar:, popup: 으로 시작하며 그 다음에는 메뉴가 표시될 위치를 지정할 수 있다. 예를 들어, 파일 메뉴(ID:fileMenu)의 하의 메뉴에 위치시키려면 다음와 같은 위치식을 이용한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 예)</span></span><br><span class="line">menu:fileMenu?after=addition</span><br></pre></td></tr></table></figure><h2 id="piug-in-배포"><a class="markdownIt-Anchor" href="#piug-in-배포"></a> Piug-in 배포</h2><p>플러그인을 만들었으면 jar로 생성해야 합니다.</p><img width="80%" src="/images/rcp/rcp7.png" alt="" title="" ><p><strong>Export -&gt; Plug-in Development -&gt; Deployable plug-ins and fragments</strong> 선택 후 Next 클릭한다.</p><img width="75%" src="/images/rcp/rcp8.png" alt="" title="" ><p>배포하는 플러그인 프로젝트를 선택하고, Directory란에 배포하는 폴더를 지정하고, Finish를 클릭한다.</p><img width="80%" src="/images/rcp/rcp9.png" alt="" title="" ><p>지정한 폴더에 jar로 배포가 되는 것을 확인할 수 있다.</p><h1 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h1><ul><li><a href="http://eclipse.or.kr/wiki/%ED%8A%B9%EC%A7%91%EA%B8%B0%EC%82%AC:Eclipse_%EC%BB%A4%EB%A7%A8%EB%93%9C_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC" target="_blank" rel="noopener">이클립스 커맨드 튜토리얼</a></li><li><a href="https://narup.tistory.com/77" target="_blank" rel="noopener">Eclipse RCP 란?</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/07/eclipse-rcp/#disqus_thread</comments>
    </item>
    
    <item>
      <title>도메인이란</title>
      <link>http://hgko1207.github.io/2019/01/07/it-domain/</link>
      <guid>http://hgko1207.github.io/2019/01/07/it-domain/</guid>
      <pubDate>Mon, 07 Jan 2019 08:16:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;도메인 이름은 ‘인터넷에 연결된 컴퓨터들에 부여되는 교유의 문자 주소’ 정도라고 보시면 된다. 영어로는 &lt;strong&gt;DNS&lt;/strong&gt;(Domain Name System) 라고 한다.&lt;/p&gt;
&lt;p&gt;인터넷에 연결되어 있는 컴퓨터에 접속하려면 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>도메인 이름은 ‘인터넷에 연결된 컴퓨터들에 부여되는 교유의 문자 주소’ 정도라고 보시면 된다. 영어로는 <strong>DNS</strong>(Domain Name System) 라고 한다.</p><p>인터넷에 연결되어 있는 컴퓨터에 접속하려면 IP 주소(Internet Protocol Address)를 알아야 한다. 그런데 IP 주소는 기억하기가 힘들고 매우 불편하다.</p><p>그래서 쉽게 사이트의 주소를 기억하고 여기서 좀 더 나아가서 사이트의 특성을 파악할 수 있도록 고안된 것이 바로 ‘도메인 이름’ 이다. 도메인은 각 컴퓨터 고유의 IP 주소에 대응되는 문자로 된 인터넷 주소다.</p><p>EX) 구글(google) 사이트<br />google . co . kr =&gt; 소속기관이름 . 소속기관 분류 . 소속국가</p><p>도메인은 크게 3단계로 구분된다.<br />(인터넷 도입 초기에는 3단계 였으나, 현재는 2단계도 혼용 사용, 예) .kr)</p><h2 id="가-최상위-도메인2가지로-분류"><a class="markdownIt-Anchor" href="#가-최상위-도메인2가지로-분류"></a> 가) 최상위 도메인(2가지로 분류)</h2><ol><li>미국 최상위 도메인 : com, edu, net, org, gov, re, mil, int</li><li>국가 최상위 도메인 : kr, jp, cn</li></ol><h2 id="나-2차-도메인"><a class="markdownIt-Anchor" href="#나-2차-도메인"></a> 나) 2차 도메인</h2><ol><li>미국 최상위 도메인에서의 2차 도메인 : naver, yahoo, google</li><li>국가 최상위 도메인에서의 2차 도메인 : or, co, ac, ne</li></ol><h2 id="다-3차-도메인"><a class="markdownIt-Anchor" href="#다-3차-도메인"></a> 다) 3차 도메인</h2><ol><li>국가 최상위 도메인에서의 3차 도메인 : nate, yahoo</li></ol><ul><li><strong>com</strong> : 상업기관</li><li><strong><a href="http://co.kr" target="_blank" rel="noopener">co.kr</a></strong> : 상업기기관 + 국가도메인</li><li><strong>net</strong> : 네트워크 관련 기관</li><li><strong><a href="http://go.kr" target="_blank" rel="noopener">go.kr</a></strong> : 정부기관 + 국가도메인</li><li><strong><a href="http://or.kr" target="_blank" rel="noopener">or.kr</a></strong> : 비영이/기타 기관 + 국가도메인</li></ul><p>kr 과 혼합된 주소는 한국 관련 회사를 뜻하는 것이다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/07/it-domain/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JPA] Annotation 정리</title>
      <link>http://hgko1207.github.io/2019/01/07/jpa-annotation/</link>
      <guid>http://hgko1207.github.io/2019/01/07/jpa-annotation/</guid>
      <pubDate>Mon, 07 Jan 2019 05:15:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;JPA&lt;/strong&gt; 로 개발하면서 자주 사용하는 어노테이션을 정리하였다.&lt;/p&gt;
&lt;h2 id=&quot;entity&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#entity&quot;&gt;&lt;/a&gt; @Entity&lt;/h2&gt;
&lt;p&gt;해
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>JPA</strong> 로 개발하면서 자주 사용하는 어노테이션을 정리하였다.</p><h2 id="entity"><a class="markdownIt-Anchor" href="#entity"></a> @Entity</h2><p>해당 클래스가 엔티티임을 알리기 위해 사용한다. 애플리케이션이 실행이 될 때 엔티티 자동검색을 통하여 이 어노테이션이 선언 된 클래스들은 엔티티 빈으로 등록한다.</p><h2 id="table"><a class="markdownIt-Anchor" href="#table"></a> @Table</h2><p>데이터의 저장소, 테이블을 의미한다. name 값은 실제 데이터베이스의 테이블 명을 의미하며, 생략이 가능한다. 어노테이션을 생략하면 클래스의 이름을 테이블의 이름으로 자동 인식하게 된다.</p><h2 id="id"><a class="markdownIt-Anchor" href="#id"></a> @Id</h2><p>엔티티빈의 기본키를 의미한다. 이 어노테이션은 하나의 엔티티에는 반드시 하나가 존재해야 한다. 복수키도 설정할 수 있다.</p><h2 id="generatedvalue"><a class="markdownIt-Anchor" href="#generatedvalue"></a> @GeneratedValue</h2><p>데이터베이스에 의해 자동으로 생성된 값이라는 의미다. 즉, 프로그램 상에서 조작된 데이터가 아닌, 실제 데이터베이스에 데이터가 영속(저장)될 때 생성되는 값이다. 몇 가지 생성전략이 존재한다.</p><ul><li>IDENTITY : 기본 키 생성을 데이터베이스가 함</li><li>SEQUENCE : 데이터베이스 시퀀스를 사용해서 기본 키 할당</li><li>TABLE : 키 생성 테이블 생성</li></ul><h2 id="column"><a class="markdownIt-Anchor" href="#column"></a> @Column</h2><p>필드와 테이블의 컬럼을 매핑시켜준다. 이 어노테이션은 생략이 가능하며, 생략 시 필드의 이름이 테이블의 컬럼으로 자동으로 매핑이 된다.</p><ol><li><p>name속성(String)<br />필드와 매핑 될 컬럼의 이름을 명시한다.</p></li><li><p>nullable속성(boolean)<br />해당 컬럼이 null값을 허용하는가 하지않는가의 여부다.</p></li><li><p>length속성(int)<br />컬럼의 길이값을 의미합니다.</p></li><li><p>unique속성(boolean)<br />컬럼이 유일한 값을 가져야 하는가 아닌가의 여부다.</p></li><li><p>insertable속성(boolean)<br />엔티티가 영속될 때 insert에 참여할지 말지를 결정한다. 기본값은 true</p></li><li><p>updatable속성(boolean)<br />변경된 필드의 값을 테이블에도 반영할지를 결정한다. 기본값은 true</p></li></ol><p>name 속성을 제외한 나머지 속성은 잘 사용되지 않을 것 이라고 생각된다. nullable, length, unique는 DDL과 관련된 속성이고, insertable, updatable은 원래 잘 사용되지 않는 속성이기 때문이다.</p><h2 id="temporal"><a class="markdownIt-Anchor" href="#temporal"></a> @Temporal</h2><p>java.util.Date와 java.util.Calendar 값을 매핑 할 때 사용한다.</p><ul><li>TemporalType.Date : 년-월-일 의 date 타입 (2019-01-04)</li><li>TemporalType.Time : 시:분:초 의 time 타입 (12:11:11)</li><li>TemporalType.TIMESTAMP : date + time 의 timestamp(datetime) 타입 (2019-01-04 12:11:11)</li><li>어노테이션을 사용하지 않을 경우 기본값은 timestamp 다. JPA 데이터베이스 방언에 의해, 데이터베이스의 타입에 따른 timestamp 또는 datetime은 자동으로 작성된다.</li></ul><h2 id="columnposition1"><a class="markdownIt-Anchor" href="#columnposition1"></a> @ColumnPosition(1)</h2><p>컬럼 순서 정한다.</p><h2 id="enumerated"><a class="markdownIt-Anchor" href="#enumerated"></a> @Enumerated</h2><p>자바의 enum 타입을 매핑할 때 사용한다. 속성으로 EnumType.ORDINAL 과 EnumType.STRING 이 존재하는데 이름 그대로 ORDINAL은 순서를 STRING은 Enum의 이름을 저장한다.</p><h2 id="lob"><a class="markdownIt-Anchor" href="#lob"></a> @LOB</h2><p>데이터베이스 BLOB, CLOB 타입과 매핑된다. CLOB(String, char[], java.sql.CLOB)은 문자, BLOB(byte[], java.sql.BLOB)은 나머지가 매핑된다.</p><h2 id="transient"><a class="markdownIt-Anchor" href="#transient"></a> @Transient</h2><p>저장 조회에 사용되지도 않고 그냥 단순 값을 가지고 있고 싶을 때 사용한다.</p><h2 id="access"><a class="markdownIt-Anchor" href="#access"></a> @Access</h2><p>데이터베이스에 엔티티에 값이 저장될 때 필드(AccessType.FIELD)의 값을 직접 접근해서 사용할 것인가 아니면 메서드에 직접(AccessType.PROPERTY) 접근할 것 인가를 설정하는 것이다.</p><h2 id="mappedsuperclass"><a class="markdownIt-Anchor" href="#mappedsuperclass"></a> @MappedSuperClass</h2><p>어노테이션을 사용하면 부모 엔티티 접근 없이 부모 클래스의 매핑정보를 사용할 수 있다.<br />부모의 내용을 별도로 재정의해서 사용하고 싶은 경우에는 <code>@AttributeOverride</code>를 사용하여 재정의 한다. 여러 개를 한번에 정의하기 위해서는 <code>@AttributeOverrides</code>를 사용한다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/07/jpa-annotation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>리액트를 다루는 기술</title>
      <link>http://hgko1207.github.io/2019/01/07/book-react-technology/</link>
      <guid>http://hgko1207.github.io/2019/01/07/book-react-technology/</guid>
      <pubDate>Mon, 07 Jan 2019 04:53:57 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;책-정보&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#책-정보&quot;&gt;&lt;/a&gt; 책 정보&lt;/h3&gt;
&lt;img width=&quot;100%&quot; src=&quot;/images/book/react-technology.png&quot; alt=&quot;&quot; titl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="책-정보"><a class="markdownIt-Anchor" href="#책-정보"></a> 책 정보</h3><img width="100%" src="/images/book/react-technology.png" alt="" title="리액트를 다루는 기술"><h3 id="책소개"><a class="markdownIt-Anchor" href="#책소개"></a> 책소개</h3><p>리액트를 이해하기 위한 핵심 개념은 물론이고 어떤 상황에서 어떻게 사용해야 하는지, 왜 이렇게 사용하는 것이 효과적인지를 배우자. 공식 문서에는 나오지 않는 실전 노하우와 팁을 풍부하게 담았다.</p><p>또한, 프로젝트 생성부터 코드를 작성 및 개선하고, 배포하기까지 실무에 바로 응용할 수 있도록 예제를 준비했다. 일정 관리 애플리케이션을 만들면서 리액트의 기본기를 다지고, 프로젝트를 진행하면서 컴포넌트 스타일링, 상태 관리, API 연동, 라우팅, 코드 스플리팅, 서버사이드 렌더링 등 리액트를 활용한 다양한 기술을 사용해보자. 마지막으로 마크다운 기반의 블로그 시스템을 만들며 배운 지식을 종합적으로 활용해보자.</p><h3 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h3><p>작년에 처음으로 AngularJS 를 사용하여 프로젝트를 하면서 접한 이후로 관심이 생겨 최신 버전인 Angular6 를 공부하였었는데 뭔가 착 달라붙는 다는 느낌이 들지 않아 잠깐 공부를 멈췄었다.</p><p>최근에 다시 새로운 기술을 공부하고 싶어 찾던 중에 리액트가 자바스크립트 라이브러리라서 접근하기가 쉽고 이해도도 빠를 것 같아 책을 바로 구매하게 되었다. 책을 사면 예제를 직접 하나씩 다 코딩하면서 공부하는 타입이라서 이번에도 모두 다 코딩을 하면서 익숙해져갔다. 그런데 책에 있는 예제들이 자바스크립트라서 익숙하긴 한데 리액트 초보자에게는 조금 어렵다는 느낌이 들었다. 그래도 열심히 따라서 코딩한 덕분에 흐름을 이해할 수 있었다. 리액트를 알게 되면서 리액트 네이티브에 대해서도 공부하고 싶은데 출간 된 책이 많이 없는 것 같아 아쉬웠다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/07/book-react-technology/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Android] Tab 구성 시 주의사항</title>
      <link>http://hgko1207.github.io/2019/01/07/android-tab/</link>
      <guid>http://hgko1207.github.io/2019/01/07/android-tab/</guid>
      <pubDate>Mon, 07 Jan 2019 04:42:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;fragmentstatepageradapter의-getitem-이-두-번-호출될-때&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#fragmentstatepageradapter의-getitem-이-두-번-호출될-때&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="fragmentstatepageradapter의-getitem-이-두-번-호출될-때"><a class="markdownIt-Anchor" href="#fragmentstatepageradapter의-getitem-이-두-번-호출될-때"></a> FragmentStatePagerAdapter의 getItem() 이 두 번 호출될 때</h2><p><strong>Viewpager</strong> 를 사용하여 Tab 을 구성하였을 때 <strong>FragmentStatePagerAdapter</strong> 를 사용하였다. 탭에 추가한 <strong>Fragment</strong> 와는 상관없이 <code>getItem()</code> 이 두 번 호출이 되어서 <strong>Fragment</strong> 를 두 번 로드하게 되는 현상 때문에 문제가 생겨 꼬이게 되었다. 이럴경우 <strong>Fragment</strong> 화면이 보일 때와 보이지 않을 때 <code>setUSerVisiblaHint()</code> 함수를 사용하여 처리하는데 탭에 추가한 <strong>Fragment</strong> 가 전부 로드되지 않고 어중간하게 두 개의 화면만 로드되었기 때문에 다른 탭을 누르거나 다시 돌아왔을 때 <code>setUSerVisiblaHint()</code> 와 <code>onCreateView()</code> 함수가 비정상적으로 호출되는 바람에 코딩을 하는데 애먹었다.</p><p>그래서 찾은 방법은 아래 코드 처럼 <strong>ViewPagerAdapter</strong> 에 <strong>Fragment</strong> 를 3개 추가 하였을 때 <code>setOffscreenPageLimit()</code> 함수에 viewPager 에 추가한 Fragement 의 수를 지정하여 화면이 미리 로드되게 하면 <code>getItem()</code> 은 Fragement 수 만큼(예: 3번) 호출되지만 앞에서 문제되는 것을 해결할 수 있었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BindView</span>(R.id.tabs)</span><br><span class="line">    TabLayout tabLayout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        setupViewPager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupViewPager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ViewPagerAdapter viewPagerAdapter = <span class="keyword">new</span> ViewPagerAdapter(getSupportFragmentManager());</span><br><span class="line">        viewPagerAdapter.addFragment(<span class="keyword">new</span> MobileFragment());</span><br><span class="line">        viewPagerAdapter.addFragment(<span class="keyword">new</span> LteFragment());</span><br><span class="line">        viewPagerAdapter.addFragment(<span class="keyword">new</span> WifiFragment());</span><br><span class="line">        viewPager.setOffscreenPageLimit(viewPagerAdapter.getCount());</span><br><span class="line">        viewPager.setAdapter(viewPagerAdapter);</span><br><span class="line">        tabLayout.setupWithViewPager(viewPager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/07/android-tab/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JavaScript] Chart 라이브러리 정리</title>
      <link>http://hgko1207.github.io/2019/01/07/javascript-chart/</link>
      <guid>http://hgko1207.github.io/2019/01/07/javascript-chart/</guid>
      <pubDate>Mon, 07 Jan 2019 04:19:53 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;웹 개발을 하면서 사용해본 Chart 를 정리 해보았다.&lt;br /&gt;
무료인 것도 있고 조건부 무료인 차트도 있다.&lt;br /&gt;
대부분 사용하기에 편리하여 적용하기도 쉽고 심플하고 이쁜 디자인도 많고 예제와 설명이 잘 되어있어 좋았다.&lt;/p&gt;
&lt;h2
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>웹 개발을 하면서 사용해본 Chart 를 정리 해보았다.<br />무료인 것도 있고 조건부 무료인 차트도 있다.<br />대부분 사용하기에 편리하여 적용하기도 쉽고 심플하고 이쁜 디자인도 많고 예제와 설명이 잘 되어있어 좋았다.</p><h2 id="1-amcharts"><a class="markdownIt-Anchor" href="#1-amcharts"></a> 1. AmCharts</h2><ul><li>링크 : ​<a href="https://www.amcharts.com/" target="_blank" rel="noopener">https://www.amcharts.com/</a></li><li>예제 : <a href="http://www.amcharts.com/demos/" target="_blank" rel="noopener">http://www.amcharts.com/demos/</a></li><li>유료 라이센스 이지만 조건부 무료다. 사용해본 라이브러리 중에 기능이 엄청 많고 디자인이 제일 깔끔하다. 라이센스 비용은 개인이 사용하기에는 부담이 될 수 있지만, 차트에 개발사 링크가 출력되는 조건만 지키면 무료로 사용 가능하다.</li></ul><h2 id="2-highcharts"><a class="markdownIt-Anchor" href="#2-highcharts"></a> 2. HighCharts</h2><ul><li>링크 : <a href="https://www.highcharts.com/" target="_blank" rel="noopener">https://www.highcharts.com/</a></li><li>amCharts와 같이 조건부 무료입니다. Angular에서도 쓸 수 있고, 차트 종류도 다양하고, 사용법이 편리하며 커스터마이징도 쉽게 할 수 있다. 현재 가장 많이 사용하는 차트다.</li></ul><h2 id="3-d3-data-driven-documents"><a class="markdownIt-Anchor" href="#3-d3-data-driven-documents"></a> 3. D3 Data-Driven Documents</h2><ul><li>링크 : <a href="https://d3js.org/" target="_blank" rel="noopener">https://d3js.org/</a></li><li>무료입니다. 데이터 시각화 프레임워크로 잘 알려져 있고, 자바스크립트로 개발을 한다. HTML5의 SVG(Scalable Vector Graphic)을 통해 다양한 화면 해상도에서 깨짐 없는 가시화가 가능하다. D3 차트에서는 버블차트와 OpenLayers3에 파이차트를 올려 사용하였다. D3는 기본적인 개념과 사용법을 익혀야 사용이 가능하므로 공부를 많이 해야 한다.</li></ul><h2 id="4-chartjs"><a class="markdownIt-Anchor" href="#4-chartjs"></a> 4. Chart.js</h2><ul><li>링크 : <a href="http://www.chartjs.org/" target="_blank" rel="noopener">http://www.chartjs.org/</a></li><li>예제 : <a href="http://www.chartjs.org/docs/latest/" target="_blank" rel="noopener">http://www.chartjs.org/docs/latest/</a></li><li>오픈소스이며, 전체적으로 깔끔하고 문서도 정리가 잘 되어 있습니다. 인기가 많고, 사용법이 편리하고 이쁩니다.</li></ul><h2 id="5-google-chart"><a class="markdownIt-Anchor" href="#5-google-chart"></a> 5. Google Chart</h2><ul><li>링크 : <a href="https://developers.google.com/chart/" target="_blank" rel="noopener">https://developers.google.com/chart/</a></li><li>구글 차트는 많이 사용해보지 못하였지만, 기능은 많습니다. 하지만 디자인이 다른 차트에 비해 이쁘지 않은 것 같아 많이 사용하지 않았습니다. 그렇지만 사용하기는 편리합니다.</li></ul><h2 id="6-morrisjs"><a class="markdownIt-Anchor" href="#6-morrisjs"></a> 6. Morris.js</h2><ul><li>링크 : <a href="http://morrisjs.github.io/morris.js/" target="_blank" rel="noopener">http://morrisjs.github.io/morris.js/</a></li><li>무료이며 사용이 정말 간단합니다. 그리고 디자인도 심플한 편이라 간단하게 테스트 용으로 많이 사용하였습니다.</li></ul><h2 id="7-chartistjs"><a class="markdownIt-Anchor" href="#7-chartistjs"></a> 7. Chartist.js</h2><ul><li>링크 : <a href="http://gionkunz.github.io/chartist-js/" target="_blank" rel="noopener">http://gionkunz.github.io/chartist-js/</a></li><li>Chartist 또한 인기있는 Chart Javascript 라이브러리 중의 하나로 SVG를 사용하며, CSS를 통해 모양을 다듬을 수 있습니다.</li></ul><p>위의 차트들이 자주 사용하는 차트들입니다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/07/javascript-chart/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Cesium] 초기 설정</title>
      <link>http://hgko1207.github.io/2019/01/07/cesium-init/</link>
      <guid>http://hgko1207.github.io/2019/01/07/cesium-init/</guid>
      <pubDate>Mon, 07 Jan 2019 02:37:21 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;GIS 관련 프로젝트를 하다보니 오픈소스인 CesiumJS 나 Openlayers 라이브러리를 사용하게 되었다. 최근에는 2D, 3D 모드가 가능한 CesiumJS 를 주로 사용하게 되었다.&lt;/p&gt;
&lt;h2 id=&quot;cesium-이란&quot;&gt;&lt;a clas
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>GIS 관련 프로젝트를 하다보니 오픈소스인 CesiumJS 나 Openlayers 라이브러리를 사용하게 되었다. 최근에는 2D, 3D 모드가 가능한 CesiumJS 를 주로 사용하게 되었다.</p><h2 id="cesium-이란"><a class="markdownIt-Anchor" href="#cesium-이란"></a> Cesium 이란?</h2><ul><li>순수 웹 기불을 이용한 3D Globe 엔진</li><li>WebGL 기반</li><li>다양한 배경 영상/지도 기본 제공</li><li>3D / 2.5D / 2D 모드 지원 -&gt; Openlayers3에 통합</li><li>카메라 움직임 추적, 시간 시뮬레이션 등 다양한 기능 제공</li></ul><p>Cesium 을 시작할 때 초기 설정이 복잡하다. 다음 두 개의 링크를 따라가서 따라하면 쉽게 할 수 있다. 하지만 웹에서 커스터마이징을 하기 위해 아래 코드 처럼 Cesium 에서 지원하는 기본적인 기능들을 끄고 지도만 보이도록 설정해야 한다.<br />API 들은 문서나 인터넷 검색으로 찾아봅시다.</p><p><a href="https://cesiumjs.org/tutorials/cesium-up-and-running/" target="_blank" rel="noopener"><img src="/images/cesium-up-and-running.png" alt="" /></a></p><p><a href="https://cesiumjs.org/demos/" target="_blank" rel="noopener"><img src="/images/cesium-demos.png" alt="" /></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Include the CesiumJS JavaScript and CSS files --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/Cesium.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/Widgets/widgets.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"cesiumContainer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> viewer = <span class="keyword">new</span> Cesium.Viewer(<span class="string">'cesiumContainer'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">      imageryProvider: <span class="keyword">new</span> Cesium.WebMapServiceImageryProvider(&#123;</span></span><br><span class="line"><span class="actionscript">        url: <span class="string">'http://localhost:8080/geoserver/gwc/service/wms'</span>,</span></span><br><span class="line"><span class="actionscript">        layers: <span class="string">'osm:osm'</span>,</span></span><br><span class="line">        parameters: &#123;</span><br><span class="line"><span class="actionscript">          service: <span class="string">'WMS'</span>,</span></span><br><span class="line"><span class="actionscript">          version: <span class="string">'1.1.1'</span>,</span></span><br><span class="line"><span class="actionscript">          request: <span class="string">'GetMap'</span>,</span></span><br><span class="line"><span class="actionscript">          layers: <span class="string">'osm:osm'</span>,</span></span><br><span class="line"><span class="actionscript">          srs: <span class="string">'EPSG:3857'</span>,</span></span><br><span class="line"><span class="actionscript">          crs: <span class="string">'EPSG:3857'</span>,</span></span><br><span class="line"><span class="actionscript">          format: <span class="string">'image/png'</span>,</span></span><br><span class="line"><span class="actionscript">          tranparent: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">          tiled: <span class="literal">true</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        tilingScheme: <span class="keyword">new</span> Cesium.WebMercatorTilingScheme(),</span></span><br><span class="line">      &#125;),</span><br><span class="line"><span class="actionscript">      animation: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      baseLayerPicker: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      fullscreenButton: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      vrButton: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      geocoder: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      homeButton: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      infoBox: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      sceneModePicker: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      selectionIndicator: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      timeline: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      navigationHelpButton: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      projectionPicker: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      selectedEntity: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      trackedEntity: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      clockTrackedDataSource: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> scene = viewer.scene;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> camera = viewer.camera;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> handler = <span class="keyword">new</span> Cesium.ScreenSpaceEventHandler(viewer.canvas);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> ellipsoid = scene.globe.ellipsoid;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위의 예제는 미리 구축된 Geoserver 를 베이스 맵으로 설정하였다. Geoserver 가 구축되지 않았다면 Cesium 에서 제공되는 기본 Provider 를 사용하면 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 예시 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> viewer = <span class="keyword">new</span> Cesium.Viewer(<span class="string">'cesiumContainer'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    terrainProvider: Cesium.createWorldTerrain(), <span class="comment">// 기본 지도를 지형지도로 셋팅</span></span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li><a href="https://cesium.com/docs/tutorials/quick-start/" target="_blank" rel="noopener">https://cesium.com/docs/tutorials/quick-start/</a></li></ul>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/07/cesium-init/#disqus_thread</comments>
    </item>
    
    <item>
      <title>깡샘의 안드로이드 프로그래밍</title>
      <link>http://hgko1207.github.io/2019/01/07/book-ggangsam/</link>
      <guid>http://hgko1207.github.io/2019/01/07/book-ggangsam/</guid>
      <pubDate>Mon, 07 Jan 2019 01:09:21 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;책-정보&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#책-정보&quot;&gt;&lt;/a&gt; 책 정보&lt;/h3&gt;
&lt;img width=&quot;100%&quot; src=&quot;/images/book/ggangsam.png&quot; alt=&quot;&quot; title=&quot;깡샘의 안
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="책-정보"><a class="markdownIt-Anchor" href="#책-정보"></a> 책 정보</h3><img width="100%" src="/images/book/ggangsam.png" alt="" title="깡샘의 안드로이드 프로그래밍"><h3 id="책-소개"><a class="markdownIt-Anchor" href="#책-소개"></a> 책 소개</h3><p>이 책은 각 챕터마다 안드로이드 프로그램과 각 기능이 어떠한 구조로 어떻게 작동하는지 그 원리를 파악하는 데 주력합니다. 그리고 이를 구현하는 핵심 코드를 알아본 다음, 이를 종합하여 실제 상용 앱에서 많이 사용하는 기능을 직접 개발해보는 실습을 진행합니다. 그리고 각 파트별로 도전 과제를 통해 학습자 스스로 주어진 조건에 맞는 앱을 만들어봄으로써 앞에서 배운 이론과 실습을 복기하고 문제 해결 능력을 기를 수 있게 구성하였습니다. 한 마디로 체계적이고 따라 하기 쉽습니다.</p><h3 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h3><p>최근에 안드로이드를 다시 공부하면서 보는 책이다. 안드로이드 스튜디오 3.0 기반으로 개발할 수 있도록 해주며, 끝에는 Kotlin 까지 나온다. 그리고 예제도 다양하여 도움이 많이 되고 있다.​</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/07/book-ggangsam/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Angular] 강좌 추천</title>
      <link>http://hgko1207.github.io/2019/01/07/angular/</link>
      <guid>http://hgko1207.github.io/2019/01/07/angular/</guid>
      <pubDate>Mon, 07 Jan 2019 00:55:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;angular-강좌-추천&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#angular-강좌-추천&quot;&gt;&lt;/a&gt; Angular 강좌 추천&lt;/h3&gt;
&lt;p&gt;작년에 Angular1 즉 AngluarJS 를 &lt;strong&gt;Spri
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="angular-강좌-추천"><a class="markdownIt-Anchor" href="#angular-강좌-추천"></a> Angular 강좌 추천</h3><p>작년에 Angular1 즉 AngluarJS 를 <strong>Spring Framework + Spring JPA + MySQL</strong> 합쳐서 연동하여 개발하였다. 그 때에 AngularJS 를 처음 접해보았고, 제가 아는 분에게 배우기도 해서 일부분을 개발하다가 하나의 프로젝트를 처음부터 만들어 보았었다. 그 이후로 Angular 를 사용하지 않았었는데, 지금 벌써 Angular 6 버전 까지 나와서 놀랐다.</p><p>아래 URL은 Angular 6 은 아니지만 Angular 5 버전 강좌다. NodeJS 와 Typescript 가 대세여서 공부해보려고 하다가 Angular 를 다시 보게 되어 찾다가 이 강좌가 설명이 너무 잘 되어 있어서 공부를 하는 중이다. 여러모로 감사합니다.</p><p>URL: <a href="https://moon9342.github.io/angular-lecture-introduction" target="_blank" rel="noopener">https://moon9342.github.io/angular-lecture-introduction</a></p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/07/angular/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Web Design] Metronic Dashboard</title>
      <link>http://hgko1207.github.io/2019/01/04/dashboard/</link>
      <guid>http://hgko1207.github.io/2019/01/04/dashboard/</guid>
      <pubDate>Fri, 04 Jan 2019 09:13:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;대시보드-템플릿&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#대시보드-템플릿&quot;&gt;&lt;/a&gt; 대시보드 템플릿&lt;/h2&gt;
&lt;p&gt;웹 개발을 하다보면 작은 프로젝트인데도 디자인 요청이 있다. 그럴때마다 디자인된 부트스트랩 기반 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="대시보드-템플릿"><a class="markdownIt-Anchor" href="#대시보드-템플릿"></a> 대시보드 템플릿</h2><p>웹 개발을 하다보면 작은 프로젝트인데도 디자인 요청이 있다. 그럴때마다 디자인된 부트스트랩 기반 템플릿을 찾곤 했었다. 매번 디자인이 아쉽고 템플릿을 사용하여도 직접 CSS 를 작업하는 경우가 많았는데 지인의 추천으로 <strong>Metronic</strong> 을 알게 되었다.</p><h3 id="metronic-responsive-admin-dashboard-template"><a class="markdownIt-Anchor" href="#metronic-responsive-admin-dashboard-template"></a> Metronic - Responsive Admin Dashboard Template</h3><p>The World’s #1 Bootstrap 4 HTML, Angular 9, React, VueJS &amp; Laravel Admin Dashboard Theme</p><p><a href="https://keenthemes.com/metronic/" target="_blank" rel="noopener"><img src="/images/metronic.png" alt="Metronic" /></a></p><p>이 템플릿은 사용하기도 편하고 디자인도 요즘 트렌드에 맞게 계속 업데이트를 하고 있다. 알아둘 점은 유료다. 구매비용이 저렴한 것에 비해 다양한 컴포넌트들이 있고 10가지 이상의 템플릿을 제공해준다. 한 마디로 가성비가 좋다. React, Angular, Vue 에서 사용 가능하며 업데이트 될 때마다 바로 적용되는 점이 매우 좋다.</p><p>이 템플릿을 쓰려면 구조와 사용법을 공부를 해야 하는 시간이 조금 소요되지만 커스텀하기가 편해서 자주 사용하고 있다. 물론 직접 프론트엔드를 개발하면서 하면 좋지만 편리하고 빠르게 개발하기 위해 템플릿들을 써서 개발하는 것도 좋은 것 같다.</p><p>단점이라면 포함된 기능들이 많아 초기에 로드할 때 느리다는 것이다.</p>]]></content:encoded>
      
      <comments>http://hgko1207.github.io/2019/01/04/dashboard/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
